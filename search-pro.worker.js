const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":435,\"nextId\":435,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"5#some-solutions-to-questions-about-qt\",\"7\":\"5#the-qt-5-isn-t-in-qt-maintenance-tools\",\"8\":\"6\",\"9\":\"7\",\"10\":\"7@0\",\"11\":\"7@1\",\"12\":\"8\",\"13\":\"8#环境\",\"14\":\"8#项目结构\",\"15\":\"8#配置http服务\",\"16\":\"8#配置nginx\",\"17\":\"8#配置docker\",\"18\":\"8#启动项目\",\"19\":\"8#升级为https\",\"20\":\"8#申请证书\",\"21\":\"8#安装证书\",\"22\":\"8#修改配置\",\"23\":\"8#重启container\",\"24\":\"8#配置nginx反向代理-使flask支持-https\",\"25\":\"8#参考资料\",\"26\":\"8@0\",\"27\":\"8@1\",\"28\":\"9\",\"29\":\"9#docker-wsl2-踩坑记录-唯独你没懂-居然把路径藏在这里\",\"30\":\"9#docker-wsl2-踩坑记录\",\"31\":\"9#docker-desktop-是什么\",\"32\":\"9#wsl-里的-docker-到底在哪里\",\"33\":\"10\",\"34\":\"11\",\"35\":\"12\",\"36\":\"12#背景介绍\",\"37\":\"12#过去的做法\",\"38\":\"12#第一种-直接取模\",\"39\":\"12#第二种-函数取模\",\"40\":\"12#泛型编程\",\"41\":\"12@0\",\"42\":\"12@1\",\"43\":\"13\",\"44\":\"14\",\"45\":\"15\",\"46\":\"16\",\"47\":\"16#自然数的定义\",\"48\":\"16#自然数的加法运算\",\"49\":\"16#加法的定义\",\"50\":\"16#加法结果的存在性\",\"51\":\"16#加法结果的唯一性\",\"52\":\"16#加法的性质\",\"53\":\"16#加法交换律\",\"54\":\"16#加法结合律\",\"55\":\"16#加法消去律\",\"56\":\"16#自然数的序\",\"57\":\"16#序的定义\",\"58\":\"16#正自然数\",\"59\":\"16#正自然数的性质\",\"60\":\"16#序的反对称性\",\"61\":\"16#序的传递性\",\"62\":\"16#序的完全性\",\"63\":\"16#加法保序性\",\"64\":\"16#自然数的乘法运算\",\"65\":\"16#乘法的定义\",\"66\":\"16#乘法结果的存在性\",\"67\":\"16#乘法结果的唯一性\",\"68\":\"16#乘法的性质\",\"69\":\"16#乘法交换律\",\"70\":\"16#乘法分配律\",\"71\":\"16#乘法结合律\",\"72\":\"16#乘法消去律\",\"73\":\"16#peano-公理的合理性\",\"74\":\"16#乘法保序性\",\"75\":\"16#乘法消去保序性\",\"76\":\"16#用图论阐述-peano-系统\",\"77\":\"16#peano-公理-i\",\"78\":\"16#peano-公理-ii\",\"79\":\"16#peano-公理-iii\",\"80\":\"16#peano-公理-iv\",\"81\":\"16#peano-公理-v\",\"82\":\"16@0\",\"83\":\"16@1\",\"84\":\"17\",\"85\":\"17#安装\",\"86\":\"17#tips\",\"87\":\"17#bug-记录\",\"88\":\"17@1\",\"89\":\"18\",\"90\":\"18#线程安全\",\"91\":\"18#协程\",\"92\":\"18#协程安全\",\"93\":\"18#协程是否需要加锁\",\"94\":\"19\",\"95\":\"20\",\"96\":\"20#缺点\",\"97\":\"20#缺点-1\",\"98\":\"21\",\"99\":\"21@0\",\"100\":\"21@1\",\"101\":\"22\",\"102\":\"23\",\"103\":\"24\",\"104\":\"25\",\"105\":\"25#关系\",\"106\":\"25#开闭原则\",\"107\":\"25#实现方法\",\"108\":\"25#里氏代换原则\",\"109\":\"25#里氏代换原则-1\",\"110\":\"25#实现方法-1\",\"111\":\"25#示例\",\"112\":\"25#迪米特原则\",\"113\":\"25#迪米特原则-1\",\"114\":\"25#实现方法-2\",\"115\":\"25#单一职责原则\",\"116\":\"25#实现方法-3\",\"117\":\"25#示例-1\",\"118\":\"25#接口隔离原则\",\"119\":\"25#依赖倒置原则\",\"120\":\"25#实现方法-4\",\"121\":\"25#示例-2\",\"122\":\"25#组合-聚合复用原则\",\"123\":\"25#实现方法-5\",\"124\":\"25#示例-3\",\"125\":\"25#总结\",\"126\":\"25@0\",\"127\":\"25@1\",\"128\":\"26\",\"129\":\"26#为什么要使用抽象工厂模式\",\"130\":\"26#示例代码\",\"131\":\"26#增加其它工厂\",\"132\":\"26#拓展思路的要点\",\"133\":\"26#易于增加具体工厂\",\"134\":\"26#难以增加新的零件\",\"135\":\"26#相关的设计模式\",\"136\":\"26@0\",\"137\":\"26@1\",\"138\":\"27\",\"139\":\"27#适配器模式\",\"140\":\"27#为什么要用适配器模式\",\"141\":\"27#类比\",\"142\":\"27#类比-1\",\"143\":\"27#示例程序\",\"144\":\"27#运行结果\",\"145\":\"27#相关的设计模式\",\"146\":\"27@0\",\"147\":\"27@1\",\"148\":\"28\",\"149\":\"28#使用此设计模式的理由\",\"150\":\"28#类的层次结构的两个作用\",\"151\":\"28#增加新功能时\",\"152\":\"28#增加新的实现时\",\"153\":\"28#类的层次结构的混杂和分离\",\"154\":\"28#示例代码\",\"155\":\"28#类的一览表\",\"156\":\"28#countdisplay-ts\",\"157\":\"28#display-ts\",\"158\":\"28#displayimpl-ts\",\"159\":\"28#main-ts\",\"160\":\"28#stringdisplayimpl-ts\",\"161\":\"28#运行结果\",\"162\":\"28#拓展思路的要点\",\"163\":\"28#分开后更容易扩展\",\"164\":\"28#继承是强关联-委托是弱关联\",\"165\":\"28#相关的设计模式\",\"166\":\"28@0\",\"167\":\"28@1\",\"168\":\"29\",\"169\":\"29#为什么要使用-builder-模式\",\"170\":\"29#代码示例\",\"171\":\"29#运行结果\",\"172\":\"29#相关设计模式\",\"173\":\"29#拓展思路的要点\",\"174\":\"29#谁知道什么\",\"175\":\"29#设计时能够决定的事情和不能决定的事情\",\"176\":\"29#代码的阅读方法和修改方法\",\"177\":\"29@0\",\"178\":\"29@1\",\"179\":\"30\",\"180\":\"30#为什么使用此类\",\"181\":\"30#示例代码\",\"182\":\"30#运行结果\",\"183\":\"30#相关的设计模式\",\"184\":\"30@0\",\"185\":\"30@1\",\"186\":\"31\",\"187\":\"31#使用此设计模式的理由\",\"188\":\"31#示例代码\",\"189\":\"31#目录类-directory-ts\",\"190\":\"31#抽象条目类-entry-ts\",\"191\":\"31#文件类-file-ts\",\"192\":\"31#主程序-main-ts\",\"193\":\"31#运行结果\",\"194\":\"31#相关的设计模式\",\"195\":\"31@0\",\"196\":\"31@1\",\"197\":\"32\",\"198\":\"32#为什么使用装饰器模式\",\"199\":\"32#代码示例\",\"200\":\"32#运行结果\",\"201\":\"32#拓展思路的要点\",\"202\":\"32#api-的透明性\",\"203\":\"32#在不改变被装饰物的前提下增加功能\",\"204\":\"32#可以动态地增加功能\",\"205\":\"32#只需要一些装饰物即可添加许多功能\",\"206\":\"32#导致增加许多很小的类\",\"207\":\"32#相关的设计模式\",\"208\":\"32#继承和委托中的一致性\",\"209\":\"32#父类和子类的一致性\",\"210\":\"32#自己和被委托对象的一致性\",\"211\":\"32@0\",\"212\":\"32@1\",\"213\":\"33\",\"214\":\"33#示例代码\",\"215\":\"33#代码实现\",\"216\":\"33#运行结果\",\"217\":\"33#相关设计模式\",\"218\":\"33@0\",\"219\":\"33@1\",\"220\":\"34\",\"221\":\"34#为什么要使用-factory-method\",\"222\":\"34#示例代码\",\"223\":\"34#运行结果\",\"224\":\"34@0\",\"225\":\"34@1\",\"226\":\"35\",\"227\":\"35@0\",\"228\":\"35@1\",\"229\":\"36\",\"230\":\"36#为什么要使用迭代器模式\",\"231\":\"36#typescript-实现迭代器模式\",\"232\":\"36#代码示例\",\"233\":\"36#运行结果\",\"234\":\"36#多个迭代器\",\"235\":\"36#相关的设计模式\",\"236\":\"36@0\",\"237\":\"36@1\",\"238\":\"37\",\"239\":\"37#为什么使用此类\",\"240\":\"37#示例代码\",\"241\":\"37#运行结果\",\"242\":\"37#拓展思路的要点\",\"243\":\"37#当发生分散灾难时\",\"244\":\"37#通信线路的增加\",\"245\":\"37#哪些角色可以复用\",\"246\":\"37#相关的设计模式\",\"247\":\"37@0\",\"248\":\"37@1\",\"249\":\"38\",\"250\":\"38#为什么使用观察者模式\",\"251\":\"38#示例代码\",\"252\":\"38#运行结果\",\"253\":\"38#拓展思路的要点\",\"254\":\"38#这里也出现了可替换性\",\"255\":\"38#observer-的顺序\",\"256\":\"38#当-observer-的行为会对被观察对象产生影响时\",\"257\":\"38#传递更新信息的方式\",\"258\":\"38#从观察变为通知\",\"259\":\"38#mvc-model-view-controller\",\"260\":\"38#相关的设计模式\",\"261\":\"38@0\",\"262\":\"38@1\",\"263\":\"39\",\"264\":\"39#为什么要使用-prototype-模式\",\"265\":\"39#示例代码\",\"266\":\"39#运行结果\",\"267\":\"39#相关设计模式\",\"268\":\"39@0\",\"269\":\"39@1\",\"270\":\"40\",\"271\":\"40#为什么要使用-singleton-模式\",\"272\":\"40#总结\",\"273\":\"40#示例代码\",\"274\":\"40#运行结果\",\"275\":\"40#相关设计模式\",\"276\":\"40#多线程下\",\"277\":\"40#双重检查锁定示例代码\",\"278\":\"40@0\",\"279\":\"40@1\",\"280\":\"41\",\"281\":\"41#使用此设计模式的理由\",\"282\":\"41#示例程序\",\"283\":\"41#运行结果\",\"284\":\"41#拓展思路的要点\",\"285\":\"41#为什么要特意编写-strategy\",\"286\":\"41#程序运行中也可以切换策略\",\"287\":\"41#相关的设计模式\",\"288\":\"41@0\",\"289\":\"41@1\",\"290\":\"42\",\"291\":\"42#为什么要使用-template-method-模式\",\"292\":\"42#示例代码\",\"293\":\"42#运行结果\",\"294\":\"42#相关设计模式\",\"295\":\"42#延申-类的层次与抽象类\",\"296\":\"42@0\",\"297\":\"42@1\",\"298\":\"43\",\"299\":\"43#为什么使用-visitor-模式\",\"300\":\"43#示例代码\",\"301\":\"43#运行结果\",\"302\":\"43#拓展思路的要点\",\"303\":\"43#双重分发\",\"304\":\"43#为什么要这么复杂\",\"305\":\"43#开闭原则——对扩展开放-对修改关闭\",\"306\":\"43#易于增加-concretevisitor-角色\",\"307\":\"43#难以增加-concreteelement-角色\",\"308\":\"43#visitor-工作所需的条件\",\"309\":\"43#相关的设计模式\",\"310\":\"43@0\",\"311\":\"43@1\",\"312\":\"44\",\"313\":\"44#为什么要学编译原理\",\"314\":\"44#理论很复杂-实现也很复杂\",\"315\":\"44#项目的初衷\",\"316\":\"44#做好心理准备\",\"317\":\"44#参考资料\",\"318\":\"44@0\",\"319\":\"44@1\",\"320\":\"45\",\"321\":\"45#编译器的构建流程\",\"322\":\"45#编译器框架\",\"323\":\"46\",\"324\":\"46#计算机的内部工作原理\",\"325\":\"46#内存\",\"326\":\"46#寄存器\",\"327\":\"46#指令集\",\"328\":\"46#mov\",\"329\":\"46#push\",\"330\":\"46#jmp\",\"331\":\"46#jz-jnz\",\"332\":\"46#子函数调用\",\"333\":\"46#ent\",\"334\":\"46#adj\",\"335\":\"46#lev\",\"336\":\"46#lea\",\"337\":\"46#运算符指令\",\"338\":\"46#内置函数\",\"339\":\"46#测试\",\"340\":\"46#小结\",\"341\":\"47\",\"342\":\"47#什么是词法分析器\",\"343\":\"47#词法分析器与编译器\",\"344\":\"47#词法分析器的实现\",\"345\":\"47#支持的标记\",\"346\":\"47#词法分析器的框架\",\"347\":\"47#换行符\",\"348\":\"47#宏定义\",\"349\":\"47#标识符与符号表\",\"350\":\"47#数字\",\"351\":\"47#字符串\",\"352\":\"47#注释\",\"353\":\"47#其它\",\"354\":\"47#关键字与内置函数\",\"355\":\"47#代码\",\"356\":\"47#小结\",\"357\":\"47@0\",\"358\":\"47@1\",\"359\":\"48\",\"360\":\"48#什么是递归下降\",\"361\":\"48#终结符与非终结符\",\"362\":\"48#四则运算的递归下降\",\"363\":\"48#为什么选择递归下降\",\"364\":\"48#左递归\",\"365\":\"48#四则运算的实现\",\"366\":\"48#小结\",\"367\":\"48@0\",\"368\":\"48@1\",\"369\":\"49\",\"370\":\"49#ebnf-表示\",\"371\":\"49#解析变量的定义\",\"372\":\"49#program\",\"373\":\"49#global-declaration\",\"374\":\"49#enum-declaration\",\"375\":\"49#其它\",\"376\":\"49#代码\",\"377\":\"49#小结\",\"378\":\"49@0\",\"379\":\"49@1\",\"380\":\"50\",\"381\":\"50#ebnf-表示\",\"382\":\"50#解析函数的定义\",\"383\":\"50#函数参数与汇编代码\",\"384\":\"50#函数定义的解析\",\"385\":\"50#解析参数\",\"386\":\"50#函数体的解析\",\"387\":\"50#代码\",\"388\":\"50#小结\",\"389\":\"50@0\",\"390\":\"50@1\",\"391\":\"51\",\"392\":\"51#语句\",\"393\":\"51#if-语句\",\"394\":\"51#while-语句\",\"395\":\"51#return-语句\",\"396\":\"51#其它语句\",\"397\":\"51#代码\",\"398\":\"51#小结\",\"399\":\"51@0\",\"400\":\"51@1\",\"401\":\"52\",\"402\":\"52#运算符的优先级\",\"403\":\"52#一元运算符\",\"404\":\"52#常量\",\"405\":\"52#sizeof\",\"406\":\"52#变量与函数调用\",\"407\":\"52#强制转换\",\"408\":\"52#指针取值\",\"409\":\"52#取址操作\",\"410\":\"52#逻辑取反\",\"411\":\"52#按位取反\",\"412\":\"52#正负号\",\"413\":\"52#自增自减\",\"414\":\"52#二元运算符\",\"415\":\"52#赋值操作\",\"416\":\"52#三目运算符\",\"417\":\"52#逻辑运算符\",\"418\":\"52#数学运算符\",\"419\":\"52#自增自减-1\",\"420\":\"52#数组取值操作\",\"421\":\"52#代码\",\"422\":\"52#小结\",\"423\":\"52@0\",\"424\":\"52@1\",\"425\":\"53\",\"426\":\"53#虚拟机与目标代码\",\"427\":\"53#词法分析\",\"428\":\"53#语法分析\",\"429\":\"53#关于编代码\",\"430\":\"53#结语\",\"431\":\"53@0\",\"432\":\"53@1\",\"433\":\"54\",\"434\":\"55\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,5],\"2\":[1,3],\"3\":[1,2],\"4\":[1,35],\"5\":[1],\"6\":[6],\"7\":[9,21],\"8\":[2,49],\"9\":[2,12],\"10\":[null,null,2],\"11\":[null,null,2],\"12\":[9,20],\"13\":[1,7],\"14\":[1,24],\"15\":[1,5],\"16\":[1,95],\"17\":[1,37],\"18\":[1,12],\"19\":[1],\"20\":[1,15],\"21\":[1,29],\"22\":[1,49],\"23\":[1,6],\"24\":[3,5],\"25\":[1,19],\"26\":[null,null,1],\"27\":[null,null,1],\"28\":[3,7],\"29\":[6,20],\"30\":[3],\"31\":[3,48],\"32\":[4,40],\"33\":[2,4],\"34\":[1,5],\"35\":[4,6],\"36\":[1,14],\"37\":[1,5],\"38\":[2,21],\"39\":[2,32],\"40\":[1,51],\"41\":[null,null,1],\"42\":[null,null,1],\"43\":[2,15],\"44\":[1,32],\"45\":[2,27],\"46\":[4,9],\"47\":[1,23],\"48\":[1,2],\"49\":[1,12],\"50\":[1,35],\"51\":[1,38],\"52\":[1,5],\"53\":[1,27],\"54\":[1,17],\"55\":[1,19],\"56\":[1,2],\"57\":[1,10],\"58\":[1,5],\"59\":[1,18],\"60\":[1,9],\"61\":[1,10],\"62\":[1,17],\"63\":[1,7],\"64\":[1,2],\"65\":[1,12],\"66\":[1,37],\"67\":[1,38],\"68\":[1,5],\"69\":[1,29],\"70\":[1,17],\"71\":[1,17],\"72\":[1,42],\"73\":[2,18],\"74\":[1,7],\"75\":[1,15],\"76\":[3,13],\"77\":[3,4],\"78\":[3,4],\"79\":[3,5],\"80\":[3,5],\"81\":[3,4],\"82\":[null,null,1],\"83\":[null,null,1],\"84\":[1,4],\"85\":[1,2],\"86\":[1,34],\"87\":[2,8],\"88\":[null,null,1],\"89\":[9,21],\"90\":[1,100],\"91\":[1,71],\"92\":[1,179],\"93\":[1,41],\"94\":[1,3],\"95\":[1,1],\"96\":[1,8],\"97\":[1,29],\"98\":[1,10],\"99\":[null,null,1],\"100\":[null,null,1],\"101\":[1,2],\"102\":[1,45],\"103\":[4,8],\"104\":[1,12],\"105\":[1,19],\"106\":[1,7],\"107\":[1,14],\"108\":[1],\"109\":[1,8],\"110\":[1,10],\"111\":[1],\"112\":[1],\"113\":[1,5],\"114\":[1,11],\"115\":[1,7],\"116\":[1,11],\"117\":[1,13],\"118\":[1,5],\"119\":[1,8],\"120\":[1,12],\"121\":[1,25],\"122\":[2,7],\"123\":[1,9],\"124\":[1,22],\"125\":[1,22],\"126\":[null,null,1],\"127\":[null,null,2],\"128\":[1],\"129\":[1,14],\"130\":[1,133],\"131\":[1,15],\"132\":[1],\"133\":[1,27],\"134\":[1,26],\"135\":[1,6],\"136\":[null,null,1],\"137\":[null,null,3],\"138\":[1],\"139\":[1,7],\"140\":[1,7],\"141\":[1],\"142\":[1,11],\"143\":[1,45],\"144\":[1,11],\"145\":[1,2],\"146\":[null,null,1],\"147\":[null,null,2],\"148\":[2,7],\"149\":[1,7],\"150\":[1],\"151\":[1,15],\"152\":[1,30],\"153\":[1,23],\"154\":[1],\"155\":[1,50],\"156\":[2,28],\"157\":[2,20],\"158\":[2,9],\"159\":[2,21],\"160\":[2,36],\"161\":[1,18],\"162\":[1],\"163\":[1,44],\"164\":[2,29],\"165\":[1,6],\"166\":[null,null,1],\"167\":[null,null,3],\"168\":[2],\"169\":[3,17],\"170\":[1,83],\"171\":[1,42],\"172\":[1,7],\"173\":[1],\"174\":[1,20],\"175\":[1,9],\"176\":[1,41],\"177\":[null,null,1],\"178\":[null,null,3],\"179\":[2,26],\"180\":[1,12],\"181\":[1,94],\"182\":[1,39],\"183\":[1,3],\"184\":[null,null,1],\"185\":[null,null,3],\"186\":[2],\"187\":[1,15],\"188\":[1],\"189\":[4,39],\"190\":[4,26],\"191\":[4,29],\"192\":[4,49],\"193\":[1,46],\"194\":[1,4],\"195\":[null,null,1],\"196\":[null,null,3],\"197\":[2,5],\"198\":[2,9],\"199\":[1,62],\"200\":[1,20],\"201\":[1],\"202\":[2,55],\"203\":[1,42],\"204\":[1,7],\"205\":[1,23],\"206\":[1,3],\"207\":[1,3],\"208\":[1],\"209\":[1,9],\"210\":[1,7],\"211\":[null,null,1],\"212\":[null,null,3],\"213\":[2,23],\"214\":[1,8],\"215\":[1,89],\"216\":[1,41],\"217\":[1,5],\"218\":[null,null,1],\"219\":[null,null,3],\"220\":[3,8],\"221\":[3,21],\"222\":[1,50],\"223\":[1,20],\"224\":[null,null,1],\"225\":[null,null,4],\"226\":[1,17],\"227\":[null,null,1],\"228\":[null,null,2],\"229\":[1],\"230\":[1,25],\"231\":[2,8],\"232\":[1,63],\"233\":[1,45],\"234\":[1,9],\"235\":[1,5],\"236\":[null,null,1],\"237\":[null,null,2],\"238\":[2],\"239\":[1,26],\"240\":[1,118],\"241\":[1,28],\"242\":[1],\"243\":[1,43],\"244\":[1,38],\"245\":[1,26],\"246\":[1,3],\"247\":[null,null,1],\"248\":[null,null,3],\"249\":[2],\"250\":[1,11],\"251\":[1,77],\"252\":[1,33],\"253\":[1],\"254\":[1,12],\"255\":[2,32],\"256\":[3,11],\"257\":[1,9],\"258\":[1,9],\"259\":[5,18],\"260\":[1,2],\"261\":[null,null,1],\"262\":[null,null,3],\"263\":[2],\"264\":[3,14],\"265\":[1,71],\"266\":[1,15],\"267\":[1,6],\"268\":[null,null,1],\"269\":[null,null,3],\"270\":[2],\"271\":[3,10],\"272\":[2,6],\"273\":[1,39],\"274\":[1,19],\"275\":[1,5],\"276\":[1,14],\"277\":[1,44],\"278\":[null,null,1],\"279\":[null,null,3],\"280\":[2],\"281\":[1,16],\"282\":[1,121],\"283\":[1,26],\"284\":[1],\"285\":[2,28],\"286\":[1,26],\"287\":[1,5],\"288\":[null,null,1],\"289\":[null,null,4],\"290\":[3,10],\"291\":[5,10],\"292\":[1,59],\"293\":[1,22],\"294\":[1,4],\"295\":[2,25],\"296\":[null,null,1],\"297\":[null,null,3],\"298\":[2,13],\"299\":[4,11],\"300\":[1,103],\"301\":[1,46],\"302\":[1],\"303\":[1,24],\"304\":[1,33],\"305\":[3,35],\"306\":[3,10],\"307\":[3,25],\"308\":[2,32],\"309\":[1,4],\"310\":[null,null,1],\"311\":[null,null,3],\"312\":[5,46],\"313\":[1,28],\"314\":[3,56],\"315\":[1,40],\"316\":[1,14],\"317\":[1,45],\"318\":[null,null,1],\"319\":[null,null,3],\"320\":[5,55],\"321\":[1,27],\"322\":[1,130],\"323\":[1,71],\"324\":[1,9],\"325\":[1,125],\"326\":[1,58],\"327\":[1,58],\"328\":[1,119],\"329\":[1,24],\"330\":[1,27],\"331\":[2,24],\"332\":[1,127],\"333\":[1,35],\"334\":[1,25],\"335\":[1,36],\"336\":[1,62],\"337\":[1,51],\"338\":[1,68],\"339\":[1,63],\"340\":[1,35],\"341\":[5,54],\"342\":[1,35],\"343\":[1,26],\"344\":[1,18],\"345\":[1,86],\"346\":[1,42],\"347\":[1,12],\"348\":[1,28],\"349\":[1,135],\"350\":[1,61],\"351\":[1,63],\"352\":[1,61],\"353\":[1,56],\"354\":[1,81],\"355\":[1,24],\"356\":[1,18],\"357\":[null,null,1],\"358\":[null,null,3],\"359\":[5,48],\"360\":[1,11],\"361\":[1,33],\"362\":[1,37],\"363\":[1,37],\"364\":[1,23],\"365\":[1,70],\"366\":[1,16],\"367\":[null,null,1],\"368\":[null,null,3],\"369\":[5,55],\"370\":[2,44],\"371\":[1,7],\"372\":[2,20],\"373\":[3,130],\"374\":[3,51],\"375\":[1,25],\"376\":[1,22],\"377\":[1,13],\"378\":[null,null,1],\"379\":[null,null,3],\"380\":[5,51],\"381\":[2,21],\"382\":[1,37],\"383\":[1,56],\"384\":[1,67],\"385\":[1,77],\"386\":[1,93],\"387\":[1,24],\"388\":[1,18],\"389\":[null,null,1],\"390\":[null,null,3],\"391\":[5,49],\"392\":[1,28],\"393\":[2,62],\"394\":[2,32],\"395\":[2,22],\"396\":[1,21],\"397\":[1,21],\"398\":[1,16],\"399\":[null,null,1],\"400\":[null,null,3],\"401\":[5,76],\"402\":[1,95],\"403\":[1,15],\"404\":[1,60],\"405\":[1,45],\"406\":[1,151],\"407\":[1,36],\"408\":[1,42],\"409\":[1,47],\"410\":[1,28],\"411\":[1,31],\"412\":[1,33],\"413\":[1,62],\"414\":[1,76],\"415\":[1,57],\"416\":[1,39],\"417\":[1,33],\"418\":[1,101],\"419\":[1,39],\"420\":[1,50],\"421\":[1,60],\"422\":[1,17],\"423\":[null,null,1],\"424\":[null,null,3],\"425\":[5,46],\"426\":[1,18],\"427\":[1,13],\"428\":[1,32],\"429\":[1,24],\"430\":[1,3],\"431\":[null,null,1],\"432\":[null,null,3],\"433\":[1,3],\"434\":[3]},\"averageFieldLength\":[1.549386123734655,28.665302795803022,0.7433781020802405],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"一位热衷于探索全栈开发领域的技术爱好者，擅长将前端与后端技术无缝结合，致力于打造高效、优雅的解决方案。\"]},\"2\":{\"h\":\"随笔\",\"t\":[\"这里是所有个人感想、生活记录等非技术类文章。\"]},\"3\":{\"h\":\"项目\",\"t\":[\"这里是你参与或开发的项目介绍和进展。\"]},\"4\":{\"h\":\"资源\",\"t\":[\"这里是推荐的书籍、网站、工具等资源。\",\"github - 世界上最大的代码托管平台\",\"Z-Library – 世界上最大的电子图书馆。自由访问知识和文化。\",\"Vuepress - 我的博客构建库\",\"plantUML - 一个通用性很强的工具，可以快速、直接地创建各种图表\",\"emoji-cheat-sheet - A markdown version emoji cheat sheet\",\"Sci-hub —— 当今科学界最具争议性的项目。Sci-hub的目标是 免费并且不受限制地 提供所有科学知识。\",\"Lib.Genesis —— Part of Library Genesis. ex libgen.io, libgen.org\"]},\"5\":{\"h\":\"Qt\"},\"6\":{\"h\":\"Some Solutions to Questions about Qt\"},\"7\":{\"h\":\"The qt-5 isn't in Qt Maintenance tools\",\"t\":[\"Open the Qt Maintenance Tools.\",\"click the Archive in the Select-Component section.\",\"click the filter button and you can see the qt-5 in the list.\"]},\"8\":{\"h\":\"android studio换源\",\"t\":[\"国内镜像\",\"Android Studio下载gradle太慢可换源\",\"android.plugin version 下载错误查看\",\"修改 settings.gradle.kts\",\"pluginManagement { repositories { maven { url=uri (\\\"https://jitpack.io\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/releases\\\") } // maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url=uri (\\\"https://maven.aliyun.com/repository/google\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/central\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/gradle-plugin\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/public\\\") } google() mavenCentral() gradlePluginPortal() } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { maven { url=uri (\\\"https://jitpack.io\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/releases\\\") } // maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url=uri (\\\"https://maven.aliyun.com/repository/google\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/central\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/gradle-plugin\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/public\\\") } google() mavenCentral() } } \",\"gradle-wrapper.properties 换成对应的版本\",\"distributionUrl=https\\\\://mirrors.cloud.tencent.com/gradle/gradle-8.7-all.zip \"]},\"9\":{\"h\":\"CI/CD\",\"t\":[\"本地调试工具 act\",\"需要创建配置文件\",\"也可另外指定\",\"act --var-file \\\"./.act/.vars\\\" --secret-file \\\"./.act/.secrets\\\" --env-file \\\"./.act/.env\\\" {{other}} \"]},\"10\":{\"c\":[\"CI/CD\"]},\"11\":{\"c\":[\"CI/CD\"]},\"12\":{\"h\":\"docker + nginx + acme.sh 部署 vue/flask 项目\",\"t\":[\"本文将介绍如何使用 Docker、Nginx 和 acme.sh 部署一个 Vue 和 Flask 项目。我们将详细讲解环境配置、项目结构、Nginx 配置、Docker 配置以及如何升级到 HTTPS。\",\"提示\",\"需要先申请一个域名，本文是 bupt.online\"]},\"13\":{\"h\":\"环境\",\"t\":[\"Ubuntu\",\"Docker\",\"Docker-Compose\",\"acme.sh\",\"(python)\",\"nginx\"]},\"14\":{\"h\":\"项目结构\",\"t\":[\"./nginx ├── acme # 存放SSL证书 ├── conf.d │ ├── Automaton.conf │ ├── blog.conf ├── docker-compose.yml ├── DockerFile ├── logs # 存放日志 │ ├── access.log │ ├── Automaton │ ├── blog │ └── error.log ├── nginx.conf ./project # 要部署的（前端）项目 ├── Automaton └── blog \"]},\"15\":{\"h\":\"配置http服务\",\"t\":[\"在准备好前端项目及安装相应环境后，进行如下操作(部分路径以实际为准，进行修改)\"]},\"16\":{\"h\":\"配置nginx\",\"t\":[\"nginx.conf\",\"user nginx; worker_processes 1; error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; events { worker_connections 4096; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' '$status $body_bytes_sent \\\"$http_referer\\\" ' '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; # access_log /var/log/nginx/access.log main; access_log off; error_log /var/log/nginx/error.log warn; sendfile on; #tcp_nopush on; keepalive_timeout 65; # 定义DNS解析器 resolver 8.8.8.8 114.114.114.114 valid=300s; resolver_timeout 10s; # 增加请求头和Cookie的大小限制 client_header_buffer_size 16k; large_client_header_buffers 4 32k; include /etc/nginx/conf.d/*.conf; } \",\"Automaton.conf\",\"server { listen 80; server_name Automaton.bupt.online; location / { root /usr/share/nginx/html/Automaton; try_files $uri $uri/ =404; } access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } \",\"blog.conf\",\"server { listen 80; server_name bupt.online www.bupt.online; location / { root /usr/share/nginx/html/blog; try_files $uri $uri/ =404; # access_log /var/log/nginx/blog/access.log; error_log /var/log/nginx/blog/error.log warn; } location /Automaton { # 使用 proxy_pass 或 rewrite 重定向到Automaton.bupt.online 失败 alias /usr/share/nginx/html/Automaton/; try_files $uri $uri/ =404; # access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } } \"]},\"17\":{\"h\":\"配置docker\",\"t\":[\"DockerFile\",\"FROM nginx:latest COPY nginx.conf /etc/nginx/nginx.conf COPY conf.d /etc/nginx/conf.d \",\"docker-compose.yml\",\"services: nginx: build: context: . dockerfile: DockerFile ports: - \\\"80:80\\\" - \\\"443:443\\\" volumes: - ../project/blog:/usr/share/nginx/html/blog - ../project/Automaton:/usr/share/nginx/html/Automaton - ./logs:/var/log/nginx - ./conf.d:/etc/nginx/conf.d - ./acme:/etc/letsencrypt/live networks: - webnet environment: - TZ=Asia/Shanghai networks: webnet: \"]},\"18\":{\"h\":\"启动项目\",\"t\":[\"docker-compose up -d --build \",\"然后就能正常访问 http://bupt.online 及 http://automaton.bupt.online ， http://bupt.online/Automaton\"]},\"19\":{\"h\":\"升级为https\"},\"20\":{\"h\":\"申请证书\",\"t\":[\"进入acme.sh的安装目录(/root/.acme.sh)\",\"sudo su root acme.sh --issue -d bupt.online --nginx # Nginx acme.sh --issue -d Automaton.bupt.online --nginx # Nginx \"]},\"21\":{\"h\":\"安装证书\",\"t\":[\"这里将目录修改为目标目录\",\"# sudo su root # cd .acme.sh # use like below acme.sh --install-cert -d bupt.online \\\\ --cert-file /home/ubuntu/nginx/acme/bupt.online/cert.cer \\\\ --key-file /home/ubuntu/nginx/acme/bupt.online/privkey.key \\\\ --fullchain-file /home/ubuntu/nginx/acme/bupt.online/fullchain.cer \\\\ --reloadcmd \\\"cd /home/ubuntu/nginx && docker-compose up -d --build\\\" \"]},\"22\":{\"h\":\"修改配置\",\"t\":[\"blog.conf\",\"server { listen 80; server_name bupt.online www.bupt.online; return 301 https://$host$request_uri; } server { listen 443 ssl; server_name bupt.online; ssl_certificate /etc/letsencrypt/live/bupt.online/fullchain.cer; ssl_certificate_key /etc/letsencrypt/live/bupt.online/privkey.key; location / { root /usr/share/nginx/html/blog; try_files $uri $uri/ =404; # access_log /var/log/nginx/blog/access.log; error_log /var/log/nginx/blog/error.log warn; } location /Automaton { # 使用 proxy_pass 或 rewrite 重定向到Automaton.bupt.online 失败 alias /usr/share/nginx/html/Automaton/; try_files $uri $uri/ =404; # access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } } server { listen 443 ssl; server_name www.bupt.online; ssl_certificate /etc/letsencrypt/live/www.bupt.online/fullchain.cer; ssl_certificate_key /etc/letsencrypt/live/www.bupt.online/privkey.key; location / { root /usr/share/nginx/html/blog; try_files $uri $uri/ =404; # access_log /var/log/nginx/blog/access.log; error_log /var/log/nginx/blog/error.log warn; } location /Automaton { # 使用 proxy_pass 或 rewrite 重定向到Automaton.bupt.online 失败 alias /usr/share/nginx/html/Automaton/; try_files $uri $uri/ =404; # access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } } \",\"Automaton.conf\",\"server { listen 80; server_name Automaton.bupt.online; location / { return 301 https://$host$request_uri; } } server { listen 443 ssl; server_name Automaton.bupt.online; ssl_certificate /etc/letsencrypt/live/Automaton.bupt.online/fullchain.cer; ssl_certificate_key /etc/letsencrypt/live/Automaton.bupt.online/privkey.key; location / { root /usr/share/nginx/html/Automaton; try_files $uri $uri/ =404; } access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } \"]},\"23\":{\"h\":\"重启container\",\"t\":[\"docker-compose up -d --build \"]},\"24\":{\"h\":\"配置nginx反向代理，使flask支持 https\",\"t\":[\"#TODO - 添加flask+nginx配置\",\"[ ] 将卷的挂载目录改为由命令输入，而不是硬编码\"]},\"25\":{\"h\":\"参考资料\",\"t\":[\"Nginx Documentation\",\"Flask Documentation\",\"Reverse Proxy Guide\",\"SSL Certificates\",\"用acme.sh帮你免费且自动更新的HTTPS证书，省时又省力\",\"docker部署certbot与nginx来获取ssl证书添加https及自动更新\",\"使用docker acme申请、续订泛域名证书，并自动重载docker nginx\",\"Flask: 如何给Python Flask Web服务器添加HTTPS功能\"]},\"26\":{\"c\":[\"nginx\"]},\"27\":{\"c\":[\"部署\"]},\"28\":{\"h\":\"docker in wsl\",\"t\":[\"转载自：docker wsl2 踩坑记录 | 唯独你没懂，居然把路径藏在这里\"]},\"29\":{\"h\":\"docker wsl2 踩坑记录 | 唯独你没懂，居然把路径藏在这里\",\"t\":[\"最新推荐文章于 2024-06-30 17:39:23 发布\",\"TieWay59 最新推荐文章于 2024-06-30 17:39:23 发布\",\"版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\"]},\"30\":{\"h\":\"docker wsl2 踩坑记录\"},\"31\":{\"h\":\"docker-desktop 是什么\",\"t\":[\"Docker Desktop WSL 2 backend\",\"What is the docker-desktop-data distro\",\"简单地说，使用 docker-desktop-wsl 方式使用 docker，会给你创建两个 wsl distro。一个包含 docker/docker-desktop 服务本体，一个用于存储附属的数据（比如 images 等）。\",\"这中间就会导致 docker 文件的实际位置很奇怪，我还没有研究透。\",\"官方推荐的 win10 下的实践是：你的用 docker-desktop 设置把你主机 docker 集成到某个 distro(wsl 可以使用的 linux 发行版，我的是 Ubuntu)。然后在 win10 的开发环境去 remote 连接你的 Ubuntu。\",\"这样你就能用 win10 的图形界面，在 linux 的环境下，进行包含 docker 的开发过程了。\"]},\"32\":{\"h\":\"wsl 里的 docker 到底在哪里\",\"t\":[\"Docker volumes on Windows WSL2\",\"Locating data volumes in Docker Desktop (Windows)\",\"More generally /var/lib/docker/ maps to \\\\\\\\wsl$\\\\docker-desktop-data\\\\version-pack-data\\\\community\\\\docker\\\\.\",\"简单地说，打开 win10 文件管理器，输入：\",\"\\\\\\\\wsl$\\\\docker-desktop-data\\\\version-pack-data\\\\community\\\\docker\\\\ \",\"去 inspect 得到的/var/lib/docker/...都是在这个路径下的。\",\"https://www.cnblogs.com/kingsonfu/p/11578073.html\",\"文件目录：\\\\\\\\wsl$\\\\docker-desktop-data\\\\data\\\\docker\\\\containers\"]},\"33\":{\"h\":\"github 工作流程\",\"t\":[\"十分钟学会正确的github工作流，和开源作者们使用同一套流程\",\"相关信息\",\"TODO\"]},\"34\":{\"h\":\"技术\",\"t\":[\"这里是所有与技术相关的文章，包括编程、工具使用、技术分享等内容。\"]},\"35\":{\"h\":\"「泛型与 OI」modint\",\"t\":[\"在 OI 中，有大量的题目要求对一些数字取模，这便是本文写作的背景。\"]},\"36\":{\"h\":\"背景介绍\",\"t\":[\"这些题目要么是因为答案太大，不方便输出结果，例如许多计数 dp；要么是因为答案是浮点数，出题人不愿意写一个确定精度的 Special Judge，例如很多期望概率题；要么是因为这道题目直接考察了模的性质和运用，比如大量的 998244353 类的多项式题目。\"]},\"37\":{\"h\":\"过去的做法\",\"t\":[\"在这种要求之下，取模运算就成为了编程中不可缺少的一部分。下面以式子 为例介绍几种写法。\"]},\"38\":{\"h\":\"第一种 直接取模\",\"t\":[\"这种方法是直接取模，简单直接，清晰明了。\",\"constexpr int p=998244353; int ans=1ll*(((x+y)%p+z)%p)*u%p; \",\"但是这种方法有着严重的缺陷，一是容易忘记大括号，二是容易中间运算时搞错运算顺序、忘记取模，三是式子太长、括号太多、不易检验。\",\"因此，不推荐运用这种方法。\"]},\"39\":{\"h\":\"第二种 函数取模\",\"t\":[\"这种方法有效地解决了直接取模的忘记取模的漏洞。\",\"constexpr int p=998244353; int add(int a,int b){ return a+b>=p?a+b-p:a+b; } int sub(int a,int b){ return a<b?a-b+p:a-b; } int mul(int a,int b){ return 1ll*a*b%p; } int ans=mul(add(add(x,y),z),u); \",\"但是，这种写法的式子依旧太长，不易检验，并且如果编译器没有任何优化（现在不存在这种情况了）的话，大量的函数调用将会耗费不少的时间。并且如果要对多个模数取模，则需要写多个函数，显得代码冗长。\"]},\"40\":{\"h\":\"泛型编程\",\"t\":[\"考虑到函数取模的优点，我们不妨通过类的运算符重载来进一步优化 add 等函数。\",\"同时为了解决多个模数的问题，我们考虑泛型编程，将模数直接包含在类型中。\",\"template<typename T,const T p> class modint{ private: T v; public: modint(){} modint(const T& x){assert(0<=x&&x<p);v=x;} modint operator+(const modint& a)const{ return v+a.v>=p?v+a.v-p:v+a.v; } modint operator-(const modint& a)const{ return v<a.v?v-a.v+p:v-a.v; } modint operator*(const modint& a)const{ return 1ll*v*a.v%p; } T operator()(void)const{ return v; } }; modint<int,998244353> x(),y(),z(),u(); modint<int,998244353> ans=(x+y+z)*u; \",\"这样使用的时候，一方面减少了心智负担，不用操心运算时忘记取模；另一方面采取了常数更小的加减法操作，运算更快。\",\"唯一的缺点就是类型名难写，但是模数个数少的时候可以缩写，即写成：\",\"typedef modint<int,998244353> modInt1; \",\"这样就解决了类型名长的缺点。\"]},\"41\":{\"c\":[\"OI\"]},\"42\":{\"c\":[\"MODInt\"]},\"43\":{\"h\":\"Game Plugin\",\"t\":[\"This is the content of the game plugin post.\",\"BepInEx\",\"AssetStudioAssetStudio\",\"dnSpy\",\"Harmony\",\"UnityExplorer\",\"相关信息\",\"TODO\"]},\"44\":{\"h\":\"风格统一\",\"t\":[\"如何实现风格统一？ 可以使用*.editorconfig*文件来实现风格统一。\",\"安装EditorConfig插件 (部分IDE默认直接支持)\",\"在项目根目录下创建.editorconfig文件，并添加以下内容：\",\"root = true [*] indent_style = space tab_width = 2 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true \"]},\"45\":{\"h\":\"vscode plugin\",\"t\":[\"// TODO https://code.visualstudio.com/api/get-started/your-first-extension\",\"若activate function执行时间过长，会导致Activating extension 'undefined_publisher.kcodetime' failed: AggregateError., 从而启动失败\",\"若deactivate function执行时间超过5s, 会被强行终止，导致插件无法正常退出。\",\"关闭vscode 不会触发onDidCloseTextDocument事件\"]},\"46\":{\"h\":\"「算术公理系统 1」自然数\",\"t\":[\"假设存在一个算数系统的模型满足 Peano 公理，即假定 Peano 公理相容，在此承认次假设的基础之上，我们即可建立如今最常用的算术公理系统。自然数的定义则是构建此算术公理系统的第一步。\"]},\"47\":{\"h\":\"自然数的定义\",\"t\":[\"先介绍 Peano 公理，共有五条：\",\" 是自然数；\",\"任何自然数的后继存在且唯一，下文用 表示 的后继；\",\" 不是任何自然数的后继；\",\"不同的自然数后继不同；\",\" 是关于自然数 的一个命题，且满足两个条件：\",\" 是真命题；\",\"由 为真命题可以推理出 为真命题。\",\"则有，对于任意自然数 ， 为真命题。\",\"这样就定义了自然数，自然数这个新的数学对象因我们的假设而确立。\"]},\"48\":{\"h\":\"自然数的加法运算\",\"t\":[\"自然数中最重要的运算当然是加法。\"]},\"49\":{\"h\":\"加法的定义\",\"t\":[\"定义加法的运算规则：\",\"若 是自然数，则 的运算结果为 ，即 ；\",\"若 都是自然数，则 。\",\"下面我们需要证明对于任意两个自然数，都可以进行加法运算，也就是说，我们需要证明加法结果的存在性和唯一性。\"]},\"50\":{\"h\":\"加法结果的存在性\",\"t\":[\" 是任意自然数，记 表示 是否是自然数，即 是否存在。\",\" 是自然数，由加法运算规则 Ⅰ 有 ，进而有 是自然数； 即 得证。\",\" 和 是自然数，由 Peano 公理 Ⅱ 有 和 是自然数； 根据加法运算规则 Ⅱ 有 ，进有 是自然数； 综上所述，若 是自然数，则 也是自然数； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 是自然数，再根据 的任意性，得出对于任意自然数 ， 都是自然数。\"]},\"51\":{\"h\":\"加法结果的唯一性\",\"t\":[\" 是任意自然数，记 表示 是否唯一，即 的结果是否唯一。\",\" 是自然数，由加法运算规则 Ⅰ 有 ，进而 是唯一的，就是 ； 即 得证。\",\" 是自然数， 是唯一的，由 Peano 公理 Ⅱ 有 是自然数且 唯一； 根据加法运算规则 Ⅱ 有 ，进有 唯一； 综上所述，若 唯一，则 也唯一； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 唯一，再根据 的任意性，得出对于任意自然数 ， 都是唯一的。\"]},\"52\":{\"h\":\"加法的性质\",\"t\":[\"在明确证明了自然数加法运算的良好性质，即任意两个自然数都可以进行加法运算，且加法运算的结果存在且唯一之后，我们终于可以对自然数加法的性质进行进一步的探索。\"]},\"53\":{\"h\":\"加法交换律\",\"t\":[\"下面证明加法交换律，即对于任意自然数 ，有 。\",\"直接证明比较困难，考虑从加法运算的定义下手，即先证明加法的两条运算规则符合交换律。\",\"试证 ，首先有\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 ，首先有\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，将其称为新的加法运算规则 Ⅱ。\",\"证明了加法运算规则的交换律之后，试证加法交换律 ，首先由加法运算规则 Ⅰ 有 ，进而当 是自然数且 时，有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即加法交换律成立。\"]},\"54\":{\"h\":\"加法结合律\",\"t\":[\"下面证明加法结合律，即对于任意自然数 ，有 。\",\"首先当 时，有\",\"进而当 为自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即加法结合律成立。\"]},\"55\":{\"h\":\"加法消去律\",\"t\":[\"下面证明加法消去律，即对于任意自然数 ，有 。\",\"试证 。\",\"首先当 时有\",\"进而当 为自然数且 时有\",\"即 ，根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 。\",\"首先当 时有\",\"进而当 为自然数且 时有\",\"即 ，根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"综上所述，加法消去律 ，对任意自然数 成立。\"]},\"56\":{\"h\":\"自然数的序\",\"t\":[\"自然数的序为两个自然数的关系。\"]},\"57\":{\"h\":\"序的定义\",\"t\":[\"定义自然数的序即定义 当且仅当存在自然数 满足 。定义 当且仅当 且 。\",\"自然数的序是全序关系，它应该具有反对称性、传递性和完全性。\"]},\"58\":{\"h\":\"正自然数\",\"t\":[\"在考察序的性质之前，我们预先准备以方便证明。\",\"定义正自然数为非 自然数。\"]},\"59\":{\"h\":\"正自然数的性质\",\"t\":[\"正自然数与自然数相加为正自然数，即对于正自然数 ，其与自然数 的和 为正自然数。\",\"首先，当 时， 为正自然数。\",\"进而当 为自然数且 为正自然数时有 ，根据 Peano 公理 Ⅲ， 为正自然数，进而 为正自然数。\",\"根据 Peano 公理 Ⅴ，正自然数与自然数相加为正自然数。\"]},\"60\":{\"h\":\"序的反对称性\",\"t\":[\"若 且 ，则 。\",\"由 有 ，由 有 。\",\"因此 ，由加法消去律得到 ，根据正自然数的性质得出 ，因此 。\"]},\"61\":{\"h\":\"序的传递性\",\"t\":[\"若 且 ，则 。\",\"由 有 ，由 有 。\",\"根据加法结果的存在性得到 是自然数，根据加法结合律得出 ，进而 。\"]},\"62\":{\"h\":\"序的完全性\",\"t\":[\"任意两个自然数 都有序关系。\",\"对于 两个自然数，当 时有 所以 。\",\"当 为自然数时。若 ，则 ，因此 ；若 ，则 ，因此 ；若 ，则 。\",\"由 Peano 公理 Ⅴ 有任意两个自然数 都有序关系。\"]},\"63\":{\"h\":\"加法保序性\",\"t\":[\"若 ，则 。\",\"由 有 ，进而 因此 。\"]},\"64\":{\"h\":\"自然数的乘法运算\",\"t\":[\"自然数的乘法也十分重要。\"]},\"65\":{\"h\":\"乘法的定义\",\"t\":[\"定义乘法的运算规则：\",\"若 是自然数，则 的运算结果为 ，即 ；\",\"若 都是自然数，则 。\",\"下面我们需要证明对于任意两个自然数，都可以进行乘法运算，也就是说，我们需要证明乘法结果的存在性和唯一性。\"]},\"66\":{\"h\":\"乘法结果的存在性\",\"t\":[\" 是任意自然数，记 表示 是否是自然数，即 是否存在。\",\" 是自然数，由乘法运算规则 Ⅰ 有 ，进而有 是自然数； 即 得证。\",\" 和 是自然数，由加法结果的存在性有 存在； 根据乘法运算规则 Ⅱ 有 ，进有 是自然数； 综上所述，若 是自然数，则 也是自然数； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 是自然数，再根据 的任意性，得出对于任意自然数 ， 都是自然数。\"]},\"67\":{\"h\":\"乘法结果的唯一性\",\"t\":[\" 是任意自然数，记 表示 是否唯一，即 的结果是否唯一。\",\" 是自然数，由乘法运算规则 Ⅰ 有 ，进而 是唯一的，就是 ； 即 得证。\",\" 是自然数， 是唯一的，由加法结果的唯一性有 唯一； 根据乘法运算规则 Ⅱ 有 ，进有 唯一； 综上所述，若 唯一，则 也唯一； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 唯一，再根据 的任意性，得出对于任意自然数 ， 都是唯一的。\"]},\"68\":{\"h\":\"乘法的性质\",\"t\":[\"在明确证明了自然数乘法运算的良好性质，即任意两个自然数都可以进行乘法运算，且乘法运算的结果存在且唯一之后，我们终于可以对自然数乘法的性质进行进一步的探索。\"]},\"69\":{\"h\":\"乘法交换律\",\"t\":[\"下面证明乘法交换律，即对于任意自然数 ，有 。\",\"直接证明比较困难，考虑从乘法运算的定义下手，即先证明乘法的两条运算规则符合交换律。\",\"试证 。\",\"首先有 。\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 。\",\"首先 时有\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，将其称为新的乘法运算规则 Ⅱ。\",\"证明了乘法运算规则的交换律之后，试证乘法交换律 ，首先当 时由乘法运算规则 Ⅰ 有 。\",\"进而当 是自然数且 时，有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即乘法交换律成立。\"]},\"70\":{\"h\":\"乘法分配律\",\"t\":[\"下面证明乘法分配律，即对于任意自然数 ，有 。\",\"首先当 时，，进而当 为自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即乘法分配律成立。\"]},\"71\":{\"h\":\"乘法结合律\",\"t\":[\"下面证明乘法结合律，即对于任意自然数 ，有 。\",\"首先当 时，有 。\",\"进而当 为自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即乘法结合律成立。\"]},\"72\":{\"h\":\"乘法消去律\",\"t\":[\"下面证明乘法消去律，即对于任意自然数 和 ，有 。\",\"试证 。\",\"首先当 时有\",\"进而当 为自然数且 时有\",\"即 ，根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 ，采用反证法，假设 ，则由加法运算规则 Ⅱ 可知 或 ，其中 ，不妨设 。\",\"由 Peano 公理 Ⅲ 有 。\",\"由 Peano 公理 Ⅲ、Ⅳ 有，任意非零自然数 都有唯一的数 满足 ，不妨记作 。\",\"若有 ，则有\",\"上述等式表明 是 的后继，这违背了 Peano 公理 Ⅲ，由此知道假设不成立，即 。\",\"综上所述，乘法消去律 ，对任意自然数 成立。\"]},\"73\":{\"h\":\"Peano 公理的合理性\",\"t\":[\"通过上述步骤，我们成功地由 Peano 公理构建出了一个自然数代数系统。但 Peano 公理自身任有待研究。从上述步骤中我们看出 Peano 公理每一条公理都被使用过，少了任何一条都不足以构建出上述的自然数系统，这究竟是为什么呢？\",\"下面我将阐述为什么每条公理都是必须的，通过举反例的方式。研究 Peano 公理自然不能从 Peano 公理系统内出发，我们将借助另一个公理系统——图论。\"]},\"74\":{\"h\":\"乘法保序性\",\"t\":[\"若 ，则 。\",\"由 有 ，进而 因此 。\"]},\"75\":{\"h\":\"乘法消去保序性\",\"t\":[\"若 ，则 。\",\"采用反证法，假设 ，则存在正自然数 满足 ，有\",\"由此有 ，根据序的反对称性有 ，根据乘法消去律有 ，这与 的假设矛盾，因此假设不成立，即证明了乘法消去的保序性。\"]},\"76\":{\"h\":\"用图论阐述 Peano 系统\",\"t\":[\"自然数与有向图 同构，这个图满足如下性质：\",\"存在点 ，即 ；\",\"所有点的出度为 ，即 ；\",\"点 入度为 ，即 ；\",\"任意点的入度小于等于 ，即 ；\",\"存在从 到任意点的路径，即 。\",\"下面我们试着通过删除公理的方法来寻找反例。\"]},\"77\":{\"h\":\"Peano 公理 Ⅰ\",\"t\":[\"若去除，则允许不存在 ，可以构造出空集自然数系统。\"]},\"78\":{\"h\":\"Peano 公理 Ⅱ\",\"t\":[\"若去除，则对点的出度无规定，可以构造出菊花图自然数系统。\"]},\"79\":{\"h\":\"Peano 公理 Ⅲ\",\"t\":[\"若去除，则对 的入度无规定，可以构造出环状自然数系统。\"]},\"80\":{\"h\":\"Peano 公理 Ⅳ\",\"t\":[\"若去除，则对一个数可以是多个数的后继，可以构造出 状自然数系统。\"]},\"81\":{\"h\":\"Peano 公理 Ⅴ\",\"t\":[\"若去除，则对连通性无要求，可以构造出分段状自然数系统。\"]},\"82\":{\"c\":[\"数学\"]},\"83\":{\"c\":[\"公理系统\"]},\"84\":{\"h\":\"使用capacitor和ionic将vue项目迁移到mobile端\",\"t\":[\"当我们写完了vue项目后，想做一个一样的移动app，此时我们可以使用ionic无缝将其迁移到移动端。\"]},\"85\":{\"h\":\"安装\",\"t\":[\"Capacitor\",\"ionic\"]},\"86\":{\"h\":\"tips\",\"t\":[\"deploy\",\"每次执行更新你的 Web 目录的构建（例如 ionic build）时（默认：build)，你需要将这些更改复制到你的原生项目中：\",\"ionic cap copy\",\"注意：更新代码的原生部分（例如添加新插件）后，使用 sync 命令：\",\"ionic cap sync \",\"相关信息\",\"vscode中可以使用\\\"ionic\\\"插件\",\"默认不支持HTTP\",\"const config: CapacitorConfig = { plugins:{ CapacitorHttp:{ enabled:true, } }, android:{ allowMixedContent: true, } }; \"]},\"87\":{\"h\":\"bug 记录\",\"t\":[\"使用 vscode ionic打包后的相对路径不正确， 手动修改后可正常运行\",\"重要\",\"用Android Studio时不能打开360手机助手，会和ADB冲突\"]},\"88\":{\"c\":[\"mobile\"]},\"89\":{\"h\":\"并发异步编程之争：协程(asyncio)到底需不需要加锁？(线程/协程安全/挂起/主动切换)Python3\",\"t\":[\"原文转载自「刘悦的技术博客」https://v3u.cn/a_id_208\",\"协程与线程向来焦孟不离，但事实上是，线程更被我们所熟知，在Python编程领域，单核同时间内只能有一个线程运行，这并不是什么缺陷，这实际上是符合客观逻辑的，单核处理器本来就没法同时处理两件事情，要同时进行多件事情本来就需要正在运行的让出处理器，然后才能去处理另一件事情，左手画方右手画圆在现实中本来就不成立，只不过这个让出的过程是线程调度器主动抢占的。\"]},\"90\":{\"h\":\"线程安全\",\"t\":[\"系统的线程调度器是假设不同的线程是毫无关系的，所以它平均地分配时间片让处理器一视同仁，雨露均沾。但是Python受限于GIL全局解释器锁，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局解释器锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使多个线程跑在8核处理上，也只能用到1个核。\",\"但其实，这并不是事情的全貌，就算只能用单核处理任务，多个线程之前也并不是完全独立的，它们会操作同一个资源。于是，大家又发明了同步锁，使得一段时间内只有一个线程可以操作这个资源，其他线程只能等待：\",\"import threading balance = 0 def change_it_without_lock(n): global balance # 不加锁的话 最后的值不是0 # 线程共享数据危险在于 多个线程同时改同一个变量 # 如果每个线程按顺序执行，那么值会是0， 但是线程时系统调度，又不确定性，交替进行 # 没锁的话，同时修改变量 # 所以加锁是为了同时只有一个线程再修改，别的线程表一定不能改 for i in range(1000000): balance = balance + n balance = balance - n def change_it_with_lock(n): global balance if lock.acquire(): try: for i in range(1000000): balance = balance + n balance = balance - n # 这里的finally 防止中途出错了，也能释放锁 finally: lock.release() threads = [ threading.Thread(target=change_it_with_lock, args=(8, )), threading.Thread(target=change_it_with_lock, args=(10, )) ] lock = threading.Lock() [t.start() for t in threads] [t.join() for t in threads] print(balance) \",\"这种异步编程方式被广大开发者所认可，线程并不安全，线程操作共享资源需要加锁。然而人们很快发现，这种处理方式是在画蛇添足，处理器本来同一时间就只能有一个线程在运行。是线程调度器抢占划分时间片给其他线程跑，而现在，多了把锁，其他线程又说我拿不到锁，我得拿到锁才能操作。\",\"就像以前的公共电话亭，本来就只能一个人打电话，现在电话亭上加了把锁，还是只能一个人打电话，而有没有锁，有什么区别呢？所以，问题到底出在哪儿？\",\"事实上，在所有线程相互独立且不会操作同一资源的模式下，抢占式的线程调度器是非常不错的选择，因为它可以保证所有的线程都可以被分到时间片不被垃圾代码所拖累。而如果操作同一资源，抢占式的线程就不那么让人愉快了。\"]},\"91\":{\"h\":\"协程\",\"t\":[\"过了一段时间，人们发现经常需要异步操作共享资源的情况下，主动让出时间片的协程模式比线程抢占式分配的效率要好，也更简单。\",\"从实际开发角度看，与线程相比，这种主动让出型的调度方式更为高效。一方面，它让调用者自己来决定什么时候让出，比操作系统的抢占式调度所需要的时间代价要小很多。后者为了能恢复现场会在切换线程时保存相当多的状态，并且会非常频繁地进行切换。另一方面，协程本身可以做成用户态，每个协程的体积比线程要小得多，因此一个进程可以容纳数量相当可观的协程任务。\",\"import asyncio balance = 0 async def change_it_without_lock(n): global balance balance = balance + n balance = balance - n loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_without_lock(10), change_it_without_lock(8), change_it_without_lock(2), change_it_without_lock(7))) print(balance) \",\"从代码结构上看，协程保证了编写过程中的思维连贯性，使得函数（闭包）体本身就无缝保持了程序状态。逻辑紧凑，可读性高，不易写出错的代码，可调试性强。\",\"但归根结底，单核处理器还是同时间只能做一件事，所以同一时间点还是只能有一个协程任务运行，它和线程的最主要差别就是，协程是主动让出使用权，而线程是抢占使用权，即所谓的，协程是用户态，线程是系统态。\",\"img\",\"同时，如图所示，协程本身就是单线程的，即不会触发系统的全局解释器锁(GIL)，同时也不需要系统的线程调度器参与抢占式的调度，避免了多线程的上下文切换，所以它的性能要比多线程好。\"]},\"92\":{\"h\":\"协程安全\",\"t\":[\"回到并发竞争带来的安全问题上，既然同一时间只能有一个协程任务运行，并且协程切换并不是系统态抢占式，那么协程一定是安全的：\",\"import asyncio balance = 0 async def change_it_without_lock(n): global balance balance = balance + n balance = balance - n print(balance) loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_without_lock(10), change_it_without_lock(8), change_it_without_lock(2), change_it_without_lock(7))) print(balance) \",\"运行结果：\",\"0 0 0 0 0 liuyue:as-master liuyue$ \",\"看起来是这样的，无论是执行过程中，还是最后执行结果，都保证了其状态的一致性。\",\"于是，协程操作共享变量不需要加锁的结论开始在坊间流传。\",\"毫无疑问，谁主张，谁举证，上面的代码也充分说明了这个结论的正确性，然而我们都忽略了一个客观事实，那就是代码中没有“主动让出使用权”的操作，所谓主动让出使用权，即用户主动触发协程切换，那到底怎么主动让出使用权？使用 await 关键字。\",\"await 是 Python 3.5版本开始引入了新的关键字，即Python3.4版本的yield from，它能做什么？它可以在协程内部用await调用另一个协程实现异步操作，或者说的更简单一点，它可以挂起当前协程任务，去手动异步执行另一个协程，这就是主动让出“使用权”：\",\"async def hello(): print(\\\"Hello world!\\\") r = await asyncio.sleep(1) print(\\\"Hello again!\\\") \",\"当我们执行第一句代码print(\\\"Hello world!\\\")之后，使用await关键字让出使用权，也可以理解为把程序“暂时”挂起，此时使用权让出以后，别的协程就可以进行执行，随后当我们让出使用权1秒之后，当别的协程任务执行完毕，又或者别的协程任务也“主动”让出了使用权，协程又可以切回来，继续执行我们当前的任务，也就是第二行代码print(\\\"Hello again!\\\")。\",\"了解了协程如何主动切换，让我们继续之前的逻辑：\",\"import asyncio balance = 0 async def change_it_without_lock(n): global balance balance = balance + n await asyncio.sleep(1) balance = balance - n print(balance) loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_without_lock(10), change_it_without_lock(8), change_it_without_lock(2), change_it_without_lock(7))) print(balance) \",\"逻辑有了些许修改，当我对全局变量balance进行加法运算后，主动释放使用权，让别的协程运行，随后立刻切换回来，再进行减法运算，如此往复，同时开启四个协程任务，让我们来看一下代码运行结果：\",\"17 9 7 0 0 liuyue:mytornado liuyue$ \",\"可以看到，协程运行过程中，并没有保证“状态一致”，也就是一旦通过await关键字切换协程，变量的状态并不会进行同步，从而导致执行过程中变量状态的“混乱状态”，但是所有协程执行完毕后，变量balance的最终结果是0，意味着协程操作变量的最终一致性是可以保证的。\",\"为了对比，我们再用多线程试一下同样的逻辑：\",\"import threading import time balance = 0 def change_it_without_lock(n): global balance for i in range(1000000): balance = balance + n balance = balance - n print(balance) threads = [ threading.Thread(target=change_it_without_lock, args=(8, )), threading.Thread(target=change_it_without_lock, args=(10, )), threading.Thread(target=change_it_without_lock, args=(10, )), threading.Thread(target=change_it_without_lock, args=(8, )) ] [t.start() for t in threads] [t.join() for t in threads] print(balance) \",\"多线程逻辑执行结果：\",\"liuyue:mytornado liuyue$ python3 \\\"/Users/liuyue/wodfan/work/mytornado/test.py\\\" 28 18 10 0 8 \",\"可以看到，多线程在未加锁的情况下，连最终一致性也无法保证，因为线程是系统态切换，虽然同时只能有一个线程执行，但切换过程是争抢的，也就会导致写操作被原子性覆盖，而协程虽然在手动切换过程中也无法保证状态一致，但是可以保证最终一致性呢？因为协程是用户态，切换过程是协作的，所以写操作不会被争抢覆盖，会被顺序执行，所以肯定可以保证最终一致性。\",\"协程在工作状态中，主动切换了使用权，而我们又想在执行过程中保证共享数据的强一致性，该怎么办？毫无疑问，还是只能加锁：\",\"import asyncio balance = 0 async def change_it_with_lock(n): async with lock: global balance balance = balance + n await asyncio.sleep(1) balance = balance - n print(balance) lock = asyncio.Lock() loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_with_lock(10), change_it_with_lock(8), change_it_with_lock(2), change_it_with_lock(7))) print(balance) \",\"协程加锁执行后结果：\",\"liuyue:mytornado liuyue$ python3 \\\"/Users/liuyue/wodfan/work/mytornado/test.py\\\" 0 0 0 0 0 \",\"是的，无论是结果，还是过程中，都保持了其一致性，但是我们也付出了相应的代价，那就是任务又回到了线性同步执行，再也没有异步的加持了。话说回来，世界上的事情本来就是这样，本来就没有两全其美的解决方案，又要共享状态，又想多协程，还想变量安全，这可能吗？\"]},\"93\":{\"h\":\"协程是否需要加锁\",\"t\":[\"结论当然就是看使用场景，如果协程在操作共享变量的过程中，没有主动放弃执行权(await)，也就是没有切换挂起状态，那就不需要加锁，执行过程本身就是安全的；可是如果在执行事务逻辑块中主动放弃执行权了，会分两种情况，如果在逻辑执行过程中我们需要判断变量状态，或者执行过程中要根据变量状态进行一些下游操作，则必须加锁，如果我们不关注执行过程中的状态，只关注最终结果一致性，则不需要加锁。是的，抛开剂量谈毒性，是不客观的，给一个健康的人注射吗啡是犯罪，但是给一个垂死的人注射吗啡，那就是最大的道德，所以说，道德不是空泛的，脱离对象孤立存在的，同理，抛开场景谈逻辑，也是不客观的，协程也不是虚空的，脱离具体场景孤立存在的，我们应该养成具体问题具体分析的辩证唯物思想，只有掌握了辩证的矛盾思维才能更全面更灵活的看待问题，才能透过现象，把握本质。\",\"原文转载自「刘悦的技术博客」 https://v3u.cn/a_id_208\"]},\"94\":{\"h\":\"协程\",\"t\":[\"文档\",\"重要\",\"TODO\"]},\"95\":{\"h\":\"Slidev\",\"t\":[\"复杂演示推荐\"]},\"96\":{\"h\":\"缺点\",\"t\":[\"不支持导出pptx\",\"https://cn.sli.dev/guide\",\"简单PPT,且需要导出为pptx推荐\"]},\"97\":{\"h\":\"缺点\",\"t\":[\"不支持动画\",\"https://sspai.com/post/55718\",\"https://segmentfault.com/a/1190000040806239\",\"⚠️注意事项\\n如果你的 VS Code 安装了 Markdown 渲染插件 Markdown Preview Enhanced，需要先将这个插件「禁用」或是「卸载」，转而使用 VS Code 后来集成的 Markdown 预览功能，才能正常看到渲染后的 PPT 页面。\"]},\"98\":{\"h\":\"闭包实现类\",\"t\":[\"你是否曾经想过，不用类也能封装数据和方法？这篇文章将带你走进闭包的奇妙世界，展示如何用闭包来实现这一点。通过一个有趣的代码示例，你将看到闭包是如何捕获变量并提供类似类的功能的。准备好了吗？让我们开始这段有趣的旅程吧！\",\"alt text\"]},\"99\":{\"c\":[\"OI\"]},\"100\":{\"c\":[\"MODInt\"]},\"101\":{\"h\":\"教程\",\"t\":[\"这里是所有详细的教程和指南。\"]},\"102\":{\"h\":\"Typora激活教程\",\"t\":[\"Typora 是一款简洁高效的 Markdown 编辑器，支持实时预览和多种导出格式，适用于编写笔记、文档和博客等。\",\"Typora 官网\",\"Typora 中文官网\",\"工具下载：百度网盘，密码：dcqe\",\"一路点击“下一步”进行安装。将下载的工具解压后得到的两个 exe 文件（license-gen.exe 和 node_inject.exe）复制到 Typora 安装目录下（默认为 C:\\\\Program Files\\\\Typora\\\\）。\",\"以管理员身份在 Typora 安装路径打开 PowerShell。\",\"输入 node_inject.exe 并回车，等待提示 \\\"done!\\\"。\",\"输入 license-gen.exe 并回车，等待显示序列号。\",\"启动 Typora，输入任意邮箱和刚才生成的序列号到激活窗口，并点击激活。\",\"通过上述步骤，您可以免费安装并使用 Typora，但如有条件还请支持正版。\"]},\"103\":{\"h\":\"html 转 md 工具\",\"t\":[\"https://github.com/mixmark-io/turndown\",\"https://github.com/aaronsw/html2text\"]},\"104\":{\"h\":\"设计模式七大原则\",\"t\":[\"类的设计原则有七个，包括：开闭原则、里氏代换原则、迪米特原则（最少知道原则）、单一职责原则、接口分隔原则、依赖倒置原则、组合/聚合复用原则。\"]},\"105\":{\"h\":\"关系\",\"t\":[\"七大原则之间并不是相互孤立的，而是相互关联的。一个原则可以是另一个原则的加强或基础。违反其中一个原则，可能同时违反其他原则。\",\"开闭原则是面向对象可复用设计的基石，其他设计原则是实现开闭原则的手段和工具。\",\"通常，可以将这七个原则分为以下两部分：\",\"设计目标：开闭原则、里氏代换原则、迪米特原则\",\"设计方法：单一职责原则、接口分隔原则、依赖倒置原则、组合/聚合复用原则\"]},\"106\":{\"h\":\"开闭原则\",\"t\":[\"对扩展开放\",\"对修改关闭\",\"根据开闭原则，在设计一个系统模块的时候，应该可以在不修改原模块的基础上，扩展其功能。\"]},\"107\":{\"h\":\"实现方法\",\"t\":[\"使用抽象类和接口：通过定义抽象类和接口，可以在不修改现有代码的情况下，增加新的实现。\",\"使用设计模式：例如策略模式、装饰者模式等，可以在不改变原有代码的情况下，动态地扩展对象的行为。\",\"遵循单一职责原则：确保每个类只有一个职责，这样在扩展功能时，不会影响其他功能。\"]},\"108\":{\"h\":\"里氏代换原则\"},\"109\":{\"h\":\"里氏代换原则\",\"t\":[\"里氏代换原则规定子类不得重写父类的普通方法，只能重写父类的抽象方法；即子类可以扩展父类的功能，但是不能改变父类原有的功能。\",\"派生类应当可以替换基类并出现在基类能够出现的任何地方，或者说如果我们把代码中使用基类的地方用它的派生类所代替，代码还能正常工作。\"]},\"110\":{\"h\":\"实现方法\",\"t\":[\"使用抽象类和接口：确保子类实现父类的抽象方法，而不是重写父类的具体方法。\",\"遵循契约：子类的方法签名应与父类一致，返回类型应与父类相同或是其子类型。\",\"遵循行为一致性：子类应保持父类的行为，不应引入违反父类预期的新行为。\"]},\"111\":{\"h\":\"示例\"},\"112\":{\"h\":\"迪米特原则\"},\"113\":{\"h\":\"迪米特原则\",\"t\":[\"一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立；降低类之间的耦合度，提高模块的相对独立性。\"]},\"114\":{\"h\":\"实现方法\",\"t\":[\"引入中介者模式：通过中介者对象来管理对象之间的交互，减少对象之间的直接依赖。\",\"使用门面模式：通过门面对象提供统一的接口，隐藏系统的复杂性，减少对象之间的直接交互。\",\"限制公开方法：尽量减少类的公开方法，避免不必要的外部依赖。\"]},\"115\":{\"h\":\"单一职责原则\",\"t\":[\"一个类只对应一个职责，其职责是引起该类变化的原因。\",\"如果一个类需要改变，改变它的理由永远只有一个。如果存在多个改变它的理由，就需要重新设计该类。\"]},\"116\":{\"h\":\"实现方法\",\"t\":[\"职责分离：将不同的职责分离到不同的类中，每个类只负责一个职责。\",\"模块化设计：通过模块化设计，将不同的功能模块分开，确保每个模块只负责一个功能。\",\"重构：在发现类有多个职责时，及时进行重构，将不同的职责分离到不同的类中。\"]},\"117\":{\"h\":\"示例\",\"t\":[\"// 不符合单一职责原则的类 class User { login() { // 登录逻辑 } register() { // 注册逻辑 } displayProfile() { // 显示用户信息逻辑 } } // 符合单一职责原则的类 class AuthService { login() { // 登录逻辑 } register() { // 注册逻辑 } } class UserProfile { displayProfile() { // 显示用户信息逻辑 } } \"]},\"118\":{\"h\":\"接口隔离原则\",\"t\":[\"不应强迫用户依赖他们不使用的接口。\",\"一个类对另一个类的依赖应该建立在最小的接口上。\",\"简单来说，使用多个专门的接口比使用单个通用接口要好得多。\"]},\"119\":{\"h\":\"依赖倒置原则\",\"t\":[\"高层模块不应该依赖低层模块，二者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。核心思想是：面向接口编程，而不是面向实现编程。\"]},\"120\":{\"h\":\"实现方法\",\"t\":[\"使用接口和抽象类：定义接口或抽象类，让高层模块依赖这些抽象，而不是具体实现。\",\"依赖注入：通过构造函数注入、属性注入或方法注入，将具体实现传递给高层模块。\",\"工厂模式：使用工厂模式创建对象，避免高层模块直接依赖具体类。\"]},\"121\":{\"h\":\"示例\",\"t\":[\"// 定义抽象接口 interface IWorker { work(): void; } // 具体实现 class Worker implements IWorker { work() { console.log(\\\"Working...\\\"); } } // 高层模块依赖抽象接口 class Manager { private worker: IWorker; constructor(worker: IWorker) { this.worker = worker; } manage() { this.worker.work(); } } // 使用依赖注入 const worker = new Worker(); const manager = new Manager(worker); manager.manage(); \"]},\"122\":{\"h\":\"组合/聚合复用原则\",\"t\":[\"尽量使用组合/聚合，不要使用类继承。\",\"如果使用继承，会导致父类的任何变换都可能影响到子类的行为，所以优先使用组合的方式代替继承的方式。\"]},\"123\":{\"h\":\"实现方法\",\"t\":[\"使用组合：通过在类中包含其他类的实例来实现功能，而不是通过继承。\",\"使用聚合：通过在类中引用其他类的实例来实现功能，而不是通过继承。\",\"接口和抽象类：通过接口和抽象类定义行为，然后在具体类中实现这些行为。\"]},\"124\":{\"h\":\"示例\",\"t\":[\"// 使用继承的方式 class Engine { start() { console.log(\\\"Engine started\\\"); } } class Car extends Engine { drive() { this.start(); console.log(\\\"Car is driving\\\"); } } // 使用组合的方式 class Engine { start() { console.log(\\\"Engine started\\\"); } } class Car { private engine: Engine; constructor(engine: Engine) { this.engine = engine; } drive() { this.engine.start(); console.log(\\\"Car is driving\\\"); } } const engine = new Engine(); const car = new Car(engine); car.drive(); \"]},\"125\":{\"h\":\"总结\",\"t\":[\"开闭原则：对扩展开放，对修改关闭。\",\"里氏代换原则：子类可以替换父类，且程序行为不变。\",\"迪米特原则：尽量减少类之间的耦合。\",\"单一职责原则：一个类只负责一个职责。\",\"接口隔离原则：使用多个专门的接口，而不是一个通用接口。\",\"依赖倒置原则：高层模块不依赖低层模块，二者都依赖抽象。\",\"组合/聚合复用原则：优先使用组合/聚合，而不是继承。\"]},\"126\":{\"c\":[\"设计模式\"]},\"127\":{\"c\":[\"设计模式\",\"typescript\"]},\"128\":{\"h\":\"抽象工厂模式\"},\"129\":{\"h\":\"为什么要使用抽象工厂模式\",\"t\":[\"抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而无需明确指定具体类。它通过定义一个创建对象的接口来实现，这样子类可以决定实例化哪个类。抽象工厂模式使得一个类的实例化延迟到其子类。\",\"解耦：抽象工厂模式通过将对象的创建过程抽象化，减少了客户端代码与具体类之间的耦合。\",\"一致性：确保同一工厂创建的一系列对象具有一致的接口和行为。\",\"扩展性：可以方便地增加新的产品族而不影响现有代码。\"]},\"130\":{\"h\":\"示例代码\",\"t\":[\"// factory.ts // 抽象工厂 import { Link } from './link'; import { Tray } from './tray'; import { Page } from './page'; export abstract class Factory { abstract createLink(caption: string, url: string): Link; abstract createTray(caption: string): Tray; abstract createPage(title: string, author: string): Page; } // item.ts // 抽象零件 export abstract class Item { protected caption: string; constructor(caption: string) { this.caption = caption; } abstract makeHTML(): string; } // link.ts // 抽象超链接 import { Item } from './item'; export abstract class Link extends Item { protected url: string; constructor(caption: string, url: string) { super(caption); this.url = url; } } // listFactory.ts import { Factory } from './factory'; import { ListLink } from './listLink'; import { ListTray } from './listTray'; import { ListPage } from './listPage'; export class ListFactory extends Factory { createLink(caption: string, url: string) { return new ListLink(caption, url); } createTray(caption: string) { return new ListTray(caption); } createPage(title: string, author: string) { return new ListPage(title, author); } } // listLink.ts import { Link } from './link'; export class ListLink extends Link { constructor(caption: string, url: string) { super(caption, url); } makeHTML() { return `<li><a href=\\\"${this.url}\\\">${this.caption}</a></li>\\\\n`; } } // listPage.ts import { Page } from './page'; export class ListPage extends Page { makeHTML() { let buffer = []; buffer.push(`<html><head><title>${this.title}</title></head>`); buffer.push(`<body>`); buffer.push(`<h1>${this.title}</h1>`); buffer.push(`<ul>`); this.content.forEach(item => { buffer.push(item.makeHTML()); }); buffer.push(`</ul>`); buffer.push(`<hr><address>${this.author}</address>`); buffer.push(`</body></html>`); return buffer.join('\\\\n'); } } // listTray.ts import { Tray } from \\\"./tray\\\"; export class ListTray extends Tray { constructor(caption: string) { super(caption); } makeHTML() { let buffer = []; buffer.push(\\\"<li>\\\\n\\\"); buffer.push(this.caption + \\\"\\\\n\\\"); buffer.push(\\\"<ul>\\\\n\\\"); this.tray.forEach(item => { buffer.push(item.makeHTML()); }); buffer.push(\\\"</ul>\\\\n\\\"); buffer.push(\\\"</li>\\\\n\\\"); return buffer.join(\\\"\\\"); } } // main.ts import { Factory } from \\\"./factory\\\"; import { ListFactory } from \\\"./listFactory\\\"; function getProduct(factory: Factory) { let people = factory.createLink(\\\"people\\\", \\\"http://www.people.com\\\"); let gmw = factory.createLink(\\\"gmw\\\", \\\"http://www.gmw.com\\\"); let us_yahoo = factory.createLink(\\\"us_yahoo\\\", \\\"http://www.us.yahoo.com\\\"); let jp_yahoo = factory.createLink(\\\"jp_yahoo\\\", \\\"http://www.jp.yahoo.com\\\"); let excite = factory.createLink(\\\"excite\\\", \\\"http://www.excite.com\\\"); let google = factory.createLink(\\\"google\\\", \\\"http://www.google.com\\\"); let traynews = factory.createTray(\\\"news\\\"); traynews.add(people); traynews.add(gmw); let trayyahoo = factory.createTray(\\\"yahoo\\\"); trayyahoo.add(us_yahoo); trayyahoo.add(jp_yahoo); let traysearch = factory.createTray(\\\"search\\\"); traysearch.add(trayyahoo); traysearch.add(excite); let page = factory.createPage(\\\"LinkPage\\\", \\\"gmw\\\"); page.add(traynews); page.add(traysearch); page.output(); } let factory = new ListFactory(); getProduct(factory); // page.ts // 抽象html页面 import { Item } from './item'; export abstract class Page { title: string; author: string; content: Array<Item>; buffer: string; constructor(title: string, author: string) { this.title = title; this.author = author; this.content = []; } add(item: Item): void { this.content.push(item); } output(): void { try { this.buffer = this.makeHTML(); console.log(this.buffer); } catch (error) { console.log(error); } } abstract makeHTML(): string; } // tray.ts // 抽象容器 import { Item } from './item'; export abstract class Tray extends Item { protected tray: Item[] = []; constructor(caption: string) { super(caption); } public add(item: Item): void { this.tray.push(item); } } \",\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\abstractFactory\\\\main.ts\\\" <html><head><title>LinkPage</title></head> <body> <h1>LinkPage</h1> <ul> <li> news <ul> <li><a href=\\\"http://www.people.com\\\">people</a></li> <li><a href=\\\"http://www.gmw.com\\\">gmw</a></li> </ul> </li> <li> search <ul> <li> yahoo <ul> <li><a href=\\\"http://www.us.yahoo.com\\\">us_yahoo</a></li> <li><a href=\\\"http://www.jp.yahoo.com\\\">jp_yahoo</a></li> </ul> </li> <li><a href=\\\"http://www.excite.com\\\">excite</a></li> </ul> </li> </ul> <hr><address>gmw</address> </body></html> \"]},\"131\":{\"h\":\"增加其它工厂\",\"t\":[\"如果只是为了编写包含 HTML 超链接集合的文件，这样的设计可能显得有些过于复杂。当只有一个具体工厂时，划分“抽象类”和“具体类”是没有必要的。然而，使用抽象工厂模式，我们可以轻松地添加其他具体工厂，例如TableFactory。\"]},\"132\":{\"h\":\"拓展思路的要点\"},\"133\":{\"h\":\"易于增加具体工厂\",\"t\":[\"在 Abstract Factory 模式中增加具体的工厂是非常容易的。这里说的“容易”指的是需要编写哪些类和需要实现哪些方法都非常清楚。\",\"假设现在我们要在示例程序中增加新的具体工厂，那么需要做的就是编写 Factory、Link、Tray、Page 这 4 个类的子类，并实现它们定义的抽象方法。也就是说将 factory 包中的抽象部分全部具体化即可。\",\"这样一来，无论要增加多少个具体工厂（或是要修改具体工厂的 Bug），都无需修改抽象工厂和 Main 部分。\"]},\"134\":{\"h\":\"难以增加新的零件\",\"t\":[\"请试想一下要在 Abstract Factory 模式中增加新的零件时应当如何做。例如，我们要在 factory 包中增加一个表示图像的 Picture 零件。这时，我们必须要对所有的具体工厂进行相应的修改才行。例如，在 listfactory 包中，我们必须要做以下修改：\",\"在 ListFactory 中增加 createPicture 方法，\",\"新增 ListPicture 类。\",\"已经编写完成的具体工厂越多，修改的工作量就会越大。\"]},\"135\":{\"h\":\"相关的设计模式\",\"t\":[\"Builder 模式\",\"Factory Method 模式\",\"Composite 模式\",\"Singleton 模式\"]},\"136\":{\"c\":[\"设计模式\"]},\"137\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"138\":{\"h\":\"适配器模式\"},\"139\":{\"h\":\"适配器模式\",\"t\":[\"适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\"]},\"140\":{\"h\":\"为什么要用适配器模式\",\"t\":[\"在软件开发中，经常会遇到需要使用一些现有的类，但它们的接口并不符合当前系统的需求。适配器模式通过创建一个适配器类，将现有类的接口转换为所需的接口，从而使得现有类可以在新的环境中使用。\"]},\"141\":{\"h\":\"类比\"},\"142\":{\"h\":\"类比\",\"t\":[\"比喻\",\"示例程序\",\"实际需求\",\"交流100V\",\"Banner\",\"变换装置\",\"适配器\",\"PrintBanner\",\"需求\",\"直流12V\",\"Print\"]},\"143\":{\"h\":\"示例程序\",\"t\":[\"Adapter 有两种方式实现\",\"// banner.ts export class Banner { private string: string; constructor(string: string) { this.string = string; } showWithParen(): void { console.log(`(${this.string})`); } showWithAster(): void { console.log(`*${this.string}*`); } } // print_inheritance.ts export interface Print { printWeak(): void; printStrong(): void; } // printBanner_inheritance.ts import { Banner } from './banner'; import { Print } from './print_inheritance'; export class PrintBanner extends Banner implements Print { constructor(string: string) { super(string); } printWeak(): void { this.showWithParen(); } printStrong(): void { this.showWithAster(); } } // print_delegation.ts export abstract class Print { abstract printWeak(): void; abstract printStrong(): void; } // printBanner_delegation.ts import { Print } from \\\"./print_delegation\\\"; import { Banner } from \\\"./banner\\\"; export class PrintBanner extends Print { private banner: Banner; constructor(string: string) { super(); this.banner = new Banner(string); } printWeak(): void { this.banner.showWithParen(); } printStrong(): void { this.banner.showWithAster(); } } // main.ts import { PrintBanner as pbi } from './printBanner_inheritance'; import { PrintBanner as pbd } from './printBanner_delegation'; // 使用继承 const printBanner = new pbi('Hello'); printBanner.printWeak(); printBanner.printStrong(); // 使用委托 const printBanner2 = new pbd('Hello'); printBanner2.printWeak(); printBanner2.printStrong(); \"]},\"144\":{\"h\":\"运行结果\",\"t\":[\"ts-node \\\"d:\\\\code\\\\design_pattern\\\\src\\\\adapter\\\\main.ts\\\" (Hello) *Hello* (Hello) *Hello* \"]},\"145\":{\"h\":\"相关的设计模式\",\"t\":[\"Bridge\",\"Decorator\"]},\"146\":{\"c\":[\"设计模式\"]},\"147\":{\"c\":[\"设计模式\",\"typescript\"]},\"148\":{\"h\":\"Bridge 模式\",\"t\":[\"Bridge 模式在“类的功能层次结构”和“类的实现层次结构”之间搭建桥梁。\"]},\"149\":{\"h\":\"使用此设计模式的理由\",\"t\":[\"Bridge 模式的主要目的是将抽象部分与实现部分分离，使它们可以独立变化。这种模式通过组合而不是继承来实现功能的扩展，减少了类之间的耦合度，提高了系统的可扩展性和可维护性。\"]},\"150\":{\"h\":\"类的层次结构的两个作用\"},\"151\":{\"h\":\"增加新功能时\",\"t\":[\"假设现在有一个类 Something，当我们想在 Something 中增加新功能时（例如增加一个具体方法），会编写一个 Something 类的子类（派生类），即 SomethingGood 类。这样就构成了一个小小的类层次结构。这就是为了增加新功能而产生的层次结构。\",\"SomeThing\",\"----\\\\ SomeThingGood\"]},\"152\":{\"h\":\"增加新的实现时\",\"t\":[\"在 Template Method 模式（第 3 章）中，我们学习了抽象类的作用。抽象类声明了一些抽象方法，定义了接口 (API)，然后子类负责实现这些抽象方法。父类的任务是通过声明抽象方法的方式定义接口 (API)，而子类的任务是实现抽象方法。正是由于父类和子类的这种任务分担，我们才可以编写出具有高可替换性的类。\",\"这里其实也存在层次结构。例如，当子类实现了父类 AbstractClass 类的抽象方法时，它们之间就构成了一个小小的层次结构。\",\"AbstractClass\",\"----\\\\ ConcreteClass\",\"但是，这里的类的层次结构并非用于增加功能，也就是说，这种层次结构并非用于方便我们增加新的方法。它的真正作用是帮助我们实现任务分担。\"]},\"153\":{\"h\":\"类的层次结构的混杂和分离\",\"t\":[\"当我们想要编写子类时，就需要先确认自己的意图：“我是要增加功能呢？还是要增加实现呢？”\",\"当类的层次结构只有一层时，功能层次结构与实现层次结构是混杂在一个层次结构中的。这样很容易使类的层次结构变得复杂，也难以透彻地理解类的层次结构。因为自己难以确定究竟应该在类的哪一个层次结构中去增加子类。\",\"因此，我们需要将“类的功能层次结构\\\"与“类的实现层次结构\\\"分离为两个独立的类层次结构。当然，如果只是简单地将它们分开，两者之间必然会缺少联系。所以我们还需要在它们之间搭建一座桥梁。本章中要学习的 Bridge 模式的作用就是搭建这座桥梁。\"]},\"154\":{\"h\":\"示例代码\"},\"155\":{\"h\":\"类的一览表\",\"t\":[\"在桥的哪一侧\",\"名字\",\"说明\",\"类的功能层次结构\",\"Display\",\"负责“显示”的类\",\"类的功能层次结构\",\"CountDisplay\",\"增加了“只显示规定次数”这一功能的类\",\"类的实现层次结构\",\"DisplayImpl\",\"负责“显示”的类\",\"类的实现层次结构\",\"StringDisplayImpl\",\"“用字符串显示”的类\",\"主程序\",\"Main\",\"试程序行为的类\",\"Display 类（代码清单 9 · 1 ）的功能是抽象的，负责“显示一些东西\\\"。该类位于“类的功能层次结构\\\"的最上层。在 impl 字段中保存的是实现了 Display 类的具体功能的实例（ impl 是 implementation （实现）的缩写）。该实例通过 Display 类的构造函数被传递给 Display 类，然后保存在字段中，以供后面的处理使用（ impl 字段即是类的两个层次结构的“桥梁\\\"）。\",\"CountDisplay 类继承了 Display 类的 open、print、close 方法，并使用它们来增加这个新功能。这就是“类的功能层次结构\\\"。\"]},\"156\":{\"h\":\"countDisplay.ts\",\"t\":[\"import { Display } from './display'; import { DisplayImpl } from './displayImpl'; export class CountDisplay extends Display { constructor(impl: DisplayImpl) { super(impl); } multiDisplay(times: number) { this.open(); for (let i = 0; i < times; i++) { this.print(); } this.close(); } } \"]},\"157\":{\"h\":\"display.ts\",\"t\":[\"import { DisplayImpl } from './displayImpl'; export class Display { private impl: DisplayImpl; constructor(impl: DisplayImpl) { this.impl = impl; } open() { this.impl.rawOpen(); } print() { this.impl.rawPrint(); } close() { this.impl.rawClose(); } display() { this.open(); this.print(); this.close(); } } \"]},\"158\":{\"h\":\"displayImpl.ts\",\"t\":[\"export abstract class DisplayImpl { abstract rawOpen(): void; abstract rawPrint(): void; abstract rawClose(): void; } \"]},\"159\":{\"h\":\"main.ts\",\"t\":[\"import { Display } from './display'; import { CountDisplay } from './countDisplay'; import { StringDisplayImpl } from './stringDisplayImpl'; const d1 = new Display(new StringDisplayImpl('Hello, China.')); const d2 = new CountDisplay(new StringDisplayImpl('Hello, World.')); const d3 = new CountDisplay(new StringDisplayImpl('Hello, Universe.')); d1.display(); d2.display(); d3.multiDisplay(5); \"]},\"160\":{\"h\":\"stringDisplayImpl.ts\",\"t\":[\"import { DisplayImpl } from './displayImpl'; export class StringDisplayImpl extends DisplayImpl { private str: string; private width: number; constructor(str: string) { super(); this.str = str; this.width = str.length; } rawOpen() { this.printLine(); } rawPrint() { console.log(`|${this.str}|`); } rawClose() { this.printLine(); } private printLine() { let buffer = '+'; for (let i = 0; i < this.width; i++) { buffer += '-'; } buffer += '+'; console.log(buffer); } } \"]},\"161\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\bridge\\\\main.ts\\\" +-------------+ |Hello, China.| +-------------+ +-------------+ |Hello, World.| +-------------+ +----------------+ |Hello, Universe.| |Hello, Universe.| |Hello, Universe.| |Hello, Universe.| |Hello, Universe.| +----------------+ \"]},\"162\":{\"h\":\"拓展思路的要点\"},\"163\":{\"h\":\"分开后更容易扩展\",\"t\":[\"Bridge 模式的特征是将“类的功能层次结构\\\"与“类的实现层次结构\\\"分离开了。将类的这两个层次结构分离开有利于独立地对它们进行扩展。当想要增加功能时，只需要在“类的功能层次结构\\\"一侧增加类即可，不必对“类的实现层次结构\\\"做任何修改。而且，增加后的功能可以被“所有的实现”使用。\",\"例如，我们可以将“类的功能层次结构\\\"应用于软件所运行的操作系统上。如果我们将某个程序中依赖于操作系统的部分划分为 Windows 版、Macintosh 版、Unix 版，那么我们就可以用 Bridge 模式中的“类的实现层次结构\\\"来表现这些依赖于操作系统的部分。也就是说，我们需要编写一个定义这些操作系统的共同接口（API）的 Implementor 角色，然后编写 Windows 版、Macintosh 版、Unix 版的 3 个 ConcreteImplementor 角色。这样一来，无论在“类的功能层次结构\\\"中增加多少个功能，它们都可以工作于这 3 个操作系统上。\"]},\"164\":{\"h\":\"继承是强关联，委托是弱关联\",\"t\":[\"继承是强关联关系，但委托是弱关联关系。这是因为只有 Display 类的实例生成时，才与作为参数被传入的类构成关联。例如，在示例程序中，当 Main 类生成 Display 类和 CountDisplay 类的实例时，才将 StringDisplayImpl 的实例作为参数传递给 Display 类和 CountDisplay 类。如果我们不传递 StringDisplayImpl 类的实例，而是将其他 ConcreteImplementor 角色的实例传递给 Display 类和 CountDisplay 类，就能很容易地改变实现。这时，发生变化的代码只有 Main 类，Display 类和 DisplayImpl 类则不需要做任何修改。\"]},\"165\":{\"h\":\"相关的设计模式\",\"t\":[\"Template Method 模式\",\"Abstract Factory 模式\",\"Adapter 模式\"]},\"166\":{\"c\":[\"设计模式\"]},\"167\":{\"c\":[\"设计模式\",\"TypeScript\",\"分开考虑\"]},\"168\":{\"h\":\"builder 模式\"},\"169\":{\"h\":\"为什么要使用 Builder 模式\",\"t\":[\"Builder 模式通过将对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。它主要用于以下情况：\",\"复杂对象的创建：当一个对象的构建过程非常复杂时，Builder 模式可以将构建过程分解为多个步骤，使代码更易于维护和理解。\",\"不同的表示：当需要创建不同表示的对象时，Builder 模式允许使用相同的构建过程来生成不同的对象表示。\",\"代码复用：通过将构建过程封装在 Director 类中，可以在不同的上下文中重用相同的构建逻辑。\"]},\"170\":{\"h\":\"代码示例\",\"t\":[\"// builder.ts export abstract class Builder { public abstract makeTitle(title: string): void; public abstract makeString(str: string): void; public abstract makeItems(items: string[]): void; public abstract close(): void; } // director.ts import { Builder } from './builder'; export class Director { private builder: Builder; constructor(builder: Builder) { this.builder = builder; } public construct(): void { this.builder.makeTitle('问候'); this.builder.makeString('从早上到下午'); this.builder.makeItems(['早上好。', '下午好。']); this.builder.makeString('晚上'); this.builder.makeItems(['晚上好。', '晚安。', '再见。']); this.builder.close(); } } // htmlBuilder.ts import { Builder } from './builder'; export class HTMLBuilder extends Builder { private filename: string = ''; private buffer: string = ''; public makeTitle(title: string): void { this.filename = `${title}.html`; this.buffer += `<html><head><title>${title}</title></head><body>`; this.buffer += `<h1>${title}</h1>`; } public makeString(str: string): void { this.buffer += `<p>${str}</p>`; } public makeItems(items: string[]): void { this.buffer += '<ul>'; items.forEach((item) => { this.buffer += `<li>${item}</li>`; }); this.buffer += '</ul>'; } public close(): void { this.buffer += '</body></html>'; } public getResult(): string { return this.buffer; } } // textBuilder.ts import { Builder } from './builder'; export class TextBuilder extends Builder { private buffer: string = ''; public makeTitle(title: string): void { this.buffer += '==============================\\\\n'; this.buffer += `『${title}』\\\\n`; this.buffer += '\\\\n'; } public makeString(str: string): void { this.buffer += `■${str}\\\\n`; this.buffer += '\\\\n'; } public makeItems(items: string[]): void { items.forEach((item) => { this.buffer += ` ・${item}\\\\n`; }); this.buffer += '\\\\n'; } public close(): void { this.buffer += '==============================\\\\n'; } public getResult(): string { return this.buffer; } } // main.ts import { Builder } from './builder'; import { Director } from './director'; import { HTMLBuilder } from './htmlBuilder'; import { TextBuilder } from './textBuilder'; // TextBuilder console.log(\\\"Creating a text file...\\\"); const textBuilder = new TextBuilder(); const director = new Director(textBuilder); director.construct(); const result = textBuilder.getResult(); console.log(result); // HTMLBuilder console.log(\\\"Creating an HTML file...\\\"); const htmlBuilder = new HTMLBuilder(); const director2 = new Director(htmlBuilder); director2.construct(); const filename = htmlBuilder.getResult(); console.log(`${filename}が作成されました。`); \"]},\"171\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\builder\\\\main.ts\\\" Creating a text file... ============================== 『问候』 ■从早上到下午 ・早上好。 ・下午好。 ■晚上 ・晚上好。 ・晚安。 ・再见。 ============================== Creating an HTML file... <html><head><title>问候</title></head><body><h1>问候</h1><p>从早上到下午</p><ul><li>早上好。</li><li>下午好。</li></ul><p>晚上</p><ul><li>晚上好。</li><li>晚安。</li><li>再见。</li></ul></body></html>が作成されました。 \"]},\"172\":{\"h\":\"相关设计模式\",\"t\":[\"Template Method 模式\",\"Composite 模式\",\"Abstract Factory 模式\",\"Facade 模式\"]},\"173\":{\"h\":\"拓展思路的要点\"},\"174\":{\"h\":\"谁知道什么\",\"t\":[\"在面向对象编程中，“谁知道什么”是非常重要的。Builder 模式通过将对象的构建过程与其表示分离，明确了各个类的职责分工。Director 类知道如何构建复杂对象，但不知道对象的具体表示；Builder 类知道如何生成对象的具体表示，但不知道构建的具体步骤。这种职责分离使得代码更加清晰、易于维护和扩展。\",\"正是因为不知道才能够替换，正是因为可以替换，组件才具有高价。作为设计人员，我们必须时刻关汴这种“可替換性”\"]},\"175\":{\"h\":\"设计时能够决定的事情和不能决定的事情\",\"t\":[\"在设计软件时，有些事情是可以在设计阶段决定的，而有些事情则需要在运行时决定。Builder 模式通过将构建过程与表示分离，使得在设计时可以决定构建的步骤和逻辑，而具体的表示则可以在运行时灵活选择。这种设计方式提高了系统的灵活性和可扩展性。\"]},\"176\":{\"h\":\"代码的阅读方法和修改方法\",\"t\":[\"在编程时，虽然有时需要从零开始编写代码，但更多时候我们都是在现有代码的基础上进行增加和修改。\",\"这时，我们需要先阅读现有代码。不过，只是阅读抽象类的代码是无法获取很多信息的（虽然可以从方法名中获得线索）。\",\"让我们再回顾一下示例程序。即使理解了 Builder 抽象类，也无法理解程序整体。至少必须在阅读了 Director 的代码后才能理解 Builder 类的使用方法（Builder 类的方法的调用方法）。然后再去看看 TextBuilder 类和 HTMLBuilder 类的代码，就可以明白调用 Builder 类的方法后具体会进行什么样的处理。\",\"如果没有理解各个类的角色就动手增加和修改代码，在判断到底应该修改哪个类时，就会很容易出错。例如，如果修改 Builder 类，那么就会对类中调用 Builder 类方法的地方和 Builder 类的子类产生影响。或是如果不小心修改了 Director 类，在其内部调用了类的特有的方法，则会导致其失去作为可复用组件的独立性，而且当将子类替换为 HTMLBuilder 时，程序可能会无法正常工作。\"]},\"177\":{\"c\":[\"设计模式\"]},\"178\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"179\":{\"h\":\"chainOfResponsibility 模式\",\"t\":[\"“推卸责任\\\"听起来有些贬义的意思，但是有时候也确实存在需要“推卸责任\\\"的情况。例如，当外部请求程序进行某个处理，但程序暂时无法直接决定由哪个对象负责处理时，就需要推卸责任。这种情况下，我们可以考虑将多个对象组成一条职责链，然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理。\",\"当一个人被要求做什么事情时，如果他可以做就自己做，如果不能做就将“要求\\\"转给另外一个人。下一个人如果可以自己处理，就自己做；如果也不能自己处理，就再转给另外一个人““这就是 Chain Of Responsibility 模式。\"]},\"180\":{\"h\":\"为什么使用此类\",\"t\":[\"使用 Chain of Responsibility 模式有以下几个优点：\",\"解耦请求发送者和接收者：发送者无需知道哪个对象会处理请求。\",\"动态组合职责链：可以在运行时动态地改变职责链的结构。\",\"增加灵活性：可以很容易地添加新的处理者而不影响现有代码。\"]},\"181\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们使用了 Chain of Responsibility 模式来处理一系列的请求。每个请求都会沿着职责链传递，直到有一个对象能够处理它。这样做的好处是请求的发送者和接收者解耦，发送者无需知道哪个对象会处理请求。\",\"// limitSupport.ts import { Support } from './support'; import { Trouble } from './trouble'; export class LimitSupport extends Support { private limit: number; constructor(name: string, limit: number) { super(name); this.limit = limit; } protected resolve(trouble: Trouble): boolean { if (trouble.getNumber() < this.limit) { return true; } return false; } } // main.ts import { NoSupport } from \\\"./NoSupport\\\"; import { LimitSupport } from \\\"./LimitSupport\\\"; import { OddSupport } from \\\"./OddSupport\\\"; import { SpecialSupport } from \\\"./specialSupport\\\"; import { Support } from \\\"./support\\\"; import { Trouble } from \\\"./trouble\\\"; let alice: Support = new NoSupport(\\\"Alice\\\"); let bob: Support = new LimitSupport(\\\"Bob\\\", 100); let charlie: Support = new SpecialSupport(\\\"Charlie\\\", 429); let diana: Support = new LimitSupport(\\\"Diana\\\", 200); let elmo: Support = new OddSupport(\\\"Elmo\\\"); let fred: Support = new LimitSupport(\\\"Fred\\\", 300); alice.setNext(bob).setNext(charlie).setNext(diana).setNext(elmo).setNext(fred); for (let i = 0; i < 500; i += 33) { alice.support(new Trouble(i)); } // NoSupport.ts import { Support } from './support'; import { Trouble } from './trouble'; export class NoSupport extends Support { constructor(name: string) { super(name); } resolve(trouble: Trouble): boolean { return false; } } // OddSupport.ts import { Support } from './support'; export class OddSupport extends Support { resolve(trouble) { if (trouble.getNumber() % 2 === 1) { return true; } else { return false; } } } // specialSupport.ts import { Support } from './support'; import { Trouble } from './trouble'; export class SpecialSupport extends Support { private number: number; constructor(name: string, number: number) { super(name); this.number = number; } protected resolve(trouble: Trouble): boolean { if (trouble.getNumber() === this.number) { return true; } return false; } } // support.ts import { Trouble } from './trouble'; export abstract class Support { private next: Support; constructor(private name: string) { this.name = name; } setNext(next: Support): Support { this.next = next; return next; } support(trouble: Trouble): void { if (this.resolve(trouble)) { this.done(trouble); } else if (this.next != undefined && this.next !== null) { this.next.support(trouble); } else { this.fail(trouble); } } toString(): string { return `[${this.name}]`; } protected abstract resolve(trouble: Trouble): boolean; protected done(trouble: Trouble): void { console.log(`${trouble} is resolved by ${this}.`); } protected fail(trouble: Trouble): void { console.log(`${trouble} cannot be resolved.`); } } // trouble.ts export class Trouble { private number: number; constructor(number: number) { this.number = number; } getNumber(): number { return this.number; } toString(): string { return `[Trouble ${this.number}]`; } } \"]},\"182\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\chainOfResponsibility\\\\main.ts\\\" [Trouble 0] is resolved by [Bob]. [Trouble 33] is resolved by [Bob]. [Trouble 66] is resolved by [Bob]. [Trouble 99] is resolved by [Bob]. [Trouble 132] is resolved by [Diana]. [Trouble 165] is resolved by [Diana]. [Trouble 198] is resolved by [Diana]. [Trouble 231] is resolved by [Elmo]. [Trouble 264] is resolved by [Fred]. [Trouble 297] is resolved by [Elmo]. [Trouble 330] cannot be resolved. [Trouble 363] is resolved by [Elmo]. [Trouble 396] cannot be resolved. [Trouble 429] is resolved by [Charlie]. [Trouble 462] cannot be resolved. [Trouble 495] is resolved by [Elmo]. \"]},\"183\":{\"h\":\"相关的设计模式\",\"t\":[\"Composite 模式\",\"Command 模式\"]},\"184\":{\"c\":[\"设计模式\"]},\"185\":{\"c\":[\"设计模式\",\"TypeScript\",\"推卸责任\"]},\"186\":{\"h\":\"Composite 模式\"},\"187\":{\"h\":\"使用此设计模式的理由\",\"t\":[\"Composite 模式允许你将对象组合成递归结构来表示“部分-整体”的层次结构。使用 Composite 模式，用户可以统一地对待单个对象和组合对象。例如，在文件系统中，目录和文件都可以被视为条目（Entry），目录可以包含其他目录和文件，而文件则是叶子节点。\"]},\"188\":{\"h\":\"示例代码\"},\"189\":{\"h\":\"目录类 (directory.ts)\",\"t\":[\"import { Entry } from './entry'; export class Directory extends Entry { private directory: Entry[] = []; constructor(private name: string) { super(); } getName(): string { return this.name; } getSize(): number { return this.directory.reduce((acc, entry) => acc + entry.getSize(), 0); } add(entry: Entry): Entry { this.directory.push(entry); return this; } protected printListWithPrefix(prefix: string): void { console.log(`${prefix}/${this}`); this.directory.forEach(entry => (entry as Directory).printListWithPrefix(`${prefix}/${this.name}`)); } } \"]},\"190\":{\"h\":\"抽象条目类 (entry.ts)\",\"t\":[\"export abstract class Entry { abstract getName(): string; abstract getSize(): number; add(entry: Entry): Entry { throw new Error(\\\"FileTreatmentException\\\"); } printList(): void { this.printListWithPrefix(\\\"\\\"); } protected abstract printListWithPrefix(prefix: string): void; toString(): string { return `${this.getName()} (${this.getSize()})`; } } \"]},\"191\":{\"h\":\"文件类 (file.ts)\",\"t\":[\"import { Entry } from './entry'; export class File extends Entry { constructor(private name: string, private size: number) { super(); } getName(): string { return this.name; } getSize(): number { return this.size; } protected printListWithPrefix(prefix: string): void { console.log(`${prefix}/${this}`); } } \"]},\"192\":{\"h\":\"主程序 (main.ts)\",\"t\":[\"import { Entry } from './entry'; import { Directory } from './directory'; import { File } from './file'; console.log('Making root entries...'); let rootdir: Directory = new Directory('root'); let bindir: Directory = new Directory('bin'); let tmpdir: Directory = new Directory('tmp'); let usrdir: Directory = new Directory('usr'); rootdir.add(bindir); rootdir.add(tmpdir); rootdir.add(usrdir); bindir.add(new File('vi', 10000)); bindir.add(new File('latex', 20000)); rootdir.printList(); console.log(\\\"Making user entries...\\\"); let yuki: Directory = new Directory('yuki'); let hanako: Directory = new Directory('hanako'); let tomura: Directory = new Directory('tomura'); usrdir.add(yuki); usrdir.add(hanako); usrdir.add(tomura); yuki.add(new File('diary.html', 100)); yuki.add(new File('Composite.java', 200)); hanako.add(new File('memo.tex', 300)); tomura.add(new File('game.doc', 400)); tomura.add(new File('junk.mail', 500)); rootdir.printList(); \"]},\"193\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\composite\\\\main.ts\\\" Making root entries... /root (30000) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (0) Making user entries... /root (31500) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (1500) /root/usr/yuki (300) /root/usr/yuki/diary.html (100) /root/usr/yuki/Composite.java (200) /root/usr/hanako (300) /root/usr/hanako/memo.tex (300) /root/usr/tomura (900) /root/usr/tomura/game.doc (400) /root/usr/tomura/junk.mail (500) \"]},\"194\":{\"h\":\"相关的设计模式\",\"t\":[\"Command 模式\",\"Visitor 模式\",\"Decorator 模式\"]},\"195\":{\"c\":[\"设计模式\"]},\"196\":{\"c\":[\"设计模式\",\"TypeScript\",\"容器与内容的一致性\"]},\"197\":{\"h\":\"Decorator 模式\",\"t\":[\"在这个示例中，我们使用装饰器模式来动态地给对象添加职责。装饰器模式允许我们通过将对象放入包含行为的特殊封装对象中来扩展对象的功能，而无需修改原始类的代码。\"]},\"198\":{\"h\":\"为什么使用装饰器模式？\",\"t\":[\"职责扩展：装饰器模式允许我们在不修改现有代码的情况下扩展对象的功能。\",\"灵活性：可以根据需要动态地添加或删除职责。\",\"遵循开闭原则：通过使用装饰器模式，我们可以在不修改现有类的情况下添加新功能，从而遵循开闭原则。\"]},\"199\":{\"h\":\"代码示例\",\"t\":[\"// border.ts import { Display } from \\\"./display\\\"; export abstract class Border extends Display { protected display: Display; constructor(display: Display) { super(); this.display = display; } } // display.ts export abstract class Display { abstract getColumns(): number; abstract getRows(): number; abstract getRowText(row: number): string; show(): void { for (let i = 0; i < this.getRows(); i++) { console.log(this.getRowText(i)); } } } // fullBorder.ts import { Border } from \\\"./border\\\"; export class FullBorder extends Border { constructor(display) { super(display); } getColumns() { return 1 + this.display.getColumns() + 1; } getRows() { return 1 + this.display.getRows() + 1; } getRowText(row) { if (row === 0) { return \\\"+\\\" + this.makeLine(\\\"-\\\", this.display.getColumns()) + \\\"+\\\"; } else if (row === this.display.getRows() + 1) { return \\\"+\\\" + this.makeLine(\\\"-\\\", this.display.getColumns()) + \\\"+\\\"; } else { return \\\"|\\\" + this.display.getRowText(row - 1) + \\\"|\\\"; } } private makeLine(ch, count) { let buf = \\\"\\\"; for (let i = 0; i < count; i++) { buf += ch; } return buf; } } // main.ts import { Display } from \\\"./display\\\"; import { StringDisplay } from \\\"./stringDisplay\\\"; import { SideBorder } from \\\"./sideBorder\\\"; import { FullBorder } from \\\"./fullBorder\\\"; let b1: Display = new StringDisplay(\\\"Hello, world.\\\"); let b2: Display = new SideBorder(b1, \\\"#\\\"); let b3: Display = new FullBorder(b2); b1.show(); b2.show(); b3.show(); let b4: Display = new SideBorder( new FullBorder( new FullBorder( new SideBorder( new FullBorder( new StringDisplay(\\\"Hello\\\") ), \\\"*\\\" ) ) ), \\\"/\\\" ); b4.show(); // sideBorder.ts import { Border } from \\\"./border\\\"; import { Display } from \\\"./display\\\"; export class SideBorder extends Border { private borderChar: string; constructor(display: Display, ch: string) { super(display); this.borderChar = ch; } getColumns(): number { return 1 + this.display.getColumns() + 1; } getRows(): number { return this.display.getRows(); } getRowText(row: number): string { return this.borderChar + this.display.getRowText(row) + this.borderChar; } } // stringDisplay.ts import { Display } from './display'; export class StringDisplay extends Display { private string: string; constructor(string: string) { super(); this.string = string; } getColumns(): number { return this.string.length; } getRows(): number { return 1; } getRowText(row: number): string { if (row === 0) { return this.string; } else { return ''; } } } \"]},\"200\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\decorator\\\\main.ts\\\" Hello, world. #Hello, world.# +---------------+ |#Hello, world.#| +---------------+ /+-----------+/ /|+---------+|/ /||*+-----+*||/ /||*|Hello|*||/ /||*+-----+*||/ /|+---------+|/ /+-----------+/ \"]},\"201\":{\"h\":\"拓展思路的要点\"},\"202\":{\"h\":\"API 的透明性\",\"t\":[\"在 Decorator 模式中，装饰边框与被装饰物具有一致性。具体而言，在示例程序中，表示装饰边框的 Border 类是表示被装饰物的 Display 类的子类，这就体现了它们之间的一致性。也就是说， Border 类（以及它的子类）与表示被装饰物的 Display 类具有相同的接口（API）。这样，即使被装饰物被边框装饰起来了，接口（API）也不会被隐藏起来。其他类依然可以调用 getColumns、getRows、getRowText 以及 show 方法。这就是接口（API）的“透明性”。在示例程序中，实例 b4 被装饰了多次，但是接口（API）却没有发生任何变化。得益于接口（API）的透明性，模式中也形成了类似于 Composite 模式中的递归结构。也就是说，装饰边框里面的“被装饰物”实际上又是别的物体的“装饰边框”。就像是剥洋葱时以为洋葱心要出来了，结果却发现还是皮。不过， Decorator 模式虽然与 Composite 模式一样，都具有递归结构，但是它们的使用目的不同。Decorator 模式的主要目的是通过添加装饰物来增加对象的功能。\"]},\"203\":{\"h\":\"在不改变被装饰物的前提下增加功能\",\"t\":[\"在 Decorator 模式中，装饰边框与被装饰物具有相同的接口（API）。虽然接口是相同的，但是越装饰，功能则越多。例如，用 SideBorder 装饰 Display 后，就可以在字符串的左右两侧加上装饰字符。如果再用 FullBorder 装饰，那么就可以在字符串的四周加上边框。此时，我们完全不需要对被装饰的类做任何修改。这样，我们就实现了不修改被装饰的类即可增加功能。Decorator 模式使用了委托。对“装饰边框”提出的要求（调用装饰边框的方法）会被转交（委托）给“被装饰物”去处理。以示例程序来说，就是 SideBorder 类的 getColumns 方法调用了 display.getColumns。此外，getRows 方法也调用了 display.getRows。\"]},\"204\":{\"h\":\"可以动态地增加功能\",\"t\":[\"Decorator 模式中用到了委托，它使类之间形成了弱关联关系。因此，不用改变框架代码，就可以生成一个与其他对象具有不同关系的新对象。\"]},\"205\":{\"h\":\"只需要一些装饰物即可添加许多功能\",\"t\":[\"使用 Decorator 模式可以为程序添加许多功能。只要准备一些装饰边框（ConcreteDecorator 角色），即使这些装饰边框都只具有非常简单的功能，也可以将它们自由组合成为新的对象。这就像我们可以自由选择香草味冰激凌、巧克力冰激凌、草莓冰激凌、猕猴桃冰激凌等各种口味的冰激凌一样。如果冰激凌店要为顾客准备所有的冰激凌成品那真是太麻烦了。因此，冰激凌店只会准备各种香料，当顾客下单后只需要在冰激凌上加上各种香料就可以了。不管是香草味，还是咖啡朗姆和开心果的混合口味，亦或是香草味、草莓味和猕猴桃三重口味，顾客想吃什么口味都可以。Decorator 模式就是可以应对这种多功能对象的需求的一种模式。\"]},\"206\":{\"h\":\"导致增加许多很小的类\",\"t\":[\"Decorator 模式的一个缺点是会导致程序中增加许多功能类似的很小的类。\"]},\"207\":{\"h\":\"相关的设计模式\",\"t\":[\"Adapter 模式\",\"Strategy 模式\"]},\"208\":{\"h\":\"继承和委托中的一致性\"},\"209\":{\"h\":\"父类和子类的一致性\",\"t\":[\"在面向对象编程中，父类和子类之间的一致性是指子类应当继承父类的行为和属性，并且可以扩展或重写这些行为和属性。子类应当能够替代父类的实例而不影响程序的正确性，这就是所谓的里氏替换原则（Liskov Substitution Principle）。\"]},\"210\":{\"h\":\"自己和被委托对象的一致性\",\"t\":[\"在委托模式中，一致性是指委托对象应当具有与委托者相同的接口或行为。委托者将某些任务委托给委托对象来执行，而委托对象应当能够无缝地完成这些任务，就像委托者自己完成一样。这种一致性确保了委托模式的灵活性和可维护性。\"]},\"211\":{\"c\":[\"设计模式\"]},\"212\":{\"c\":[\"设计模式\",\"TypeScript\",\"容器与内容的一致性\"]},\"213\":{\"h\":\"facade 模式\",\"t\":[\"当某个程序员得意地说出\\\"啊，在调用那个类之前需要先调用这个类。在调用那个方法之前需要先在这个类中注册一下\\\"的时候，就意味着我们需要引人Facade了。\",\"对于那些能够明确地用语言描述出来的知识，我们不应该将它们隐藏在自己脑袋中，而是应该用代码将它们表现出来。\",\"—————《图解设计模式》 ## 为什么使用外观模式？ \",\"简化接口：外观模式为复杂的子系统提供了一个简单的接口，使得客户端代码不需要了解子系统的内部细节。\",\"松散耦合：通过引入外观类，客户端代码与子系统之间的耦合度降低，增强了代码的可维护性和可扩展性。\",\"更好的分层：外观模式有助于分层设计，使得每一层只关注自己的职责，层与层之间通过外观类进行交互。\"]},\"214\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们使用了外观模式（Facade Pattern）来简化与复杂子系统的交互。外观模式通过提供一个统一的接口来隐藏子系统的复杂性，使得客户端代码可以更容易地使用子系统的功能。\"]},\"215\":{\"h\":\"代码实现\",\"t\":[\"// dataBase.ts export class DataBase { static mailData: { [key: string]: string } = { 'hyuki@hyuki.com': 'Hiroshi Yuki', 'hanako@hyuki.com': 'Hanako Sato', 'tomura@hyuki.com': 'Tomura', 'mamoru@hyuki.com': 'Mamoru Takahashi', }; private constructor() {} static getProperties(databaseName: string) { return DataBase.mailData; } } // htmlWriter.ts export class HtmlWriter { constructor(private writer: string = '') { } title(title: string): void { this.writer += `<html><head><title>${title}</title></head><body>\\\\n<h1>${title}</h1>\\\\n`; } paragraph(message: string): void { this.writer += `<p>${message}</p>\\\\n`; } link(href: string, caption: string): void { this.writer += `<a href=\\\"${href}\\\">${caption}</a>\\\\n`; } mailto(mailaddr: string, username: string): void { this.link(`mailto:${mailaddr}`, username); } close(): void { this.writer += '</body></html>\\\\n'; } getHtml(): string { return this.writer; } } // main.ts import { PageMaker } from \\\"./pageMaker\\\"; PageMaker.makeWelcomePage('hyuki@hyuki.com', \\\"welcome.html\\\"); // pageMaker.ts import { DataBase } from './dataBase'; import { HtmlWriter } from './htmlWriter'; export class PageMaker { private constructor() {} static makeWelcomePage(mailAddress: string, fileName: string): void { console.log(`Making ${fileName} for ${mailAddress}`); let mailprop = DataBase.getProperties('maildata'); let username = mailprop[mailAddress]; let writer = new HtmlWriter(fileName); writer.title('Welcome to ' + username + \\\"'s page!\\\"); writer.paragraph(username + 'のページへようこそ。'); writer.paragraph('メール待っていますね。'); writer.mailto(mailAddress, username); writer.close(); console.log(writer.getHtml()); } } \"]},\"216\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\facade\\\\main.ts\\\" Making welcome.html for hyuki@hyuki.com welcome.html<html><head><title>Welcome to Hiroshi Yuki's page!</title></head><body> <h1>Welcome to Hiroshi Yuki's page!</h1> <p>Hiroshi Yukiのページへようこそ。</p> <p>メール待っていますね。</p> <a href=\\\"mailto:hyuki@hyuki.com\\\">Hiroshi Yuki</a> </body></html> \"]},\"217\":{\"h\":\"相关设计模式\",\"t\":[\"Abstract Factory 模式\",\"Singleton 模式\",\"Mediator 模式\"]},\"218\":{\"c\":[\"设计模式\"]},\"219\":{\"c\":[\"设计模式\",\"TypeScript\",\"简单化\"]},\"220\":{\"h\":\"Factory Method 模式\",\"t\":[\"在 Factory Method 模式中，我们定义一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。Factory Method 使一个类的实例化延迟到其子类。\"]},\"221\":{\"h\":\"为什么要使用 Factory Method\",\"t\":[\"使用 Factory Method 模式有以下几个好处：\",\"解耦创建和使用：客户端代码不需要知道具体的产品类，只需要依赖抽象产品接口，降低了耦合性。\",\"扩展性强：增加新的产品类时，只需添加新的子类工厂，不需要修改现有代码，符合开闭原则。\",\"灵活性高：可以通过子类来定制产品的创建过程，满足不同的需求。\",\"通过使用 Factory Method 模式，我们可以更灵活地管理对象的创建过程，提高代码的可维护性和可扩展性。\"]},\"222\":{\"h\":\"示例代码\",\"t\":[\"@enduml\",\"// product.ts export interface Product { use(): void; } // factory.ts import { Product } from './product'; export abstract class Factory { create(owner: string): Product { const p = this.createProduct(owner); this.registerProduct(p); return p; } protected abstract createProduct(owner: string): Product; protected abstract registerProduct(product: Product): void; } // idCard.ts import { Product } from './product'; export class IDCard implements Product { private owner: string; constructor(owner: string) { this.owner = owner; } use(): void { console.log(`${this.owner}使用了ID卡`); } getOwner(): string { return this.owner; } } // idCardFactory.ts import { IDCard } from \\\"./idCard\\\"; import { Factory } from \\\"./factory\\\"; export class IDCardFactory extends Factory { private owners: string[] = []; createProduct(owner: string): IDCard { return new IDCard(owner); } registerProduct(product: IDCard): void { this.owners.push(product.getOwner()); } getOwners(): string[] { return this.owners; } } // main.ts import { Factory } from \\\"./factory\\\"; import { IDCardFactory } from \\\"./idCardFactory\\\"; const factory: Factory = new IDCardFactory(); const card1 = factory.create(\\\"Alice\\\"); const card2 = factory.create(\\\"Bob\\\"); const card3 = factory.create(\\\"Charlie\\\"); card1.use(); card2.use(); card3.use(); \"]},\"223\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\factory_method\\\\main.ts\\\" Alice使用了ID卡 Bob使用了ID卡 Charlie使用了ID卡 \",\"Template Method\",\"Singleton\",\"Composite\",\"Iterator\"]},\"224\":{\"c\":[\"设计模式\"]},\"225\":{\"c\":[\"设计模式\",\"typescript\",\"工厂方法\",\"交给子类\"]},\"226\":{\"h\":\"设计模式\",\"t\":[\"面向对象三大特性：封装、继承、多态。 设计模式需遵循面向对象的设计原则，由于笔者不太喜欢java, 并嫌弃cpp中没有interface, 遂使用ts作为实现语言(我才不用rust呢 😃 )\",\"结城浩. 图解设计模式. 杨文轩译. 北京: 人民邮电出版社, 2017.\"]},\"227\":{\"c\":[\"设计模式\"]},\"228\":{\"c\":[\"设计模式\",\"typescript\"]},\"229\":{\"h\":\"迭代器模式\"},\"230\":{\"h\":\"为什么要使用迭代器模式\",\"t\":[\"迭代器模式提供了一种方法来顺序访问集合中的元素，而无需暴露其底层表示。使用迭代器模式有以下几个优点：\",\"简化代码：迭代器模式将遍历逻辑封装在迭代器对象中，使得客户端代码更加简洁和易读。\",\"解耦集合和遍历：集合对象和遍历算法分离，增加了代码的灵活性和可维护性。可以在不修改集合对象的情况下，改变遍历算法。\",\"统一接口：通过实现统一的迭代器接口，不同类型的集合可以使用相同的遍历方式，增强了代码的可扩展性。\",\"支持多种遍历方式：可以根据需要实现不同的迭代器，以支持多种遍历方式，如正向遍历、反向遍历、过滤遍历等。\",\"通过使用迭代器模式，我们可以更好地管理和操作集合数据，提高代码的可读性和可维护性。\"]},\"231\":{\"h\":\"TypeScript 实现迭代器模式\",\"t\":[\"在本节中，我们将展示如何使用 TypeScript 实现迭代器模式。迭代器模式是一种行为设计模式，它允许顺序访问集合中的元素，而无需暴露其底层表示。\"]},\"232\":{\"h\":\"代码示例\",\"t\":[\"以下是实现迭代器模式的 TypeScript 代码示例：\",\"// aggregate.ts import { Iterator } from './iterator'; export interface Aggregate { iterator(): Iterator; } // book.ts export class Book { private name: string; constructor(name: string) { this.name = name; } getName(): string { return this.name; } } // bookShelf.ts import { Book } from './book'; import { Iterator } from './iterator'; import { BookShelfIterator } from './bookShelfIterator'; import { Aggregate } from './aggregate'; export class BookShelf implements Aggregate { private books: Book[]; private last: number = 0; constructor() { this.books = []; } getBookAt(index: number): Book { return this.books[index]; } appendBook(book: Book): void { this.books[this.last] = book; this.last++; } getLength(): number { return this.last; } iterator(): Iterator { return new BookShelfIterator(this); } } // bookShelfIterator.ts import { BookShelf } from './bookShelf'; import { Iterator } from './iterator'; export class BookShelfIterator implements Iterator { private bookShelf: BookShelf; private index: number; constructor(bookShelf: BookShelf) { this.bookShelf = bookShelf; this.index = 0; } hasNext(): boolean { return this.index < this.bookShelf.getLength(); } next(): any { const book = this.bookShelf.getBookAt(this.index); this.index++; return book; } } // iterator.ts export interface Iterator { hasNext(): boolean; next(): any; } // main.ts import { BookShelf } from \\\"../bookShelf\\\"; import { Book } from \\\"../book\\\"; const bookShelf = new BookShelf(); bookShelf.appendBook(new Book(\\\"Around the World in 80 Days\\\")); bookShelf.appendBook(new Book(\\\"Bible\\\")); bookShelf.appendBook(new Book(\\\"Cinderella\\\")); bookShelf.appendBook(new Book(\\\"Daddy-Long-Legs\\\")); const it = bookShelf.iterator(); while (it.hasNext()) { const book = it.next(); console.log(book.getName()); } \"]},\"233\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\iterator\\\\main.ts\\\" Around the World in 80 Days Bible Cinderella Daddy-Long-Legs \",\"在上面的代码中，我们定义了几个类和接口来实现迭代器模式：\",\"Iterator 接口定义了 hasNext 和 next 方法。\",\"Aggregate 接口定义了 iterator 方法。\",\"Book 类表示一个书籍对象。\",\"BookShelf 类表示一个书架，它实现了 Aggregate 接口。\",\"BookShelfIterator 类实现了 Iterator 接口，用于遍历 BookShelf 中的书籍。\",\"通过这些类和接口，我们可以轻松地遍历 BookShelf 中的书籍，而无需了解其内部实现细节。\"]},\"234\":{\"h\":\"多个迭代器\",\"t\":[\"在某些情况下，我们可能需要为同一个集合编写多个具体迭代器（ConcreteIterator）。例如，我们可以为 BookShelf 编写一个反向迭代器，以便从后向前遍历书籍。\"]},\"235\":{\"h\":\"相关的设计模式\",\"t\":[\"Visitor 模式\",\"Composite 模式\",\"Factory Method 模式\"]},\"236\":{\"c\":[\"设计模式\"]},\"237\":{\"c\":[\"设计模式\",\"typescript\"]},\"238\":{\"h\":\"Mediator 模式\"},\"239\":{\"h\":\"为什么使用此类\",\"t\":[\"请大家想象一下一个乱糟糟的开发小组的工作状态。小组中的 10 个成员虽然一起协同工作，但是意见难以统一，总是互相指挥，导致工作进度始终滞后。不仅如此，他们还十分在意编码细节，经常为此争执不下。\",\"这时，我们就需要一个中立的仲裁者站出来说：“各位，请大家将情况报告给我，我来负责仲裁。我会从团队整体出发进行考虑，然后下达指示，但我不会评价大家的工作细节。”这样，当出现争执时大家就会找仲裁者进行商量，仲裁者会负责统一大家的意见。\",\"最后，整个团队的交流过程就变为了组员向仲裁者报告，仲裁者向组员下达指示。组员之间不再相互询问和相互指示。\"]},\"240\":{\"h\":\"示例代码\",\"t\":[\"源地址\",\"/** * EN: Real World Example for the Mediator design pattern * * Need: To have a messaging application to notify groups of people. Users * should not know about each other. * * Solution: Create a mediator to manage subscriptions and messages */ /** * EN: Extending the Mediator interface to have a payload to include messages */ interface Mediator { notify(sender: object, event: string, payload?: string): void; } /** * EN: The user plays the role of the independent component. It has an * instance of the mediator. */ class User { constructor(public name: string, private mediator: Mediator) { this.mediator.notify(this, 'subscribe'); } receiveMessage(message: string) { console.log(`Message received by ${this.name}: ${message}`); } publishMessage(message: string) { this.mediator.notify(this, 'publish', message); } } /** * EN: The app is the concrete Mediator and implements all the events that * collaborators can notify: subscribe and publish */ class ChatAppMediator implements Mediator { private users: User[] = []; public notify(sender: object, event: string, payload?: string): void { if (event === 'subscribe') { const user = sender as User; console.log(`Subscribing ${user.name}`); this.users.push(user); } if (event === 'publish') { console.log(`Publishing message \\\"${payload}\\\" to the group`); const usersExcludingSender = this.users.filter(u => u !== sender); for (const user of usersExcludingSender) { user.receiveMessage(payload); } } } } /** * EN: The client code. Creating a user automatically subscribes them to the * group. */ const chatAppMediator = new ChatAppMediator(); const user1 = new User('Lightning', chatAppMediator); const user2 = new User('Doc', chatAppMediator); const user3 = new User('Mater', chatAppMediator); user1.publishMessage('Catchaw'); user2.publishMessage('Ey kid'); user3.publishMessage('Tomato'); \"]},\"241\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\mediator\\\\main.ts\\\" Subscribing Lightning Subscribing Doc Subscribing Mater Publishing message \\\"Catchaw\\\" to the group Message received by Doc: Catchaw Message received by Mater: Catchaw Publishing message \\\"Ey kid\\\" to the group Message received by Lightning: Ey kid Message received by Mater: Ey kid Publishing message \\\"Tomato\\\" to the group Message received by Lightning: Tomato Message received by Doc: Tomato \"]},\"242\":{\"h\":\"拓展思路的要点\"},\"243\":{\"h\":\"当发生分散灾难时\",\"t\":[\"示例程序中的 ChatAppMediator 类的 notify 方法稍微有些复杂。如果发生需求变更，该方法中很容易发生 Bug。不过这并不是什么问题。因为即使 notify 方法中发生了 Bug，由于其他地方并没有控制消息发布和订阅的逻辑处理，因此只要调试该方法就能很容易地找出 Bug 的原因。请试想一下，如果这段逻辑分散在 User 类中，那么无论是编写代码还是调试代码和修改代码，都会非常困难。通常情况下，面向对象编程可以帮助我们分散处理，避免处理过于集中，也就是说可以“分而治之”。但是在本章中的示例程序中，把处理分散在各个类中是不明智的。如果只是将应当分散的处理分散在各个类中，但是没有将应当集中的处理集中起来，那么这些分散的类最终只会导致灾难。\",\"在这个示例程序中，ChatAppMediator 类作为中介者（Mediator），负责管理和协调各个用户（User）的交互。notify 方法集中处理了所有消息的发布和订阅逻辑，这样可以确保逻辑的一致性和可维护性。如果将这些逻辑分散到各个用户类中，不仅会增加代码的复杂性，还会使得调试和维护变得更加困难。因此，将这些逻辑集中在中介者类中是更明智的选择。\"]},\"244\":{\"h\":\"通信线路的增加\",\"t\":[\"假设现在有 A 和 B 这 2 个实例，它们之间互相通信（相互调用方法），那么通信线路有两条，即 A-B 和 A-B。如果是有 A、B 和 C 这 3 个实例，那么就会有 6 条通信线路，即 A-B、A-C、B-C、B-A 和 C-A。如果有 4 个实例，会有 12 条通信线路；5 个实例就会有 20 条通信线路，而 6 个实例则会有 30 条通信线路。如果存在很多这样的互相通信的实例，那么程序结构会变得非常复杂。可能会有读者认为，如果实例很少就不需要 Mediator 模式了。但是需要考虑到的是，即使最初实例很少，很可能随着需求变更实例数量会慢慢变多，迟早会暴露出问题。\"]},\"245\":{\"h\":\"哪些角色可以复用\",\"t\":[\"ConcreteColleague 角色可以复用，但 ConcreteMediator 角色很难复用。例如，假设我们现在需要制作另外一个对话框。这时，我们可将扮演 ConcreteColleague 角色的 colleagueButton 类、 colleagueTextField 类和 colleagueCheckbox 类用于新的对话框中。这是因为在 ConcreteColleague 角色中并没有任何依赖于特定对话框的代码。在示例程序中，依赖于特定应用程序的部分都被封装在扮演 ConcreteMediator 角色的 LoginFrame 类中，依赖于特定应用程序就意味着难以复用。因此， LoginFrame 类很难在其他对话框中被复用。\"]},\"246\":{\"h\":\"相关的设计模式\",\"t\":[\"Facade 模式\",\"Observer 模式\"]},\"247\":{\"c\":[\"设计模式\"]},\"248\":{\"c\":[\"设计模式\",\"TypeScript\",\"简单化\"]},\"249\":{\"h\":\"Observer 模式\"},\"250\":{\"h\":\"为什么使用观察者模式\",\"t\":[\"观察者模式非常适合用于需要自动更新的场景。例如，在图形用户界面（GUI）应用程序中，当数据模型发生变化时，所有显示该数据的视图都需要自动更新。通过使用观察者模式，我们可以将这些视图注册为观察者，当数据模型发生变化时，它们会自动收到通知并更新显示。\"]},\"251\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们展示了如何使用观察者模式来管理状态变化。观察者模式定义了一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。以下是 TypeScript 实现的代码示例：\",\"// DigitObserver.ts import { NumberGenerator } from './numberGenerator'; import { Observer } from './observer'; export class DigitObserver implements Observer { update(number: NumberGenerator): void { console.log(`DigitObserver: ${number.getNumber()}`); } } // graphObserver.ts import { Observer } from './observer'; import { NumberGenerator } from './numberGenerator'; export class GraphObserver implements Observer { update(generator: NumberGenerator): void { const count = generator.getNumber(); let graph = ''; for (let i = 0; i < count; i++) { graph += '*'; } console.log(`GraphObserver: \\\\n${graph}\\\\n ${generator.getNumber()}\\\\n${graph} `); } } // main.ts import { NumberGenerator } from './numberGenerator'; import { Observer } from './observer'; import { RandomNumberGenerator } from './randomNumberGenerator'; import { DigitObserver } from './DigitObserver'; import { GraphObserver } from './graphObserver'; const generator: NumberGenerator = new RandomNumberGenerator(); const observer1 = new DigitObserver(); const observer2 = new GraphObserver(); generator.addObserver(observer1); generator.addObserver(observer2); generator.execute(); // numberGenerator.ts import { Observer } from './observer'; export abstract class NumberGenerator { private observers: Observer[] = []; public addObserver(observer: Observer): void { this.observers.push(observer); } public deleteObserver(observer: Observer): void { this.observers = this.observers.filter((o) => o !== observer); } public notifyObservers(): void { this.observers.forEach((o) => o.update(this)); } public abstract getNumber(): number; public abstract execute(): void; } // observer.ts import {NumberGenerator} from './numberGenerator'; export interface Observer { update(generator: NumberGenerator): void; } // randomNumberGenerator.ts import {NumberGenerator} from './numberGenerator'; export class RandomNumberGenerator extends NumberGenerator { private number: number; constructor() { super(); this.number = 0; } getNumber(): number { return this.number; } execute(): void { for (let i = 0; i < 20; i++) { this.number = Math.floor(Math.random() * 50); this.notifyObservers(); } } } \"]},\"252\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\observer\\\\main.ts\\\" DigitObserver: 13 GraphObserver: ************* 13 ************* DigitObserver: 43 GraphObserver: ******************************************* 43 ******************************************* DigitObserver: 46 GraphObserver: ********************************************** 46 ********************************************** DigitObserver: 18 GraphObserver: ****************** 18 ****************** DigitObserver: 20 GraphObserver: ******************** 20 ******************** DigitObserver: 49 GraphObserver: ************************************************* 49 ************************************************* DigitObserver: 25 GraphObserver: ************************* 25 ************************* DigitObserver: 26 GraphObserver: ************************** 26 ************************** DigitObserver: 37 GraphObserver: ************************************* 37 ************************************* DigitObserver: 2 GraphObserver: ** 2 ** DigitObserver: 10 GraphObserver: ********** 10 ********** DigitObserver: 0 GraphObserver: 0 DigitObserver: 11 GraphObserver: *********** 11 *********** DigitObserver: 13 GraphObserver: ************* 13 ************* DigitObserver: 16 GraphObserver: **************** 16 **************** DigitObserver: 28 GraphObserver: **************************** 28 **************************** DigitObserver: 22 GraphObserver: ********************** 22 ********************** DigitObserver: 30 GraphObserver: ****************************** 30 ****************************** DigitObserver: 44 GraphObserver: ******************************************** 44 ******************************************** DigitObserver: 3 GraphObserver: *** 3 *** \"]},\"253\":{\"h\":\"拓展思路的要点\"},\"254\":{\"h\":\"这里也出现了可替换性\",\"t\":[\"在设计模式中，可替换性是指一个对象可以被另一个具有相同接口的对象替换，而不影响系统的功能。在观察者模式中，观察者（Observer）和被观察者（Subject）之间的关系是松耦合的，这意味着我们可以轻松地替换观察者或被观察者，而不会影响系统的其他部分。\"]},\"255\":{\"h\":\"Observer 的顺序\",\"t\":[\"Subject 角色（被观察对象）中注册有多个 Observer 角色。在示例程序的 notifyObservers 方法中，先注册的 Observer 的 update 方法会先被调用。通常，在设计 ConcreteObserver 角色的类时，需要注意这些 Observer 的 update 方法的调用顺序，不能因为方法的调用顺序发生改变而产生问题。例如，在示例程序中，绝不能因为先调用 DigitObserver 的 update 方法后调用 GraphObserver 的 update 方法而导致应用程序不能正常工作。当然，通常，只要保持各个类的独立性，就不会发生上面这种类的依赖关系混乱的问题。不过，我们还需要注意下面将要提到的情况。\"]},\"256\":{\"h\":\"当 Observer 的行为会对被观察对象产生影响时\",\"t\":[\"当观察者的行为会对被观察对象产生影响时，我们需要特别小心，以避免循环依赖和无限递归。例如，一个观察者在接收到通知后修改了被观察对象的状态，这可能会导致被观察对象再次通知所有观察者，从而引发无限循环。为了解决这个问题，我们可以引入一个标志位来跟踪通知状态，或者使用更复杂的事件处理机制。\"]},\"257\":{\"h\":\"传递更新信息的方式\",\"t\":[\"在观察者模式中，传递更新信息的方式有多种选择。最简单的方法是直接调用观察者的更新方法，并将被观察对象自身作为参数传递。另一种方法是传递具体的更新信息，例如事件对象或数据包。这种方法可以减少观察者对被观察对象的依赖，从而提高系统的灵活性和可维护性。\"]},\"258\":{\"h\":\"从观察变为通知\",\"t\":[\"在某些情况下，我们可能需要从观察模式转变为通知模式。例如，当系统中有大量的观察者时，逐个通知每个观察者可能会导致性能问题。此时，我们可以考虑使用事件总线或消息队列来集中处理通知，从而提高系统的性能和可扩展性。\"]},\"259\":{\"h\":\"MVC (Model/View/Controller)\",\"t\":[\"观察者模式在 MVC 架构中得到了广泛应用。模型（Model）作为被观察对象，视图（View）作为观察者，当模型的状态发生变化时，视图会自动更新。控制器（Controller）负责协调模型和视图之间的交互。通过使用观察者模式，MVC 架构实现了视图和模型的松耦合，从而提高了系统的可维护性和可扩展性。\"]},\"260\":{\"h\":\"相关的设计模式\",\"t\":[\"Mediator 模式\"]},\"261\":{\"c\":[\"设计模式\"]},\"262\":{\"c\":[\"设计模式\",\"TypeScript\",\"管理状态\"]},\"263\":{\"h\":\"Prototype 模式\"},\"264\":{\"h\":\"为什么要使用 Prototype 模式\",\"t\":[\"Prototype 模式是一种创建型设计模式，它允许你复制现有对象而无需使代码依赖它们所属的类。使用 Prototype 模式可以：\",\"避免重复初始化对象的复杂过程。\",\"提高性能，特别是在创建对象代价较高时。\",\"简化代码，使得对象的创建更加灵活。\",\"对象种类繁多，无法将它们整合到一个类中\",\"难以根据类生成实例\",\"解耦框架与生成的实例\"]},\"265\":{\"h\":\"示例代码\",\"t\":[\"// main.ts import { Manager } from './manager'; import { UnderlinePen } from './underlinePen'; import { MessageBox } from './messageBox'; let manager = new Manager(); let upen = new UnderlinePen('~'); let mbox = new MessageBox('*'); let sbox = new MessageBox('/'); manager.register('strong message', upen); manager.register('warning box', mbox); manager.register('slash box', sbox); let p1 = manager.create('strong message'); p1.use('Hello, world.'); let p2 = manager.create('warning box'); p2.use('Hello, world.'); let p3 = manager.create('slash box'); p3.use('Hello, world.'); // manager.ts export class Manager { private showcase: { [key: string]: any } = {}; register(name: string, proto: any) { this.showcase[name] = proto; } create(name: string): any { const p = this.showcase[name]; return p.createClone(); } } // messageBox.ts import { Product } from \\\"./product\\\"; export class MessageBox implements Product { private decochar: string; constructor(decochar: string) { this.decochar = decochar; } use(s: string): void { const length = s.length; console.log(this.decochar.repeat(length + 4)); console.log(`${this.decochar} ${s} ${this.decochar}`); console.log(this.decochar.repeat(length + 4)); } createClone(): Product { let p: Product = null; try { p = <Product>Object.create(this); } catch (e) { console.error(e); } return p; } } // product.ts export interface Product { use(s:String): void; createClone(): Product; } // underlinePen.ts import { Product } from './product'; export class UnderlinePen implements Product { private ulchar: string; constructor(ulchar: string) { this.ulchar = ulchar; } use(s: string): void { const length = s.length; console.log(`\\\"${s}\\\"`); console.log(' '); console.log(` ${this.ulchar.repeat(length)}`); console.log(' '); } createClone(): Product { let p: Product = null; try { p = Object.create(this); } catch (e) { console.log(e); } return p; } } \"]},\"266\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\prototype\\\\main.ts\\\" \\\"Hello, world.\\\" ~~~~~~~~~~~~~ ***************** * Hello, world. * ***************** ///////////////// / Hello, world. / ///////////////// \"]},\"267\":{\"h\":\"相关设计模式\",\"t\":[\"Flyweight 模式\",\"Memento 模式\",\"Composite 模式\",\"Decorator 模式\",\"Command 模式\"]},\"268\":{\"c\":[\"设计模式\"]},\"269\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"270\":{\"h\":\"Singleton 模式\"},\"271\":{\"h\":\"为什么要使用 Singleton 模式\",\"t\":[\"Singleton 模式确保一个类只有一个实例，并提供一个全局访问点。它常用于需要控制资源访问的场景，例如数据库连接、日志记录器等。通过 Singleton 模式，可以避免创建多个实例带来的资源浪费和不一致性问题。\"]},\"272\":{\"h\":\"总结:\",\"t\":[\"想确保任何情况下都绝对只有 1 个实例\",\"想在程序上表现出“只存在一个实例”\"]},\"273\":{\"h\":\"示例代码\",\"t\":[\"// main.ts import { Singleton } from './singleton'; const singleton1 = Singleton.getInstance(); const singleton2 = Singleton.getInstance(); console.log(singleton1 === singleton2); // true // singleton.ts export class Singleton { private static instance: Singleton | null = null; private static generatedId: number = 0; private constructor() { Singleton.generatedId++; console.log(`Singleton instance created with id: ${Singleton.generatedId}`); } public static getInstance(): Singleton { if (this.instance === null) { this.instance = new Singleton(); } return this.instance; } } \"]},\"274\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\singleton\\\\main.ts\\\" Singleton instance created with id: 1 true \"]},\"275\":{\"h\":\"相关设计模式\",\"t\":[\"abstractFactory 模式\",\"Builder 模式\",\"Facade 模式\",\"Prototype 模式\"]},\"276\":{\"h\":\"多线程下\",\"t\":[\"在多线程环境中，Singleton 模式的实现需要特别注意线程安全问题。如果多个线程同时访问 getInstance 方法，可能会导致创建多个实例。为了解决这个问题，可以使用双重检查锁定（Double-Checked Locking）或其他线程同步机制。\"]},\"277\":{\"h\":\"双重检查锁定示例代码\",\"t\":[\"export class Singleton { private static instance: Singleton | null = null; private static generatedId: number = 0; private static lock: any = {}; private constructor() { Singleton.generatedId++; console.log(`Singleton instance created with id: ${Singleton.generatedId}`); } public static getInstance(): Singleton { if (this.instance === null) { synchronized(this.lock, () => { if (this.instance === null) { this.instance = new Singleton(); } }); } return this.instance; } } function synchronized(lock: any, fn: () => void) { // Simulate a lock mechanism fn(); } \",\"在上面的代码中，synchronized 函数模拟了一个锁机制，以确保在多线程环境下 getInstance 方法的线程安全性。\"]},\"278\":{\"c\":[\"设计模式\"]},\"279\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"280\":{\"h\":\"Strategy 模式\"},\"281\":{\"h\":\"使用此设计模式的理由\",\"t\":[\"在这个示例程序中，我们使用了策略模式（Strategy Pattern）来实现不同的猜拳策略。策略模式的主要优点包括：\",\"易于扩展：可以很容易地添加新的策略，而不需要修改现有的代码。\",\"提高代码的可读性和可维护性：将不同的算法封装在独立的类中，使得代码更加清晰。\",\"减少重复代码：通过使用策略模式，可以避免在多个地方重复相同的算法逻辑。\"]},\"282\":{\"h\":\"示例程序\",\"t\":[\"下面我们来看一段使用了 strategy 模式的示例程序。这段示例程序的功能是让电脑玩“猜拳\\\"游戏。\",\"我们考虑了两种猜拳的策略。第一种策略是“如果这局猜拳获胜，那么下一局也出一样的手势\\\" (WinningStrategy), 这是一种稍微有些笨的策略；另外一种策略是“根据上一局的手势从概率上计算出下一局的手势\\\"（ ProbStrategy ）。\",\"// hand.ts export enum HandValue { GUU = 0, CHO = 1, PAA = 2, } export class Hand { //NOTE - 使用了单例模式 private static readonly hand: Hand[] = [ new Hand(HandValue.GUU), new Hand(HandValue.CHO), new Hand(HandValue.PAA), ]; private static readonly names: string[] = ['石头', '剪刀', '布']; private handValue: HandValue; private constructor(handValue: HandValue) { this.handValue = handValue; } static getHand(handValue: HandValue): Hand { return this.hand[handValue]; } isStrongerThan(h: Hand): boolean { return this.fight(h) === 1; } isWeakerThan(h: Hand): boolean { return this.fight(h) === -1; } private fight(h: Hand): number { if (this === h) { return 0; } else if ((this.handValue + 1) % 3 === h.handValue) { return 1; } else { return -1; } } toString(): string { return Hand.names[this.handValue]; } } // main.ts import { Player } from \\\"./player\\\"; import { WinningStrategy } from \\\"./winningStrategy\\\"; import { ProbStrategy } from \\\"./probStrategy\\\"; const player1 = new Player(\\\"Taro\\\", new WinningStrategy()); const player2 = new Player(\\\"Hana\\\", new ProbStrategy()); for (let i = 0; i < 10000; i++) { const nextHand1 = player1.nextHand(); const nextHand2 = player2.nextHand(); if (nextHand1.isStrongerThan(nextHand2)) { console.log(`Winner: ${player1.toString()}`); player1.win(); player2.lose(); } else if (nextHand2.isStrongerThan(nextHand1)) { console.log(`Winner: ${player2.toString()}`); player1.lose(); player2.win(); } else { console.log(\\\"Even...\\\"); player1.even(); player2.even(); } } console.log(\\\"Total result:\\\"); console.log(player1.toString()); console.log(player2.toString()); // Output // player.ts import { Hand } from './hand'; import { Strategy } from './strategy'; export class Player { private name: string; private strategy: Strategy; private wincount = 0; private losecount = 0; private gamecount = 0; constructor(name: string, strategy: Strategy) { this.name = name; this.strategy = strategy; } nextHand(): Hand { return this.strategy.nextHand(); } win(): void { this.strategy.study(true); this.wincount++; this.gamecount++; } lose(): void { this.strategy.study(false); this.losecount++; this.gamecount++; } even(): void { this.gamecount++; } toString(): string { return `[${this.name}:${this.gamecount} games, ${this.wincount} win, ${this.losecount} lose]`; } } // probStrategy.ts import { Hand } from './hand'; import { Strategy } from './strategy'; export class ProbStrategy implements Strategy { private prevHandValue = 0; private currentHandValue = 0; private history: number[][] = [ [1, 1, 1], [1, 1, 1], [1, 1, 1], ]; constructor() {} nextHand(): Hand { const bet = Math.floor(Math.random() * this.getSum(this.currentHandValue)); let handvalue = 0; if (bet < this.history[this.currentHandValue][0]) { handvalue = 0; } else if (bet < this.history[this.currentHandValue][0] + this.history[this.currentHandValue][1]) { handvalue = 1; } else { handvalue = 2; } this.prevHandValue = this.currentHandValue; this.currentHandValue = handvalue; return Hand.getHand(handvalue); } private getSum(hv: number): number { let sum = 0; for (let i = 0; i < 3; i++) { sum += this.history[hv][i]; } return sum; } study(win: boolean): void { if (win) { this.history[this.prevHandValue][this.currentHandValue]++; } else { this.history[this.prevHandValue][(this.currentHandValue + 1) % 3]++; this.history[this.prevHandValue][(this.currentHandValue + 2) % 3]++; } } } // strategy.ts import { Hand } from './hand'; export interface Strategy { nextHand(): Hand; study(win: boolean): void; } // winningStrategy.ts import { Hand } from './hand'; import { Strategy } from './strategy'; export class WinningStrategy implements Strategy { private won = false; private prevHand: Hand; constructor() {} nextHand(): Hand { if (!this.won) { this.prevHand = Hand.getHand(Math.floor(Math.random() * 3)); } return this.prevHand; } study(win: boolean): void { this.won = win; } } \"]},\"283\":{\"h\":\"运行结果\",\"t\":[\"...(省略) Winner: [Hana:9991 games, 3567 win, 3049 lose] Winner: [Hana:9992 games, 3568 win, 3049 lose] Even... Winner: [Hana:9994 games, 3569 win, 3049 lose] Even... Even... Winner: [Hana:9997 games, 3570 win, 3049 lose] Winner: [Hana:9998 games, 3571 win, 3049 lose] Winner: [Hana:9999 games, 3572 win, 3049 lose] Total result: [Taro:10000 games, 3049 win, 3573 lose] [Hana:10000 games, 3573 win, 3049 lose] \"]},\"284\":{\"h\":\"拓展思路的要点\"},\"285\":{\"h\":\"为什么要特意编写 Strategy\",\"t\":[\"通常在编程时算法会被写在具体方法中。Strategy 模式却特意将算法与其他部分分离开来，只是定义了与算法相关的接口（API），然后在程序中以委托的方式来使用算法。\",\"这样看起来程序好像变复杂了，其实不然。例如，当我们想要通过改善算法来提高算法的处理速度时，如果使用了 Strategy 模式，就不必修改 Strategy 角色的接口（API）了，仅仅修改 ConcreteStrategy 角色即可。而且，使用委托这种弱关联关系可以很方便地整体替换算法。例如，如果想比较原来的算法与改进后的算法的处理速度有多大区别，简单地替换下算法即可进行测试。\",\"使用 Strategy 模式编写象棋程序时，可以方便地根据棋手的选择切换 AI 例程的水平。\"]},\"286\":{\"h\":\"程序运行中也可以切换策略\",\"t\":[\"如果使用 Strategy 模式，在程序运行中也可以切换角色。例如，在内存容量少的运行环境中可以使用 SlowButLessMemoryStrategy（速度慢但省内存的策略），而在内存容量多的运行环境中则可以使用 FastButMoreMemoryStrategy（速度快但耗内存的策略）。\",\"此外，还可以用某种算法去“验算”另外一种算法。例如，假设要在某个表格计算软件的开发版本中进行复杂的计算。这时，我们可以准备两种算法，即“高速但计算上可能有 Bug 的算法”和“低速但计算准确的算法”，然后让后者去验算前者的计算结果。\"]},\"287\":{\"h\":\"相关的设计模式\",\"t\":[\"Flyweight 模式\",\"Abstract Factory 模式\",\"State 模式\"]},\"288\":{\"c\":[\"设计模式\"]},\"289\":{\"c\":[\"设计模式\",\"TypeScript\",\"分开考虑\",\"整体的替换算法\"]},\"290\":{\"h\":\"Template Method 模式\",\"t\":[\"在父类中定义处理流程的框架，在子类中实现具体处理。Template Method 模式的主要目的是为了定义一个算法的骨架，而将一些步骤的具体实现延迟到子类中。通过这种方式，子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。\"]},\"291\":{\"h\":\"为什么要使用 Template Method 模式？\",\"t\":[\"代码复用：将通用的算法结构放在父类中，避免重复代码。\",\"灵活性：允许子类实现具体的步骤，增加了灵活性。\",\"控制反转：父类控制算法的执行流程，子类只需关注具体步骤的实现。\"]},\"292\":{\"h\":\"示例代码\",\"t\":[\"// abstractDisplay.ts export abstract class AbstractDisplay { protected abstract open(): void; protected abstract print(): void; protected abstract close(): void; display(): void { this.open(); for (let i = 0; i < 5; i++) { this.print(); } this.close(); } } // charDisplay.ts import { AbstractDisplay } from './abstractDisplay'; export class CharDisplay extends AbstractDisplay { private ch: string; constructor(ch: string) { super(); this.ch = ch; } open() { console.log('<<'); } print() { console.log(this.ch); } close() { console.log('>>'); } } // stringDisplay.ts import { AbstractDisplay } from './abstractDisplay'; export class StringDisplay extends AbstractDisplay { private str: string; private width: number; constructor(str: string) { super(); this.str = str; this.width = str.length; } open() { this.printLine(); } print() { console.log(`|${this.str}|`); } close() { this.printLine(); } private printLine() { let line = '+'; for (let i = 0; i < this.width; i++) { line += '-'; } line += '+'; console.log(line); } } // main.ts import { CharDisplay } from './charDisplay'; import { StringDisplay } from './stringDisplay'; const d1 = new CharDisplay('H'); const d2 = new StringDisplay('Hello, world.'); const d3 = new StringDisplay('你好，世界。'); d1.display(); d2.display(); d3.display(); \"]},\"293\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\template_method\\\\main.ts\\\" << H H H H H >> +-------------+ |Hello, world.| |Hello, world.| |Hello, world.| |Hello, world.| |Hello, world.| +-------------+ +------+ |你好，世界。| |你好，世界。| |你好，世界。| |你好，世界。| |你好，世界。| +------+ \"]},\"294\":{\"h\":\"相关设计模式\",\"t\":[\"Factory Method 模式\",\"Strategy 模式\"]},\"295\":{\"h\":\"延申: 类的层次与抽象类\",\"t\":[\"我们在理解类的层次时，通常是站在子类的角度进行思考的。也就是说，很容易着眼于以下几点。\",\"在子类中可以使用父类中定义的方法\",\"可以通过在子类中增加方法以实现新的功能\",\"在子类中重写父类的方法可以改变程序的行为\",\"现在，让我们稍微改变一下立场，站在父类的角度进行思考。在父类中，我们声明了抽象方法，而将该方法的实现交给了子类。换言之，就程序而言，声明抽象方法是希望达到以下目的。\",\"期待子类去实现抽象方法\",\"要求子类去实现抽象方法\",\"也就是说，子类具有实现在父类中所声明的抽象方法的责任。因此，这种责任被称为“子类责任\\\"（ subclass responsibility ）。\"]},\"296\":{\"c\":[\"设计模式\"]},\"297\":{\"c\":[\"设计模式\",\"typescript\",\"交给子类\"]},\"298\":{\"h\":\"Visitor 模式\",\"t\":[\"在 Visitor 模式中，数据结构与处理被分离开来。我们编写一个表示“访问者”的类来访问数据结构中的元素，并把对各元素的处理交给访问者类。这样，当需要增加新的处理时，我们只需要编写新的访问者，然后让数据结构可以接受访问者的访问即可。\"]},\"299\":{\"h\":\"为什么使用 Visitor 模式？\",\"t\":[\"分离关注点：将数据结构与操作分离，使得代码更清晰、更易维护。\",\"增加新操作更容易：只需添加新的访问者类，而不需要修改现有的数据结构。\",\"符合开闭原则：对扩展开放，对修改关闭。\"]},\"300\":{\"h\":\"示例代码\",\"t\":[\"// directory.ts import { Entry } from './entry'; import { Visitor } from './visitor'; export class Directory extends Entry { private dir: Entry[] = []; constructor(private name: string) { super(); } getName() { return this.name; } getSize() { let size = 0; this.dir.forEach((entry) => { size += entry.getSize(); }); return size; } add(entry: Entry) { this.dir.push(entry); return this; } iterator() { return this.dir; } accept(visitor:Visitor) { visitor.visit(this); } } // element.ts import { Visitor } from './visitor'; export interface Element { accept(visitor: Visitor): void; } // entry.ts import { Element } from \\\"./element\\\"; import { Visitor } from \\\"./visitor\\\"; export abstract class Entry implements Element { abstract getName(): string; abstract getSize(): number; add(entry: Entry): Entry { throw new Error(\\\"Entry.add not implemented\\\"); } iterator(): Entry[] { throw new Error(\\\"Entry.iterator not implemented\\\"); } toString(): string { return `${this.getName()} (${this.getSize()})`; } abstract accept(visitor: Visitor): void; } // file.ts import { Visitor } from './visitor'; import { Entry } from './entry'; export class File extends Entry { constructor(private name: string, private size: number) { super(); } getName(): string { return this.name; } getSize(): number { return this.size; } accept(visitor: Visitor): void { visitor.visit(this); } } // listVisitor.ts import { Visitor } from \\\"./visitor\\\"; import { File } from \\\"./file\\\"; import { Directory } from \\\"./directory\\\"; import { Entry } from \\\"./entry\\\"; export class ListVisitor extends Visitor { private currentdir = \\\"\\\"; visit(entry:Entry) { if (entry instanceof File) { console.log(`${this.currentdir}/${entry}`); } else if (entry instanceof Directory) { console.log(`${this.currentdir}/${entry}`); const savedir = this.currentdir; this.currentdir = `${this.currentdir}/${entry.getName()}`; const it: Entry[] = entry.iterator(); for (let i = 0; i < it.length; i++) { it[i].accept(this); } this.currentdir = savedir; } } } // main.ts import { Directory } from \\\"./directory\\\"; import { File } from \\\"./file\\\"; import { ListVisitor } from \\\"./listVisitor\\\"; console.log(\\\"Making root entries...\\\"); let rootdir = new Directory(\\\"root\\\"); let bindir = new Directory(\\\"bin\\\"); let tmpdir = new Directory(\\\"tmp\\\"); let usrdir = new Directory(\\\"usr\\\"); rootdir.add(bindir); rootdir.add(tmpdir); rootdir.add(usrdir); bindir.add(new File(\\\"vi\\\", 10000)); bindir.add(new File(\\\"latex\\\", 20000)); rootdir.accept(new ListVisitor()); console.log(\\\"Making user entries...\\\"); let yuki = new Directory(\\\"yuki\\\"); let hanako = new Directory(\\\"hanako\\\"); let tomura = new Directory(\\\"tomura\\\"); usrdir.add(yuki); usrdir.add(hanako); usrdir.add(tomura); yuki.add(new File(\\\"diary.html\\\", 100)); yuki.add(new File(\\\"Composite.java\\\", 200)); hanako.add(new File(\\\"memo.tex\\\", 300)); tomura.add(new File(\\\"game.doc\\\", 400)); tomura.add(new File(\\\"junk.mail\\\", 500)); rootdir.accept(new ListVisitor()); // visitor.ts import { Entry } from './entry'; export abstract class Visitor { abstract visit(file:Entry); } \"]},\"301\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\visitor\\\\main.ts\\\" Making root entries... /root (30000) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (0) Making user entries... /root (31500) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (1500) /root/usr/yuki (300) /root/usr/yuki/diary.html (100) /root/usr/yuki/Composite.java (200) /root/usr/hanako (300) /root/usr/hanako/memo.tex (300) /root/usr/tomura (900) /root/usr/tomura/game.doc (400) /root/usr/tomura/junk.mail (500) \"]},\"302\":{\"h\":\"拓展思路的要点\"},\"303\":{\"h\":\"双重分发\",\"t\":[\"我们来整理一下 Visitor 模式中的方法调用关系。accept（接收）方法的调用方式如下：element.accept(visitor)；而 visit（访问）方法的调用方式如下：visitor.visit(element)。对比这两个方法会发现，它们呈现出一种相反的关系。element 接收 visitor，而 visitor 又访问 element。在 Visitor 模式中，ConcreteElement 和 ConcreteVisitor 这两个角色共同决定了实际进行的处理。这种消息分发的方式一般被称为双重分发（double dispatch）。\"]},\"304\":{\"h\":\"为什么要这么复杂\",\"t\":[\"Visitor 模式的目的是将处理逻辑从数据结构中分离出来。数据结构很重要，它能够将元素集合及其关联关系组织在一起。但是，需要注意的是，保存数据结构与基于数据结构进行处理是两种不同的概念。在示例程序中，我们创建了 ListVisitor 类作为显示文件夹内容的 ConcreteVisitor 角色。此外，在练习题中，我们还要编写进行其他处理的 ConcreteVisitor 角色。通常，ConcreteVisitor 角色的开发可以独立于 File 类和 Directory 类。也就是说，Visitor 模式提高了 File 类和 Directory 类作为组件的独立性。如果将处理逻辑的方法定义在 File 类和 Directory 类中，那么每次要扩展功能，增加新的“处理”时，就不得不去修改这些类。\"]},\"305\":{\"h\":\"开闭原则——对扩展开放，对修改关闭\",\"t\":[\"在设计类时，若无特殊理由，必须要考虑到将来可能会扩展类。绝不能毫无理由地禁止扩展类。这就是“对扩展是开放的”的意思。但是，如果在每次扩展类时都需要修改现有的类就太麻烦了。所以我们需要在不修改现有类的前提下能够扩展类，这就是“对修改是关闭的”的意思。我们提倡扩展，但如果需要修改现有代码，那就不行了。在不修改现有代码的前提下进行扩展，这就是开闭原则。至此，大家已经学习了多种设计模式。那么在看到这条设计原则后，大家应该都会点头表示赞同吧。功能需求总是在不断变化，而且这些功能需求大都是“希望扩展某个功能”。因此，如果不能比较容易地扩展类，开发过程将会变得非常困难。另一方面，如果要修改已经编写和测试完成的类，又可能会导致软件产品的质量降低。对扩展开放、对修改关闭的类具有高可复用性，可作为组件复用。设计模式和面向对象的目的正是为我们提供一种结构，可以帮助我们设计出这样的类。\"]},\"306\":{\"h\":\"易于增加 ConcreteVisitor 角色\",\"t\":[\"使用 Visitor 模式可以很容易地增加 ConcreteVisitor 角色。因为具体的处理被交给 ConcreteVisitor 角色负责，因此完全不用修改 ConcreteElement 角色。\"]},\"307\":{\"h\":\"难以增加 ConcreteElement 角色\",\"t\":[\"尽管使用 Visitor 模式可以很容易地增加 ConcreteVisitor 角色，但它却难以应对 ConcreteElement 角色的增加。例如，假设现在我们要在示例程序中增加一个 Device 类，它是 File 类和 Directory 类的兄弟类。这时，我们不得不在 Visitor 类中声明一个 visit(Device) 方法，并在所有的 Visitor 类的子类中都实现这个方法。\"]},\"308\":{\"h\":\"Visitor 工作所需的条件\",\"t\":[\"在 Visitor 模式中，对数据结构中的元素进行处理的任务被分离出来，交给 Visitor 类负责。这样，就实现了数据结构与处理的分离。这个主题，我们在本章的学习过程中已经提到过很多次了。但是要达到这个目的是有条件的，那就是 Element 角色必须向 Visitor 角色公开足够多的信息。例如，在示例程序中，visit(Directory) 方法需要调用每个目录条目的 accept 方法。为此，Directory 类必须提供用于获取每个目录条目的 iterator 方法。只有当访问者从数据结构中获取了足够多的信息后才能工作。如果无法获取到这些信息，它就无法工作。这样做的缺点是，如果公开了不应当被公开的信息，将来对数据结构的改良就会变得非常困难。\"]},\"309\":{\"h\":\"相关的设计模式\",\"t\":[\"Iterator 模式\",\"Composite 模式\",\"Interpreter 模式\"]},\"310\":{\"c\":[\"设计模式\"]},\"311\":{\"c\":[\"设计模式\",\"TypeScript\",\"访问数据结构并处理数据\"]},\"312\":{\"h\":\"手把手教你构建 C 语言编译器（0）- 前言\",\"t\":[\"本文转载自 手把手教你构建 C 语言编译器（0）- 前言，原作者 三点水，原文链接：原文链接，如有侵权，请联系删除。\",\"转载工具:devtool、helloworld\",\"“手把手教你构建 C 语言编译器” 这一系列教程将带你从头编写一个 C 语言的编译器。希望通过这个系列，我们能对编译器的构建有一定的了解，同时，我们也将构建出一个能用的 C 语言编译器，尽管有许多语法并不支持。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\",\"在开始进入正题之前，本篇是一些闲聊，谈谈这个系列的初衷。如果你急切地想进入正篇，请跳过本章。\"]},\"313\":{\"h\":\"为什么要学编译原理\",\"t\":[\"如果要我说计算机专业最重要的三门课，我会说是《数据结构》、《算法》和《编译原理》。在我看来，能不能理解“递归”像是程序员的第一道门槛，而会不会写编译器则是第二道。\",\"（当然，并不是说是没写过编译器就不是好程序员，只能说它是一个相当大的挑战吧）\",\"以前人们会说，学习了编译原理，你就能写出更加高效的代码，但随着计算机性能的提升，代码是否高效显得就不那么重要了。那么为什么要学习编译原理呢？\",\"原因只有一个：装B。\",\"好吧，也许现在还想学习编译原理的人只可能是因为兴趣了。一方面想了解它的工作原理；另一方面希望挑战一下自己，看看自己能走多远。\"]},\"314\":{\"h\":\"理论很复杂，实现也很复杂？\",\"t\":[\"我对编译器一直心存敬佩。所以当学校开《编译原理》的课程后，我是抱着满腔热情去上课的，但是两节课后我就放弃了。原因是太复杂了，听不懂。\",\"一般编译原理的课程会说一些：\",\"如何表示语法（BNF什么的）\",\"词法分析，用什么有穷自动机和无穷自动机\",\"语法分析，递归下降法，什么 LL(k)，LALR 分析。\",\"中间代码的表示\",\"代码的生成\",\"代码优化\",\"我相信绝大多数（98％）的学生顶多学到语法分析就结束了。并且最重要的是，学了这么多也没用！依旧帮助不了我们学习编译器！这其中最主要的原因是《编译原理》试图教会我们的是如何构造“编译器生成器”，即构造一个工具，根据文法来生成编译器（如 lex/yacc）等等。\",\"这些理论试图教会我们如何用通用的方法来自动解决问题，它们有很强的实际意义，只是对于一般的学生或程序员来说，它们过于强大，内容过于复杂。如果你尝试阅读 lex/yacc （或 flex/bison）的代码，就会发现太可怕了。\",\"然而如果你能跟我一样，真正来实现一个简单的编译器，那么你会发现，比起可怕的《编译原理》，这点复杂度还是不算什么的（因为好多理论根本用不上）。\"]},\"315\":{\"h\":\"项目的初衷\",\"t\":[\"有一次在 Github 上看到了一个项目（当时很火的），名叫 c4，号称用 4 个函数来实现了一个小的 C 语言编译器。它最让我震惊的是能够自举，即能自己编译自己。并且它用很少的代码就完成了一个功能相当完善的 C 语言编译器。\",\"一般的编译器相关的教程要么就十分简单（如实现四则运算），要么就是借助了自动生成的工具（如 flex/bison）。而 c4 的代码完全是手工实现的，不用外部工具。可惜的是它的代码初衷是代码最小化，所以写得很乱，很难懂。所以本项目的主要目的：\",\"实现一个功能完善的 C 语言编译器\",\"通过教程来说明这个过程。\",\"c4 大致500+行。重写的代码历时一周，总共代码加注释1400行。项目地址: Write a C Interpreter。\",\"声明：本项目中的代码逻辑绝大多数取自 c4 ，但确为自己重写。\"]},\"316\":{\"h\":\"做好心理准备\",\"t\":[\"在写编译器的时候会遇到两个主要问题：\",\"繁琐，会有许多相似的代码，写起来很无聊。\",\"难以调试，一方面没有很好的测试用例，另一方面需要对照生成的代码来调试（遇到的时候就知道了）。\",\"所以我希望你有足够的耐心和时间来学习，相信当你真正完成的时候会像我一样，十分有成就感。\",\"PS. 第一篇完全没有正题相关的内容也是希望你能有所心理准备再开始学习。\"]},\"317\":{\"h\":\"参考资料\",\"t\":[\"最后想介绍几个资料：\",\"Let’s Build a Compiler 很好的初学者教程，英文的。\",\"Lemon Parser Generator，一个语法分析器生成器，对照《编译原理》观看效果更佳。\",\"由于本人水平一般，文章、代码难免会有错误，敬请批评指正！\",\"最后祝你学得愉快。\",\"这篇博客并没有使用诸如 flex、bison 等工具来编写 token 和文法的定义，因而灵活性较差。相反，它通过定义自己的指令集并支持该指令集的虚拟机来模拟编译的部分过程，具有一定的参考价值。不过，我仍然认为通过定义 token 和文法并编写解析算法（如 regex、LL(k) 等）可能会更具普适性。\",\"相关信息\",\"不过据说c、cpp、java这些成熟的语言都是手动实现的？还没仔细了解过。\\nTODO\"]},\"318\":{\"c\":[\"编译原理\"]},\"319\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"320\":{\"h\":\"手把手教你构建 C 语言编译器（1）- 设计\",\"t\":[\"本文转自 https://lotabout.me/2015/write-a-C-interpreter-1/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 编译器的构建流程\",\"2. 编译器框架\",\"这是“手把手教你构建 C 语言编译器”系列的第二篇，我们要从整体上讲解如何设计我们的 C 语言编译器。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\",\"首先要说明的是，虽然标题是编译器，但实际上我们构建的是 C 语言的解释器，这意味着我们可以像运行脚本一样去运行 C 语言的源代码文件。这么做的理由有两点：\",\"解释器与编译器仅在代码生成阶段有区别，而其它方面如词法分析、语法分析是一样的。\",\"解释器需要我们实现自己的虚拟机与指令集，而这部分能帮助我们了解计算机的工作原理。\"]},\"321\":{\"h\":\"编译器的构建流程\",\"t\":[\"一般而言，编译器的编写分为 3 个步骤：\",\"词法分析器，用于将字符串转化成内部的表示结构。\",\"语法分析器，将词法分析得到的标记流（token）生成一棵语法树。\",\"目标代码的生成，将语法树转化成目标代码。\",\"已经有许多工具能帮助我们处理阶段1和2，如 flex 用于词法分析，bison 用于语法分析。只是它们的功能都过于强大，屏蔽了许多实现上的细节，对于学习构建编译器帮助不大。所以我们要完全手写这些功能。\",\"所以我们会依照以下步骤来构建我们的编译器：\",\"构建我们自己的虚拟机以及指令集。这后生成的目标代码便是我们的指令集。\",\"构建我们的词法分析器\",\"构建语法分析器\"]},\"322\":{\"h\":\"编译器框架\",\"t\":[\"我们的编译器主要包括 4 个函数：\",\"next() 用于词法分析，获取下一个标记，它将自动忽略空白字符。\",\"program() 语法分析的入口，分析整个 C 语言程序。\",\"expression(level) 用于解析一个表达式。\",\"eval() 虚拟机的入口，用于解释目标代码。\",\"这里有一个单独用于解析“表达式”的函数 expression 是因为表达式在语法分析中相对独立并且比较复杂，所以我们将它单独作为一个模块（函数）。下面是相应的源代码：\",\"#include <stdio.h>#include <stdlib.h>#include <memory.h>#include <string.h>int token; // current tokenchar *src, *old_src; // pointer to source code string;int poolsize; // default size of text/data/stackint line; // line numbervoid next() { token = *src++; return;}void expression(int level) { // do nothing}void program() { next(); // get next token while (token > 0) { printf(\\\"token is: %c\\\\n\\\", token); next(); }}int eval() { // do nothing yet return 0;}int main(int argc, char **argv){ int i, fd; argc--; argv++; poolsize = 256 * 1024; // arbitrary size line = 1; if ((fd = open(*argv, 0)) < 0) { printf(\\\"could not open(%s)\\\\n\\\", *argv); return -1; } if (!(src = old_src = malloc(poolsize))) { printf(\\\"could not malloc(%d) for source area\\\\n\\\", poolsize); return -1; } // read the source file if ((i = read(fd, src, poolsize-1)) <= 0) { printf(\\\"read() returned %d\\\\n\\\", i); return -1; } src[i] = 0; // add EOF character close(fd); program(); return eval();}\",\"上面的代码看上去挺复杂，但其实内容不多。它的流程为：读取一个文件（内容为 C 语言代码），逐个读取文件中的字符，并输出。这里需要的是注意每个函数的作用，后面的文章中，我们将逐个填充每个函数的功能，最终构建起我们的编译器。\",\"本节的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-0 https://github.com/lotabout/write-a-C-interpreter\",\"这样我们就有了一个最简单的编译器：什么都不干的编译器，下一章中，我们将实现其中的eval函数，即我们自己的虚拟机。\"]},\"323\":{\"h\":\"转载声明\",\"t\":[\"title: \\\"手把手教你构建 C 语言编译器（2）——虚拟机\\\" category:\",\"编译原理 tag:\",\"c\",\"编译器\",\"解释器\",\"本文转自 https://lotabout.me/2015/write-a-C-interpreter-2/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 计算机的内部工作原理\",\"1.1. 内存\",\"1.2. 寄存器\",\"2. 指令集\",\"2.1. MOV\",\"2.2. PUSH\",\"2.3. JMP\",\"2.4. JZ/JNZ\",\"2.5. 子函数调用\",\"2.6. ENT\",\"2.7. ADJ\",\"2.8. LEV\",\"2.9. LEA\",\"2.10. 运算符指令\",\"2.11. 内置函数\",\"3. 测试\",\"4. 小结\",\"这是“手把手教你构建 C 语言编译器”系列的第三篇，本章我们要构建一台虚拟的电脑，设计我们自己的指令集，运行我们的指令集，说得通俗一点就是自己实现一套汇编语言。它们将作为我们的编译器最终输出的目标代码。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"324\":{\"h\":\"计算机的内部工作原理\",\"t\":[\"计算机中有三个基本部件需要我们关注：CPU、寄存器及内存。代码（汇编指令）以二进制的形式保存在内存中；CPU 从中一条条地加载指令执行；程序运行的状态保存在寄存器中。\"]},\"325\":{\"h\":\"内存\",\"t\":[\"内存用于存储数据，这里的数据可以是代码，也可以是其它的数据。现代操作系统在操作内存时，并不是直接处理”物理内存“，而是操作”虚拟内存“。虚拟内存可以理解为一种映射，它的作用是屏蔽了物理的细节。例如 32 位的机器中，我们可以使用的内存地址为 2^32 = 4G，而电脑上的实际内存可能只有 256 M。操作系统将我们使用的虚拟地址映射到了到实际的内存上。\",\"当然，我们这里并不需要了解太多，但需要了解的是：进程的内存会被分成几个段：\",\"代码段（text）用于存放代码（指令）。\",\"数据段（data）用于存放初始化了的数据，如int i = 10;，就需要存放到数据段中。\",\"未初始化数据段（bss）用于存放未初始化的数据，如 int i[1000];，因为不关心其中的真正数值，所以单独存放可以节省空间，减少程序的体积。\",\"栈（stack）用于处理函数调用相关的数据，如调用帧（calling frame）或是函数的局部变量等。\",\"堆（heap）用于为程序动态分配内存。\",\"它们在内存中的位置类似于下图：\",\"+------------------+| stack | | high address| ... v || || || || || ... ^ || heap | |+------------------+| bss segment |+------------------+| data segment |+------------------+| text segment | low address+------------------+\",\"我们的虚拟机并不打算模拟完整的计算机，因此简单起见，我们只关心三个内容：代码段、数据段以及栈。其中的数据段我们只用来存放字符串，因为我们的编译器并不支持初始化变量，因此我们也不需要未初始化数据段。\",\"当用户的程序需要分配内存时，理论上我们的虚拟机需要维护一个堆用于内存分配，但实际实现上较为复杂且与编译无关，故我们引入一个指令MSET，使我们能直接使用编译器（解释器）中的内存。\",\"综上，我们需要首先在全局添加如下代码：\",\"int *text, // text segment *old_text, // for dump text segment *stack; // stackchar *data; // data segment\",\"注意这里的类型，虽然是int型，但理解起来应该作为无符号的整型，因为我们会在代码段（text）中存放如指针/内存地址的数据，它们就是无符号的。其中数据段（data）由于只存放字符串，所以是 char * 型的。\",\"接着，在main函数中加入初始化代码，真正为其分配内存：\",\"int main() { close(fd); ... // allocate memory for virtual machine if (!(text = old_text = malloc(poolsize))) { printf(\\\"could not malloc(%d) for text area\\\\n\\\", poolsize); return -1; } if (!(data = malloc(poolsize))) { printf(\\\"could not malloc(%d) for data area\\\\n\\\", poolsize); return -1; } if (!(stack = malloc(poolsize))) { printf(\\\"could not malloc(%d) for stack area\\\\n\\\", poolsize); return -1; } memset(text, 0, poolsize); memset(data, 0, poolsize); memset(stack, 0, poolsize); ... program();}\"]},\"326\":{\"h\":\"寄存器\",\"t\":[\"计算机中的寄存器用于存放计算机的运行状态，真正的计算机中有许多不同种类的寄存器，但我们的虚拟机中只使用 4 个寄存器，分别如下：\",\"PC 程序计数器，它存放的是一个内存地址，该地址中存放着 下一条 要执行的计算机指令。\",\"SP 指针寄存器，永远指向当前的栈顶。注意的是由于栈是位于高地址并向低地址增长的，所以入栈时 SP 的值减小。\",\"BP 基址指针。也是用于指向栈的某些位置，在调用函数时会使用到它。\",\"AX 通用寄存器，我们的虚拟机中，它用于存放一条指令执行后的结果。\",\"要理解这些寄存器的作用，需要去理解程序运行中会有哪些状态。而这些寄存器只是用于保存这些状态的。\",\"在全局中加入如下定义：\",\"int *pc, *bp, *sp, ax, cycle; // virtual machine registers\",\"在 main 函数中加入初始化代码，注意的是PC在初始应指向目标代码中的main函数，但我们还没有写任何编译相关的代码，因此先不处理。代码如下：\",\"memset(stack, 0, poolsize);...bp = sp = (int *)((int)stack + poolsize);ax = 0;...program();\",\"与 CPU 相关的是指令集，我们将专门作为一个小节。\"]},\"327\":{\"h\":\"指令集\",\"t\":[\"指令集是 CPU 能识别的命令的集合，也可以说是 CPU 能理解的语言。这里我们要为我们的虚拟机构建自己的指令集。它们基于 x86 的指令集，但更为简单。\",\"首先在全局变量中加入一个枚举类型，这是我们要支持的全部指令：\",\"// instructionsenum { LEA ,IMM ,JMP ,CALL,JZ ,JNZ ,ENT ,ADJ ,LEV ,LI ,LC ,SI ,SC ,PUSH, OR ,XOR ,AND ,EQ ,NE ,LT ,GT ,LE ,GE ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD , OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT };\",\"这些指令的顺序安排是有意的，稍后你会看到，带有参数的指令在前，没有参数的指令在后。这种顺序的唯一作用就是在打印调试信息时更加方便。但我们讲解的顺序并不依据它。\"]},\"328\":{\"h\":\"MOV\",\"t\":[\"MOV 是所有指令中最基础的一个，它用于将数据放进寄存器或内存地址，有点类似于 C 语言中的赋值语句。x86 的 MOV 指令有两个参数，分别是源地址和目标地址：MOV dest, source （Intel 风格），表示将 source 的内容放在 dest 中，它们可以是一个数、寄存器或是一个内存地址。\",\"一方面，我们的虚拟机只有一个寄存器，另一方面，识别这些参数的类型（是数据还是地址）是比较困难的，因此我们将 MOV 指令拆分成 5 个指令，这些指令只接受一个参数，如下：\",\"IMM <num> 将 <num> 放入寄存器 ax 中。\",\"LC 将对应地址中的字符载入 ax 中，要求 ax 中存放地址。\",\"LI 将对应地址中的整数载入 ax 中，要求 ax 中存放地址。\",\"SC 将 ax 中的数据作为字符存放入地址中，要求栈顶存放地址。\",\"SI 将 ax 中的数据作为整数存放入地址中，要求栈顶存放地址。\",\"你可能会觉得将一个指令变成了许多指令，整个系统就变得复杂了，但实际情况并非如此。首先是 x86 的 MOV 指令其实有许多变种，根据类型的不同有 MOVB, MOVW 等指令，我们这里的 LC/SC 和 LI/SI 就是对应字符型和整型的存取操作。\",\"但最为重要的是，通过将 MOV 指令拆分成这些指令，只有 IMM 需要有参数，且不需要判断类型，所以大大简化了实现的难度。\",\"在 eval() 函数中加入下列代码：\",\"void eval() { int op, *tmp; while (1) { if (op == IMM) {ax = *pc++;} // load immediate value to ax else if (op == LC) {ax = *(char *)ax;} // load character to ax, address in ax else if (op == LI) {ax = *(int *)ax;} // load integer to ax, address in ax else if (op == SC) {ax = *(char *)*sp++ = ax;} // save character to address, value in ax, address on stack else if (op == SI) {*(int *)*sp++ = ax;} // save integer to address, value in ax, address on stack } ... return 0;}\",\"其中的 *sp++ 的作用是退栈，相当于 POP 操作。\",\"这里要解释的一点是，为什么 SI/SC 指令中，地址存放在栈中，而 LI/LC 中，地址存放在 ax 中？原因是默认计算的结果是存放在 ax 中的，而地址通常是需要通过计算获得，所以执行 LI/LC 时直接从 ax 取值会更高效。另一点是我们的 PUSH 指令只能将 ax 的值放到栈上，而不能以值作为参数，详细见下文。\"]},\"329\":{\"h\":\"PUSH\",\"t\":[\"在 x86 中，PUSH 的作用是将值或寄存器，而在我们的虚拟机中，它的作用是将 ax 的值放入栈中。这样做的主要原因是为了简化虚拟机的实现，并且我们也只有一个寄存器 ax 。代码如下：\",\"else if (op == PUSH) {*--sp = ax;} // push the value of ax onto the stack\"]},\"330\":{\"h\":\"JMP\",\"t\":[\"JMP <addr> 是跳转指令，无条件地将当前的 PC 寄存器设置为指定的 <addr>，实现如下：\",\"else if (op == JMP) {pc = (int *)*pc;} // jump to the address\",\"需要注意的是，pc 寄存器指向的是 下一条 指令。所以此时它存放的是 JMP 指令的参数，即 <addr> 的值。\"]},\"331\":{\"h\":\"JZ/JNZ\",\"t\":[\"为了实现 if 语句，我们需要条件判断相关的指令。这里我们只实现两个最简单的条件判断，即结果（ax）为零或不为零情况下的跳转。\",\"实现如下：\",\"else if (op == JZ) {pc = ax ? pc + 1 : (int *)*pc;} // jump if ax is zeroelse if (op == JNZ) {pc = ax ? (int *)*pc : pc + 1;} // jump if ax is not zero\"]},\"332\":{\"h\":\"子函数调用\",\"t\":[\"这是汇编中最难理解的部分，所以合在一起说，要引入的命令有 CALL, ENT, ADJ 及 LEV。\",\"首先我们介绍 CALL <addr> 与 RET 指令，CALL 的作用是跳转到地址为 <addr> 的子函数，RET 则用于从子函数中返回。\",\"为什么不能直接使用 JMP 指令呢？原因是当我们从子函数中返回时，程序需要回到跳转之前的地方继续运行，这就需要事先将这个位置信息存储起来。反过来，子函数要返回时，就需要获取并恢复这个信息。因此实际中我们将 PC 保存在栈中。如下：\",\"else if (op == CALL) {*--sp = (int)(pc+1); pc = (int *)*pc;} // call subroutine//else if (op == RET) {pc = (int *)*sp++;} // return from subroutine;\",\"这里我们把 RET 相关的内容注释了，是因为之后我们将用 LEV 指令来代替它。\",\"在实际调用函数时，不仅要考虑函数的地址，还要考虑如何传递参数和如何返回结果。这里我们约定，如果子函数有返回结果，那么就在返回时保存在 ax 中，它可以是一个值，也可以是一个地址。那么参数的传递呢？\",\"各种编程语言关于如何调用子函数有不同的约定，例如 C 语言的调用标准是：\",\"由调用者将参数入栈。\",\"调用结束时，由调用者将参数出栈。\",\"参数逆序入栈。\",\"事先声明一下，我们的编译器参数是顺序入栈的，下面的例子（C 语言调用标准）取自 维基百科：\",\"int callee(int, int, int);int caller(void){ int i, ret; ret = callee(1, 2, 3); ret += 5; return ret;}\",\"会生成如下的 x86 汇编代码：\",\"caller: ; make new call frame push ebp mov ebp, esp sub 1, esp ; save stack for variable: i ; push call arguments push 3 push 2 push 1 ; call subroutine 'callee' call callee ; remove arguments from frame add esp, 12 ; use subroutine result add eax, 5 ; restore old call frame mov esp, ebp pop ebp ; return ret\",\"上面这段代码在我们自己的虚拟机里会有几个问题：\",\"push ebp，但我们的 PUSH 指令并无法指定寄存器。\",\"mov ebp, esp，我们的 MOV 指令同样功能不足。\",\"add esp, 12，也是一样的问题（尽管我们还没定义）。\",\"也就是说由于我们的指令过于简单（如只能操作ax寄存器），所以用上面提到的指令，我们连函数调用都无法实现。而我们又不希望扩充现有指令的功能，因为这样实现起来就会变得复杂，因此我们采用的方法是增加指令集。毕竟我们不是真正的计算机，增加指令会消耗许多资源（钱）。\"]},\"333\":{\"h\":\"ENT\",\"t\":[\"ENT <size> 指的是 enter，用于实现 ‘make new call frame’ 的功能，即保存当前的栈指针，同时在栈上保留一定的空间，用以存放局部变量。对应的汇编代码为：\",\"; make new call framepush ebpmov ebp, esp sub 1, esp ; save stack for variable: i\",\"实现如下：\",\"else if (op == ENT) {*--sp = (int)bp; bp = sp; sp = sp - *pc++;} // make new stack frame\"]},\"334\":{\"h\":\"ADJ\",\"t\":[\"ADJ <size> 用于实现 ‘remove arguments from frame’。在将调用子函数时压入栈中的数据清除，本质上是因为我们的 ADD 指令功能有限。对应的汇编代码为：\",\"; remove arguments from frameadd esp, 12\",\"实现如下：\",\"else if (op == ADJ) {sp = sp + *pc++;} // add esp, <size>\"]},\"335\":{\"h\":\"LEV\",\"t\":[\"本质上这个指令并不是必需的，只是我们的指令集中并没有 POP 指令。并且三条指令写来比较麻烦且浪费空间，所以用一个指令代替。对应的汇编指令为：\",\"; restore old call frame mov esp, ebppop ebp; returnret\",\"具体的实现如下：\",\"else if (op == LEV) {sp = bp; bp = (int *)*sp++; pc = (int *)*sp++;} // restore call frame and PC\",\"注意的是，LEV 已经把 RET 的功能包含了，所以我们不再需要 RET 指令。\"]},\"336\":{\"h\":\"LEA\",\"t\":[\"上面的一些指令解决了调用帧的问题，但还有一个问题是如何在子函数中获得传入的参数。这里我们首先要了解的是当参数调用时，栈中的调用帧是什么样的。我们依旧用上面的例子（只是现在用“顺序”调用参数）：\",\"sub_function(arg1, arg2, arg3);| .... | high address+---------------+| arg: 1 | new_bp + 4+---------------+| arg: 2 | new_bp + 3+---------------+| arg: 3 | new_bp + 2+---------------+|return address | new_bp + 1+---------------+| old BP | <- new BP+---------------+| local var 1 | new_bp - 1+---------------+| local var 2 | new_bp - 2+---------------+| .... | low address\",\"所以为了获取第一个参数，我们需要得到 new_bp + 4，但就如上面的说，我们的 ADD 指令无法操作除 ax 外的寄存器，所以我们提供了一个新的指令：LEA <offset>\",\"实现如下：\",\"else if (op == LEA) {ax = (int)(bp + *pc++);} // load address for arguments.\",\"以上就是我们为了实现函数调用需要的指令了。\"]},\"337\":{\"h\":\"运算符指令\",\"t\":[\"我们为 C 语言中支持的运算符都提供对应汇编指令。每个运算符都是二元的，即有两个参数，第一个参数放在栈顶，第二个参数放在 ax 中。这个顺序要特别注意。因为像 -，/ 之类的运算符是与参数顺序有关的。计算后会将栈顶的参数退栈，结果存放在寄存器 ax 中。因此计算结束后，两个参数都无法取得了（汇编的意义上，存在内存地址上就另当别论）。\",\"实现如下：\",\"else if (op == OR) ax = *sp++ | ax;else if (op == XOR) ax = *sp++ ^ ax;else if (op == AND) ax = *sp++ & ax;else if (op == EQ) ax = *sp++ == ax;else if (op == NE) ax = *sp++ != ax;else if (op == LT) ax = *sp++ < ax;else if (op == LE) ax = *sp++ <= ax;else if (op == GT) ax = *sp++ > ax;else if (op == GE) ax = *sp++ >= ax;else if (op == SHL) ax = *sp++ << ax;else if (op == SHR) ax = *sp++ >> ax;else if (op == ADD) ax = *sp++ + ax;else if (op == SUB) ax = *sp++ - ax;else if (op == MUL) ax = *sp++ * ax;else if (op == DIV) ax = *sp++ / ax;else if (op == MOD) ax = *sp++ % ax;\"]},\"338\":{\"h\":\"内置函数\",\"t\":[\"写的程序要”有用“，除了核心的逻辑外还需要输入输出，例如 C 语言中我们经常使用的 printf 函数就是用于输出。但是 printf 函数的实现本身就十分复杂，如果我们的编译器要达到自举，就势必要实现 printf 之类的函数，但它又与编译器没有太大的联系，因此我们继续实现新的指令，从虚拟机的角度予以支持。\",\"编译器中我们需要用到的函数有：exit, open, close, read, printf, malloc, memset 及 memcmp。代码如下：\",\"else if (op == EXIT) { printf(\\\"exit(%d)\\\", *sp); return *sp;}else if (op == OPEN) { ax = open((char *)sp[1], sp[0]); }else if (op == CLOS) { ax = close(*sp);}else if (op == READ) { ax = read(sp[2], (char *)sp[1], *sp); }else if (op == PRTF) { tmp = sp + pc[1]; ax = printf((char *)tmp[-1], tmp[-2], tmp[-3], tmp[-4], tmp[-5], tmp[-6]); }else if (op == MALC) { ax = (int)malloc(*sp);}else if (op == MSET) { ax = (int)memset((char *)sp[2], sp[1], *sp);}else if (op == MCMP) { ax = memcmp((char *)sp[2], (char *)sp[1], *sp);}\",\"这里的原理是，我们的电脑上已经有了这些函数的实现，因此编译编译器时，这些函数的二进制代码就被编译进了我们的编译器，因此在我们的编译器/虚拟机上运行我们提供的这些指令时，这些函数就是可用的。换句话说就是不需要我们自己去实现了。\",\"最后再加上一个错误判断：\",\"else { printf(\\\"unknown instruction:%d\\\\n\\\", op); return -1;}\"]},\"339\":{\"h\":\"测试\",\"t\":[\"下面我们用我们的汇编写一小段程序，来计算 10+20，在 main 函数中加入下列代码：\",\"int main(int argc, char *argv[]){ ax = 0; ... i = 0; text[i++] = IMM; text[i++] = 10; text[i++] = PUSH; text[i++] = IMM; text[i++] = 20; text[i++] = ADD; text[i++] = PUSH; text[i++] = EXIT; pc = text; ... program();}\",\"编译程序 gcc xc-tutor.c，运行程序：./a.out hello.c。输出\",\"exit(30)\",\"另外，我们的代码里有一些指针的强制转换，默认是 32 位的，因此在 64 位机器下，会出现 segmentation fault，解决方法（二选一）：\",\"编译时加上 -m32 参数：gcc -m32 xc-tutor.c\",\"在代码的开头，增加 #define int long long，long long 是 64 位的，不会出现强制转换后的问题。\",\"注意我们的之前的程序需要指令一个源文件，只是现在还用不着，但从结果可以看出，我们的虚拟机还是工作良好的。\"]},\"340\":{\"h\":\"小结\",\"t\":[\"本章中我们回顾了计算机的内部运行原理，并仿照 x86 汇编指令设计并实现了我们自己的指令集。希望通过本章的学习，你能对计算机程序的原理有一定的了解，同时能对汇编语言有一定的概念，因为汇编语言就是 C 编译器的输出。\",\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-1 https://github.com/lotabout/write-a-C-interpreter\",\"实际计算机中，添加一个新的指令需要设计许多新的电路，会增加许多的成本，但我们的虚拟机中，新的指令几乎不消耗资源，因此我们可以利用这一点，用更多的指令来完成更多的功能，从而简化具体的实现。\"]},\"341\":{\"h\":\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"t\":[\"本文转自 https://lotabout.me/2015/write-a-C-interpreter-3/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 什么是词法分析器\",\"2. 词法分析器与编译器\",\"3. 词法分析器的实现\",\"3.1. 支持的标记\",\"3.2. 词法分析器的框架\",\"3.3. 换行符\",\"3.4. 宏定义\",\"3.5. 标识符与符号表\",\"3.6. 数字\",\"3.7. 字符串\",\"3.8. 注释\",\"3.9. 其它\",\"3.10. 关键字与内置函数\",\"4. 代码\",\"5. 小结\",\"本章我们要讲解如何构建词法分析器。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"342\":{\"h\":\"什么是词法分析器\",\"t\":[\"简而言之，词法分析器用于对源码字符串做预处理，以减少语法分析器的复杂程度。\",\"词法分析器以源码字符串为输入，输出为标记流（token stream），即一连串的标记，每个标记通常包括： (token, token value) 即标记本身和标记的值。例如，源码中若包含一个数字 '998' ，词法分析器将输出 (Number, 998)，即（数字，998）。再例如：\",\"2 + 3 * (4 - 5)=>(Number, 2) Add (Number, 3) Multiply Left-Bracket (Number, 4) Subtract (Number, 5) Right-Bracket\",\"通过词法分析器的预处理，语法分析器的复杂度会大大降低，这点在后面的语法分析器我们就能体会。\"]},\"343\":{\"h\":\"词法分析器与编译器\",\"t\":[\"要是深入词法分析器，你就会发现，它的本质上也是编译器。我们的编译器是以标记流为输入，输出汇编代码，而词法分析器则是以源码字符串为输入，输出标记流。\",\" +-------+ +--------+-- source code --> | lexer | --> token stream --> | parser | --> assembly +-------+ +--------+\",\"在这个前提下，我们可以这样认为：直接从源代码编译成汇编代码是很困难的，因为输入的字符串比较难处理。所以我们先编写一个较为简单的编译器（词法分析器）来将字符串转换成标记流，而标记流对于语法分析器而言就容易处理得多了。\"]},\"344\":{\"h\":\"词法分析器的实现\",\"t\":[\"由于词法分析的工作很常见，但又枯燥且容易出错，所以人们已经开发出了许多工具来生成词法分析器，如 lex, flex。这些工具允许我们通过正则表达式来识别标记。\",\"这里注意的是，我们并不会一次性地将所有源码全部转换成标记流，原因有二：\",\"字符串转换成标记流有时是有状态的，即与代码的上下文是有关系的。\",\"保存所有的标记流没有意义且浪费空间。\",\"所以实际的处理方法是提供一个函数（即前几篇中提到的 next()），每次调用该函数则返回下一个标记。\"]},\"345\":{\"h\":\"支持的标记\",\"t\":[\"在全局中添加如下定义：\",\"// tokens and classes (operators last and in precedence order)enum { Num = 128, Fun, Sys, Glo, Loc, Id, Char, Else, Enum, If, Int, Return, Sizeof, While, Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak};\",\"这些就是我们要支持的标记符。例如，我们会将 = 解析为 Assign；将 == 解析为 Eq；将 != 解析为 Ne 等等。\",\"所以这里我们会有这样的印象，一个标记（token）可能包含多个字符，且多数情况下如此。而词法分析器能减小语法分析复杂度的原因，正是因为它相当于通过一定的编码（更多的标记）来压缩了源码字符串。\",\"当然，上面这些标记是有顺序的，跟它们在 C 语言中的优先级有关，如 *(Mul) 的优先级就要高于 +(Add)。它们的具体使用在后面的语法分析中会提到。\",\"最后要注意的是还有一些字符，它们自己就构成了标记，如右方括号 ] 或波浪号 ~ 等。我们不另外处理它们的原因是：\",\"它们是单字符的，即并不是多个字符共同构成标记（如 == 需要两个字符）；\",\"它们不涉及优先级关系。\"]},\"346\":{\"h\":\"词法分析器的框架\",\"t\":[\"即 next() 函数的主体：\",\"void next() { char *last_pos; int hash; while (token = *src) { ++src; // parse token here } return;}\",\"这里的一个问题是，为什么要用 while 循环呢？这就涉及到编译器（记得我们说过词法分析器也是某种意义上的编译器）的一个问题：如何处理错误？\",\"对词法分析器而言，若碰到了一个我们不认识的字符该怎么处理？一般处理的方法有两种：\",\"指出错误发生的位置，并退出整个程序\",\"指出错误发生的位置，跳过当前错误并继续编译\",\"这个 while 循环的作用就是跳过这些我们不识别的字符，我们同时还用它来处理空白字符。我们知道，C 语言中空格是用来作为分隔用的，并不作为语法的一部分。因此在实现中我们将它作为“不识别”的字符，这个 while 循环可以用来跳过它。\"]},\"347\":{\"h\":\"换行符\",\"t\":[\"换行符和空格类似，但有一点不同，每次遇到换行符，我们需要将当前的行号加一：\",\"// parse token here...if (token == '\\\\n') { ++line;}...\"]},\"348\":{\"h\":\"宏定义\",\"t\":[\"C 语言的宏定义以字符 # 开头，如 # include <stdio.h>。我们的编译器并不支持宏定义，所以直接跳过它们。\",\"else if (token == '#') { // skip macro, because we will not support it while (*src != 0 && *src != '\\\\n') { src++; }}\"]},\"349\":{\"h\":\"标识符与符号表\",\"t\":[\"标识符（identifier）可以理解为变量名。对于语法分析而言，我们并不关心一个变量具体叫什么名字，而只关心这个变量名代表的唯一标识。例如 int a; 定义了变量 a，而之后的语句 a = 10，我们需要知道这两个 a 指向的是同一个变量。\",\"基于这个理由，词法分析器会把扫描到的标识符全都保存到一张表中，遇到新的标识符就去查这张表，如果标识符已经存在，就返回它的唯一标识。\",\"那么我们怎么表示标识符呢？如下：\",\"struct identifier { int token; int hash; char * name; int class; int type; int value; int Bclass; int Btype; int Bvalue;}\",\"这里解释一下具体的含义：\",\"token：该标识符返回的标记，理论上所有的变量返回的标记都应该是 Id，但实际上由于我们还将在符号表中加入关键字如 if, while 等，它们都有对应的标记。\",\"hash：顾名思义，就是这个标识符的哈希值，用于标识符的快速比较。\",\"name：存放标识符本身的字符串。\",\"class：该标识符的类别，如数字，全局变量或局部变量等。\",\"type：标识符的类型，即如果它是个变量，变量是 int 型、char 型还是指针型。\",\"value：存放这个标识符的值，如标识符是函数，刚存放函数的地址。\",\"BXXXX：C 语言中标识符可以是全局的也可以是局部的，当局部标识符的名字与全局标识符相同时，用作保存全局标识符的信息。\",\"由上可以看出，我们实现的词法分析器与传统意义上的词法分析器不太相同。传统意义上的符号表只需要知道标识符的唯一标识即可，而我们还存放了一些只有语法分析器才会得到的信息，如 type 。\",\"由于我们的目标是能自举，而我们定义的语法不支持 struct，故而使用下列方式。\",\"Symbol table:----+-----+----+----+----+-----+-----+-----+------+------+---- .. |token|hash|name|type|class|value|btype|bclass|bvalue| ..----+-----+----+----+----+-----+-----+-----+------+------+---- |<--- one single identifier --->|\",\"即用一个整型数组来保存相关的ID信息。每个ID占用数组中的9个空间，分析标识符的相关代码如下：\",\"int token_val; // value of current token (mainly for number)int *current_id, // current parsed ID *symbols; // symbol table// fields of identifierenum {Token, Hash, Name, Type, Class, Value, BType, BClass, BValue, IdSize};void next() { ... else if ((token >= 'a' && token <= 'z') || (token >= 'A' && token <= 'Z') || (token == '_')) { // parse identifier last_pos = src - 1; hash = token; while ((*src >= 'a' && *src <= 'z') || (*src >= 'A' && *src <= 'Z') || (*src >= '0' && *src <= '9') || (*src == '_')) { hash = hash * 147 + *src; src++; } // look for existing identifier, linear search current_id = symbols; while (current_id[Token]) { if (current_id[Hash] == hash && !memcmp((char *)current_id[Name], last_pos, src - last_pos)) { //found one, return token = current_id[Token]; return; } current_id = current_id + IdSize; } // store new ID current_id[Name] = (int)last_pos; current_id[Hash] = hash; token = current_id[Token] = Id; return; } ...}\",\"查找已有标识符的方法是线性查找 symbols 表。\"]},\"350\":{\"h\":\"数字\",\"t\":[\"数字中较为复杂的一点是需要支持十进制、十六进制及八进制。逻辑也较为直接，可能唯一不好理解的是获取十六进制的值相关的代码。\",\"token_val = token_val * 16 + (token & 15) + (token >= 'A' ? 9 : 0);\",\"这里要注意的是在ASCII码中，字符a对应的十六进制值是 61, A是41，故通过 (token & 15) 可以得到个位数的值。其它就不多说了，这里这样写的目的是装B（其实是抄 c4 的源代码的）。\",\"void next() { ... else if (token >= '0' && token <= '9') { // parse number, three kinds: dec(123) hex(0x123) oct(017) token_val = token - '0'; if (token_val > 0) { // dec, starts with [1-9] while (*src >= '0' && *src <= '9') { token_val = token_val*10 + *src++ - '0'; } } else { // starts with number 0 if (*src == 'x' || *src == 'X') { //hex token = *++src; while ((token >= '0' && token <= '9') || (token >= 'a' && token <= 'f') || (token >= 'A' && token <= 'F')) { token_val = token_val * 16 + (token & 15) + (token >= 'A' ? 9 : 0); token = *++src; } } else { // oct while (*src >= '0' && *src <= '7') { token_val = token_val*8 + *src++ - '0'; } } } token = Num; return; } ...}\"]},\"351\":{\"h\":\"字符串\",\"t\":[\"在分析时，如果分析到字符串，我们需要将它存放到前一篇文章中说的 data 段中。然后返回它在 data 段中的地址。另一个特殊的地方是我们需要支持转义符。例如用 \\\\n 表示换行符。由于本编译器的目的是达到自己编译自己，所以代码中并没有支持除 \\\\n 的转义符，如 \\\\t, \\\\r 等，但仍支持 \\\\a 表示字符 a 的语法，如 \\\\\\\" 表示 \\\"。\",\"在分析时，我们将同时分析单个字符如 'a' 和字符串如 \\\"a string\\\"。若得到的是单个字符，我们以 Num 的形式返回。相关代码如下：\",\"void next() { ... else if (token == '\\\"' || token == '\\\\'') { // parse string literal, currently, the only supported escape // character is '\\\\n', store the string literal into data. last_pos = data; while (*src != 0 && *src != token) { token_val = *src++; if (token_val == '\\\\\\\\') { // escape character token_val = *src++; if (token_val == 'n') { token_val = '\\\\n'; } } if (token == '\\\"') { *data++ = token_val; } } src++; // if it is a single character, return Num token if (token == '\\\"') { token_val = (int)last_pos; } else { token = Num; } return; }}\"]},\"352\":{\"h\":\"注释\",\"t\":[\"在我们的 C 语言中，只支持 // 类型的注释，不支持 /* comments */ 的注释。\",\"void next() { ... else if (token == '/') { if (*src == '/') { // skip comments while (*src != 0 && *src != '\\\\n') { ++src; } } else { // divide operator token = Div; return; } } ...}\",\"这里我们要额外介绍 lookahead 的概念，即提前看多个字符。上述代码中我们看到，除了跳过注释，我们还可能返回除号 /(Div) 标记。\",\"提前看字符的原理是：有一个或多个标记是以同样的字符开头的（如本小节中的注释与除号），因此只凭当前的字符我们并无法确定具体应该解释成哪一个标记，所以只能再向前查看字符，如本例需向前查看一个字符，若是 / 则说明是注释，反之则是除号。\",\"我们之前说过，词法分析器本质上也是编译器，其实提前看字符的概念也存在于编译器，只是这时就是提前看k个“标记”而不是“字符”了。平时听到的 LL(k) 中的 k 就是需要向前看的标记的个数了。\",\"另外，我们用词法分析器将源码转换成标记流，能减小语法分析复杂度，原因之一就是减少了语法分析器需要“向前看”的字符个数。\"]},\"353\":{\"h\":\"其它\",\"t\":[\"其它的标记的解析就相对容易一些了，我们直接贴上代码：\",\"void next() { ... else if (token == '=') { // parse '==' and '=' if (*src == '=') { src ++; token = Eq; } else { token = Assign; } return; } else if (token == '+') { // parse '+' and '++' if (*src == '+') { src ++; token = Inc; } else { token = Add; } return; } else if (token == '-') { // parse '-' and '--' if (*src == '-') { src ++; token = Dec; } else { token = Sub; } return; } else if (token == '!') { // parse '!=' if (*src == '=') { src++; token = Ne; } return; } else if (token == '<') { // parse '<=', '<<' or '<' if (*src == '=') { src ++; token = Le; } else if (*src == '<') { src ++; token = Shl; } else { token = Lt; } return; } else if (token == '>') { // parse '>=', '>>' or '>' if (*src == '=') { src ++; token = Ge; } else if (*src == '>') { src ++; token = Shr; } else { token = Gt; } return; } else if (token == '|') { // parse '|' or '||' if (*src == '|') { src ++; token = Lor; } else { token = Or; } return; } else if (token == '&') { // parse '&' and '&&' if (*src == '&') { src ++; token = Lan; } else { token = And; } return; } else if (token == '^') { token = Xor; return; } else if (token == '%') { token = Mod; return; } else if (token == '*') { token = Mul; return; } else if (token == '[') { token = Brak; return; } else if (token == '?') { token = Cond; return; } else if (token == '~' || token == ';' || token == '{' || token == '}' || token == '(' || token == ')' || token == ']' || token == ',' || token == ':') { // directly return the character as token; return; } ...}\",\"代码较多，但主要逻辑就是向前看一个字符来确定真正的标记。\"]},\"354\":{\"h\":\"关键字与内置函数\",\"t\":[\"虽然上面写完了词法分析器，但还有一个问题需要考虑，那就是“关键字”，例如 if, while, return 等。它们不能被作为普通的标识符，因为有特殊的含义。\",\"一般有两种处理方法：\",\"词法分析器中直接解析这些关键字。\",\"在语法分析前将关键字提前加入符号表。\",\"这里我们就采用第二种方法，将它们加入符号表，并提前为它们赋予必要的信息（还记得前面说的标识符 Token 字段吗？）。这样当源代码中出现关键字时，它们会被解析成标识符，但由于符号表中已经有了相关的信息，我们就能知道它们是特殊的关键字。\",\"内置函数的行为也和关键字类似，不同的只是赋值的信息，在main函数中进行初始化如下：\",\"// types of variable/functionenum { CHAR, INT, PTR };int *idmain; // the `main` functionvoid main() { ... src = \\\"char else enum if int return sizeof while \\\" \\\"open read close printf malloc memset memcmp exit void main\\\"; // add keywords to symbol table i = Char; while (i <= While) { next(); current_id[Token] = i++; } // add library to symbol table i = OPEN; while (i <= EXIT) { next(); current_id[Class] = Sys; current_id[Type] = INT; current_id[Value] = i++; } next(); current_id[Token] = Char; // handle void type next(); idmain = current_id; // keep track of main ... program();}\"]},\"355\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-2 https://github.com/lotabout/write-a-C-interpreter\",\"上面的代码运行后会出现 ‘Segmentation Falt’，这是正常的，因为它会尝试运行我们上一章创建的虚拟机，但其中并没有任何汇编代码。\"]},\"356\":{\"h\":\"小结\",\"t\":[\"本章我们为我们的编译器构建了词法分析器，通过本章的学习，我认为有几个要点需要强调：\",\"词法分析器的作用是对源码字符串进行预处理，作用是减小语法分析器的复杂程度。\",\"词法分析器本身可以认为是一个编译器，输入是源码，输出是标记流。\",\"lookahead(k) 的概念，即向前看 k 个字符或标记。\",\"词法分析中如何处理标识符与符号表。\",\"下一章中，我们将介绍递归下降的语法分析器。我们下一章见。\"]},\"357\":{\"c\":[\"编译原理\"]},\"358\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"359\":{\"h\":\"手把手教你构建 C 语言编译器（4）——递归下降\",\"t\":[\"[[[toc]]]\",\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-4/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 什么是递归下降\",\"2. 终结符与非终结符\",\"3. 四则运算的递归下降\",\"4. 为什么选择递归下降\",\"5. 左递归\",\"6. 四则运算的实现\",\"7. 小结\",\"本章我们将讲解递归下降的方法，并用它完成一个基本的四则运算的语法分析器。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"360\":{\"h\":\"什么是递归下降\",\"t\":[\"传统上，编写语法分析器有两种方法，一种是自顶向下，一种是自底向上。自顶向下是从起始非终结符开始，不断地对非终结符进行分解，直到匹配输入的终结符；自底向上是不断地将终结符进行合并，直到合并成起始的非终结符。\",\"其中的自顶向下方法就是我们所说的递归下降。\"]},\"361\":{\"h\":\"终结符与非终结符\",\"t\":[\"没有学过编译原理的话可能并不知道什么是“终结符”，“非终结符”。这里我简单介绍一下。首先是 BNF 范式，就是一种用来描述语法的语言，例如，四则运算的规则可以表示如下：\",\"<expr> ::= <expr> + <term> | <expr> - <term> | <term><term> ::= <term> * <factor> | <term> / <factor> | <factor><factor> ::= ( <expr> ) | Num\",\"用尖括号 <> 括起来的就称作 非终结符 ，因为它们可以用 ::= 右侧的式子代替。| 表示选择，如 <expr> 可以是 <expr> + <term>、<expr> - <term>或 <term> 中的一种。而没有出现在::=左边的就称作 终结符 ，一般终结符对应于词法分析器输出的标记。\"]},\"362\":{\"h\":\"四则运算的递归下降\",\"t\":[\"例如，我们对 3 * (4 + 2) 进行语法分析。我们假设词法分析器已经正确地将其中的数字识别成了标记 Num。\",\"递归下降是从起始的非终结符开始（顶），本例中是 <expr>，实际中可以自己指定，不指定的话一般认为是第一个出现的非终结符。\",\"1. <expr> => <expr>2. => <term> * <factor>3. => <factor> |4. => Num (3) |5. => ( <expr> )6. => <expr> + <term>7. => <term> |8. => <factor> |9. => Num (4) |10. => <factor>11. => Num (2)\",\"可以看到，整个解析的过程是在不断对非终结符进行替换（向下），直到遇见了终结符（底）。而我们可以从解析的过程中看出，一些非终结符如<expr>被递归地使用了。\"]},\"363\":{\"h\":\"为什么选择递归下降\",\"t\":[\"从上小节对四则运算的递归下降解析可以看出，整个解析的过程和语法的 BNF 表示是十分接近的，更为重要的是，我们可以很容易地直接将 BNF 表示转换成实际的代码。方法是为每个产生式（即 非终结符 ::= ...）生成一个同名的函数。\",\"这里会有一个疑问，就是上例中，当一个终结符有多个选择时，如何确定具体选择哪一个？如为什么用 <expr> ::= <term> * <factor> 而不是 <expr> ::= <term> / <factor> ？这就用到了上一章中提到的“向前看 k 个标记”的概念了。我们向前看一个标记，发现是 *，而这个标记足够让我们确定用哪个表达式了。\",\"另外，递归下下降方法对 BNF 方法本身有一定的要求，否则会有一些问题，如经典的“左递归”问题。\"]},\"364\":{\"h\":\"左递归\",\"t\":[\"原则上我们是不讲这么深入，但我们上面的四则运算的文法就是左递归的，而左递归的语法是没法直接使用递归下降的方法实现的。因此我们要消除左递归，消除后的文法如下：\",\"<expr> ::= <term> <expr_tail><expr_tail> ::= + <term> <expr_tail> | - <term> <expr_tail> | <empty><term> ::= <factor> <term_tail><term_tail> ::= * <factor> <term_tail> | / <factor> <term_tail> | <empty><factor> ::= ( <expr> ) | Num\",\"消除左递归的相关方法，这里不再多说，请自行查阅相关的资料。\"]},\"365\":{\"h\":\"四则运算的实现\",\"t\":[\"本节中我们专注语法分析器部分的实现，具体实现很容易，我们直接贴上代码，就是上述的消除左递归后的文法直接转换而来的：\",\"int expr();int factor() { int value = 0; if (token == '(') { match('('); value = expr(); match(')'); } else { value = token_val; match(Num); } return value;}int term_tail(int lvalue) { if (token == '*') { match('*'); int value = lvalue * factor(); return term_tail(value); } else if (token == '/') { match('/'); int value = lvalue / factor(); return term_tail(value); } else { return lvalue; }}int term() { int lvalue = factor(); return term_tail(lvalue);}int expr_tail(int lvalue) { if (token == '+') { match('+'); int value = lvalue + term(); return expr_tail(value); } else if (token == '-') { match('-'); int value = lvalue - term(); return expr_tail(value); } else { return lvalue; }}int expr() { int lvalue = term(); return expr_tail(lvalue);}\",\"可以看到，有了BNF方法后，采用递归向下的方法来实现编译器是很直观的。\",\"我们把词法分析器的代码一并贴上：\",\"##include <stdio.h>##include <stdlib.h>enum {Num};int token;int token_val;char *line = NULL;char *src = NULL;void next() { // skip white space while (*src == ' ' || *src == '\\\\t') { src ++; } token = *src++; if (token >= '0' && token <= '9' ) { token_val = token - '0'; token = Num; while (*src >= '0' && *src <= '9') { token_val = token_val*10 + *src - '0'; src ++; } return; }}void match(int tk) { if (token != tk) { printf(\\\"expected token: %d(%c), got: %d(%c)\\\\n\\\", tk, tk, token, token); exit(-1); } next();}\",\"最后是main函数：\",\"int main(int argc, char *argv[]){ size_t linecap = 0; ssize_t linelen; while ((linelen = getline(&line, &linecap, stdin)) > 0) { src = line; next(); printf(\\\"%d\\\\n\\\", expr()); } return 0;}\"]},\"366\":{\"h\":\"小结\",\"t\":[\"本章中我们介绍了递归下降的方法，并用它来实现了四则运算的语法分析器。\",\"花这么大精力讲解递归下降方法，是因为几乎所有手工编写的语法分析器都或多或少地有它的影子。换句话说，掌握了递归下降的方法，就可以应付大多数的语法分析器编写。\",\"同时我们也用实例看到了理论（BNF 语法，左递归的消除）是如何帮助我们的工程实现的。尽管理论不是必需的，但如果能掌握它，对于提高我们的水平还是很有帮助的。\"]},\"367\":{\"c\":[\"编译原理\"]},\"368\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"369\":{\"h\":\"手把手教你构建 C 语言编译器（5）——变量定义\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-5/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. EBNF 表示\",\"2. 解析变量的定义\",\"2.1. program()\",\"2.2. global_declaration()\",\"2.3. enum_declaration()\",\"2.4. 其它\",\"3. 代码\",\"4. 小结\",\"本章中我们用 EBNF 来大致描述我们实现的 C 语言的文法，并实现其中解析变量定义部分。\",\"由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"370\":{\"h\":\"EBNF 表示\",\"t\":[\"EBNF 是对前一章提到的 BNF 的扩展，它的语法更容易理解，实现起来也更直观。但真正看起来还是很烦，如果不想看可以跳过。\",\"program ::= {global_declaration}+global_declaration ::= enum_decl | variable_decl | function_declenum_decl ::= 'enum' [id] '{' id ['=' 'num'] {',' id ['=' 'num'] '}'variable_decl ::= type {'*'} id { ',' {'*'} id } ';'function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}'parameter_decl ::= type {'*'} id {',' type {'*'} id}body_decl ::= {variable_decl}, {statement}statement ::= non_empty_statement | empty_statementnon_empty_statement ::= if_statement | while_statement | '{' statement '}' | 'return' expression | expression ';'if_statement ::= 'if' '(' expression ')' statement ['else' non_empty_statement]while_statement ::= 'while' '(' expression ')' non_empty_statement\",\"其中 expression 相关的内容我们放到后面解释，主要原因是我们的语言不支持跨函数递归，而为了实现自举，实际上我们也不能使用递归（亏我们说了一章的递归下降）。\",\"P.S. 我是先写程序再总结上面的文法，所以实际上它们间的对应关系并不是特别明显。\"]},\"371\":{\"h\":\"解析变量的定义\",\"t\":[\"本章要讲解的就是上节文法中的 enum_decl 和 variable_decl 部分。\"]},\"372\":{\"h\":\"program()\",\"t\":[\"首先是之前定义过的 program 函数，将它改成：\",\"void program() { // get next token next(); while (token > 0) { global_declaration(); }}\",\"我知道 global_declaration 函数还没有出现过，但没有关系，采用自顶向下的编写方法就是要不断地实现我们需要的内容。下面是 global_declaration 函数的内容：\"]},\"373\":{\"h\":\"global_declaration()\",\"t\":[\"即全局的定义语句，包括变量定义，类型定义（只支持枚举）及函数定义。代码如下：\",\"int basetype; // the type of a declaration, make it global for convenienceint expr_type; // the type of an expressionvoid global_declaration() { // global_declaration ::= enum_decl | variable_decl | function_decl // // enum_decl ::= 'enum' [id] '{' id ['=' 'num'] {',' id ['=' 'num'} '}' // // variable_decl ::= type {'*'} id { ',' {'*'} id } ';' // // function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}' int type; // tmp, actual type for variable int i; // tmp basetype = INT; // parse enum, this should be treated alone. if (token == Enum) { // enum [id] { a = 10, b = 20, ... } match(Enum); if (token != '{') { match(Id); // skip the [id] part } if (token == '{') { // parse the assign part match('{'); enum_declaration(); match('}'); } match(';'); return; } // parse type information if (token == Int) { match(Int); } else if (token == Char) { match(Char); basetype = CHAR; } // parse the comma seperated variable declaration. while (token != ';' && token != '}') { type = basetype; // parse pointer type, note that there may exist `int ****x;` while (token == Mul) { match(Mul); type = type + PTR; } if (token != Id) { // invalid declaration printf(\\\"%d: bad global declaration\\\\n\\\", line); exit(-1); } if (current_id[Class]) { // identifier exists printf(\\\"%d: duplicate global declaration\\\\n\\\", line); exit(-1); } match(Id); current_id[Type] = type; if (token == '(') { current_id[Class] = Fun; current_id[Value] = (int)(text + 1); // the memory address of function function_declaration(); } else { // variable declaration current_id[Class] = Glo; // global variable current_id[Value] = (int)data; // assign memory address data = data + sizeof(int); } if (token == ',') { match(','); } } next();}\",\"看了上面的代码，能大概理解吗？这里我们讲解其中的一些细节。\",\"向前看标记 ：其中的 if (token == xxx) 语句就是用来向前查看标记以确定使用哪一个产生式，例如只要遇到 enum 我们就知道是需要解析枚举类型。而如果只解析到类型，如 int identifier 时我们并不能确定 identifier 是一个普通的变量还是一个函数，所以还需要继续查看后续的标记，如果遇到 ( 则可以断定是函数了，反之则是变量。\",\"变量类型的表示 ：我们的编译器支持指针类型，那意味着也支持指针的指针，如 int **data;。那么我们如何表示指针类型呢？前文中我们定义了支持的类型：\",\"// types of variable/functionenum { CHAR, INT, PTR };\",\"所以一个类型首先有基本类型，如 CHAR 或 INT，当它是一个指向基本类型的指针时，如 int *data，我们就将它的类型加上 PTR 即代码中的：type = type + PTR;。同理，如果是指针的指针，则再加上 PTR。\"]},\"374\":{\"h\":\"enum_declaration()\",\"t\":[\"用于解析枚举类型的定义。主要的逻辑用于解析用逗号（,）分隔的变量，值得注意的是在编译器中如何保存枚举变量的信息。\",\"即我们将该变量的类别设置成了 Num，这样它就成了全局的常量了，而注意到上节中，正常的全局变量的类别则是 Glo，类别信息在后面章节中解析 expression 会使用到。\",\"void enum_declaration() { // parse enum [id] { a = 1, b = 3, ...} int i; i = 0; while (token != '}') { if (token != Id) { printf(\\\"%d: bad enum identifier %d\\\\n\\\", line, token); exit(-1); } next(); if (token == Assign) { // like {a=10} next(); if (token != Num) { printf(\\\"%d: bad enum initializer\\\\n\\\", line); exit(-1); } i = token_val; next(); } current_id[Class] = Num; current_id[Type] = INT; current_id[Value] = i++; if (token == ',') { next(); } }}\"]},\"375\":{\"h\":\"其它\",\"t\":[\"其中的 function_declaration 函数我们将放到下一章中讲解。match 函数是一个辅助函数：\",\"void match(int tk) { if (token == tk) { next(); } else { printf(\\\"%d: expected token: %d\\\\n\\\", line, tk); exit(-1); }}\",\"它将 next 函数包装起来，如果不是预期的标记则报错并退出。\"]},\"376\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-3 https://github.com/lotabout/write-a-C-interpreter\",\"本章的代码还无法正常运行，因为还有许多功能没有实现，但如果有兴趣的话，可以自己先试着去实现它。\"]},\"377\":{\"h\":\"小结\",\"t\":[\"本章的内容应该不难，除了开头的 EBNF 表达式可能相对不好理解一些，但如果你查看了 EBNF 的具体表示方法后就不难理解了。\",\"剩下的内容就是按部就班地将 EBNF 的产生式转换成函数的过程，如果你理解了上一章中的内容，相信这部分也不难理解。\",\"下一章中我们将介绍如何解析函数的定义，敬请期待。\"]},\"378\":{\"c\":[\"编译原理\"]},\"379\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"380\":{\"h\":\"手把手教你构建 C 语言编译器（6）——函数定义\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-6/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. EBNF 表示\",\"2. 解析函数的定义\",\"2.1. 函数参数与汇编代码\",\"2.2. 函数定义的解析\",\"2.3. 解析参数\",\"2.4. 函数体的解析\",\"3. 代码\",\"4. 小结\",\"由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。本章讲解函数定义相关的内容。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"381\":{\"h\":\"EBNF 表示\",\"t\":[\"这是上一章的 EBNF 方法中与函数定义相关的内容。\",\"variable_decl ::= type {'*'} id { ',' {'*'} id } ';'function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}'parameter_decl ::= type {'*'} id {',' type {'*'} id}body_decl ::= {variable_decl}, {statement}statement ::= non_empty_statement | empty_statementnon_empty_statement ::= if_statement | while_statement | '{' statement '}' | 'return' expression | expression ';'if_statement ::= 'if' '(' expression ')' statement ['else' non_empty_statement]while_statement ::= 'while' '(' expression ')' non_empty_statement\"]},\"382\":{\"h\":\"解析函数的定义\",\"t\":[\"上一章的代码中，我们已经知道了什么时候开始解析函数的定义，相关的代码如下：\",\"...if (token == '(') { current_id[Class] = Fun; current_id[Value] = (int)(text + 1); // the memory address of function function_declaration();} else {...\",\"即在这断代码之前，我们已经为当前的标识符（identifier）设置了正确的类型，上面这断代码为当前的标识符设置了正确的类别（Fun），以及该函数在代码段（text segment）中的位置。接下来开始解析函数定义相关的内容：parameter_decl 及 body_decl。\"]},\"383\":{\"h\":\"函数参数与汇编代码\",\"t\":[\"现在我们要回忆如何将“函数”转换成对应的汇编代码，因为这决定了在解析时我们需要哪些相关的信息。考虑下列函数：\",\"int demo(int param_a, int *param_b) { int local_1; char local_2; ...}\",\"那么它应该被转换成什么样的汇编代码呢？在思考这个问题之前，我们需要了解当 demo函数被调用时，计算机的栈的状态，如下（参照第三章讲解的虚拟机）：\",\"| .... | high address+---------------+| arg: param_a | new_bp + 3+---------------+| arg: param_b | new_bp + 2+---------------+|return address | new_bp + 1+---------------+| old BP | <- new BP+---------------+| local_1 | new_bp - 1+---------------+| local_2 | new_bp - 2+---------------+| .... | low address\",\"这里最为重要的一点是，无论是函数的参数（如 param_a）还是函数的局部变量（如 local_1）都是存放在计算机的 栈 上的。因此，与存放在 数据段 中的全局变量不同，在函数内访问它们是通过 new_bp 指针和对应的位移量进行的。因此，在解析的过程中，我们需要知道参数的个数，各个参数的位移量。\"]},\"384\":{\"h\":\"函数定义的解析\",\"t\":[\"这相当于是整个函数定义的语法解析的框架，代码如下：\",\"void function_declaration() { // type func_name (...) {...} // | this part match('('); function_parameter(); match(')'); match('{'); function_body(); //match('}'); // ① // ② // unwind local variable declarations for all local variables. current_id = symbols; while (current_id[Token]) { if (current_id[Class] == Loc) { current_id[Class] = current_id[BClass]; current_id[Type] = current_id[BType]; current_id[Value] = current_id[BValue]; } current_id = current_id + IdSize; }}\",\"其中①中我们没有消耗最后的}字符。这么做的原因是：variable_decl 与 function_decl 是放在一起解析的，而 variable_decl 是以字符 ; 结束的。而 function_decl 是以字符 } 结束的，若在此通过 match 消耗了 ‘;’ 字符，那么外层的 while 循环就没法准确地知道函数定义已经结束。所以我们将结束符的解析放在了外层的 while 循环中。\",\"而②中的代码是用于将符号表中的信息恢复成全局的信息。这是因为，局部变量是可以和全局变量同名的，一旦同名，在函数体内局部变量就会覆盖全局变量，出了函数体，全局变量就恢复了原先的作用。这段代码线性地遍历所有标识符，并将保存在 BXXX 中的信息还原。\"]},\"385\":{\"h\":\"解析参数\",\"t\":[\"parameter_decl ::= type {'*'} id {',' type {'*'} id}\",\"解析函数的参数就是解析以逗号分隔的一个个标识符，同时记录它们的位置与类型。\",\"int index_of_bp; // index of bp pointer on stackvoid function_parameter() { int type; int params; params = 0; while (token != ')') { // ① // int name, ... type = INT; if (token == Int) { match(Int); } else if (token == Char) { type = CHAR; match(Char); } // pointer type while (token == Mul) { match(Mul); type = type + PTR; } // parameter name if (token != Id) { printf(\\\"%d: bad parameter declaration\\\\n\\\", line); exit(-1); } if (current_id[Class] == Loc) { printf(\\\"%d: duplicate parameter declaration\\\\n\\\", line); exit(-1); } match(Id); //② // store the local variable current_id[BClass] = current_id[Class]; current_id[Class] = Loc; current_id[BType] = current_id[Type]; current_id[Type] = type; current_id[BValue] = current_id[Value]; current_id[Value] = params++; // index of current parameter if (token == ',') { match(','); } } // ③ index_of_bp = params+1;}\",\"其中①与全局变量定义的解析十分一样，用于解析该参数的类型。\",\"而②则与上节中提到的“局部变量覆盖全局变量”相关，先将全局变量的信息保存（无论是是否真的在全局中用到了这个变量）在 BXXX 中，再赋上局部变量相关的信息，如 Value 中存放的是参数的位置（是第几个参数）。\",\"③则与汇编代码的生成有关，index_of_bp 就是前文提到的 new_bp 的位置。\"]},\"386\":{\"h\":\"函数体的解析\",\"t\":[\"我们实现的 C 语言与现代的 C 语言不太一致，我们需要所有的变量定义出现在所有的语句之前。函数体的代码如下：\",\"void function_body() { // type func_name (...) {...} // -->| |<-- // ... { // 1. local declarations // 2. statements // } int pos_local; // position of local variables on the stack. int type; pos_local = index_of_bp; // ① while (token == Int || token == Char) { // local variable declaration, just like global ones. basetype = (token == Int) ? INT : CHAR; match(token); while (token != ';') { type = basetype; while (token == Mul) { match(Mul); type = type + PTR; } if (token != Id) { // invalid declaration printf(\\\"%d: bad local declaration\\\\n\\\", line); exit(-1); } if (current_id[Class] == Loc) { // identifier exists printf(\\\"%d: duplicate local declaration\\\\n\\\", line); exit(-1); } match(Id); // store the local variable current_id[BClass] = current_id[Class]; current_id[Class] = Loc; current_id[BType] = current_id[Type]; current_id[Type] = type; current_id[BValue] = current_id[Value]; current_id[Value] = ++pos_local; // index of current parameter if (token == ',') { match(','); } } match(';'); } // ② // save the stack size for local variables *++text = ENT; *++text = pos_local - index_of_bp; // statements while (token != '}') { statement(); } // emit code for leaving the sub function *++text = LEV;}\",\"其中①用于解析函数体内的局部变量的定义，代码与全局的变量定义几乎一样。\",\"而②则用于生成汇编代码，我们在第三章的虚拟机中提到过，我们需要在栈上为局部变量预留空间，这两行代码起的就是这个作用。\"]},\"387\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-4 https://github.com/lotabout/write-a-C-interpreter\",\"本章的代码依旧无法运行，还有两个重要函数没有完成：statement 及 expression，感兴趣的话可以尝试自己实现它们。\"]},\"388\":{\"h\":\"小结\",\"t\":[\"本章中我们用了不多的代码完成了函数定义的解析。大部分的代码依旧是用于解析变量：参数和局部变量，而它们的逻辑和全局变量的解析几乎一致，最大的区别就是保存的信息不同。\",\"当然，要理解函数定义的解析过程，最重要的是理解我们会为函数生成怎样的汇编代码，因为这决定了我们需要从解析中获取什么样的信息（例如参数的位置，个数等），而这些可能需要你重新回顾一下“虚拟机”这一章，或是重新学习学习汇编相关的知识。\",\"下一章中我们将讲解语句的解析，敬请期待。\"]},\"389\":{\"c\":[\"编译原理\"]},\"390\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"391\":{\"h\":\"手把手教你构建 C 语言编译器（7）——语句\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-7/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 语句\",\"1.1. IF 语句\",\"1.2. While 语句\",\"1.3. Return 语句\",\"1.4. 其它语句\",\"2. 代码\",\"3. 小结\",\"整个编译器还剩下最后两个部分：语句和表达式的解析。它们的内容比较多，主要涉及如何将语句和表达式编译成汇编代码。这章讲解语句的解析，相对于表达式来说它还是较为容易的。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"392\":{\"h\":\"语句\",\"t\":[\"C 语言区分“语句”（statement）和“表达式”（expression）两个概念。简单地说，可以认为语句就是表达式加上末尾的分号。\",\"在我们的编译器中共识别 6 种语句：\",\"if (...) <statement> [else <statement>]\",\"while (...) <statement>\",\"{ <statement> }\",\"return xxx;\",\"<empty statement>;\",\"expression; (expression end with semicolon)\",\"它们的语法分析都相对容易，重要的是去理解如何将这些语句编译成汇编代码，下面我们逐一解释。\"]},\"393\":{\"h\":\"IF 语句\",\"t\":[\"IF 语句的作用是跳转，跟据条件表达式决定跳转的位置。我们看看下面的伪代码：\",\"if (...) <statement> [else <statement>] if (<cond>) <cond> JZ a <true_statement> ===> <true_statement> else: JMP ba: a: <false_statement> <false_statement>b: b:\",\"对应的汇编代码流程为：\",\"执行条件表达式 <cond>。\",\"如果条件失败，则跳转到 a 的位置，执行 else 语句。这里 else 语句是可以省略的，此时 a 和 b 都指向 IF 语句后方的代码。\",\"因为汇编代码是顺序排列的，所以如果执行了 true_statement，为了防止因为顺序排列而执行了 false_statement，所以需要无条件跳转 JMP b。\",\"对应的 C 代码如下：\",\"if (token == If) { match(If); match('('); expression(Assign); // parse condition match(')'); *++text = JZ; b = ++text; statement(); // parse statement if (token == Else) { // parse else match(Else); // emit code for JMP B *b = (int)(text + 3); *++text = JMP; b = ++text; statement(); } *b = (int)(text + 1);}\"]},\"394\":{\"h\":\"While 语句\",\"t\":[\"While 语句比 If 语句简单，它对应的汇编代码如下：\",\"a: a: while (<cond>) <cond> JZ b <statement> <statement> JMP ab: b:\",\"没有什么值得说明的内容，它的 C 代码如下：\",\"else if (token == While) { match(While); a = text + 1; match('('); expression(Assign); match(')'); *++text = JZ; b = ++text; statement(); *++text = JMP; *++text = (int)a; *b = (int)(text + 1);}\"]},\"395\":{\"h\":\"Return 语句\",\"t\":[\"Return 唯一特殊的地方是：一旦遇到了 Return 语句，则意味着函数要退出了，所以需要生成汇编代码 LEV 来表示退出。\",\"else if (token == Return) { // return [expression]; match(Return); if (token != ';') { expression(Assign); } match(';'); // emit code for return *++text = LEV;}\"]},\"396\":{\"h\":\"其它语句\",\"t\":[\"其它语句并不直接生成汇编代码，所以不多做说明，代码如下：\",\"else if (token == '{') { // { <statement> ... } match('{'); while (token != '}') { statement(); } match('}');}else if (token == ';') { // empty statement match(';');}else { // a = b; or function_call(); expression(Assign); match(';');}\"]},\"397\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-5 https://github.com/lotabout/write-a-C-interpreter\",\"本章的代码依旧无法运行，还剩最后一部分没有完成：expression。\"]},\"398\":{\"h\":\"小结\",\"t\":[\"本章讲解了如何将语句编译成汇编代码，内容相对容易一些，关键就是去理解汇编代码的执行原理。\",\"同时值得一提的是，编译器的语法分析部分其实是很简单的，而真正的难点是如何在语法分析时收集足够多的信息，最终把源代码转换成目标代码（汇编）。我认为这也是初学者实现编译器的一大难点，往往比词法分析/语法分析更困难。\",\"所以建议如果没有学过汇编，可以学习学习，它本身不难，但对理解计算机的原理有很大帮助。\"]},\"399\":{\"c\":[\"编译原理\"]},\"400\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"401\":{\"h\":\"手把手教你构建 C 语言编译器（8）——表达式\",\"t\":[\"本文转自 https://blog.csdn.net/xzp740813/article/details/142961332?spm=1001.2014.3001.5501，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 运算符的优先级\",\"2. 一元运算符\",\"2.1. 常量\",\"2.2. sizeof\",\"2.3. 变量与函数调用\",\"2.4. 强制转换\",\"2.5. 指针取值\",\"2.6. 取址操作\",\"2.7. 逻辑取反\",\"2.8. 按位取反\",\"2.9. 正负号\",\"2.10. 自增自减\",\"3. 二元运算符\",\"3.1. 赋值操作\",\"3.2. 三目运算符\",\"3.3. 逻辑运算符\",\"3.4. 数学运算符\",\"3.5. 自增自减\",\"3.6. 数组取值操作\",\"4. 代码\",\"5. 小结\",\"这是整个编译器的最后一部分，解析表达式。什么是表达式？表达式是将各种语言要素的一个组合，用来求值。例如：函数调用、变量赋值、运算符运算等等。\",\"表达式的解析难点有二：一是运算符的优先级问题，二是如何将表达式编译成目标代码。我们就来逐一说明。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"402\":{\"h\":\"运算符的优先级\",\"t\":[\"运算符的优先级决定了表达式的运算顺序，如在普通的四则运算中，乘法 * 优先级高于加法 +，这就意味着表达式 2 + 3 * 4 的实际运行顺序是 2 + (3 * 4) 而不是 (2 + 3) * 4。\",\"C 语言定义了各种表达式的优先级，可以参考 C 语言运算符优先级。\",\"传统的编程书籍会用“逆波兰式”实现四则运算来讲解优先级问题。实际上，优先级关心的就是哪个运算符先计算，哪个运算符后计算（毕竟叫做“优先级”嘛）。而这就意味着我们需要决定先为哪个运算符生成目标代码（汇编），因为汇编代码是顺序排列的，我们必须先计算优先级高的运算符。\",\"那么如何确定运算符的优先级呢？答曰：栈（递归调用的实质也是栈的处理）。\",\"举一个例子：2 + 3 - 4 * 5，它的运算顺序是这样的：\",\"将 2 入栈\",\"遇到运算符 +，入栈，此时我们期待的是+的另一个参数\",\"遇到数字 3，原则上我们需要立即计算 2+3的值，但我们不确定数字 3 是否属于优先级更高的运算符，所以先将它入栈。\",\"遇到运算符 -，它的优先级和 + 相同，此时判断参数 3 属于这前的 +。将运算符 + 出栈，并将之前的 2 和 3 出栈，计算 2+3 的结果，得到 5 入栈。同时将运算符 - 入栈。\",\"遇到数字4，同样不能确定是否能立即计算，入栈\",\"遇到运算符 * 优先级大于 -，入栈\",\"遇到数字5，依旧不能确定是否立即计算，入栈\",\"表达式结束，运算符出栈，为 *，将参数出栈，计算 4*5 得到结果 20 入栈。\",\"运算符出栈，为 -，将参数出栈，计算 5-20，得到 -15 入栈。\",\"此时运算符栈为空，因此得到结果 -15。\",\"// after step 1, 2| |+------+| 3 | | |+------+ +------+| 2 | | + |+------+ +------+// after step 4| | | |+------+ +------+| 5 | | - |+------+ +------+// after step 7| |+------+| 5 |+------+ +------+| 4 | | * |+------+ +------+| 5 | | - |+------+ +------+\",\"综上，在计算一个运算符‘x’之前，必须先查看它的右方，找出并计算所有优先级大于‘x’的运算符，之后再计算运算符‘x’。\",\"最后注意的是优先通常只与多元运算符相关，单元运算符往往没有这个问题（因为只有一个参数）。也可以认为“优先级”的实质就是两个运算符在抢参数。\"]},\"403\":{\"h\":\"一元运算符\",\"t\":[\"上节中说到了运算符的优先级，也提到了优先级一般只与多元运算符有关，这也意味着一元运算符的优先级总是高于多元运算符。因为我们需要先对它们进行解析。\",\"当然，这部分也将同时解析参数本身（如变量、数字、字符串等等）。\",\"关于表达式的解析，与语法分析相关的部分就是上文所说的优先级问题了，而剩下的较难较烦的部分是与目标代码的生成有关的。因此对于需要讲解的运算符，我们主要从它的目标代码入手。\"]},\"404\":{\"h\":\"常量\",\"t\":[\"首先是数字，用 IMM 指令将它加载到 AX 中即可：\",\"if (token == Num) { match(Num); // emit code *++text = IMM; *++text = token_val; expr_type = INT;}\",\"接着是字符串常量。它比较特殊的一点是 C 语言的字符串常量支持如下风格：\",\"char *p;p = \\\"first line\\\" \\\"second line\\\";\",\"即跨行的字符串拼接，它相当于：\",\"char *p;p = \\\"first linesecond line\\\";\",\"所以解析的时候要注意这一点：\",\"else if (token == '\\\"') { // emit code *++text = IMM; *++text = token_val; match('\\\"'); // store the rest strings while (token == '\\\"') { match('\\\"'); } // append the end of string character '\\\\0', all the data are default // to 0, so just move data one position forward. data = (char *)(((int)data + sizeof(int)) & (-sizeof(int))); expr_type = PTR;}\"]},\"405\":{\"h\":\"sizeof\",\"t\":[\"sizeof 是一个一元运算符，我们需要知道后面参数的类型，类型的解析在前面的文章中我们已经很熟悉了。\",\"else if (token == Sizeof) { // sizeof is actually an unary operator // now only `sizeof(int)`, `sizeof(char)` and `sizeof(*...)` are // supported. match(Sizeof); match('('); expr_type = INT; if (token == Int) { match(Int); } else if (token == Char) { match(Char); expr_type = CHAR; } while (token == Mul) { match(Mul); expr_type = expr_type + PTR; } match(')'); // emit code *++text = IMM; *++text = (expr_type == CHAR) ? sizeof(char) : sizeof(int); expr_type = INT;}\",\"注意的是只支持 sizeof(int)，sizeof(char) 及 sizeof(pointer type...)。并且它的结果是 int 型。\"]},\"406\":{\"h\":\"变量与函数调用\",\"t\":[\"由于取变量的值与函数的调用都是以 Id 标记开头的，因此将它们放在一起处理。\",\"else if (token == Id) { // there are several type when occurs to Id // but this is unit, so it can only be // 1. function call // 2. Enum variable // 3. global/local variable match(Id); id = current_id; if (token == '(') { // function call match('('); // ① // pass in arguments tmp = 0; // number of arguments while (token != ')') { expression(Assign); *++text = PUSH; tmp ++; if (token == ',') { match(','); } } match(')'); // ② // emit code if (id[Class] == Sys) { // system functions *++text = id[Value]; } else if (id[Class] == Fun) { // function call *++text = CALL; *++text = id[Value]; } else { printf(\\\"%d: bad function call\\\\n\\\", line); exit(-1); } // ③ // clean the stack for arguments if (tmp > 0) { *++text = ADJ; *++text = tmp; } expr_type = id[Type]; } else if (id[Class] == Num) { // ④ // enum variable *++text = IMM; *++text = id[Value]; expr_type = INT; } else { // ⑤ // variable if (id[Class] == Loc) { *++text = LEA; *++text = index_of_bp - id[Value]; } else if (id[Class] == Glo) { *++text = IMM; *++text = id[Value]; } else { printf(\\\"%d: undefined variable\\\\n\\\", line); exit(-1); } //⑥ // emit code, default behaviour is to load the value of the // address which is stored in `ax` expr_type = id[Type]; *++text = (expr_type == Char) ? LC : LI; }}\",\"①中注意我们是顺序将参数入栈，这和第三章：虚拟机中讲解的指令是对应的。与之不同，标准 C 是逆序将参数入栈的。\",\"②中判断函数的类型，同样在第三章：“虚拟机”中我们介绍过内置函数的支持，如 printf, read, malloc 等等。内置函数有对应的汇编指令，而普通的函数则编译成 CALL <addr> 的形式。\",\"③用于清除入栈的参数。因为我们不在乎出栈的值，所以直接修改栈指针的大小即可。\",\"④：当该标识符是全局定义的枚举类型时，直接将对应的值用 IMM 指令存入 AX 即可。\",\"⑤则是用于加载变量的值，如果是局部变量则采用与 bp 指针相对位置的形式（参见第 7章函数定义）。而如果是全局变量则用 IMM 加载变量的地址。\",\"⑥：无论是全局还是局部变量，最终都根据它们的类型用 LC 或 LI 指令加载对应的值。\",\"关于变量，你可能有疑问，如果遇到标识符就用 LC/LI 载入相应的值，那诸如 a[10] 之类的表达式要如何实现呢？后面我们会看到，根据标识符后的运算符，我们可能会修改或删除现有的 LC/LI 指令。\"]},\"407\":{\"h\":\"强制转换\",\"t\":[\"虽然我们前面没有提到，但我们一直用 expr_type 来保存一个表达式的类型，强制转换的作用是获取转换的类型，并直接修改 expr_type 的值。\",\"else if (token == '(') { // cast or parenthesis match('('); if (token == Int || token == Char) { tmp = (token == Char) ? CHAR : INT; // cast type match(token); while (token == Mul) { match(Mul); tmp = tmp + PTR; } match(')'); expression(Inc); // cast has precedence as Inc(++) expr_type = tmp; } else { // normal parenthesis expression(Assign); match(')'); }}\"]},\"408\":{\"h\":\"指针取值\",\"t\":[\"诸如 *a 的指针取值，关键是判断 a 的类型，而就像上节中提到的，当一个表达式解析结束时，它的类型保存在变量 expr_type 中。\",\"else if (token == Mul) { // dereference *<addr> match(Mul); expression(Inc); // dereference has the same precedence as Inc(++) if (expr_type >= PTR) { expr_type = expr_type - PTR; } else { printf(\\\"%d: bad dereference\\\\n\\\", line); exit(-1); } *++text = (expr_type == CHAR) ? LC : LI;}\"]},\"409\":{\"h\":\"取址操作\",\"t\":[\"这里我们就能看到“变量与函数调用”一节中所说的修改或删除 LC/LI 指令了。前文中我们说到，对于变量，我们会先加载它的地址，并根据它们类型使用 LC/LI 指令加载实际内容，例如对变量 a：\",\"IMM <addr>LI\",\"那么对变量 a 取址，其实只要不执行 LC/LI 即可。因此我们删除相应的指令。\",\"else if (token == And) { // get the address of match(And); expression(Inc); // get the address of if (*text == LC || *text == LI) { text --; } else { printf(\\\"%d: bad address of\\\\n\\\", line); exit(-1); } expr_type = expr_type + PTR;}\"]},\"410\":{\"h\":\"逻辑取反\",\"t\":[\"我们没有直接的逻辑取反指令，因此我们判断它是否与数字 0 相等。而数字 0 代表了逻辑 “False”。\",\"else if (token == '!') { // not match('!'); expression(Inc); // emit code, use <expr> == 0 *++text = PUSH; *++text = IMM; *++text = 0; *++text = EQ; expr_type = INT;}\"]},\"411\":{\"h\":\"按位取反\",\"t\":[\"同样我们没有相应的指令，所以我们用异或来实现，即 ~a = a ^ 0xFFFF。\",\"else if (token == '~') { // bitwise not match('~'); expression(Inc); // emit code, use <expr> XOR -1 *++text = PUSH; *++text = IMM; *++text = -1; *++text = XOR; expr_type = INT;}\"]},\"412\":{\"h\":\"正负号\",\"t\":[\"注意这里并不是四则运算中的加减法，而是单个数字的取正取负操作。同样，我们没有取负的操作，用 0 - x 来实现 -x。\",\"else if (token == Add) { // +var, do nothing match(Add); expression(Inc); expr_type = INT;}else if (token == Sub) { // -var match(Sub); if (token == Num) { *++text = IMM; *++text = -token_val; match(Num); } else { *++text = IMM; *++text = -1; *++text = PUSH; expression(Inc); *++text = MUL; } expr_type = INT;}\"]},\"413\":{\"h\":\"自增自减\",\"t\":[\"注意的是自增自减操作的优先级是和它的位置有关的。如 ++p 的优先级高于 p++，这里我们解析的就是类似 ++p 的操作。\",\"else if (token == Inc || token == Dec) { tmp = token; match(token); expression(Inc); // ① if (*text == LC) { *text = PUSH; // to duplicate the address *++text = LC; } else if (*text == LI) { *text = PUSH; *++text = LI; } else { printf(\\\"%d: bad lvalue of pre-increment\\\\n\\\", line); exit(-1); } *++text = PUSH; *++text = IMM; // ② *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char); *++text = (tmp == Inc) ? ADD : SUB; *++text = (expr_type == CHAR) ? SC : SI;}\",\"对应的汇编代码也比较直观，只是在实现 ++p时，我们要使用变量 p 的地址两次，所以我们需要先 PUSH （①）。\",\"②则是因为自增自减操作还需要处理是指针的情形。\"]},\"414\":{\"h\":\"二元运算符\",\"t\":[\"这里，我们需要处理多运算符的优先级问题，就如前文的“优先级”一节提到的，我们需要不断地向右扫描，直到遇到优先级 小于 当前优先级的运算符。\",\"回想起我们之前定义过的各个标记，它们是以优先级从低到高排列的，即 Assign 的优先级最低，而 Brak（[） 的优先级最高。\",\"enum { Num = 128, Fun, Sys, Glo, Loc, Id, Char, Else, Enum, If, Int, Return, Sizeof, While, Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak};\",\"所以，当我们调用 expression(level) 进行解析的时候，我们其实通过了参数 level 指定了当前的优先级。在前文的一元运算符处理中也用到了这一点。\",\"所以，此时的二元运算符的解析的框架为：\",\"while (token >= level) { // parse token for binary operator and postfix operator}\",\"解决了优先级的问题，让我们继续讲解如何把运算符编译成汇编代码吧。\"]},\"415\":{\"h\":\"赋值操作\",\"t\":[\"赋值操作是优先级最低的运算符。考虑诸如 a = (expession) 的表达式，在解析 = 之前，我们已经为变量 a 生成了如下的汇编代码：\",\"IMM <addr>LC/LI\",\"当解析完=右边的表达式后，相应的值会存放在 ax 中，此时，为了实际将这个值保存起来，我们需要类似下面的汇编代码：\",\"IMM <addr>PUSHSC/SI\",\"明白了这点，也就能理解下面的源代码了：\",\"tmp = expr_type;if (token == Assign) { // var = expr; match(Assign); if (*text == LC || *text == LI) { *text = PUSH; // save the lvalue's pointer } else { printf(\\\"%d: bad lvalue in assignment\\\\n\\\", line); exit(-1); } expression(Assign); expr_type = tmp; *++text = (expr_type == CHAR) ? SC : SI;}\"]},\"416\":{\"h\":\"三目运算符\",\"t\":[\"这是 C 语言中唯一的一个三元运算符： ? :，它相当于一个小型的 If 语句，所以生成的代码也类似于 If 语句，这里就不多作解释。\",\"else if (token == Cond) { // expr ? a : b; match(Cond); *++text = JZ; addr = ++text; expression(Assign); if (token == ':') { match(':'); } else { printf(\\\"%d: missing colon in conditional\\\\n\\\", line); exit(-1); } *addr = (int)(text + 3); *++text = JMP; addr = ++text; expression(Cond); *addr = (int)(text + 1);}\"]},\"417\":{\"h\":\"逻辑运算符\",\"t\":[\"这包括 || 和 &&。它们对应的汇编代码如下：\",\"<expr1> || <expr2> <expr1> && <expr2> ...<expr1>... ...<expr1>... JNZ b JZ b ...<expr2>... ...<expr2>...b: b:\",\"所以源码如下：\",\"else if (token == Lor) { // logic or match(Lor); *++text = JNZ; addr = ++text; expression(Lan); *addr = (int)(text + 1); expr_type = INT;}else if (token == Lan) { // logic and match(Lan); *++text = JZ; addr = ++text; expression(Or); *addr = (int)(text + 1); expr_type = INT;}\"]},\"418\":{\"h\":\"数学运算符\",\"t\":[\"它们包括 |, ^, &, ==, !=<=, >=, <, >, <<, >>, +, -, *, /, %。它们的实现都很类似，我们以异或 ^ 为例：\",\"<expr1> ^ <expr2>...<expr1>... <- now the result is on axPUSH...<expr2>... <- now the value of <expr2> is on axXOR\",\"所以它对应的代码为：\",\"else if (token == Xor) { // bitwise xor match(Xor); *++text = PUSH; expression(And); *++text = XOR; expr_type = INT;}\",\"其它的我们便不再详述。但这当中还有一个问题，就是指针的加减。在 C 语言中，指针加上数值等于将指针移位，且根据不同的类型移动的位移不同。如 a + 1，如果 a 是 char * 型，则移动一字节，而如果 a 是 int * 型，则移动 4 个字节（32位系统）。\",\"另外，在作指针减法时，如果是两个指针相减（相同类型），则结果是两个指针间隔的元素个数。因此要有特殊的处理。\",\"下面以加法为例，对应的汇编代码为：\",\"<expr1> + <expr2>normal pointer<expr1> <expr1>PUSH PUSH<expr2> <expr2> |ADD PUSH | <expr2> * <unit> IMM <unit> | MUL | ADD\",\"即当 <expr1> 是指针时，要根据它的类型放大 <expr2> 的值，因此对应的源码如下：\",\"else if (token == Add) { // add match(Add); *++text = PUSH; expression(Mul); expr_type = tmp; if (expr_type > PTR) { // pointer type, and not `char *` *++text = PUSH; *++text = IMM; *++text = sizeof(int); *++text = MUL; } *++text = ADD;}\",\"相应的减法的代码就不贴了，可以自己实现看看，也可以看文末给出的链接。\"]},\"419\":{\"h\":\"自增自减\",\"t\":[\"这次是后缀形式的，即 p++ 或 p--。与前缀形式不同的是，在执行自增自减后， ax上需要保留原来的值。所以我们首先执行类似前缀自增自减的操作，再将 ax 中的值执行减/增的操作。\",\"// 前缀形式 生成汇编代码*++text = PUSH;*++text = IMM;*++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);*++text = (tmp == Inc) ? ADD : SUB;*++text = (expr_type == CHAR) ? SC : SI;// 后缀形式 生成汇编代码*++text = PUSH;*++text = IMM;*++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);*++text = (token == Inc) ? ADD : SUB;*++text = (expr_type == CHAR) ? SC : SI;*++text = PUSH; //*++text = IMM; // 执行相反的增/减操作*++text = (expr_type > PTR) ? sizeof(int) : sizeof(char); //*++text = (token == Inc) ? SUB : ADD; //\"]},\"420\":{\"h\":\"数组取值操作\",\"t\":[\"在学习 C 语言的时候你可能已经知道了，诸如 a[10] 的操作等价于 *(a + 10)。因此我们要做的就是生成类似的汇编代码：\",\"else if (token == Brak) { // array access var[xx] match(Brak); *++text = PUSH; expression(Assign); match(']'); if (tmp > PTR) { // pointer, `not char *` *++text = PUSH; *++text = IMM; *++text = sizeof(int); *++text = MUL; } else if (tmp < PTR) { printf(\\\"%d: pointer type expected\\\\n\\\", line); exit(-1); } expr_type = tmp - PTR; *++text = ADD; *++text = (expr_type == CHAR) ? LC : LI;}\"]},\"421\":{\"h\":\"代码\",\"t\":[\"除了上述对表达式的解析外，我们还需要初始化虚拟机的栈，我们可以正确调用 main 函数，且当 main 函数结束时退出进程。\",\"int *tmp;// setup stacksp = (int *)((int)stack + poolsize);*--sp = EXIT; // call exit if main returns*--sp = PUSH; tmp = sp;*--sp = argc;*--sp = (int)argv;*--sp = (int)tmp;\",\"当然，最后要注意的一点是：所有的变量定义必须放在语句之前。\",\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-6 https://github.com/lotabout/write-a-C-interpreter\",\"通过 gcc -o xc-tutor xc-tutor.c 进行编译。并执行 ./xc-tutor hello.c 查看结果。\",\"正如我们保证的那样，我们的代码是自举的，能自己编译自己，所以你可以执行 ./xc-tutor xc-tutor.c hello.c。可以看到和之前有同样的输出。\"]},\"422\":{\"h\":\"小结\",\"t\":[\"本章我们进行了最后的解析，解析表达式。本章有两个难点：\",\"如何通过递归调用 expression 来实现运算符的优先级。\",\"如何为每个运算符生成对应的汇编代码。\",\"尽管代码看起来比较简单（虽然多），但其中用到的原理还是需要仔细推敲的。\",\"最后，恭喜你！通过一步步的学习，自己实现了一个C语言的编译器（好吧，是解释器）。\"]},\"423\":{\"c\":[\"编译原理\"]},\"424\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"425\":{\"h\":\"手把手教你构建 C 语言编译器（9）——总结\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-9/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 虚拟机与目标代码\",\"2. 词法分析\",\"3. 语法分析\",\"4. 关于编代码\",\"5. 结语\",\"恭喜你完成了自己的 C 语言编译器，本章中我们发一发牢骚，说一说编写编译器值得注意的一些问题；编写编译器时遇到的一些难题。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"426\":{\"h\":\"虚拟机与目标代码\",\"t\":[\"整个系列的一开始，我们就着手虚拟机的实现。不知道你是否有同感，这部分对于整个编译器的编写其实是十分重要的。我认为至少占了重要程度的50%。\",\"这里要说明这样一个观点，学习编译原理时常常着眼于词法分析和语法分析，而忽略了同样重要的代码生成。对于学习或考试而言或许可以，但实际编译项目时，最为重要的是能“跑起来”，所以我们需要给予代码生成高度的重视。\",\"同时我们也看到，在后期解析语句和表达式时，难点已经不再是语法分析了，而是如何为运算符生成相应的汇编代码。\"]},\"427\":{\"h\":\"词法分析\",\"t\":[\"我们用了很暴力的手段编写了我们的词法分析器，我认为这并无不可。\",\"但你依旧可以学习相关的知识，了解自动生成词法分析器的原理，它涉及到了“正则表达式”，“状态机”等等知识。相信这部分的知识能够很大程度上提高你的编程水平。\",\"同时，如果今后你仍然想编写编译器，不妨试试这些自动生成工具。\"]},\"428\":{\"h\":\"语法分析\",\"t\":[\"长期以来，语法分析对我而言一直是迷一样的存在，直到真正用递归下降的方式实现了一个。\",\"我们用了专门的一章讲解了“递归下降”与 BNF 文法的关系。希望能减少你对理论的厌恶。至少，实现起来并不是太难。\",\"如果有兴趣，可以学习学习这些文法，因为已经有许多自动生成的工具支持它们。这样你就不需要重复造轮子。可以看看 yacc 等工具，更先进的版本是 bsion。同时其它语言也有许多类似的支持。\",\"题外话，最近知道了一个叫“PEG 文法”的表示方法，无论是读起来，还是实现起来，都比 BNF 要容易，你也可以学习看看。\"]},\"429\":{\"h\":\"关于编代码\",\"t\":[\"这也是我自己的感慨吧。无论多好的教程，想要完全理解它，最好的方式恐怕还是要自己实现它。\",\"只是在编写代码的过程中，我们会遇到许多的挫折，例如需要考虑许多细节，或是调试起来十分困难。但也只有真正静下心来去克服它，我们才能有所成长吧。\",\"例如在编写表达式的解析时，大量重复的代码特别让人崩溃。还有就是调试编译器，简直痛苦地无话可说。\",\"P.S. 如果你按这个系列自己编写代码，记得事先写一些用于输出汇编代码的函数，很有帮助的。\",\"还有就是写这个系列的文章，开始的冲动过了之后，每写一篇都特别心烦，希望文章本身没有受我的这种情绪影响吧。\"]},\"430\":{\"h\":\"结语\",\"t\":[\"编程有趣又无趣，只有身在其中的我们才能体会吧。\"]},\"431\":{\"c\":[\"编译原理\"]},\"432\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"433\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"434\":{\"h\":\"Design ASimpile CCompiler\"}},\"dirtCount\":0,\"index\":[[\"题外话\",{\"1\":{\"428\":1}}],[\"长期以来\",{\"1\":{\"428\":1}}],[\"难点已经不再是语法分析了\",{\"1\":{\"426\":1}}],[\"难以调试\",{\"1\":{\"316\":1}}],[\"难以增加\",{\"0\":{\"307\":1}}],[\"难以增加新的零件\",{\"0\":{\"134\":1}}],[\"难以根据类生成实例\",{\"1\":{\"264\":1}}],[\"跑起来\",{\"1\":{\"426\":1}}],[\"恭喜你完成了自己的\",{\"1\":{\"425\":1}}],[\"恭喜你\",{\"1\":{\"422\":1}}],[\"查看结果\",{\"1\":{\"421\":1}}],[\"查找已有标识符的方法是线性查找\",{\"1\":{\"349\":1}}],[\"减操作\",{\"1\":{\"419\":1}}],[\"减少程序的体积\",{\"1\":{\"325\":1}}],[\"减少重复代码\",{\"1\":{\"281\":1}}],[\"减少了类之间的耦合度\",{\"1\":{\"149\":1}}],[\"减少了客户端代码与具体类之间的耦合\",{\"1\":{\"129\":1}}],[\"减少对象之间的直接交互\",{\"1\":{\"114\":1}}],[\"减少对象之间的直接依赖\",{\"1\":{\"114\":1}}],[\"明白了这点\",{\"1\":{\"415\":1}}],[\"明确了各个类的职责分工\",{\"1\":{\"174\":1}}],[\"回想起我们之前定义过的各个标记\",{\"1\":{\"414\":1}}],[\"回到并发竞争带来的安全问题上\",{\"1\":{\"92\":1}}],[\"代表了逻辑\",{\"1\":{\"410\":1}}],[\"代码与全局的变量定义几乎一样\",{\"1\":{\"386\":1}}],[\"代码较多\",{\"1\":{\"353\":1}}],[\"代码如下\",{\"1\":{\"326\":1,\"329\":1,\"338\":1,\"373\":1,\"384\":1,\"393\":1,\"394\":1,\"396\":1}}],[\"代码段\",{\"1\":{\"325\":2}}],[\"代码\",{\"0\":{\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"421\":1},\"1\":{\"324\":1,\"341\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1}}],[\"代码难免会有错误\",{\"1\":{\"317\":1}}],[\"代码优化\",{\"1\":{\"314\":1}}],[\"代码的生成\",{\"1\":{\"314\":1}}],[\"代码的阅读方法和修改方法\",{\"0\":{\"176\":1}}],[\"代码是否高效显得就不那么重要了\",{\"1\":{\"313\":1}}],[\"代码实现\",{\"0\":{\"215\":1}}],[\"代码示例\",{\"0\":{\"170\":1,\"199\":1,\"232\":1},\"1\":{\"232\":1}}],[\"代码复用\",{\"1\":{\"169\":1,\"291\":1}}],[\"代码清单\",{\"1\":{\"155\":1}}],[\"代码还能正常工作\",{\"1\":{\"109\":1}}],[\"诸如\",{\"1\":{\"408\":1,\"420\":1}}],[\"载入相应的值\",{\"1\":{\"406\":1}}],[\"加载变量的地址\",{\"1\":{\"406\":1}}],[\"加法保序性\",{\"0\":{\"63\":1}}],[\"加法消去律\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"加法结合律\",{\"0\":{\"54\":1}}],[\"加法结果的唯一性\",{\"0\":{\"51\":1}}],[\"加法结果的存在性\",{\"0\":{\"50\":1}}],[\"加法交换律\",{\"0\":{\"53\":1}}],[\"加法的性质\",{\"0\":{\"52\":1}}],[\"加法的定义\",{\"0\":{\"49\":1}}],[\"⑥\",{\"1\":{\"406\":2}}],[\"⑤则是用于加载变量的值\",{\"1\":{\"406\":1}}],[\"⑤\",{\"1\":{\"406\":1}}],[\"④\",{\"1\":{\"406\":2}}],[\"找出并计算所有优先级大于\",{\"1\":{\"402\":1}}],[\"属于这前的\",{\"1\":{\"402\":1}}],[\"属性注入或方法注入\",{\"1\":{\"120\":1}}],[\"入栈\",{\"1\":{\"402\":9}}],[\"入度为\",{\"1\":{\"76\":1}}],[\"举一个例子\",{\"1\":{\"402\":1}}],[\"答曰\",{\"1\":{\"402\":1}}],[\"嘛\",{\"1\":{\"402\":1}}],[\"毕竟叫做\",{\"1\":{\"402\":1}}],[\"毕竟我们不是真正的计算机\",{\"1\":{\"332\":1}}],[\"哪个运算符后计算\",{\"1\":{\"402\":1}}],[\"哪些角色可以复用\",{\"0\":{\"245\":1}}],[\"逆波兰式\",{\"1\":{\"402\":1}}],[\"赋值操作是优先级最低的运算符\",{\"1\":{\"415\":1}}],[\"赋值操作\",{\"0\":{\"415\":1},\"1\":{\"401\":1}}],[\"按位取反\",{\"0\":{\"411\":1},\"1\":{\"401\":1}}],[\"强制转换的作用是获取转换的类型\",{\"1\":{\"407\":1}}],[\"强制转换\",{\"0\":{\"407\":1},\"1\":{\"401\":1}}],[\"常量\",{\"0\":{\"404\":1},\"1\":{\"401\":1}}],[\"往往比词法分析\",{\"1\":{\"398\":1}}],[\"执行相反的增\",{\"1\":{\"419\":1}}],[\"执行\",{\"1\":{\"393\":1}}],[\"执行条件表达式\",{\"1\":{\"393\":1}}],[\"执行过程本身就是安全的\",{\"1\":{\"93\":1}}],[\"跟据条件表达式决定跳转的位置\",{\"1\":{\"393\":1}}],[\"跟它们在\",{\"1\":{\"345\":1}}],[\"种语句\",{\"1\":{\"392\":1}}],[\"感兴趣的话可以尝试自己实现它们\",{\"1\":{\"387\":1}}],[\"局部变量覆盖全局变量\",{\"1\":{\"385\":1}}],[\"局部变量是可以和全局变量同名的\",{\"1\":{\"384\":1}}],[\"③用于清除入栈的参数\",{\"1\":{\"406\":1}}],[\"③则与汇编代码的生成有关\",{\"1\":{\"385\":1}}],[\"③\",{\"1\":{\"385\":1,\"406\":1}}],[\"全局变量就恢复了原先的作用\",{\"1\":{\"384\":1}}],[\"全局变量或局部变量等\",{\"1\":{\"349\":1}}],[\"出栈\",{\"1\":{\"402\":2}}],[\"出了函数体\",{\"1\":{\"384\":1}}],[\"出题人不愿意写一个确定精度的\",{\"1\":{\"36\":1}}],[\"消耗了\",{\"1\":{\"384\":1}}],[\"消除左递归的相关方法\",{\"1\":{\"364\":1}}],[\"消除后的文法如下\",{\"1\":{\"364\":1}}],[\"②则是因为自增自减操作还需要处理是指针的情形\",{\"1\":{\"413\":1}}],[\"②中判断函数的类型\",{\"1\":{\"406\":1}}],[\"②\",{\"1\":{\"384\":1,\"385\":1,\"386\":1,\"406\":1,\"413\":1}}],[\"①中注意我们是顺序将参数入栈\",{\"1\":{\"406\":1}}],[\"①\",{\"1\":{\"384\":1,\"385\":1,\"386\":1,\"406\":1,\"413\":2}}],[\"敬请期待\",{\"1\":{\"377\":1,\"388\":1}}],[\"敬请批评指正\",{\"1\":{\"317\":1}}],[\"剩下的内容就是按部就班地将\",{\"1\":{\"377\":1}}],[\"值得注意的是在编译器中如何保存枚举变量的信息\",{\"1\":{\"374\":1}}],[\"亏我们说了一章的递归下降\",{\"1\":{\"370\":1}}],[\"掌握了递归下降的方法\",{\"1\":{\"366\":1}}],[\"花这么大精力讲解递归下降方法\",{\"1\":{\"366\":1}}],[\"采用自顶向下的编写方法就是要不断地实现我们需要的内容\",{\"1\":{\"372\":1}}],[\"采用递归向下的方法来实现编译器是很直观的\",{\"1\":{\"365\":1}}],[\"采用反证法\",{\"1\":{\"72\":1,\"75\":1}}],[\"否则会有一些问题\",{\"1\":{\"363\":1}}],[\"底\",{\"1\":{\"362\":1}}],[\"向下\",{\"1\":{\"362\":1}}],[\"向前看标记\",{\"1\":{\"373\":1}}],[\"向前看\",{\"1\":{\"352\":1,\"363\":1}}],[\"顶\",{\"1\":{\"362\":1}}],[\"右侧的式子代替\",{\"1\":{\"361\":1}}],[\"括起来的就称作\",{\"1\":{\"361\":1}}],[\"括号太多\",{\"1\":{\"38\":1}}],[\"范式\",{\"1\":{\"361\":1}}],[\"非终结符\",{\"1\":{\"361\":2,\"363\":1}}],[\"终结符\",{\"1\":{\"361\":2}}],[\"终结符与非终结符\",{\"0\":{\"361\":1},\"1\":{\"359\":1}}],[\"四则运算的规则可以表示如下\",{\"1\":{\"361\":1}}],[\"四则运算的实现\",{\"0\":{\"365\":1},\"1\":{\"359\":1}}],[\"四则运算的递归下降\",{\"0\":{\"362\":1},\"1\":{\"359\":1}}],[\"左递归的消除\",{\"1\":{\"366\":1}}],[\"左递归\",{\"0\":{\"364\":1},\"1\":{\"359\":1,\"363\":1}}],[\"左手画方右手画圆在现实中本来就不成立\",{\"1\":{\"89\":1}}],[\"作用是减小语法分析器的复杂程度\",{\"1\":{\"356\":1}}],[\"作为观察者\",{\"1\":{\"259\":1}}],[\"作为被观察对象\",{\"1\":{\"259\":1}}],[\"作为设计人员\",{\"1\":{\"174\":1}}],[\"平时听到的\",{\"1\":{\"352\":1}}],[\"标准\",{\"1\":{\"406\":1}}],[\"标记开头的\",{\"1\":{\"406\":1}}],[\"标记\",{\"1\":{\"352\":2}}],[\"标识符的类型\",{\"1\":{\"349\":1}}],[\"标识符\",{\"1\":{\"349\":1}}],[\"标识符与符号表\",{\"0\":{\"349\":1},\"1\":{\"341\":1}}],[\"除了上述对表达式的解析外\",{\"1\":{\"421\":1}}],[\"除了开头的\",{\"1\":{\"377\":1}}],[\"除了跳过注释\",{\"1\":{\"352\":1}}],[\"除了核心的逻辑外还需要输入输出\",{\"1\":{\"338\":1}}],[\"段中的地址\",{\"1\":{\"351\":1}}],[\"段中\",{\"1\":{\"351\":1}}],[\"十六进制及八进制\",{\"1\":{\"350\":1}}],[\"十分有成就感\",{\"1\":{\"316\":1}}],[\"十分钟学会正确的github工作流\",{\"1\":{\"33\":1}}],[\"故通过\",{\"1\":{\"350\":1}}],[\"故而使用下列方式\",{\"1\":{\"349\":1}}],[\"故我们引入一个指令mset\",{\"1\":{\"325\":1}}],[\"传统的编程书籍会用\",{\"1\":{\"402\":1}}],[\"传统上\",{\"1\":{\"360\":1}}],[\"传统意义上的符号表只需要知道标识符的唯一标识即可\",{\"1\":{\"349\":1}}],[\"传递更新信息的方式有多种选择\",{\"1\":{\"257\":1}}],[\"传递更新信息的方式\",{\"0\":{\"257\":1}}],[\"传递性和完全性\",{\"1\":{\"57\":1}}],[\"刚存放函数的地址\",{\"1\":{\"349\":1}}],[\"型还是指针型\",{\"1\":{\"349\":1}}],[\"型\",{\"1\":{\"349\":1,\"405\":1,\"418\":2}}],[\"型的\",{\"1\":{\"325\":1}}],[\"顾名思义\",{\"1\":{\"349\":1}}],[\"顾客想吃什么口味都可以\",{\"1\":{\"205\":1}}],[\"遇到数字5\",{\"1\":{\"402\":1}}],[\"遇到数字4\",{\"1\":{\"402\":1}}],[\"遇到数字\",{\"1\":{\"402\":1}}],[\"遇到运算符\",{\"1\":{\"402\":3}}],[\"遇到新的标识符就去查这张表\",{\"1\":{\"349\":1}}],[\"遇到的时候就知道了\",{\"1\":{\"316\":1}}],[\"基于这个理由\",{\"1\":{\"349\":1}}],[\"基址指针\",{\"1\":{\"326\":1}}],[\"循环中\",{\"1\":{\"384\":1}}],[\"循环就没法准确地知道函数定义已经结束\",{\"1\":{\"384\":1}}],[\"循环可以用来跳过它\",{\"1\":{\"346\":1}}],[\"循环的作用就是跳过这些我们不识别的字符\",{\"1\":{\"346\":1}}],[\"循环呢\",{\"1\":{\"346\":1}}],[\"跳过当前错误并继续编译\",{\"1\":{\"346\":1}}],[\"源码中若包含一个数字\",{\"1\":{\"342\":1}}],[\"源地址\",{\"1\":{\"240\":1}}],[\"字符\",{\"1\":{\"352\":1,\"384\":2}}],[\"字符a对应的十六进制值是\",{\"1\":{\"350\":1}}],[\"字符串等等\",{\"1\":{\"403\":1}}],[\"字符串转换成标记流有时是有状态的\",{\"1\":{\"344\":1}}],[\"字符串\",{\"0\":{\"351\":1},\"1\":{\"341\":1}}],[\"字段吗\",{\"1\":{\"354\":1}}],[\"字段即是类的两个层次结构的\",{\"1\":{\"155\":1}}],[\"字段中保存的是实现了\",{\"1\":{\"155\":1}}],[\"宏定义\",{\"0\":{\"348\":1},\"1\":{\"341\":1}}],[\"新的指令几乎不消耗资源\",{\"1\":{\"340\":1}}],[\"新增\",{\"1\":{\"134\":1}}],[\"添加一个新的指令需要设计许多新的电路\",{\"1\":{\"340\":1}}],[\"添加flask+nginx配置\",{\"1\":{\"24\":1}}],[\"位机器下\",{\"1\":{\"339\":1}}],[\"位的\",{\"1\":{\"339\":2}}],[\"位的机器中\",{\"1\":{\"325\":1}}],[\"输出是标记流\",{\"1\":{\"356\":1}}],[\"输出标记流\",{\"1\":{\"343\":1}}],[\"输出汇编代码\",{\"1\":{\"343\":1}}],[\"输出为标记流\",{\"1\":{\"342\":1}}],[\"输出\",{\"1\":{\"339\":1}}],[\"输入是源码\",{\"1\":{\"356\":1}}],[\"输入任意邮箱和刚才生成的序列号到激活窗口\",{\"1\":{\"102\":1}}],[\"输入\",{\"1\":{\"32\":1,\"102\":2}}],[\"写的程序要\",{\"1\":{\"338\":1}}],[\"写起来很无聊\",{\"1\":{\"316\":1}}],[\"计算\",{\"1\":{\"402\":3}}],[\"计算后会将栈顶的参数退栈\",{\"1\":{\"337\":1}}],[\"计算机的栈的状态\",{\"1\":{\"383\":1}}],[\"计算机的内部工作原理\",{\"0\":{\"324\":1},\"1\":{\"323\":1}}],[\"计算机中的寄存器用于存放计算机的运行状态\",{\"1\":{\"326\":1}}],[\"计算机中有三个基本部件需要我们关注\",{\"1\":{\"324\":1}}],[\"外的寄存器\",{\"1\":{\"336\":1}}],[\"外观模式通过提供一个统一的接口来隐藏子系统的复杂性\",{\"1\":{\"214\":1}}],[\"外观模式有助于分层设计\",{\"1\":{\"213\":1}}],[\"外观模式为复杂的子系统提供了一个简单的接口\",{\"1\":{\"213\":1}}],[\"顺序\",{\"1\":{\"336\":1}}],[\"钱\",{\"1\":{\"332\":1}}],[\"汇编\",{\"1\":{\"398\":1,\"402\":1}}],[\"汇编的意义上\",{\"1\":{\"337\":1}}],[\"汇编代码\",{\"1\":{\"332\":1}}],[\"汇编指令设计并实现了我们自己的指令集\",{\"1\":{\"340\":1}}],[\"汇编指令\",{\"1\":{\"324\":1}}],[\"维基百科\",{\"1\":{\"332\":1}}],[\"事先声明一下\",{\"1\":{\"332\":1}}],[\"事实上\",{\"1\":{\"90\":1}}],[\"参见第\",{\"1\":{\"406\":1}}],[\"参照第三章讲解的虚拟机\",{\"1\":{\"383\":1}}],[\"参数和局部变量\",{\"1\":{\"388\":1}}],[\"参数\",{\"1\":{\"339\":1}}],[\"参数逆序入栈\",{\"1\":{\"332\":1}}],[\"参考资料\",{\"0\":{\"25\":1,\"317\":1}}],[\"调用参数\",{\"1\":{\"336\":1}}],[\"调用结束时\",{\"1\":{\"332\":1}}],[\"调用装饰边框的方法\",{\"1\":{\"203\":1}}],[\"各个参数的位移量\",{\"1\":{\"383\":1}}],[\"各种编程语言关于如何调用子函数有不同的约定\",{\"1\":{\"332\":1}}],[\"各位\",{\"1\":{\"239\":1}}],[\"保存所有的标记流没有意义且浪费空间\",{\"1\":{\"344\":1}}],[\"保存在栈中\",{\"1\":{\"332\":1}}],[\"保存数据结构与基于数据结构进行处理是两种不同的概念\",{\"1\":{\"304\":1}}],[\"反之则是变量\",{\"1\":{\"373\":1}}],[\"反之则是除号\",{\"1\":{\"352\":1}}],[\"反过来\",{\"1\":{\"332\":1}}],[\"反向遍历\",{\"1\":{\"230\":1}}],[\"详细见下文\",{\"1\":{\"328\":1}}],[\"取址\",{\"1\":{\"409\":1}}],[\"取址操作\",{\"0\":{\"409\":1},\"1\":{\"401\":1}}],[\"取自\",{\"1\":{\"332\":1}}],[\"取值会更高效\",{\"1\":{\"328\":1}}],[\"取模运算就成为了编程中不可缺少的一部分\",{\"1\":{\"37\":1}}],[\"地址存放在\",{\"1\":{\"328\":1}}],[\"地址存放在栈中\",{\"1\":{\"328\":1}}],[\"操作\",{\"1\":{\"328\":1}}],[\"操作系统将我们使用的虚拟地址映射到了到实际的内存上\",{\"1\":{\"325\":1}}],[\"放入寄存器\",{\"1\":{\"328\":1}}],[\"识别这些参数的类型\",{\"1\":{\"328\":1}}],[\"风格\",{\"1\":{\"328\":1}}],[\"风格统一\",{\"0\":{\"44\":1}}],[\"带有参数的指令在前\",{\"1\":{\"327\":1}}],[\"稍后你会看到\",{\"1\":{\"327\":1}}],[\"能自己编译自己\",{\"1\":{\"421\":1}}],[\"能大概理解吗\",{\"1\":{\"373\":1}}],[\"能减小语法分析复杂度\",{\"1\":{\"352\":1}}],[\"能理解的语言\",{\"1\":{\"327\":1}}],[\"能识别的命令的集合\",{\"1\":{\"327\":1}}],[\"能不能理解\",{\"1\":{\"313\":1}}],[\"永远指向当前的栈顶\",{\"1\":{\"326\":1}}],[\"真正的计算机中有许多不同种类的寄存器\",{\"1\":{\"326\":1}}],[\"真正为其分配内存\",{\"1\":{\"325\":1}}],[\"真正来实现一个简单的编译器\",{\"1\":{\"314\":1}}],[\"综上\",{\"1\":{\"325\":1,\"402\":1}}],[\"综上所述\",{\"1\":{\"50\":1,\"51\":1,\"55\":1,\"66\":1,\"67\":1,\"72\":1}}],[\"理论上所有的变量返回的标记都应该是\",{\"1\":{\"349\":1}}],[\"理论上我们的虚拟机需要维护一个堆用于内存分配\",{\"1\":{\"325\":1}}],[\"理论很复杂\",{\"0\":{\"314\":1}}],[\"^\",{\"1\":{\"325\":1,\"337\":1,\"353\":1,\"411\":1,\"418\":3}}],[\"堆\",{\"1\":{\"325\":1}}],[\"栈中的调用帧是什么样的\",{\"1\":{\"336\":1}}],[\"栈\",{\"1\":{\"325\":1,\"383\":1,\"402\":1}}],[\"未初始化数据段\",{\"1\":{\"325\":1}}],[\"虚拟内存可以理解为一种映射\",{\"1\":{\"325\":1}}],[\"虚拟内存\",{\"1\":{\"325\":1}}],[\"虚拟机与目标代码\",{\"0\":{\"426\":1},\"1\":{\"425\":1}}],[\"虚拟机中讲解的指令是对应的\",{\"1\":{\"406\":1}}],[\"虚拟机上运行我们提供的这些指令时\",{\"1\":{\"338\":1}}],[\"虚拟机的入口\",{\"1\":{\"322\":1}}],[\"虚拟机\",{\"1\":{\"312\":1,\"320\":1,\"323\":2,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"388\":1,\"391\":1,\"401\":1,\"406\":1,\"425\":1}}],[\"物理内存\",{\"1\":{\"325\":1}}],[\"现代操作系统在操作内存时\",{\"1\":{\"325\":1}}],[\"现在我们要回忆如何将\",{\"1\":{\"383\":1}}],[\"现在\",{\"1\":{\"295\":1}}],[\"现在电话亭上加了把锁\",{\"1\":{\"90\":1}}],[\"现在不存在这种情况了\",{\"1\":{\"39\":1}}],[\"说一说编写编译器值得注意的一些问题\",{\"1\":{\"425\":1}}],[\"说得通俗一点就是自己实现一套汇编语言\",{\"1\":{\"323\":1}}],[\"说明\",{\"1\":{\"155\":1}}],[\"小于\",{\"1\":{\"414\":1}}],[\"小结\",{\"0\":{\"340\":1,\"356\":1,\"366\":1,\"377\":1,\"388\":1,\"398\":1,\"422\":1},\"1\":{\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1}}],[\"小组中的\",{\"1\":{\"239\":1}}],[\"测试\",{\"0\":{\"339\":1},\"1\":{\"323\":1}}],[\"子函数要返回时\",{\"1\":{\"332\":1}}],[\"子函数调用\",{\"0\":{\"332\":1},\"1\":{\"323\":1}}],[\"子类责任\",{\"1\":{\"295\":1}}],[\"子类具有实现在父类中所声明的抽象方法的责任\",{\"1\":{\"295\":1}}],[\"子类只需关注具体步骤的实现\",{\"1\":{\"291\":1}}],[\"子类可以在不改变算法结构的情况下\",{\"1\":{\"290\":1}}],[\"子类可以替换父类\",{\"1\":{\"125\":1}}],[\"子类应当能够替代父类的实例而不影响程序的正确性\",{\"1\":{\"209\":1}}],[\"子类应保持父类的行为\",{\"1\":{\"110\":1}}],[\"子类的方法签名应与父类一致\",{\"1\":{\"110\":1}}],[\"指定了当前的优先级\",{\"1\":{\"414\":1}}],[\"指针加上数值等于将指针移位\",{\"1\":{\"418\":1}}],[\"指针相对位置的形式\",{\"1\":{\"406\":1}}],[\"指针取值\",{\"0\":{\"408\":1},\"1\":{\"401\":1}}],[\"指针和对应的位移量进行的\",{\"1\":{\"383\":1}}],[\"指针寄存器\",{\"1\":{\"326\":1}}],[\"指向的是同一个变量\",{\"1\":{\"349\":1}}],[\"指出错误发生的位置\",{\"1\":{\"346\":2}}],[\"指的是\",{\"1\":{\"333\":1}}],[\"指的是需要编写哪些类和需要实现哪些方法都非常清楚\",{\"1\":{\"133\":1}}],[\"指令加载实际内容\",{\"1\":{\"409\":1}}],[\"指令加载对应的值\",{\"1\":{\"406\":1}}],[\"指令了\",{\"1\":{\"409\":1}}],[\"指令存入\",{\"1\":{\"406\":1}}],[\"指令将它加载到\",{\"1\":{\"404\":1}}],[\"指令无法操作除\",{\"1\":{\"336\":1}}],[\"指令功能有限\",{\"1\":{\"334\":1}}],[\"指令同样功能不足\",{\"1\":{\"332\":1}}],[\"指令并无法指定寄存器\",{\"1\":{\"332\":1}}],[\"指令来代替它\",{\"1\":{\"332\":1}}],[\"指令呢\",{\"1\":{\"332\":1}}],[\"指令的参数\",{\"1\":{\"330\":1}}],[\"指令只能将\",{\"1\":{\"328\":1}}],[\"指令中\",{\"1\":{\"328\":1}}],[\"指令其实有许多变种\",{\"1\":{\"328\":1}}],[\"指令拆分成这些指令\",{\"1\":{\"328\":1}}],[\"指令拆分成\",{\"1\":{\"328\":1}}],[\"指令有两个参数\",{\"1\":{\"328\":1}}],[\"指令\",{\"1\":{\"325\":1,\"330\":1,\"332\":1,\"335\":2,\"406\":1}}],[\"指令集是\",{\"1\":{\"327\":1}}],[\"指令集\",{\"0\":{\"327\":1},\"1\":{\"323\":1}}],[\"寄存器指向的是\",{\"1\":{\"330\":1}}],[\"寄存器设置为指定的\",{\"1\":{\"330\":1}}],[\"寄存器或是一个内存地址\",{\"1\":{\"328\":1}}],[\"寄存器及内存\",{\"1\":{\"324\":1}}],[\"寄存器\",{\"0\":{\"326\":1},\"1\":{\"323\":1}}],[\"内置函数有对应的汇编指令\",{\"1\":{\"406\":1}}],[\"内置函数的行为也和关键字类似\",{\"1\":{\"354\":1}}],[\"内置函数\",{\"0\":{\"338\":1},\"1\":{\"323\":1}}],[\"内存地址的数据\",{\"1\":{\"325\":1}}],[\"内存用于存储数据\",{\"1\":{\"325\":1}}],[\"内存\",{\"0\":{\"325\":1},\"1\":{\"323\":1}}],[\"内容相对容易一些\",{\"1\":{\"398\":1}}],[\"内容为\",{\"1\":{\"322\":1}}],[\"内容过于复杂\",{\"1\":{\"314\":1}}],[\"逐个读取文件中的字符\",{\"1\":{\"322\":1}}],[\"逐个通知每个观察者可能会导致性能问题\",{\"1\":{\"258\":1}}],[\"读取一个文件\",{\"1\":{\"322\":1}}],[\"获取下一个标记\",{\"1\":{\"322\":1}}],[\"构建语法分析器\",{\"1\":{\"321\":1}}],[\"构建我们的词法分析器\",{\"1\":{\"321\":1}}],[\"构建我们自己的虚拟机以及指令集\",{\"1\":{\"321\":1}}],[\"屏蔽了许多实现上的细节\",{\"1\":{\"321\":1}}],[\"已经把\",{\"1\":{\"335\":1}}],[\"已经有许多工具能帮助我们处理阶段1和2\",{\"1\":{\"321\":1}}],[\"已经编写完成的具体工厂越多\",{\"1\":{\"134\":1}}],[\"目标代码的生成\",{\"1\":{\"321\":1}}],[\"目录类\",{\"0\":{\"189\":1}}],[\"目录可以包含其他目录和文件\",{\"1\":{\"187\":1}}],[\"目录和文件都可以被视为条目\",{\"1\":{\"187\":1}}],[\"目录的构建\",{\"1\":{\"86\":1}}],[\"系列的第三篇\",{\"1\":{\"323\":1}}],[\"系列的第二篇\",{\"1\":{\"320\":1}}],[\"系统的线程调度器是假设不同的线程是毫无关系的\",{\"1\":{\"90\":1}}],[\"系统\",{\"0\":{\"76\":1}}],[\"具有一定的参考价值\",{\"1\":{\"317\":1}}],[\"具体的实现如下\",{\"1\":{\"335\":1}}],[\"具体而言\",{\"1\":{\"202\":1}}],[\"具体类\",{\"1\":{\"131\":1}}],[\"具体实现很容易\",{\"1\":{\"365\":1}}],[\"具体实现\",{\"1\":{\"121\":1}}],[\"观看效果更佳\",{\"1\":{\"317\":1}}],[\"观察者\",{\"1\":{\"254\":1}}],[\"观察者模式在\",{\"1\":{\"259\":1}}],[\"观察者模式定义了一种一对多的依赖关系\",{\"1\":{\"251\":1}}],[\"观察者模式非常适合用于需要自动更新的场景\",{\"1\":{\"250\":1}}],[\"英文的\",{\"1\":{\"317\":1}}],[\"繁琐\",{\"1\":{\"316\":1}}],[\"做好心理准备\",{\"0\":{\"316\":1}}],[\"做任何修改\",{\"1\":{\"163\":1}}],[\"声明\",{\"1\":{\"315\":1}}],[\"声明抽象方法是希望达到以下目的\",{\"1\":{\"295\":1}}],[\"号称用\",{\"1\":{\"315\":1}}],[\"名叫\",{\"1\":{\"315\":1}}],[\"名字\",{\"1\":{\"155\":1}}],[\"依旧不能确定是否立即计算\",{\"1\":{\"402\":1}}],[\"依旧帮助不了我们学习编译器\",{\"1\":{\"314\":1}}],[\"依赖于特定应用程序就意味着难以复用\",{\"1\":{\"245\":1}}],[\"依赖于特定应用程序的部分都被封装在扮演\",{\"1\":{\"245\":1}}],[\"依赖注入\",{\"1\":{\"120\":1}}],[\"依赖倒置原则\",{\"0\":{\"119\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"学习编译原理时常常着眼于词法分析和语法分析\",{\"1\":{\"426\":1}}],[\"学习了编译原理\",{\"1\":{\"313\":1}}],[\"学了这么多也没用\",{\"1\":{\"314\":1}}],[\"什么是表达式\",{\"1\":{\"401\":1}}],[\"什么是递归下降\",{\"0\":{\"360\":1},\"1\":{\"359\":1}}],[\"什么是词法分析器\",{\"0\":{\"342\":1},\"1\":{\"341\":1}}],[\"什么都不干的编译器\",{\"1\":{\"322\":1}}],[\"什么\",{\"1\":{\"314\":1}}],[\"词法分析中如何处理标识符与符号表\",{\"1\":{\"356\":1}}],[\"词法分析\",{\"0\":{\"427\":1},\"1\":{\"314\":1,\"425\":1}}],[\"词法分析器本身可以认为是一个编译器\",{\"1\":{\"356\":1}}],[\"词法分析器本质上也是编译器\",{\"1\":{\"352\":1}}],[\"词法分析器中直接解析这些关键字\",{\"1\":{\"354\":1}}],[\"词法分析器会把扫描到的标识符全都保存到一张表中\",{\"1\":{\"349\":1}}],[\"词法分析器将输出\",{\"1\":{\"342\":1}}],[\"词法分析器以源码字符串为输入\",{\"1\":{\"342\":1}}],[\"词法分析器用于对源码字符串做预处理\",{\"1\":{\"342\":1}}],[\"词法分析器的作用是对源码字符串进行预处理\",{\"1\":{\"356\":1}}],[\"词法分析器的框架\",{\"0\":{\"346\":1},\"1\":{\"341\":1}}],[\"词法分析器的实现\",{\"0\":{\"344\":1},\"1\":{\"341\":1}}],[\"词法分析器与编译器\",{\"0\":{\"343\":1},\"1\":{\"341\":1}}],[\"词法分析器\",{\"0\":{\"341\":1},\"1\":{\"312\":1,\"320\":1,\"321\":1,\"323\":1,\"341\":1,\"343\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"听不懂\",{\"1\":{\"314\":1}}],[\"听起来有些贬义的意思\",{\"1\":{\"179\":1}}],[\"看了上面的代码\",{\"1\":{\"373\":1}}],[\"看看自己能走多远\",{\"1\":{\"313\":1}}],[\"看起来是这样的\",{\"1\":{\"92\":1}}],[\"好吧\",{\"1\":{\"313\":1,\"422\":1}}],[\"装b\",{\"1\":{\"313\":1}}],[\"装饰\",{\"1\":{\"203\":2}}],[\"装饰边框与被装饰物具有相同的接口\",{\"1\":{\"203\":1}}],[\"装饰边框与被装饰物具有一致性\",{\"1\":{\"202\":1}}],[\"装饰边框\",{\"1\":{\"202\":1,\"203\":1}}],[\"装饰边框里面的\",{\"1\":{\"202\":1}}],[\"装饰器模式允许我们在不修改现有代码的情况下扩展对象的功能\",{\"1\":{\"198\":1}}],[\"装饰器模式允许我们通过将对象放入包含行为的特殊封装对象中来扩展对象的功能\",{\"1\":{\"197\":1}}],[\"装饰者模式等\",{\"1\":{\"107\":1}}],[\"像是程序员的第一道门槛\",{\"1\":{\"313\":1}}],[\"递归调用的实质也是栈的处理\",{\"1\":{\"402\":1}}],[\"递归下下降方法对\",{\"1\":{\"363\":1}}],[\"递归下降是从起始的非终结符开始\",{\"1\":{\"362\":1}}],[\"递归下降法\",{\"1\":{\"314\":1}}],[\"递归下降\",{\"0\":{\"359\":1},\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1,\"428\":1}}],[\"递归\",{\"1\":{\"313\":1}}],[\"算法\",{\"1\":{\"313\":1}}],[\"算术公理系统\",{\"0\":{\"46\":1}}],[\"谈谈这个系列的初衷\",{\"1\":{\"312\":1}}],[\"表\",{\"1\":{\"349\":1}}],[\"表达式结束\",{\"1\":{\"402\":1}}],[\"表达式的解析难点有二\",{\"1\":{\"401\":1}}],[\"表达式是将各种语言要素的一个组合\",{\"1\":{\"401\":1}}],[\"表达式可能相对不好理解一些\",{\"1\":{\"377\":1}}],[\"表达式\",{\"0\":{\"401\":1},\"1\":{\"312\":1,\"320\":1,\"322\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":2,\"380\":2,\"391\":1,\"392\":1,\"401\":1,\"425\":1}}],[\"表示转换成实际的代码\",{\"1\":{\"363\":1}}],[\"表示是十分接近的\",{\"1\":{\"363\":1}}],[\"表示选择\",{\"1\":{\"361\":1}}],[\"表示字符\",{\"1\":{\"351\":1}}],[\"表示换行符\",{\"1\":{\"351\":1}}],[\"表示将\",{\"1\":{\"328\":1}}],[\"表示装饰边框的\",{\"1\":{\"202\":1}}],[\"表示\",{\"0\":{\"370\":1,\"381\":1},\"1\":{\"47\":1,\"50\":1,\"51\":1,\"66\":1,\"67\":1,\"351\":1,\"369\":1,\"380\":1}}],[\"语法\",{\"1\":{\"366\":1}}],[\"语法分析对我而言一直是迷一样的存在\",{\"1\":{\"428\":1}}],[\"语法分析更困难\",{\"1\":{\"398\":1}}],[\"语法分析的入口\",{\"1\":{\"322\":1}}],[\"语法分析器的复杂度会大大降低\",{\"1\":{\"342\":1}}],[\"语法分析器\",{\"1\":{\"321\":1}}],[\"语法分析是一样的\",{\"1\":{\"320\":1}}],[\"语法分析\",{\"0\":{\"428\":1},\"1\":{\"314\":1,\"425\":1}}],[\"语句简单\",{\"1\":{\"394\":1}}],[\"语句比\",{\"1\":{\"394\":1}}],[\"语句后方的代码\",{\"1\":{\"393\":1}}],[\"语句是可以省略的\",{\"1\":{\"393\":1}}],[\"语句的作用是跳转\",{\"1\":{\"393\":1}}],[\"语句和表达式的解析\",{\"1\":{\"391\":1}}],[\"语句就是用来向前查看标记以确定使用哪一个产生式\",{\"1\":{\"373\":1}}],[\"语句\",{\"0\":{\"391\":1,\"392\":1,\"393\":1,\"394\":1,\"395\":1},\"1\":{\"312\":1,\"320\":1,\"323\":1,\"331\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":5,\"392\":1,\"393\":1,\"395\":1,\"401\":1,\"416\":2,\"425\":1}}],[\"语言运算符优先级\",{\"1\":{\"402\":1}}],[\"语言定义了各种表达式的优先级\",{\"1\":{\"402\":1}}],[\"语言区分\",{\"1\":{\"392\":1}}],[\"语言不太一致\",{\"1\":{\"386\":1}}],[\"语言与现代的\",{\"1\":{\"386\":1}}],[\"语言中唯一的一个三元运算符\",{\"1\":{\"416\":1}}],[\"语言中\",{\"1\":{\"352\":1,\"418\":1}}],[\"语言中标识符可以是全局的也可以是局部的\",{\"1\":{\"349\":1}}],[\"语言中空格是用来作为分隔用的\",{\"1\":{\"346\":1}}],[\"语言中的优先级有关\",{\"1\":{\"345\":1}}],[\"语言中的赋值语句\",{\"1\":{\"328\":1}}],[\"语言中我们经常使用的\",{\"1\":{\"338\":1}}],[\"语言中支持的运算符都提供对应汇编指令\",{\"1\":{\"337\":1}}],[\"语言调用标准\",{\"1\":{\"332\":1}}],[\"语言代码\",{\"1\":{\"322\":1}}],[\"语言程序\",{\"1\":{\"322\":1}}],[\"语言的时候你可能已经知道了\",{\"1\":{\"420\":1}}],[\"语言的字符串常量支持如下风格\",{\"1\":{\"404\":1}}],[\"语言的文法\",{\"1\":{\"369\":1}}],[\"语言的宏定义以字符\",{\"1\":{\"348\":1}}],[\"语言的调用标准是\",{\"1\":{\"332\":1}}],[\"语言的源代码文件\",{\"1\":{\"320\":1}}],[\"语言的解释器\",{\"1\":{\"320\":1}}],[\"语言的编译器\",{\"1\":{\"312\":1}}],[\"语言编译器系列共有10个部分\",{\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"语言编译器\",{\"0\":{\"312\":1,\"320\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1},\"1\":{\"312\":13,\"315\":3,\"320\":12,\"323\":12,\"341\":10,\"359\":10,\"369\":10,\"380\":10,\"391\":10,\"401\":10,\"425\":11}}],[\"希望文章本身没有受我的这种情绪影响吧\",{\"1\":{\"429\":1}}],[\"希望能减少你对理论的厌恶\",{\"1\":{\"428\":1}}],[\"希望通过本章的学习\",{\"1\":{\"340\":1}}],[\"希望通过这个系列\",{\"1\":{\"312\":1}}],[\"希望扩展某个功能\",{\"1\":{\"305\":1}}],[\"三目运算符\",{\"0\":{\"416\":1},\"1\":{\"401\":1}}],[\"三点水\",{\"1\":{\"312\":1}}],[\"三是式子太长\",{\"1\":{\"38\":1}}],[\"原则上我们需要立即计算\",{\"1\":{\"402\":1}}],[\"原则上我们是不讲这么深入\",{\"1\":{\"364\":1}}],[\"原因之一就是减少了语法分析器需要\",{\"1\":{\"352\":1}}],[\"原因有二\",{\"1\":{\"344\":1}}],[\"原因是当我们从子函数中返回时\",{\"1\":{\"332\":1}}],[\"原因是默认计算的结果是存放在\",{\"1\":{\"328\":1}}],[\"原因是太复杂了\",{\"1\":{\"314\":1}}],[\"原因只有一个\",{\"1\":{\"313\":1}}],[\"原文链接\",{\"1\":{\"312\":2}}],[\"原文转载自\",{\"1\":{\"89\":1,\"93\":1}}],[\"原作者\",{\"1\":{\"312\":1}}],[\"前缀形式\",{\"1\":{\"419\":1}}],[\"前文中我们说到\",{\"1\":{\"409\":1}}],[\"前文中我们定义了支持的类型\",{\"1\":{\"373\":1}}],[\"前言\",{\"0\":{\"312\":1},\"1\":{\"312\":2,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"前端\",{\"1\":{\"14\":1}}],[\"手把手教你构建\",{\"0\":{\"312\":1,\"320\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1},\"1\":{\"312\":13,\"320\":12,\"323\":13,\"341\":11,\"359\":11,\"369\":11,\"380\":11,\"391\":11,\"401\":11,\"425\":11}}],[\"手动修改后可正常运行\",{\"1\":{\"87\":1}}],[\"尽管代码看起来比较简单\",{\"1\":{\"422\":1}}],[\"尽管理论不是必需的\",{\"1\":{\"366\":1}}],[\"尽管我们还没定义\",{\"1\":{\"332\":1}}],[\"尽管有许多语法并不支持\",{\"1\":{\"312\":1}}],[\"尽管使用\",{\"1\":{\"307\":1}}],[\"尽量减少类之间的耦合\",{\"1\":{\"125\":1}}],[\"尽量减少类的公开方法\",{\"1\":{\"114\":1}}],[\"尽量使用组合\",{\"1\":{\"122\":1}}],[\"开始的冲动过了之后\",{\"1\":{\"429\":1}}],[\"开头\",{\"1\":{\"348\":1}}],[\"开发过程将会变得非常困难\",{\"1\":{\"305\":1}}],[\"开闭原则是面向对象可复用设计的基石\",{\"1\":{\"105\":1}}],[\"开闭原则\",{\"0\":{\"106\":1,\"305\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"至少\",{\"1\":{\"428\":1}}],[\"至少必须在阅读了\",{\"1\":{\"176\":1}}],[\"至此\",{\"1\":{\"305\":1}}],[\"绝不能毫无理由地禁止扩展类\",{\"1\":{\"305\":1}}],[\"绝不能因为先调用\",{\"1\":{\"255\":1}}],[\"必须先查看它的右方\",{\"1\":{\"402\":1}}],[\"必须先获得gil锁\",{\"1\":{\"90\":1}}],[\"必须要考虑到将来可能会扩展类\",{\"1\":{\"305\":1}}],[\"处理\",{\"1\":{\"304\":1}}],[\"处理器本来同一时间就只能有一个线程在运行\",{\"1\":{\"90\":1}}],[\"访问数据结构并处理数据\",{\"2\":{\"311\":1}}],[\"访问\",{\"1\":{\"303\":1}}],[\"访问者\",{\"1\":{\"298\":1}}],[\"接下来开始解析函数定义相关的内容\",{\"1\":{\"382\":1}}],[\"接着是字符串常量\",{\"1\":{\"404\":1}}],[\"接着\",{\"1\":{\"325\":1}}],[\"接收\",{\"1\":{\"303\":2}}],[\"接口定义了\",{\"1\":{\"233\":2}}],[\"接口\",{\"1\":{\"202\":1,\"233\":2}}],[\"接口和抽象类\",{\"1\":{\"123\":1}}],[\"接口隔离原则\",{\"0\":{\"118\":1},\"1\":{\"125\":1}}],[\"接口分隔原则\",{\"1\":{\"104\":1,\"105\":1}}],[\"双重分发\",{\"0\":{\"303\":1}}],[\"双重检查锁定示例代码\",{\"0\":{\"277\":1}}],[\"数组取值操作\",{\"0\":{\"420\":1},\"1\":{\"401\":1}}],[\"数字中较为复杂的一点是需要支持十进制\",{\"1\":{\"350\":1}}],[\"数字\",{\"0\":{\"350\":1},\"1\":{\"341\":1,\"342\":1,\"403\":1}}],[\"数据段以及栈\",{\"1\":{\"325\":1}}],[\"数据段\",{\"1\":{\"325\":1,\"383\":1}}],[\"数据结构\",{\"1\":{\"313\":1}}],[\"数据结构很重要\",{\"1\":{\"304\":1}}],[\"数据结构与处理被分离开来\",{\"1\":{\"298\":1}}],[\"数学运算符\",{\"0\":{\"418\":1},\"1\":{\"401\":1}}],[\"数学\",{\"2\":{\"82\":1}}],[\"期待子类去实现抽象方法\",{\"1\":{\"295\":1}}],[\"换句话说\",{\"1\":{\"366\":1}}],[\"换句话说就是不需要我们自己去实现了\",{\"1\":{\"338\":1}}],[\"换行符和空格类似\",{\"1\":{\"347\":1}}],[\"换行符\",{\"0\":{\"347\":1},\"1\":{\"341\":1}}],[\"换言之\",{\"1\":{\"295\":1}}],[\"换成对应的版本\",{\"1\":{\"8\":1}}],[\"站在父类的角度进行思考\",{\"1\":{\"295\":1}}],[\"很有帮助的\",{\"1\":{\"429\":1}}],[\"很好的初学者教程\",{\"1\":{\"317\":1}}],[\"很难懂\",{\"1\":{\"315\":1}}],[\"很容易着眼于以下几点\",{\"1\":{\"295\":1}}],[\"很可能随着需求变更实例数量会慢慢变多\",{\"1\":{\"244\":1}}],[\"延申\",{\"0\":{\"295\":1}}],[\"世界\",{\"1\":{\"292\":1,\"293\":5}}],[\"世界上的事情本来就是这样\",{\"1\":{\"92\":1}}],[\"世界上最大的电子图书馆\",{\"1\":{\"4\":1}}],[\"世界上最大的代码托管平台\",{\"1\":{\"4\":1}}],[\"控制反转\",{\"1\":{\"291\":1}}],[\"控制器\",{\"1\":{\"259\":1}}],[\"允许子类实现具体的步骤\",{\"1\":{\"291\":1}}],[\"低速但计算准确的算法\",{\"1\":{\"286\":1}}],[\"高速但计算上可能有\",{\"1\":{\"286\":1}}],[\"高层模块不依赖低层模块\",{\"1\":{\"125\":1}}],[\"高层模块不应该依赖低层模块\",{\"1\":{\"119\":1}}],[\"高层模块依赖抽象接口\",{\"1\":{\"121\":1}}],[\"验算\",{\"1\":{\"286\":1}}],[\"速度快但耗内存的策略\",{\"1\":{\"286\":1}}],[\"速度慢但省内存的策略\",{\"1\":{\"286\":1}}],[\"程序需要回到跳转之前的地方继续运行\",{\"1\":{\"332\":1}}],[\"程序计数器\",{\"1\":{\"326\":1}}],[\"程序运行的状态保存在寄存器中\",{\"1\":{\"324\":1}}],[\"程序运行中也可以切换策略\",{\"0\":{\"286\":1}}],[\"程序可能会无法正常工作\",{\"1\":{\"176\":1}}],[\"例程的水平\",{\"1\":{\"285\":1}}],[\"例如在编写表达式的解析时\",{\"1\":{\"429\":1}}],[\"例如需要考虑许多细节\",{\"1\":{\"429\":1}}],[\"例如对变量\",{\"1\":{\"409\":1}}],[\"例如参数的位置\",{\"1\":{\"388\":1}}],[\"例如只要遇到\",{\"1\":{\"373\":1}}],[\"例如用\",{\"1\":{\"351\":1}}],[\"例如数据库连接\",{\"1\":{\"271\":1}}],[\"例如事件对象或数据包\",{\"1\":{\"257\":1}}],[\"例如增加一个具体方法\",{\"1\":{\"151\":1}}],[\"例如tablefactory\",{\"1\":{\"131\":1}}],[\"例如策略模式\",{\"1\":{\"107\":1}}],[\"例如添加新插件\",{\"1\":{\"86\":1}}],[\"例如\",{\"1\":{\"86\":1,\"134\":2,\"152\":1,\"163\":1,\"164\":1,\"176\":1,\"179\":1,\"187\":1,\"203\":1,\"234\":1,\"245\":1,\"250\":1,\"255\":1,\"256\":1,\"258\":1,\"285\":2,\"286\":2,\"307\":1,\"308\":1,\"325\":1,\"332\":1,\"338\":1,\"342\":1,\"345\":1,\"349\":1,\"354\":1,\"361\":1,\"362\":1,\"401\":1}}],[\"例如很多期望概率题\",{\"1\":{\"36\":1}}],[\"例如许多计数\",{\"1\":{\"36\":1}}],[\"仅仅修改\",{\"1\":{\"285\":1}}],[\"了解自动生成词法分析器的原理\",{\"1\":{\"427\":1}}],[\"了解了协程如何主动切换\",{\"1\":{\"92\":1}}],[\"了\",{\"1\":{\"285\":1,\"352\":1}}],[\"省略\",{\"1\":{\"283\":1}}],[\"省时又省力\",{\"1\":{\"25\":1}}],[\"布\",{\"1\":{\"282\":1}}],[\"剪刀\",{\"1\":{\"282\":1}}],[\"石头\",{\"1\":{\"282\":1}}],[\"另外\",{\"1\":{\"339\":1,\"352\":1,\"363\":1,\"418\":1}}],[\"另外一种算法\",{\"1\":{\"286\":1}}],[\"另外一种策略是\",{\"1\":{\"282\":1}}],[\"另一个特殊的地方是我们需要支持转义符\",{\"1\":{\"351\":1}}],[\"另一点是我们的\",{\"1\":{\"328\":1}}],[\"另一种方法是传递具体的更新信息\",{\"1\":{\"257\":1}}],[\"另一方面需要对照生成的代码来调试\",{\"1\":{\"316\":1}}],[\"另一方面希望挑战一下自己\",{\"1\":{\"313\":1}}],[\"另一方面\",{\"1\":{\"91\":1,\"305\":1,\"328\":1}}],[\"另一方面采取了常数更小的加减法操作\",{\"1\":{\"40\":1}}],[\"游戏\",{\"1\":{\"282\":1}}],[\"猜拳\",{\"1\":{\"282\":1}}],[\"策略模式的主要优点包括\",{\"1\":{\"281\":1}}],[\"函数结束时退出进程\",{\"1\":{\"421\":1}}],[\"函数调用\",{\"1\":{\"401\":1}}],[\"函数体的代码如下\",{\"1\":{\"386\":1}}],[\"函数体的解析\",{\"0\":{\"386\":1},\"1\":{\"380\":1}}],[\"函数参数与汇编代码\",{\"0\":{\"383\":1},\"1\":{\"380\":1}}],[\"函数包装起来\",{\"1\":{\"375\":1}}],[\"函数是一个辅助函数\",{\"1\":{\"375\":1}}],[\"函数我们将放到下一章中讲解\",{\"1\":{\"375\":1}}],[\"函数还没有出现过\",{\"1\":{\"372\":1}}],[\"函数的内容\",{\"1\":{\"372\":1}}],[\"函数的主体\",{\"1\":{\"346\":1}}],[\"函数的实现本身就十分复杂\",{\"1\":{\"338\":1}}],[\"函数就是用于输出\",{\"1\":{\"338\":1}}],[\"函数中加入下列代码\",{\"1\":{\"328\":1,\"339\":1}}],[\"函数中加入初始化代码\",{\"1\":{\"326\":1}}],[\"函数\",{\"1\":{\"322\":1,\"372\":1,\"383\":1,\"421\":1}}],[\"函数定义的解析\",{\"0\":{\"384\":1},\"1\":{\"380\":1}}],[\"函数定义\",{\"0\":{\"380\":1},\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":2,\"380\":2,\"391\":1,\"401\":1,\"425\":1}}],[\"函数模拟了一个锁机制\",{\"1\":{\"277\":1}}],[\"函数取模\",{\"0\":{\"39\":1}}],[\"想要完全理解它\",{\"1\":{\"429\":1}}],[\"想在程序上表现出\",{\"1\":{\"272\":1}}],[\"想确保任何情况下都绝对只有\",{\"1\":{\"272\":1}}],[\"想做一个一样的移动app\",{\"1\":{\"84\":1}}],[\"日志记录器等\",{\"1\":{\"271\":1}}],[\"~a\",{\"1\":{\"411\":1}}],[\"~~~~~~~~~~~~~\",{\"1\":{\"266\":1}}],[\"~\",{\"1\":{\"265\":1,\"345\":1,\"353\":1,\"411\":2}}],[\"无条件地将当前的\",{\"1\":{\"330\":1}}],[\"无法将它们整合到一个类中\",{\"1\":{\"264\":1}}],[\"无论多好的教程\",{\"1\":{\"429\":1}}],[\"无论在\",{\"1\":{\"163\":1}}],[\"无论要增加多少个具体工厂\",{\"1\":{\"133\":1}}],[\"无论是读起来\",{\"1\":{\"428\":1}}],[\"无论是全局还是局部变量\",{\"1\":{\"406\":1}}],[\"无论是是否真的在全局中用到了这个变量\",{\"1\":{\"385\":1}}],[\"无论是函数的参数\",{\"1\":{\"383\":1}}],[\"无论是结果\",{\"1\":{\"92\":1}}],[\"无论是执行过程中\",{\"1\":{\"92\":1}}],[\"特别是在创建对象代价较高时\",{\"1\":{\"264\":1}}],[\"管理状态\",{\"2\":{\"262\":1}}],[\"架构实现了视图和模型的松耦合\",{\"1\":{\"259\":1}}],[\"架构中得到了广泛应用\",{\"1\":{\"259\":1}}],[\"视图会自动更新\",{\"1\":{\"259\":1}}],[\"视图\",{\"1\":{\"259\":1}}],[\"先将全局变量的信息保存\",{\"1\":{\"385\":1}}],[\"先注册的\",{\"1\":{\"255\":1}}],[\"先介绍\",{\"1\":{\"47\":1}}],[\"被观察对象\",{\"1\":{\"255\":1}}],[\"被装饰物\",{\"1\":{\"202\":1,\"203\":1}}],[\"被装饰了多次\",{\"1\":{\"202\":1}}],[\"迟早会暴露出问题\",{\"1\":{\"244\":1}}],[\"条通信线路\",{\"1\":{\"244\":4}}],[\"相应的减法的代码就不贴了\",{\"1\":{\"418\":1}}],[\"相应的值会存放在\",{\"1\":{\"415\":1}}],[\"相等\",{\"1\":{\"410\":1}}],[\"相同类型\",{\"1\":{\"418\":1}}],[\"相同\",{\"1\":{\"402\":1}}],[\"相对于表达式来说它还是较为容易的\",{\"1\":{\"391\":1}}],[\"相信这部分的知识能够很大程度上提高你的编程水平\",{\"1\":{\"427\":1}}],[\"相信这部分也不难理解\",{\"1\":{\"377\":1}}],[\"相信当你真正完成的时候会像我一样\",{\"1\":{\"316\":1}}],[\"相当于\",{\"1\":{\"328\":1}}],[\"相反\",{\"1\":{\"317\":1}}],[\"相互调用方法\",{\"1\":{\"244\":1}}],[\"相关\",{\"1\":{\"385\":1}}],[\"相关代码如下\",{\"1\":{\"351\":1}}],[\"相关的代码如下\",{\"1\":{\"382\":1}}],[\"相关的内容我们放到后面解释\",{\"1\":{\"370\":1}}],[\"相关的内容注释了\",{\"1\":{\"332\":1}}],[\"相关的是指令集\",{\"1\":{\"326\":1}}],[\"相关的设计模式\",{\"0\":{\"135\":1,\"145\":1,\"165\":1,\"183\":1,\"194\":1,\"207\":1,\"235\":1,\"246\":1,\"260\":1,\"287\":1,\"309\":1}}],[\"相关设计模式\",{\"0\":{\"172\":1,\"217\":1,\"267\":1,\"275\":1,\"294\":1}}],[\"相关信息\",{\"1\":{\"33\":1,\"43\":1,\"86\":1,\"317\":1}}],[\"把处理分散在各个类中是不明智的\",{\"1\":{\"243\":1}}],[\"把握本质\",{\"1\":{\"93\":1}}],[\"仲裁者向组员下达指示\",{\"1\":{\"239\":1}}],[\"仲裁者会负责统一大家的意见\",{\"1\":{\"239\":1}}],[\"整个系列的一开始\",{\"1\":{\"426\":1}}],[\"整个系统就变得复杂了\",{\"1\":{\"328\":1}}],[\"整个编译器还剩下最后两个部分\",{\"1\":{\"391\":1}}],[\"整个解析的过程和语法的\",{\"1\":{\"363\":1}}],[\"整个解析的过程是在不断对非终结符进行替换\",{\"1\":{\"362\":1}}],[\"整个团队的交流过程就变为了组员向仲裁者报告\",{\"1\":{\"239\":1}}],[\"整体的替换算法\",{\"2\":{\"289\":1}}],[\"整体\",{\"1\":{\"187\":1}}],[\"经常为此争执不下\",{\"1\":{\"239\":1}}],[\"经常会遇到需要使用一些现有的类\",{\"1\":{\"140\":1}}],[\"他们还十分在意编码细节\",{\"1\":{\"239\":1}}],[\"总共代码加注释1400行\",{\"1\":{\"315\":1}}],[\"总是互相指挥\",{\"1\":{\"239\":1}}],[\"总结\",{\"0\":{\"125\":1,\"272\":1,\"425\":1},\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"请自行查阅相关的资料\",{\"1\":{\"364\":1}}],[\"请跳过本章\",{\"1\":{\"312\":1}}],[\"请联系删除\",{\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"请试想一下\",{\"1\":{\"243\":1}}],[\"请试想一下要在\",{\"1\":{\"134\":1}}],[\"请大家将情况报告给我\",{\"1\":{\"239\":1}}],[\"请大家想象一下一个乱糟糟的开发小组的工作状态\",{\"1\":{\"239\":1}}],[\"编程有趣又无趣\",{\"1\":{\"430\":1}}],[\"编写编译器时遇到的一些难题\",{\"1\":{\"425\":1}}],[\"编写语法分析器有两种方法\",{\"1\":{\"360\":1}}],[\"编写一个反向迭代器\",{\"1\":{\"234\":1}}],[\"编译时加上\",{\"1\":{\"339\":1}}],[\"编译程序\",{\"1\":{\"339\":1}}],[\"编译器中我们需要用到的函数有\",{\"1\":{\"338\":1}}],[\"编译器的语法分析部分其实是很简单的\",{\"1\":{\"398\":1}}],[\"编译器的输出\",{\"1\":{\"340\":1}}],[\"编译器的编写分为\",{\"1\":{\"321\":1}}],[\"编译器的构建流程\",{\"0\":{\"321\":1},\"1\":{\"320\":1}}],[\"编译器框架\",{\"0\":{\"322\":1},\"1\":{\"320\":1}}],[\"编译器\",{\"1\":{\"323\":1},\"2\":{\"319\":1,\"358\":1,\"368\":1,\"379\":1,\"390\":1,\"400\":1,\"424\":1,\"432\":1}}],[\"编译器生成器\",{\"1\":{\"314\":1}}],[\"编译原理\",{\"1\":{\"313\":1,\"314\":3,\"317\":1,\"323\":1},\"2\":{\"318\":1,\"357\":1,\"367\":1,\"378\":1,\"389\":1,\"399\":1,\"423\":1,\"431\":1}}],[\"编辑器\",{\"1\":{\"102\":1}}],[\"支持的标记\",{\"0\":{\"345\":1},\"1\":{\"341\":1}}],[\"支持多种遍历方式\",{\"1\":{\"230\":1}}],[\"支持实时预览和多种导出格式\",{\"1\":{\"102\":1}}],[\"统一接口\",{\"1\":{\"230\":1}}],[\"改变遍历算法\",{\"1\":{\"230\":1}}],[\"改变它的理由永远只有一个\",{\"1\":{\"115\":1}}],[\"集合对象和遍历算法分离\",{\"1\":{\"230\":1}}],[\"集成到某个\",{\"1\":{\"31\":1}}],[\"迭代器模式是一种行为设计模式\",{\"1\":{\"231\":1}}],[\"迭代器模式将遍历逻辑封装在迭代器对象中\",{\"1\":{\"230\":1}}],[\"迭代器模式提供了一种方法来顺序访问集合中的元素\",{\"1\":{\"230\":1}}],[\"迭代器模式\",{\"0\":{\"229\":1}}],[\"人民邮电出版社\",{\"1\":{\"226\":1}}],[\"人们发现经常需要异步操作共享资源的情况下\",{\"1\":{\"91\":1}}],[\"北京\",{\"1\":{\"226\":1}}],[\"杨文轩译\",{\"1\":{\"226\":1}}],[\"😃\",{\"1\":{\"226\":1}}],[\"遂使用ts作为实现语言\",{\"1\":{\"226\":1}}],[\"封装\",{\"1\":{\"226\":1}}],[\"面向对象编程可以帮助我们分散处理\",{\"1\":{\"243\":1}}],[\"面向对象三大特性\",{\"1\":{\"226\":1}}],[\"面向接口编程\",{\"1\":{\"119\":1}}],[\"符合开闭原则\",{\"1\":{\"221\":1,\"299\":1}}],[\"符合单一职责原则的类\",{\"1\":{\"117\":1}}],[\"降低了耦合性\",{\"1\":{\"221\":1}}],[\"降低类之间的耦合度\",{\"1\":{\"113\":1}}],[\"客户端代码不需要知道具体的产品类\",{\"1\":{\"221\":1}}],[\"客户端代码与子系统之间的耦合度降低\",{\"1\":{\"213\":1}}],[\"メール待っていますね\",{\"1\":{\"215\":1}}],[\"のページへようこそ\",{\"1\":{\"215\":1}}],[\"来实现运算符的优先级\",{\"1\":{\"422\":1}}],[\"来实现\",{\"1\":{\"412\":1}}],[\"来实现不同的猜拳策略\",{\"1\":{\"281\":1}}],[\"来保存一个表达式的类型\",{\"1\":{\"407\":1}}],[\"来表示退出\",{\"1\":{\"395\":1}}],[\"来表现这些依赖于操作系统的部分\",{\"1\":{\"163\":1}}],[\"来大致描述我们实现的\",{\"1\":{\"369\":1}}],[\"来压缩了源码字符串\",{\"1\":{\"345\":1}}],[\"来将字符串转换成标记流\",{\"1\":{\"343\":1}}],[\"来计算\",{\"1\":{\"339\":1}}],[\"来简化与复杂子系统的交互\",{\"1\":{\"214\":1}}],[\"层与层之间通过外观类进行交互\",{\"1\":{\"213\":1}}],[\"更先进的版本是\",{\"1\":{\"428\":1}}],[\"更为重要的是\",{\"1\":{\"363\":1}}],[\"更多的标记\",{\"1\":{\"345\":1}}],[\"更易维护\",{\"1\":{\"299\":1}}],[\"更好的分层\",{\"1\":{\"213\":1}}],[\"更新代码的原生部分\",{\"1\":{\"86\":1}}],[\"增的操作\",{\"1\":{\"419\":1}}],[\"增强了代码的可扩展性\",{\"1\":{\"230\":1}}],[\"增强了代码的可维护性和可扩展性\",{\"1\":{\"213\":1}}],[\"增加\",{\"1\":{\"339\":1}}],[\"增加指令会消耗许多资源\",{\"1\":{\"332\":1}}],[\"增加灵活性\",{\"1\":{\"180\":1}}],[\"增加后的功能可以被\",{\"1\":{\"163\":1}}],[\"增加了灵活性\",{\"1\":{\"291\":1}}],[\"增加了代码的灵活性和可维护性\",{\"1\":{\"230\":1}}],[\"增加了\",{\"1\":{\"155\":1}}],[\"增加新操作更容易\",{\"1\":{\"299\":1}}],[\"增加新的\",{\"1\":{\"304\":1}}],[\"增加新的产品类时\",{\"1\":{\"221\":1}}],[\"增加新的实现时\",{\"0\":{\"152\":1}}],[\"增加新的实现\",{\"1\":{\"107\":1}}],[\"增加新功能时\",{\"0\":{\"151\":1}}],[\"增加其它工厂\",{\"0\":{\"131\":1}}],[\"增加请求头和cookie的大小限制\",{\"1\":{\"16\":1}}],[\"松散耦合\",{\"1\":{\"213\":1}}],[\"简直痛苦地无话可说\",{\"1\":{\"429\":1}}],[\"简而言之\",{\"1\":{\"342\":1}}],[\"简化代码\",{\"1\":{\"230\":1,\"264\":1}}],[\"简化接口\",{\"1\":{\"213\":1}}],[\"简单地替换下算法即可进行测试\",{\"1\":{\"285\":1}}],[\"简单地说\",{\"1\":{\"31\":1,\"32\":1,\"392\":1}}],[\"简单化\",{\"2\":{\"219\":1,\"248\":1}}],[\"简单来说\",{\"1\":{\"118\":1}}],[\"简单ppt\",{\"1\":{\"96\":1}}],[\"简单直接\",{\"1\":{\"38\":1}}],[\"图解设计模式\",{\"1\":{\"213\":1,\"226\":1}}],[\"图论\",{\"1\":{\"73\":1}}],[\"啊\",{\"1\":{\"213\":1}}],[\"父类控制算法的执行流程\",{\"1\":{\"291\":1}}],[\"父类和子类之间的一致性是指子类应当继承父类的行为和属性\",{\"1\":{\"209\":1}}],[\"父类和子类的一致性\",{\"0\":{\"209\":1}}],[\"父类的任务是通过声明抽象方法的方式定义接口\",{\"1\":{\"152\":1}}],[\"导致工作进度始终滞后\",{\"1\":{\"239\":1}}],[\"导致增加许多很小的类\",{\"0\":{\"206\":1}}],[\"导致插件无法正常退出\",{\"1\":{\"45\":1}}],[\"草莓味和猕猴桃三重口味\",{\"1\":{\"205\":1}}],[\"草莓冰激凌\",{\"1\":{\"205\":1}}],[\"亦或是香草味\",{\"1\":{\"205\":1}}],[\"冰激凌店只会准备各种香料\",{\"1\":{\"205\":1}}],[\"猕猴桃冰激凌等各种口味的冰激凌一样\",{\"1\":{\"205\":1}}],[\"巧克力冰激凌\",{\"1\":{\"205\":1}}],[\"此外\",{\"1\":{\"203\":1,\"286\":1,\"304\":1}}],[\"此时的二元运算符的解析的框架为\",{\"1\":{\"414\":1}}],[\"此时运算符栈为空\",{\"1\":{\"402\":1}}],[\"此时判断参数\",{\"1\":{\"402\":1}}],[\"此时我们期待的是+的另一个参数\",{\"1\":{\"402\":1}}],[\"此时我们可以使用ionic无缝将其迁移到移动端\",{\"1\":{\"84\":1}}],[\"此时\",{\"1\":{\"203\":1,\"258\":1,\"393\":1,\"415\":1}}],[\"此时使用权让出以后\",{\"1\":{\"92\":1}}],[\"给\",{\"1\":{\"203\":1}}],[\"给一个健康的人注射吗啡是犯罪\",{\"1\":{\"93\":1}}],[\"委托者将某些任务委托给委托对象来执行\",{\"1\":{\"210\":1}}],[\"委托\",{\"1\":{\"203\":1}}],[\"委托是弱关联\",{\"0\":{\"164\":1}}],[\"功能需求总是在不断变化\",{\"1\":{\"305\":1}}],[\"功能则越多\",{\"1\":{\"203\":1}}],[\"功能层次结构与实现层次结构是混杂在一个层次结构中的\",{\"1\":{\"153\":1}}],[\"结语\",{\"0\":{\"430\":1},\"1\":{\"425\":1}}],[\"结束的\",{\"1\":{\"384\":2}}],[\"结果存放在寄存器\",{\"1\":{\"337\":1}}],[\"结果却发现还是皮\",{\"1\":{\"202\":1}}],[\"结城浩\",{\"1\":{\"226\":1}}],[\"结论当然就是看使用场景\",{\"1\":{\"93\":1}}],[\"却没有发生任何变化\",{\"1\":{\"202\":1}}],[\"透明性\",{\"1\":{\"202\":1}}],[\"灵活性高\",{\"1\":{\"221\":1}}],[\"灵活性\",{\"1\":{\"198\":1,\"291\":1}}],[\"职责扩展\",{\"1\":{\"198\":1}}],[\"职责分离\",{\"1\":{\"116\":1}}],[\"容器与内容的一致性\",{\"2\":{\"196\":1,\"212\":1}}],[\"容易\",{\"1\":{\"133\":1}}],[\"61\",{\"1\":{\"350\":1}}],[\"64\",{\"1\":{\"339\":2}}],[\"6\",{\"0\":{\"380\":1},\"1\":{\"244\":2,\"312\":1,\"320\":1,\"323\":2,\"338\":1,\"341\":2,\"359\":2,\"362\":1,\"369\":1,\"380\":2,\"391\":1,\"392\":1,\"401\":3,\"421\":1,\"425\":1}}],[\"66\",{\"1\":{\"182\":1}}],[\"65\",{\"1\":{\"16\":1}}],[\"动态组合职责链\",{\"1\":{\"180\":1}}],[\"动态地扩展对象的行为\",{\"1\":{\"107\":1}}],[\"推卸责任\",{\"1\":{\"179\":2},\"2\":{\"185\":1}}],[\"虽然多\",{\"1\":{\"422\":1}}],[\"虽然我们前面没有提到\",{\"1\":{\"407\":1}}],[\"虽然上面写完了词法分析器\",{\"1\":{\"354\":1}}],[\"虽然是int型\",{\"1\":{\"325\":1}}],[\"虽然标题是编译器\",{\"1\":{\"320\":1}}],[\"虽然接口是相同的\",{\"1\":{\"203\":1}}],[\"虽然可以从方法名中获得线索\",{\"1\":{\"176\":1}}],[\"虽然有时需要从零开始编写代码\",{\"1\":{\"176\":1}}],[\"虽然同时只能有一个线程执行\",{\"1\":{\"92\":1}}],[\"组员之间不再相互询问和相互指示\",{\"1\":{\"239\":1}}],[\"组件才具有高价\",{\"1\":{\"174\":1}}],[\"组合\",{\"0\":{\"122\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"易于增加\",{\"0\":{\"306\":1}}],[\"易于增加具体工厂\",{\"0\":{\"133\":1}}],[\"易于扩展\",{\"1\":{\"281\":1}}],[\"易于维护和扩展\",{\"1\":{\"174\":1}}],[\"■晚上\",{\"1\":{\"171\":1}}],[\"■从早上到下午\",{\"1\":{\"171\":1}}],[\"が作成されました\",{\"1\":{\"170\":1}}],[\"晚安\",{\"1\":{\"170\":1,\"171\":1}}],[\"晚上好\",{\"1\":{\"170\":1,\"171\":1}}],[\"晚上\",{\"1\":{\"170\":1}}],[\"早上好\",{\"1\":{\"170\":1,\"171\":1}}],[\"问题\",{\"1\":{\"363\":1}}],[\"问题到底出在哪儿\",{\"1\":{\"90\":1}}],[\"问候\",{\"1\":{\"170\":1,\"171\":1}}],[\"才将\",{\"1\":{\"164\":1}}],[\"才与作为参数被传入的类构成关联\",{\"1\":{\"164\":1}}],[\"才能正常看到渲染后的\",{\"1\":{\"97\":1}}],[\"才能透过现象\",{\"1\":{\"93\":1}}],[\"继承\",{\"1\":{\"226\":1}}],[\"继承和委托中的一致性\",{\"0\":{\"208\":1}}],[\"继承是强关联关系\",{\"1\":{\"164\":1}}],[\"继承是强关联\",{\"0\":{\"164\":1}}],[\"继续执行我们当前的任务\",{\"1\":{\"92\":1}}],[\"个字节\",{\"1\":{\"418\":1}}],[\"个字符或标记\",{\"1\":{\"356\":1}}],[\"个数等\",{\"1\":{\"388\":1}}],[\"个部分进行讲解\",{\"1\":{\"369\":1,\"380\":1}}],[\"个标记\",{\"1\":{\"363\":1}}],[\"个指令\",{\"1\":{\"328\":1}}],[\"个寄存器\",{\"1\":{\"326\":1}}],[\"个函数\",{\"1\":{\"322\":1}}],[\"个函数来实现了一个小的\",{\"1\":{\"315\":1}}],[\"个步骤\",{\"1\":{\"321\":1}}],[\"个实例则会有\",{\"1\":{\"244\":1}}],[\"个实例就会有\",{\"1\":{\"244\":1}}],[\"个实例\",{\"1\":{\"244\":3,\"272\":1}}],[\"个成员虽然一起协同工作\",{\"1\":{\"239\":1}}],[\"个操作系统上\",{\"1\":{\"163\":1}}],[\"个\",{\"1\":{\"163\":1}}],[\"个类的子类\",{\"1\":{\"133\":1}}],[\"角色公开足够多的信息\",{\"1\":{\"308\":1}}],[\"角色必须向\",{\"1\":{\"308\":1}}],[\"角色负责\",{\"1\":{\"306\":1}}],[\"角色即可\",{\"1\":{\"285\":1}}],[\"角色中并没有任何依赖于特定对话框的代码\",{\"1\":{\"245\":1}}],[\"角色的增加\",{\"1\":{\"307\":1}}],[\"角色的开发可以独立于\",{\"1\":{\"304\":1}}],[\"角色的接口\",{\"1\":{\"285\":1}}],[\"角色的类时\",{\"1\":{\"255\":1}}],[\"角色的\",{\"1\":{\"245\":2}}],[\"角色的实例传递给\",{\"1\":{\"164\":1}}],[\"角色很难复用\",{\"1\":{\"245\":1}}],[\"角色可以复用\",{\"1\":{\"245\":1}}],[\"角色\",{\"0\":{\"306\":1,\"307\":1},\"1\":{\"163\":2,\"205\":1,\"255\":2,\"304\":2,\"306\":2,\"307\":1}}],[\"版的\",{\"1\":{\"163\":1}}],[\"版\",{\"1\":{\"163\":5}}],[\"版权协议\",{\"1\":{\"29\":1}}],[\"版权声明\",{\"1\":{\"29\":1}}],[\"应用程序中\",{\"1\":{\"250\":1}}],[\"应用于软件所运行的操作系统上\",{\"1\":{\"163\":1}}],[\"应该可以在不修改原模块的基础上\",{\"1\":{\"106\":1}}],[\"分隔的变量\",{\"1\":{\"374\":1}}],[\"分别是\",{\"1\":{\"369\":1,\"380\":1}}],[\"分别是源地址和目标地址\",{\"1\":{\"328\":1}}],[\"分别如下\",{\"1\":{\"326\":1}}],[\"分析标识符的相关代码如下\",{\"1\":{\"349\":1}}],[\"分析整个\",{\"1\":{\"322\":1}}],[\"分析\",{\"1\":{\"314\":1}}],[\"分而治之\",{\"1\":{\"243\":1}}],[\"分开考虑\",{\"2\":{\"167\":1,\"289\":1}}],[\"分开后更容易扩展\",{\"0\":{\"163\":1}}],[\"分离关注点\",{\"1\":{\"299\":1}}],[\"分离开了\",{\"1\":{\"163\":1}}],[\"分离为两个独立的类层次结构\",{\"1\":{\"153\":1}}],[\"桥梁\",{\"1\":{\"155\":1}}],[\"以减少语法分析器的复杂程度\",{\"1\":{\"342\":1}}],[\"以上就是我们为了实现函数调用需要的指令了\",{\"1\":{\"336\":1}}],[\"以二进制的形式保存在内存中\",{\"1\":{\"324\":1}}],[\"以前人们会说\",{\"1\":{\"313\":1}}],[\"以确保在多线程环境下\",{\"1\":{\"277\":1}}],[\"以避免循环依赖和无限递归\",{\"1\":{\"256\":1}}],[\"以下是\",{\"1\":{\"251\":1}}],[\"以下是实现迭代器模式的\",{\"1\":{\"232\":1}}],[\"以便从后向前遍历书籍\",{\"1\":{\"234\":1}}],[\"以支持多种遍历方式\",{\"1\":{\"230\":1}}],[\"以示例程序来说\",{\"1\":{\"203\":1}}],[\"以及该函数在代码段\",{\"1\":{\"382\":1}}],[\"以及\",{\"1\":{\"202\":1}}],[\"以及它的子类\",{\"1\":{\"202\":1}}],[\"以供后面的处理使用\",{\"1\":{\"155\":1}}],[\"以管理员身份在\",{\"1\":{\"102\":1}}],[\"该标识符的类别\",{\"1\":{\"349\":1}}],[\"该标识符返回的标记\",{\"1\":{\"349\":1}}],[\"该地址中存放着\",{\"1\":{\"326\":1}}],[\"该方法中很容易发生\",{\"1\":{\"243\":1}}],[\"该实例通过\",{\"1\":{\"155\":1}}],[\"该类位于\",{\"1\":{\"155\":1}}],[\"该怎么办\",{\"1\":{\"92\":1}}],[\"试图教会我们的是如何构造\",{\"1\":{\"314\":1}}],[\"试程序行为的类\",{\"1\":{\"155\":1}}],[\"试证乘法交换律\",{\"1\":{\"69\":1}}],[\"试证加法交换律\",{\"1\":{\"53\":1}}],[\"试证\",{\"1\":{\"53\":2,\"55\":2,\"69\":2,\"72\":2}}],[\"负责协调模型和视图之间的交互\",{\"1\":{\"259\":1}}],[\"负责管理和协调各个用户\",{\"1\":{\"243\":1}}],[\"负责\",{\"1\":{\"155\":3}}],[\"两个概念\",{\"1\":{\"392\":1}}],[\"两个参数都无法取得了\",{\"1\":{\"337\":1}}],[\"两个自然数\",{\"1\":{\"62\":1}}],[\"两者之间必然会缺少联系\",{\"1\":{\"153\":1}}],[\"与前缀形式不同的是\",{\"1\":{\"419\":1}}],[\"与之不同\",{\"1\":{\"406\":1}}],[\"与语法分析相关的部分就是上文所说的优先级问题了\",{\"1\":{\"403\":1}}],[\"与存放在\",{\"1\":{\"383\":1}}],[\"与表示被装饰物的\",{\"1\":{\"202\":1}}],[\"与\",{\"1\":{\"153\":1,\"163\":1,\"326\":1,\"332\":1,\"384\":1,\"428\":1}}],[\"与线程相比\",{\"1\":{\"91\":1}}],[\"正则表达式\",{\"1\":{\"427\":1}}],[\"正如我们保证的那样\",{\"1\":{\"421\":1}}],[\"正负号\",{\"0\":{\"412\":1},\"1\":{\"401\":1}}],[\"正常的全局变量的类别则是\",{\"1\":{\"374\":1}}],[\"正是因为它相当于通过一定的编码\",{\"1\":{\"345\":1}}],[\"正是因为可以替换\",{\"1\":{\"174\":1}}],[\"正是因为不知道才能够替换\",{\"1\":{\"174\":1}}],[\"正是由于父类和子类的这种任务分担\",{\"1\":{\"152\":1}}],[\"正自然数与自然数相加为正自然数\",{\"1\":{\"59\":2}}],[\"正自然数的性质\",{\"0\":{\"59\":1}}],[\"正自然数\",{\"0\":{\"58\":1}}],[\"章\",{\"1\":{\"152\":1}}],[\"派生类\",{\"1\":{\"151\":1}}],[\"派生类应当可以替换基类并出现在基类能够出现的任何地方\",{\"1\":{\"109\":1}}],[\"之前\",{\"1\":{\"402\":1,\"415\":1}}],[\"之类的表达式要如何实现呢\",{\"1\":{\"406\":1}}],[\"之类的函数\",{\"1\":{\"338\":1}}],[\"之类的运算符是与参数顺序有关的\",{\"1\":{\"337\":1}}],[\"之间的关系是松耦合的\",{\"1\":{\"254\":1}}],[\"之间搭建桥梁\",{\"1\":{\"148\":1}}],[\"之后再计算运算符\",{\"1\":{\"402\":1}}],[\"之后\",{\"1\":{\"92\":1}}],[\"`not\",{\"1\":{\"420\":1}}],[\"`char\",{\"1\":{\"418\":1}}],[\"`ax`\",{\"1\":{\"406\":1}}],[\"`int\",{\"1\":{\"373\":1}}],[\"`winner\",{\"1\":{\"282\":2}}],[\"`sizeof\",{\"1\":{\"405\":3}}],[\"`singleton\",{\"1\":{\"273\":1,\"277\":1}}],[\"`subscribing\",{\"1\":{\"240\":1}}],[\"`graphobserver\",{\"1\":{\"251\":1}}],[\"`digitobserver\",{\"1\":{\"251\":1}}],[\"`publishing\",{\"1\":{\"240\":1}}],[\"`message\",{\"1\":{\"240\":1}}],[\"`main`\",{\"1\":{\"354\":1}}],[\"`mailto\",{\"1\":{\"215\":1}}],[\"`making\",{\"1\":{\"215\":1}}],[\"`■$\",{\"1\":{\"170\":1}}],[\"`$\",{\"1\":{\"170\":2,\"181\":2,\"189\":2,\"190\":1,\"191\":1,\"222\":1,\"265\":1,\"300\":4}}],[\"`|$\",{\"1\":{\"160\":1,\"292\":1}}],[\"`\",{\"1\":{\"143\":4,\"170\":3,\"181\":6,\"189\":2,\"190\":1,\"191\":1,\"215\":2,\"240\":2,\"251\":2,\"265\":5,\"273\":1,\"277\":1,\"282\":4,\"300\":4,\"373\":1,\"405\":3,\"418\":1,\"420\":1}}],[\"`<a\",{\"1\":{\"215\":1}}],[\"`<li>$\",{\"1\":{\"170\":1}}],[\"`<li><a\",{\"1\":{\"130\":1}}],[\"`<p>$\",{\"1\":{\"170\":1,\"215\":1}}],[\"`<\",{\"1\":{\"130\":2}}],[\"`<ul>`\",{\"1\":{\"130\":1}}],[\"`<hr><address>$\",{\"1\":{\"130\":1}}],[\"`<h1>$\",{\"1\":{\"130\":1,\"170\":1}}],[\"`<html><head><title>$\",{\"1\":{\"130\":1,\"170\":1,\"215\":1}}],[\"`<body>`\",{\"1\":{\"130\":1}}],[\"直到真正用递归下降的方式实现了一个\",{\"1\":{\"428\":1}}],[\"直到遇到优先级\",{\"1\":{\"414\":1}}],[\"直到遇见了终结符\",{\"1\":{\"362\":1}}],[\"直到合并成起始的非终结符\",{\"1\":{\"360\":1}}],[\"直到匹配输入的终结符\",{\"1\":{\"360\":1}}],[\"直到有一个对象能够处理它\",{\"1\":{\"181\":1}}],[\"直流12v\",{\"1\":{\"142\":1}}],[\"直接将对应的值用\",{\"1\":{\"406\":1}}],[\"直接从源代码编译成汇编代码是很困难的\",{\"1\":{\"343\":1}}],[\"直接证明比较困难\",{\"1\":{\"53\":1,\"69\":1}}],[\"直接取模\",{\"0\":{\"38\":1}}],[\"直接地创建各种图表\",{\"1\":{\"4\":1}}],[\"需求\",{\"1\":{\"142\":1}}],[\"需要两个字符\",{\"1\":{\"345\":1}}],[\"需要有参数\",{\"1\":{\"328\":1}}],[\"需要去理解程序运行中会有哪些状态\",{\"1\":{\"326\":1}}],[\"需要注意的是\",{\"1\":{\"304\":1,\"330\":1}}],[\"需要注意这些\",{\"1\":{\"255\":1}}],[\"需要先将这个插件\",{\"1\":{\"97\":1}}],[\"需要先申请一个域名\",{\"1\":{\"12\":1}}],[\"需要创建配置文件\",{\"1\":{\"9\":1}}],[\"变换装置\",{\"1\":{\"142\":1}}],[\"变量赋值\",{\"1\":{\"401\":1}}],[\"变量与函数调用\",{\"0\":{\"406\":1},\"1\":{\"401\":1,\"409\":1}}],[\"变量类型的表示\",{\"1\":{\"373\":1}}],[\"变量是\",{\"1\":{\"349\":1}}],[\"变量定义\",{\"0\":{\"369\":1},\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":2,\"380\":2,\"391\":1,\"401\":1,\"425\":1}}],[\"变量balance的最终结果是0\",{\"1\":{\"92\":1}}],[\"变量的状态并不会进行同步\",{\"1\":{\"92\":1}}],[\"交给\",{\"1\":{\"308\":1}}],[\"交给子类\",{\"2\":{\"225\":1,\"297\":1}}],[\"交流100v\",{\"1\":{\"142\":1}}],[\"交替进行\",{\"1\":{\"90\":1}}],[\"实际上\",{\"1\":{\"402\":1}}],[\"实际上我们也不能使用递归\",{\"1\":{\"370\":1}}],[\"实际上又是别的物体的\",{\"1\":{\"202\":1}}],[\"实际中可以自己指定\",{\"1\":{\"362\":1}}],[\"实际计算机中\",{\"1\":{\"340\":1}}],[\"实际需求\",{\"1\":{\"142\":1}}],[\"实例\",{\"1\":{\"202\":1}}],[\"实现起来并不是太难\",{\"1\":{\"428\":1}}],[\"实现起来也更直观\",{\"1\":{\"370\":1}}],[\"实现四则运算来讲解优先级问题\",{\"1\":{\"402\":1}}],[\"实现如下\",{\"1\":{\"330\":1,\"331\":1,\"333\":1,\"334\":1,\"336\":1,\"337\":1}}],[\"实现一个功能完善的\",{\"1\":{\"315\":1}}],[\"实现也很复杂\",{\"0\":{\"314\":1}}],[\"实现的代码示例\",{\"1\":{\"251\":1}}],[\"实现迭代器模式\",{\"0\":{\"231\":1},\"1\":{\"231\":1}}],[\"实现\",{\"1\":{\"155\":1}}],[\"实现方法\",{\"0\":{\"107\":1,\"110\":1,\"114\":1,\"116\":1,\"120\":1,\"123\":1}}],[\"适配器\",{\"1\":{\"142\":1}}],[\"适配器模式通过创建一个适配器类\",{\"1\":{\"140\":1}}],[\"适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\",{\"1\":{\"139\":1}}],[\"适配器模式\",{\"0\":{\"138\":1,\"139\":1},\"1\":{\"139\":1}}],[\"适用于编写笔记\",{\"1\":{\"102\":1}}],[\"生成汇编代码\",{\"1\":{\"419\":2}}],[\"生成了如下的汇编代码\",{\"1\":{\"415\":1}}],[\"生成一个同名的函数\",{\"1\":{\"363\":1}}],[\"生成一棵语法树\",{\"1\":{\"321\":1}}],[\"生成实例\",{\"2\":{\"137\":1,\"178\":1,\"269\":1,\"279\":1}}],[\"生活记录等非技术类文章\",{\"1\":{\"2\":1}}],[\"类别信息在后面章节中解析\",{\"1\":{\"374\":1}}],[\"类型的解析在前面的文章中我们已经很熟悉了\",{\"1\":{\"405\":1}}],[\"类型的注释\",{\"1\":{\"352\":1}}],[\"类型定义\",{\"1\":{\"373\":1}}],[\"类必须提供用于获取每个目录条目的\",{\"1\":{\"308\":1}}],[\"类负责\",{\"1\":{\"308\":1}}],[\"类作为组件的独立性\",{\"1\":{\"304\":1}}],[\"类作为显示文件夹内容的\",{\"1\":{\"304\":1}}],[\"类作为中介者\",{\"1\":{\"243\":1}}],[\"类很难在其他对话框中被复用\",{\"1\":{\"245\":1}}],[\"类用于新的对话框中\",{\"1\":{\"245\":1}}],[\"类实现了\",{\"1\":{\"233\":1}}],[\"类表示一个书架\",{\"1\":{\"233\":1}}],[\"类表示一个书籍对象\",{\"1\":{\"233\":1}}],[\"类具有相同的接口\",{\"1\":{\"202\":1}}],[\"类是表示被装饰物的\",{\"1\":{\"202\":1}}],[\"类方法的地方和\",{\"1\":{\"176\":1}}],[\"类知道如何生成对象的具体表示\",{\"1\":{\"174\":1}}],[\"类知道如何构建复杂对象\",{\"1\":{\"174\":1}}],[\"类中声明一个\",{\"1\":{\"307\":1}}],[\"类中\",{\"1\":{\"169\":1,\"243\":1,\"245\":1,\"304\":1}}],[\"类则不需要做任何修改\",{\"1\":{\"164\":1}}],[\"类和\",{\"1\":{\"164\":4,\"176\":1,\"245\":1,\"304\":3,\"307\":1}}],[\"类生成\",{\"1\":{\"164\":1}}],[\"类继承了\",{\"1\":{\"155\":1}}],[\"类比\",{\"0\":{\"141\":1,\"142\":1}}],[\"类\",{\"1\":{\"134\":1,\"151\":1,\"155\":2,\"164\":3,\"176\":2,\"202\":1,\"245\":1,\"304\":1,\"307\":1}}],[\"类的兄弟类\",{\"1\":{\"307\":1}}],[\"类的层次与抽象类\",{\"0\":{\"295\":1}}],[\"类的层次结构的混杂和分离\",{\"0\":{\"153\":1}}],[\"类的层次结构的两个作用\",{\"0\":{\"150\":1}}],[\"类的方法后具体会进行什么样的处理\",{\"1\":{\"176\":1}}],[\"类的方法的调用方法\",{\"1\":{\"176\":1}}],[\"类的代码\",{\"1\":{\"176\":1}}],[\"类的使用方法\",{\"1\":{\"176\":1}}],[\"类的实例\",{\"1\":{\"164\":1}}],[\"类的实例时\",{\"1\":{\"164\":1}}],[\"类的实例生成时\",{\"1\":{\"164\":1}}],[\"类的实现层次结构\",{\"1\":{\"148\":1,\"153\":1,\"155\":2,\"163\":3}}],[\"类的\",{\"1\":{\"155\":1,\"203\":1,\"243\":1}}],[\"类的构造函数被传递给\",{\"1\":{\"155\":1}}],[\"类的具体功能的实例\",{\"1\":{\"155\":1}}],[\"类的一览表\",{\"0\":{\"155\":1}}],[\"类的抽象方法时\",{\"1\":{\"152\":1}}],[\"类的子类中都实现这个方法\",{\"1\":{\"307\":1}}],[\"类的子类产生影响\",{\"1\":{\"176\":1}}],[\"类的子类\",{\"1\":{\"151\":1,\"202\":1}}],[\"类的功能层次结构\",{\"1\":{\"148\":1,\"153\":1,\"155\":4,\"163\":4}}],[\"类的设计原则有七个\",{\"1\":{\"104\":1}}],[\"类的多项式题目\",{\"1\":{\"36\":1}}],[\"方法本身有一定的要求\",{\"1\":{\"363\":1}}],[\"方法是为每个产生式\",{\"1\":{\"363\":1}}],[\"方法需要调用每个目录条目的\",{\"1\":{\"308\":1}}],[\"方法的调用方式如下\",{\"1\":{\"303\":2}}],[\"方法的调用顺序\",{\"1\":{\"255\":1}}],[\"方法的线程安全性\",{\"1\":{\"277\":1}}],[\"方法而导致应用程序不能正常工作\",{\"1\":{\"255\":1}}],[\"方法后调用\",{\"1\":{\"255\":1}}],[\"方法会先被调用\",{\"1\":{\"255\":1}}],[\"方法中与函数定义相关的内容\",{\"1\":{\"381\":1}}],[\"方法中\",{\"1\":{\"255\":1}}],[\"方法中发生了\",{\"1\":{\"243\":1}}],[\"方法集中处理了所有消息的发布和订阅逻辑\",{\"1\":{\"243\":1}}],[\"方法稍微有些复杂\",{\"1\":{\"243\":1}}],[\"方法也调用了\",{\"1\":{\"203\":1}}],[\"方法调用了\",{\"1\":{\"203\":1}}],[\"方法\",{\"1\":{\"134\":1,\"155\":1,\"202\":1,\"233\":2,\"276\":1,\"307\":1,\"308\":2}}],[\"方式使用\",{\"1\":{\"31\":1}}],[\"零件\",{\"1\":{\"134\":1}}],[\"包中\",{\"1\":{\"134\":1}}],[\"包中增加一个表示图像的\",{\"1\":{\"134\":1}}],[\"包中的抽象部分全部具体化即可\",{\"1\":{\"133\":1}}],[\"包括变量定义\",{\"1\":{\"373\":1}}],[\"包括\",{\"1\":{\"104\":1}}],[\"包括编程\",{\"1\":{\"34\":1}}],[\"模型\",{\"1\":{\"259\":1}}],[\"模式提高了\",{\"1\":{\"304\":1}}],[\"模式编写象棋程序时\",{\"1\":{\"285\":1}}],[\"模式却特意将算法与其他部分分离开来\",{\"1\":{\"285\":1}}],[\"模式确保一个类只有一个实例\",{\"1\":{\"271\":1}}],[\"模式是一种创建型设计模式\",{\"1\":{\"264\":1}}],[\"模式了\",{\"1\":{\"244\":1}}],[\"模式有以下几个好处\",{\"1\":{\"221\":1}}],[\"模式有以下几个优点\",{\"1\":{\"180\":1}}],[\"模式就是可以应对这种多功能对象的需求的一种模式\",{\"1\":{\"205\":1}}],[\"模式可以很容易地增加\",{\"1\":{\"306\":1,\"307\":1}}],[\"模式可以\",{\"1\":{\"264\":1}}],[\"模式可以为程序添加许多功能\",{\"1\":{\"205\":1}}],[\"模式可以将构建过程分解为多个步骤\",{\"1\":{\"169\":1}}],[\"模式使用了委托\",{\"1\":{\"203\":1}}],[\"模式一样\",{\"1\":{\"202\":1}}],[\"模式虽然与\",{\"1\":{\"202\":1}}],[\"模式允许你将对象组合成递归结构来表示\",{\"1\":{\"187\":1}}],[\"模式允许使用相同的构建过程来生成不同的对象表示\",{\"1\":{\"169\":1}}],[\"模式来处理一系列的请求\",{\"1\":{\"181\":1}}],[\"模式通过将构建过程与表示分离\",{\"1\":{\"175\":1}}],[\"模式通过将对象的构建过程与其表示分离\",{\"1\":{\"169\":1,\"174\":1}}],[\"模式中用到了委托\",{\"1\":{\"204\":1}}],[\"模式中也形成了类似于\",{\"1\":{\"202\":1}}],[\"模式中\",{\"1\":{\"202\":1,\"203\":1,\"220\":1,\"298\":1,\"303\":1,\"308\":1}}],[\"模式中的方法调用关系\",{\"1\":{\"303\":1}}],[\"模式中的递归结构\",{\"1\":{\"202\":1}}],[\"模式中的\",{\"1\":{\"163\":1}}],[\"模式中增加新的零件时应当如何做\",{\"1\":{\"134\":1}}],[\"模式中增加具体的工厂是非常容易的\",{\"1\":{\"133\":1}}],[\"模式的目的是将处理逻辑从数据结构中分离出来\",{\"1\":{\"304\":1}}],[\"模式的示例程序\",{\"1\":{\"282\":1}}],[\"模式的实现需要特别注意线程安全问题\",{\"1\":{\"276\":1}}],[\"模式的一个缺点是会导致程序中增加许多功能类似的很小的类\",{\"1\":{\"206\":1}}],[\"模式的主要目的是为了定义一个算法的骨架\",{\"1\":{\"290\":1}}],[\"模式的主要目的是通过添加装饰物来增加对象的功能\",{\"1\":{\"202\":1}}],[\"模式的主要目的是将抽象部分与实现部分分离\",{\"1\":{\"149\":1}}],[\"模式的特征是将\",{\"1\":{\"163\":1}}],[\"模式的作用就是搭建这座桥梁\",{\"1\":{\"153\":1}}],[\"模式在\",{\"1\":{\"148\":1}}],[\"模式\",{\"0\":{\"148\":1,\"168\":1,\"169\":1,\"179\":1,\"186\":1,\"197\":1,\"213\":1,\"220\":1,\"238\":1,\"249\":1,\"263\":1,\"264\":1,\"270\":1,\"271\":1,\"280\":1,\"290\":1,\"291\":1,\"298\":1,\"299\":1},\"1\":{\"135\":4,\"152\":1,\"165\":3,\"172\":4,\"179\":1,\"183\":2,\"187\":1,\"194\":3,\"207\":2,\"217\":3,\"221\":1,\"235\":3,\"246\":2,\"260\":1,\"267\":5,\"271\":1,\"275\":4,\"285\":1,\"286\":1,\"287\":3,\"294\":2,\"309\":3}}],[\"模块化设计\",{\"1\":{\"116\":1}}],[\"拓展思路的要点\",{\"0\":{\"132\":1,\"162\":1,\"173\":1,\"201\":1,\"242\":1,\"253\":1,\"284\":1,\"302\":1}}],[\"划分\",{\"1\":{\"131\":1}}],[\"超链接集合的文件\",{\"1\":{\"131\":1}}],[\">|\",{\"1\":{\"349\":1,\"386\":1}}],[\">=\",{\"1\":{\"337\":1,\"349\":5,\"350\":8,\"353\":1,\"365\":2,\"408\":1,\"414\":1,\"418\":1}}],[\">\",{\"1\":{\"322\":1,\"337\":1,\"343\":4,\"350\":1,\"353\":3,\"365\":1,\"372\":1,\"406\":1,\"413\":1,\"418\":2,\"419\":3,\"420\":1}}],[\">>\",{\"1\":{\"292\":1,\"293\":1,\"337\":1,\"353\":1,\"418\":1}}],[\">hiroshi\",{\"1\":{\"216\":1}}],[\">excite<\",{\"1\":{\"130\":1}}],[\">jp\",{\"1\":{\"130\":1}}],[\">us\",{\"1\":{\"130\":1}}],[\">gmw<\",{\"1\":{\"130\":1}}],[\">people<\",{\"1\":{\"130\":1}}],[\">$\",{\"1\":{\"130\":1,\"215\":1}}],[\"<unit>\",{\"1\":{\"418\":2}}],[\"<ul>\",{\"1\":{\"130\":5,\"170\":1}}],[\"<false\",{\"1\":{\"393\":2}}],[\"<factor>11\",{\"1\":{\"362\":1}}],[\"<factor>3\",{\"1\":{\"362\":1}}],[\"<factor><factor>\",{\"1\":{\"361\":1}}],[\"<factor>\",{\"1\":{\"361\":2,\"362\":2,\"363\":2,\"364\":3}}],[\"<true\",{\"1\":{\"393\":2}}],[\"<term\",{\"1\":{\"364\":3}}],[\"<term>7\",{\"1\":{\"362\":1}}],[\"<term>或\",{\"1\":{\"361\":1}}],[\"<term><term>\",{\"1\":{\"361\":1}}],[\"<term>\",{\"1\":{\"361\":6,\"362\":2,\"363\":2,\"364\":3}}],[\"<cond>\",{\"1\":{\"393\":3,\"394\":2}}],[\"<empty\",{\"1\":{\"392\":1}}],[\"<empty><factor>\",{\"1\":{\"364\":1}}],[\"<empty><term>\",{\"1\":{\"364\":1}}],[\"<expr2>normal\",{\"1\":{\"418\":1}}],[\"<expr2>\",{\"1\":{\"417\":4,\"418\":6}}],[\"<expr1>push\",{\"1\":{\"418\":1}}],[\"<expr1>\",{\"1\":{\"417\":4,\"418\":4}}],[\"<expr\",{\"1\":{\"364\":3}}],[\"<expr>2\",{\"1\":{\"362\":1}}],[\"<expr>\",{\"1\":{\"361\":7,\"362\":4,\"363\":2,\"364\":2,\"410\":1,\"411\":1}}],[\"<>\",{\"1\":{\"361\":1}}],[\"<offset>\",{\"1\":{\"336\":1}}],[\"<size>\",{\"1\":{\"333\":1,\"334\":2}}],[\"<statement>\",{\"1\":{\"392\":4,\"393\":2,\"394\":2,\"396\":1}}],[\"<string\",{\"1\":{\"322\":1}}],[\"<stdlib\",{\"1\":{\"322\":1,\"365\":1}}],[\"<stdio\",{\"1\":{\"322\":1,\"348\":1,\"365\":1}}],[\"<num>\",{\"1\":{\"328\":2}}],[\"<=\",{\"1\":{\"322\":1,\"337\":1,\"349\":5,\"350\":6,\"353\":1,\"354\":2,\"365\":2}}],[\"<memory\",{\"1\":{\"322\":1}}],[\"<<\",{\"1\":{\"292\":1,\"293\":1,\"337\":1,\"353\":1,\"418\":1}}],[\"<product>object\",{\"1\":{\"265\":1}}],[\"<p>メール待っていますね\",{\"1\":{\"216\":1}}],[\"<p>hiroshi\",{\"1\":{\"216\":1}}],[\"<addr>pushsc\",{\"1\":{\"415\":1}}],[\"<addr>lc\",{\"1\":{\"415\":1}}],[\"<addr>li\",{\"1\":{\"409\":1}}],[\"<addr>\",{\"1\":{\"330\":3,\"332\":2,\"406\":1,\"408\":1}}],[\"<a\",{\"1\":{\"216\":1}}],[\"<h1>welcome\",{\"1\":{\"216\":1}}],[\"<h1>linkpage<\",{\"1\":{\"130\":1}}],[\"<html><head><title>问候<\",{\"1\":{\"171\":1}}],[\"<html><head><title>linkpage<\",{\"1\":{\"130\":1}}],[\"<hr><address>gmw<\",{\"1\":{\"130\":1}}],[\"<body>\",{\"1\":{\"130\":1}}],[\"<li><a\",{\"1\":{\"130\":5}}],[\"<li>\",{\"1\":{\"130\":4}}],[\"<\",{\"1\":{\"130\":14,\"156\":1,\"160\":1,\"170\":6,\"171\":5,\"181\":2,\"199\":2,\"215\":5,\"216\":5,\"232\":1,\"251\":2,\"282\":4,\"292\":2,\"300\":1,\"322\":1,\"336\":1,\"337\":1,\"353\":3,\"383\":1,\"418\":3,\"420\":1}}],[\"扩展性强\",{\"1\":{\"221\":1}}],[\"扩展性\",{\"1\":{\"129\":1}}],[\"扩展其功能\",{\"1\":{\"106\":1}}],[\"解决了优先级的问题\",{\"1\":{\"414\":1}}],[\"解决方法\",{\"1\":{\"339\":1}}],[\"解析表达式\",{\"1\":{\"401\":1,\"422\":1}}],[\"解析函数的参数就是解析以逗号分隔的一个个标识符\",{\"1\":{\"385\":1}}],[\"解析函数的定义\",{\"0\":{\"382\":1},\"1\":{\"380\":1}}],[\"解析参数\",{\"0\":{\"385\":1},\"1\":{\"380\":1}}],[\"解析变量的定义\",{\"0\":{\"371\":1},\"1\":{\"369\":1}}],[\"解析为\",{\"1\":{\"345\":3}}],[\"解释器需要我们实现自己的虚拟机与指令集\",{\"1\":{\"320\":1}}],[\"解释器与编译器仅在代码生成阶段有区别\",{\"1\":{\"320\":1}}],[\"解释器\",{\"1\":{\"323\":1,\"325\":1},\"2\":{\"319\":1,\"358\":1,\"368\":1,\"379\":1,\"390\":1,\"400\":1,\"424\":1,\"432\":1}}],[\"解释器就自动释放gil锁\",{\"1\":{\"90\":1}}],[\"解耦框架与生成的实例\",{\"1\":{\"264\":1}}],[\"解耦集合和遍历\",{\"1\":{\"230\":1}}],[\"解耦创建和使用\",{\"1\":{\"221\":1}}],[\"解耦请求发送者和接收者\",{\"1\":{\"180\":1}}],[\"解耦\",{\"1\":{\"129\":1}}],[\"抽象条目类\",{\"0\":{\"190\":1}}],[\"抽象类声明了一些抽象方法\",{\"1\":{\"152\":1}}],[\"抽象类\",{\"1\":{\"131\":1,\"176\":1}}],[\"抽象容器\",{\"1\":{\"130\":1}}],[\"抽象html页面\",{\"1\":{\"130\":1}}],[\"抽象超链接\",{\"1\":{\"130\":1}}],[\"抽象零件\",{\"1\":{\"130\":1}}],[\"抽象工厂\",{\"1\":{\"130\":1}}],[\"抽象工厂模式通过将对象的创建过程抽象化\",{\"1\":{\"129\":1}}],[\"抽象工厂模式使得一个类的实例化延迟到其子类\",{\"1\":{\"129\":1}}],[\"抽象工厂模式提供一个接口\",{\"1\":{\"129\":1}}],[\"抽象工厂模式\",{\"0\":{\"128\":1}}],[\"抽象不应该依赖细节\",{\"1\":{\"119\":1}}],[\"优先级大于\",{\"1\":{\"402\":1}}],[\"优先级\",{\"1\":{\"402\":2,\"414\":1}}],[\"优先级关心的就是哪个运算符先计算\",{\"1\":{\"402\":1}}],[\"优先级高于加法\",{\"1\":{\"402\":1}}],[\"优先使用组合\",{\"1\":{\"125\":1}}],[\"优雅的解决方案\",{\"1\":{\"1\":1}}],[\"聚合\",{\"1\":{\"122\":1,\"125\":1}}],[\"聚合复用原则\",{\"0\":{\"122\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"核心思想是\",{\"1\":{\"119\":1}}],[\"细节应该依赖抽象\",{\"1\":{\"119\":1}}],[\"二是如何将表达式编译成目标代码\",{\"1\":{\"401\":1}}],[\"二是容易中间运算时搞错运算顺序\",{\"1\":{\"38\":1}}],[\"二元运算符\",{\"0\":{\"414\":1},\"1\":{\"401\":1}}],[\"二选一\",{\"1\":{\"339\":1}}],[\"二者都依赖抽象\",{\"1\":{\"125\":1}}],[\"二者都应该依赖其抽象\",{\"1\":{\"119\":1}}],[\"显示一些东西\",{\"1\":{\"155\":1}}],[\"显示\",{\"1\":{\"155\":2}}],[\"显示用户信息逻辑\",{\"1\":{\"117\":2}}],[\"显得代码冗长\",{\"1\":{\"39\":1}}],[\"注释\",{\"0\":{\"352\":1},\"1\":{\"341\":1}}],[\"注册逻辑\",{\"1\":{\"117\":2}}],[\"注意这里并不是四则运算中的加减法\",{\"1\":{\"412\":1}}],[\"注意这里的类型\",{\"1\":{\"325\":1}}],[\"注意我们的之前的程序需要指令一个源文件\",{\"1\":{\"339\":1}}],[\"注意的是自增自减操作的优先级是和它的位置有关的\",{\"1\":{\"413\":1}}],[\"注意的是只支持\",{\"1\":{\"405\":1}}],[\"注意的是\",{\"1\":{\"335\":1}}],[\"注意的是pc在初始应指向目标代码中的main函数\",{\"1\":{\"326\":1}}],[\"注意的是由于栈是位于高地址并向低地址增长的\",{\"1\":{\"326\":1}}],[\"注意\",{\"1\":{\"86\":1}}],[\"登录逻辑\",{\"1\":{\"117\":2}}],[\"避免重复代码\",{\"1\":{\"291\":1}}],[\"避免重复初始化对象的复杂过程\",{\"1\":{\"264\":1}}],[\"避免处理过于集中\",{\"1\":{\"243\":1}}],[\"避免高层模块直接依赖具体类\",{\"1\":{\"120\":1}}],[\"避免不必要的外部依赖\",{\"1\":{\"114\":1}}],[\"避免了多线程的上下文切换\",{\"1\":{\"91\":1}}],[\"限制公开方法\",{\"1\":{\"114\":1}}],[\"隐藏系统的复杂性\",{\"1\":{\"114\":1}}],[\"引入中介者模式\",{\"1\":{\"114\":1}}],[\"示例程序中的\",{\"1\":{\"243\":1}}],[\"示例程序\",{\"0\":{\"143\":1,\"282\":1},\"1\":{\"142\":1}}],[\"示例代码\",{\"0\":{\"130\":1,\"154\":1,\"181\":1,\"188\":1,\"214\":1,\"222\":1,\"240\":1,\"251\":1,\"265\":1,\"273\":1,\"292\":1,\"300\":1}}],[\"示例\",{\"0\":{\"111\":1,\"117\":1,\"121\":1,\"124\":1}}],[\"返回类型应与父类相同或是其子类型\",{\"1\":{\"110\":1}}],[\"确保同一工厂创建的一系列对象具有一致的接口和行为\",{\"1\":{\"129\":1}}],[\"确保每个模块只负责一个功能\",{\"1\":{\"116\":1}}],[\"确保每个类只有一个职责\",{\"1\":{\"107\":1}}],[\"确保子类实现父类的抽象方法\",{\"1\":{\"110\":1}}],[\"通用寄存器\",{\"1\":{\"326\":1}}],[\"通信线路的增加\",{\"0\":{\"244\":1}}],[\"通常是站在子类的角度进行思考的\",{\"1\":{\"295\":1}}],[\"通常在编程时算法会被写在具体方法中\",{\"1\":{\"285\":1}}],[\"通常情况下\",{\"1\":{\"243\":1}}],[\"通常\",{\"1\":{\"105\":1,\"255\":2,\"304\":1}}],[\"通过一步步的学习\",{\"1\":{\"422\":1}}],[\"通过一个有趣的代码示例\",{\"1\":{\"98\":1}}],[\"通过本章的学习\",{\"1\":{\"356\":1}}],[\"通过词法分析器的预处理\",{\"1\":{\"342\":1}}],[\"通过将\",{\"1\":{\"328\":1}}],[\"通过将构建过程封装在\",{\"1\":{\"169\":1}}],[\"通过教程来说明这个过程\",{\"1\":{\"315\":1}}],[\"通过这种方式\",{\"1\":{\"290\":1}}],[\"通过这些类和接口\",{\"1\":{\"233\":1}}],[\"通过\",{\"1\":{\"271\":1,\"421\":1}}],[\"通过实现统一的迭代器接口\",{\"1\":{\"230\":1}}],[\"通过使用策略模式\",{\"1\":{\"281\":1}}],[\"通过使用观察者模式\",{\"1\":{\"250\":1,\"259\":1}}],[\"通过使用迭代器模式\",{\"1\":{\"230\":1}}],[\"通过使用\",{\"1\":{\"221\":1}}],[\"通过使用装饰器模式\",{\"1\":{\"198\":1}}],[\"通过引入外观类\",{\"1\":{\"213\":1}}],[\"通过接口和抽象类定义行为\",{\"1\":{\"123\":1}}],[\"通过在类中引用其他类的实例来实现功能\",{\"1\":{\"123\":1}}],[\"通过在类中包含其他类的实例来实现功能\",{\"1\":{\"123\":1}}],[\"通过构造函数注入\",{\"1\":{\"120\":1}}],[\"通过模块化设计\",{\"1\":{\"116\":1}}],[\"通过门面对象提供统一的接口\",{\"1\":{\"114\":1}}],[\"通过中介者对象来管理对象之间的交互\",{\"1\":{\"114\":1}}],[\"通过定义抽象类和接口\",{\"1\":{\"107\":1}}],[\"通过举反例的方式\",{\"1\":{\"73\":1}}],[\"通过上述步骤\",{\"1\":{\"73\":1,\"102\":1}}],[\"违反其中一个原则\",{\"1\":{\"105\":1}}],[\"七大原则之间并不是相互孤立的\",{\"1\":{\"105\":1}}],[\"单元运算符往往没有这个问题\",{\"1\":{\"402\":1}}],[\"单一职责原则\",{\"0\":{\"115\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"单核处理器还是同时间只能做一件事\",{\"1\":{\"91\":1}}],[\"单核处理器本来就没法同时处理两件事情\",{\"1\":{\"89\":1}}],[\"单核同时间内只能有一个线程运行\",{\"1\":{\"89\":1}}],[\"迪米特原则\",{\"0\":{\"112\":1,\"113\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"里氏代换原则规定子类不得重写父类的普通方法\",{\"1\":{\"109\":1}}],[\"里氏代换原则\",{\"0\":{\"108\":1,\"109\":1},\"1\":{\"104\":1,\"105\":1,\"125\":1}}],[\"里的\",{\"0\":{\"32\":1}}],[\"设置了正确的类型\",{\"1\":{\"382\":1}}],[\"设置把你主机\",{\"1\":{\"31\":1}}],[\"设计我们自己的指令集\",{\"1\":{\"323\":1}}],[\"设计\",{\"0\":{\"320\":1},\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"设计时能够决定的事情和不能决定的事情\",{\"0\":{\"175\":1}}],[\"设计模式和面向对象的目的正是为我们提供一种结构\",{\"1\":{\"305\":1}}],[\"设计模式需遵循面向对象的设计原则\",{\"1\":{\"226\":1}}],[\"设计模式\",{\"0\":{\"226\":1},\"2\":{\"126\":1,\"127\":1,\"136\":1,\"137\":1,\"146\":1,\"147\":1,\"166\":1,\"167\":1,\"177\":1,\"178\":1,\"184\":1,\"185\":1,\"195\":1,\"196\":1,\"211\":1,\"212\":1,\"218\":1,\"219\":1,\"224\":1,\"225\":1,\"227\":1,\"228\":1,\"236\":1,\"237\":1,\"247\":1,\"248\":1,\"261\":1,\"262\":1,\"268\":1,\"269\":1,\"278\":1,\"279\":1,\"288\":1,\"289\":1,\"296\":1,\"297\":1,\"310\":1,\"311\":1}}],[\"设计模式七大原则\",{\"0\":{\"104\":1}}],[\"设计方法\",{\"1\":{\"105\":1}}],[\"设计目标\",{\"1\":{\"105\":1}}],[\"您可以免费安装并使用\",{\"1\":{\"102\":1}}],[\"启动\",{\"1\":{\"102\":1}}],[\"启动项目\",{\"0\":{\"18\":1}}],[\"复杂对象的创建\",{\"1\":{\"169\":1}}],[\"复杂演示推荐\",{\"1\":{\"95\":1}}],[\"复制到\",{\"1\":{\"102\":1}}],[\"密码\",{\"1\":{\"102\":1}}],[\"百度网盘\",{\"1\":{\"102\":1}}],[\"官网\",{\"1\":{\"102\":1}}],[\"官方推荐的\",{\"1\":{\"31\":1}}],[\"教程\",{\"0\":{\"101\":1}}],[\"准备好了吗\",{\"1\":{\"98\":1}}],[\"展示如何用闭包来实现这一点\",{\"1\":{\"98\":1}}],[\"页面\",{\"1\":{\"97\":1}}],[\"预览功能\",{\"1\":{\"97\":1}}],[\"转换成对应的汇编代码\",{\"1\":{\"383\":1}}],[\"转给另外一个人\",{\"1\":{\"179\":1}}],[\"转\",{\"0\":{\"103\":1}}],[\"转而使用\",{\"1\":{\"97\":1}}],[\"转载声明\",{\"0\":{\"323\":1}}],[\"转载工具\",{\"1\":{\"312\":1}}],[\"转载请附上原文出处链接和本声明\",{\"1\":{\"29\":1}}],[\"转载自\",{\"1\":{\"28\":1}}],[\"卸载\",{\"1\":{\"97\":1}}],[\"禁用\",{\"1\":{\"97\":1}}],[\"渲染插件\",{\"1\":{\"97\":1}}],[\"⚠️注意事项\",{\"1\":{\"97\":1}}],[\"缺点\",{\"0\":{\"96\":1,\"97\":1}}],[\"文法\",{\"1\":{\"428\":1}}],[\"文法的关系\",{\"1\":{\"428\":1}}],[\"文章\",{\"1\":{\"317\":1}}],[\"文档和博客等\",{\"1\":{\"102\":1}}],[\"文档\",{\"1\":{\"94\":1}}],[\"文件类\",{\"0\":{\"191\":1}}],[\"文件\",{\"1\":{\"102\":1}}],[\"文件来实现风格统一\",{\"1\":{\"44\":1}}],[\"文件目录\",{\"1\":{\"32\":1}}],[\"文件管理器\",{\"1\":{\"32\":1}}],[\"文件的实际位置很奇怪\",{\"1\":{\"31\":1}}],[\"脱离具体场景孤立存在的\",{\"1\":{\"93\":1}}],[\"脱离对象孤立存在的\",{\"1\":{\"93\":1}}],[\"抛开场景谈逻辑\",{\"1\":{\"93\":1}}],[\"抛开剂量谈毒性\",{\"1\":{\"93\":1}}],[\"道德不是空泛的\",{\"1\":{\"93\":1}}],[\"只支持枚举\",{\"1\":{\"373\":1}}],[\"只支持\",{\"1\":{\"352\":1}}],[\"只能说它是一个相当大的挑战吧\",{\"1\":{\"313\":1}}],[\"只能重写父类的抽象方法\",{\"1\":{\"109\":1}}],[\"只有身在其中的我们才能体会吧\",{\"1\":{\"430\":1}}],[\"只有\",{\"1\":{\"328\":1}}],[\"只有当访问者从数据结构中获取了足够多的信息后才能工作\",{\"1\":{\"308\":1}}],[\"只有掌握了辩证的矛盾思维才能更全面更灵活的看待问题\",{\"1\":{\"93\":1}}],[\"只是在编写代码的过程中\",{\"1\":{\"429\":1}}],[\"只是在实现\",{\"1\":{\"413\":1}}],[\"只是这时就是提前看k个\",{\"1\":{\"352\":1}}],[\"只是现在还用不着\",{\"1\":{\"339\":1}}],[\"只是现在用\",{\"1\":{\"336\":1}}],[\"只是我们的指令集中并没有\",{\"1\":{\"335\":1}}],[\"只是它们的功能都过于强大\",{\"1\":{\"321\":1}}],[\"只是对于一般的学生或程序员来说\",{\"1\":{\"314\":1}}],[\"只是定义了与算法相关的接口\",{\"1\":{\"285\":1}}],[\"只是阅读抽象类的代码是无法获取很多信息的\",{\"1\":{\"176\":1}}],[\"只存在一个实例\",{\"1\":{\"272\":1}}],[\"只要保持各个类的独立性\",{\"1\":{\"255\":1}}],[\"只要准备一些装饰边框\",{\"1\":{\"205\":1}}],[\"只需添加新的访问者类\",{\"1\":{\"299\":1}}],[\"只需添加新的子类工厂\",{\"1\":{\"221\":1}}],[\"只需要依赖抽象产品接口\",{\"1\":{\"221\":1}}],[\"只需要一些装饰物即可添加许多功能\",{\"0\":{\"205\":1}}],[\"只需要在\",{\"1\":{\"163\":1}}],[\"只显示规定次数\",{\"1\":{\"155\":1}}],[\"只关注最终结果一致性\",{\"1\":{\"93\":1}}],[\"只不过这个让出的过程是线程调度器主动抢占的\",{\"1\":{\"89\":1}}],[\"没有什么值得说明的内容\",{\"1\":{\"394\":1}}],[\"没有学过编译原理的话可能并不知道什么是\",{\"1\":{\"361\":1}}],[\"没有参数的指令在后\",{\"1\":{\"327\":1}}],[\"没有主动放弃执行权\",{\"1\":{\"93\":1}}],[\"没锁的话\",{\"1\":{\"90\":1}}],[\"还有就是写这个系列的文章\",{\"1\":{\"429\":1}}],[\"还有就是调试编译器\",{\"1\":{\"429\":1}}],[\"还有两个重要函数没有完成\",{\"1\":{\"387\":1}}],[\"还剩最后一部分没有完成\",{\"1\":{\"397\":1}}],[\"还记得前面说的标识符\",{\"1\":{\"354\":1}}],[\"还要考虑如何传递参数和如何返回结果\",{\"1\":{\"332\":1}}],[\"还没仔细了解过\",{\"1\":{\"317\":1}}],[\"还可以用某种算法去\",{\"1\":{\"286\":1}}],[\"还会使得调试和维护变得更加困难\",{\"1\":{\"243\":1}}],[\"还想变量安全\",{\"1\":{\"92\":1}}],[\"还是实现起来\",{\"1\":{\"428\":1}}],[\"还是函数的局部变量\",{\"1\":{\"383\":1}}],[\"还是咖啡朗姆和开心果的混合口味\",{\"1\":{\"205\":1}}],[\"还是要增加实现呢\",{\"1\":{\"153\":1}}],[\"还是过程中\",{\"1\":{\"92\":1}}],[\"还是只能加锁\",{\"1\":{\"92\":1}}],[\"还是只能一个人打电话\",{\"1\":{\"90\":1}}],[\"还是最后执行结果\",{\"1\":{\"92\":1}}],[\"话说回来\",{\"1\":{\"92\":1}}],[\"切换过程是协作的\",{\"1\":{\"92\":1}}],[\"连最终一致性也无法保证\",{\"1\":{\"92\":1}}],[\"连接你的\",{\"1\":{\"31\":1}}],[\"意味着协程操作变量的最终一致性是可以保证的\",{\"1\":{\"92\":1}}],[\"混乱状态\",{\"1\":{\"92\":1}}],[\"状态机\",{\"1\":{\"427\":1}}],[\"状态一致\",{\"1\":{\"92\":1}}],[\"状自然数系统\",{\"1\":{\"80\":1}}],[\"98\",{\"1\":{\"314\":1}}],[\"900\",{\"1\":{\"193\":1,\"301\":1}}],[\"998\",{\"1\":{\"342\":3}}],[\"998244353>\",{\"1\":{\"40\":3}}],[\"998244353\",{\"1\":{\"36\":1}}],[\"9999\",{\"1\":{\"283\":1}}],[\"9998\",{\"1\":{\"283\":1}}],[\"9997\",{\"1\":{\"283\":1}}],[\"9994\",{\"1\":{\"283\":1}}],[\"9992\",{\"1\":{\"283\":1}}],[\"9991\",{\"1\":{\"283\":1}}],[\"99\",{\"1\":{\"182\":1}}],[\"9\",{\"0\":{\"425\":1},\"1\":{\"92\":1,\"155\":1,\"312\":1,\"320\":1,\"323\":2,\"341\":2,\"349\":1,\"350\":6,\"359\":1,\"365\":2,\"369\":1,\"380\":1,\"391\":1,\"401\":2,\"425\":2}}],[\"再将\",{\"1\":{\"419\":1}}],[\"再赋上局部变量相关的信息\",{\"1\":{\"385\":1}}],[\"再例如\",{\"1\":{\"342\":1}}],[\"再见\",{\"1\":{\"170\":1,\"171\":1}}],[\"再也没有异步的加持了\",{\"1\":{\"92\":1}}],[\"再进行减法运算\",{\"1\":{\"92\":1}}],[\"再根据\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"逻辑运算符\",{\"0\":{\"417\":1},\"1\":{\"401\":1}}],[\"逻辑取反\",{\"0\":{\"410\":1},\"1\":{\"401\":1}}],[\"逻辑也较为直接\",{\"1\":{\"350\":1}}],[\"逻辑有了些许修改\",{\"1\":{\"92\":1}}],[\"逻辑紧凑\",{\"1\":{\"91\":1}}],[\"让高层模块依赖这些抽象\",{\"1\":{\"120\":1}}],[\"让我们继续讲解如何把运算符编译成汇编代码吧\",{\"1\":{\"414\":1}}],[\"让我们继续之前的逻辑\",{\"1\":{\"92\":1}}],[\"让我们稍微改变一下立场\",{\"1\":{\"295\":1}}],[\"让我们再回顾一下示例程序\",{\"1\":{\"176\":1}}],[\"让我们开始这段有趣的旅程吧\",{\"1\":{\"98\":1}}],[\"让我们来看一下代码运行结果\",{\"1\":{\"92\":1}}],[\"让别的协程运行\",{\"1\":{\"92\":1}}],[\"让别的线程有机会执行\",{\"1\":{\"90\":1}}],[\"让出了使用权\",{\"1\":{\"92\":1}}],[\"又可能会导致软件产品的质量降低\",{\"1\":{\"305\":1}}],[\"又访问\",{\"1\":{\"303\":1}}],[\"又想多协程\",{\"1\":{\"92\":1}}],[\"又要共享状态\",{\"1\":{\"92\":1}}],[\"又或者别的协程任务也\",{\"1\":{\"92\":1}}],[\"又不确定性\",{\"1\":{\"90\":1}}],[\"随后立刻切换回来\",{\"1\":{\"92\":1}}],[\"随后当我们让出使用权1秒之后\",{\"1\":{\"92\":1}}],[\"随笔\",{\"0\":{\"2\":1}}],[\"别的协程就可以进行执行\",{\"1\":{\"92\":1}}],[\"别的线程表一定不能改\",{\"1\":{\"90\":1}}],[\"暂时\",{\"1\":{\"92\":1}}],[\"关于编代码\",{\"0\":{\"429\":1},\"1\":{\"425\":1}}],[\"关于变量\",{\"1\":{\"406\":1}}],[\"关于表达式的解析\",{\"1\":{\"403\":1}}],[\"关键是判断\",{\"1\":{\"408\":1}}],[\"关键就是去理解汇编代码的执行原理\",{\"1\":{\"398\":1}}],[\"关键字与内置函数\",{\"0\":{\"354\":1},\"1\":{\"341\":1}}],[\"关键字\",{\"1\":{\"92\":1,\"354\":1}}],[\"关系\",{\"0\":{\"105\":1}}],[\"关闭vscode\",{\"1\":{\"45\":1}}],[\"那诸如\",{\"1\":{\"406\":1}}],[\"那意味着也支持指针的指针\",{\"1\":{\"373\":1}}],[\"那就不行了\",{\"1\":{\"305\":1}}],[\"那就不需要加锁\",{\"1\":{\"93\":1}}],[\"那就是\",{\"1\":{\"308\":1,\"354\":1}}],[\"那就是最大的道德\",{\"1\":{\"93\":1}}],[\"那就是任务又回到了线性同步执行\",{\"1\":{\"92\":1}}],[\"那就是代码中没有\",{\"1\":{\"92\":1}}],[\"那到底怎么主动让出使用权\",{\"1\":{\"92\":1}}],[\"那么对变量\",{\"1\":{\"409\":1}}],[\"那么如何确定运算符的优先级呢\",{\"1\":{\"402\":1}}],[\"那么外层的\",{\"1\":{\"384\":1}}],[\"那么它应该被转换成什么样的汇编代码呢\",{\"1\":{\"383\":1}}],[\"那么我们如何表示指针类型呢\",{\"1\":{\"373\":1}}],[\"那么我们怎么表示标识符呢\",{\"1\":{\"349\":1}}],[\"那么我们就可以用\",{\"1\":{\"163\":1}}],[\"那么参数的传递呢\",{\"1\":{\"332\":1}}],[\"那么你会发现\",{\"1\":{\"314\":1}}],[\"那么为什么要学习编译原理呢\",{\"1\":{\"313\":1}}],[\"那么在看到这条设计原则后\",{\"1\":{\"305\":1}}],[\"那么每次要扩展功能\",{\"1\":{\"304\":1}}],[\"那么下一局也出一样的手势\",{\"1\":{\"282\":1}}],[\"那么程序结构会变得非常复杂\",{\"1\":{\"244\":1}}],[\"那么通信线路有两条\",{\"1\":{\"244\":1}}],[\"那么这些分散的类最终只会导致灾难\",{\"1\":{\"243\":1}}],[\"那么无论是编写代码还是调试代码和修改代码\",{\"1\":{\"243\":1}}],[\"那么就在返回时保存在\",{\"1\":{\"332\":1}}],[\"那么就会有\",{\"1\":{\"244\":1}}],[\"那么就会对类中调用\",{\"1\":{\"176\":1}}],[\"那么就可以在字符串的四周加上边框\",{\"1\":{\"203\":1}}],[\"那么需要做的就是编写\",{\"1\":{\"133\":1}}],[\"那么协程一定是安全的\",{\"1\":{\"92\":1}}],[\"那么值会是0\",{\"1\":{\"90\":1}}],[\"上节中说到了运算符的优先级\",{\"1\":{\"403\":1}}],[\"上的\",{\"1\":{\"383\":1}}],[\"上一章的代码中\",{\"1\":{\"382\":1}}],[\"上述代码中我们看到\",{\"1\":{\"352\":1}}],[\"上述等式表明\",{\"1\":{\"72\":1}}],[\"上面这断代码为当前的标识符设置了正确的类别\",{\"1\":{\"382\":1}}],[\"上面这些标记是有顺序的\",{\"1\":{\"345\":1}}],[\"上面这段代码在我们自己的虚拟机里会有几个问题\",{\"1\":{\"332\":1}}],[\"上面的一些指令解决了调用帧的问题\",{\"1\":{\"336\":1}}],[\"上面的代码运行后会出现\",{\"1\":{\"355\":1}}],[\"上面的代码看上去挺复杂\",{\"1\":{\"322\":1}}],[\"上面的代码也充分说明了这个结论的正确性\",{\"1\":{\"92\":1}}],[\"上下载\",{\"1\":{\"322\":1,\"340\":1,\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"421\":1}}],[\"上看到了一个项目\",{\"1\":{\"315\":1}}],[\"谁知道什么\",{\"0\":{\"174\":1},\"1\":{\"174\":1}}],[\"谁举证\",{\"1\":{\"92\":1}}],[\"谁主张\",{\"1\":{\"92\":1}}],[\"毫无疑问\",{\"1\":{\"92\":2}}],[\"运行程序\",{\"1\":{\"339\":1}}],[\"运行我们的指令集\",{\"1\":{\"323\":1}}],[\"运行结果\",{\"0\":{\"144\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"283\":1,\"293\":1,\"301\":1},\"1\":{\"92\":1}}],[\"运算符出栈\",{\"1\":{\"402\":2}}],[\"运算符运算等等\",{\"1\":{\"401\":1}}],[\"运算符的优先级决定了表达式的运算顺序\",{\"1\":{\"402\":1}}],[\"运算符的优先级\",{\"0\":{\"402\":1},\"1\":{\"401\":1}}],[\"运算符指令\",{\"0\":{\"337\":1},\"1\":{\"323\":1}}],[\"运算更快\",{\"1\":{\"40\":1}}],[\"既然同一时间只能有一个协程任务运行\",{\"1\":{\"92\":1}}],[\"体本身就无缝保持了程序状态\",{\"1\":{\"91\":1}}],[\"闭包实现类\",{\"0\":{\"98\":1}}],[\"闭包\",{\"1\":{\"91\":1}}],[\"比起可怕的\",{\"1\":{\"314\":1}}],[\"比喻\",{\"1\":{\"142\":1}}],[\"比操作系统的抢占式调度所需要的时间代价要小很多\",{\"1\":{\"91\":1}}],[\"比如大量的\",{\"1\":{\"36\":1}}],[\"比如\",{\"1\":{\"31\":1}}],[\"过滤遍历等\",{\"1\":{\"230\":1}}],[\"过了一段时间\",{\"1\":{\"91\":1}}],[\"过去的做法\",{\"0\":{\"37\":1}}],[\"抢占式的线程就不那么让人愉快了\",{\"1\":{\"90\":1}}],[\"抢占式的线程调度器是非常不错的选择\",{\"1\":{\"90\":1}}],[\"因而灵活性较差\",{\"1\":{\"317\":1}}],[\"因为已经有许多自动生成的工具支持它们\",{\"1\":{\"428\":1}}],[\"因为只有一个参数\",{\"1\":{\"402\":1}}],[\"因为汇编代码是顺序排列的\",{\"1\":{\"393\":1,\"402\":1}}],[\"因为汇编语言就是\",{\"1\":{\"340\":1}}],[\"因为这决定了我们需要从解析中获取什么样的信息\",{\"1\":{\"388\":1}}],[\"因为这决定了在解析时我们需要哪些相关的信息\",{\"1\":{\"383\":1}}],[\"因为这样实现起来就会变得复杂\",{\"1\":{\"332\":1}}],[\"因为还有许多功能没有实现\",{\"1\":{\"376\":1}}],[\"因为它们可以用\",{\"1\":{\"361\":1}}],[\"因为它会尝试运行我们上一章创建的虚拟机\",{\"1\":{\"355\":1}}],[\"因为它可以保证所有的线程都可以被分到时间片不被垃圾代码所拖累\",{\"1\":{\"90\":1}}],[\"因为有特殊的含义\",{\"1\":{\"354\":1}}],[\"因为输入的字符串比较难处理\",{\"1\":{\"343\":1}}],[\"因为像\",{\"1\":{\"337\":1}}],[\"因为我们不在乎出栈的值\",{\"1\":{\"406\":1}}],[\"因为我们需要先对它们进行解析\",{\"1\":{\"403\":1}}],[\"因为我们会在代码段\",{\"1\":{\"325\":1}}],[\"因为我们的编译器并不支持初始化变量\",{\"1\":{\"325\":1}}],[\"因为不关心其中的真正数值\",{\"1\":{\"325\":1}}],[\"因为好多理论根本用不上\",{\"1\":{\"314\":1}}],[\"因为具体的处理被交给\",{\"1\":{\"306\":1}}],[\"因为即使\",{\"1\":{\"243\":1}}],[\"因为自己难以确定究竟应该在类的哪一个层次结构中去增加子类\",{\"1\":{\"153\":1}}],[\"因为协程是用户态\",{\"1\":{\"92\":1}}],[\"因为线程是系统态切换\",{\"1\":{\"92\":1}}],[\"因此对应的源码如下\",{\"1\":{\"418\":1}}],[\"因此对于需要讲解的运算符\",{\"1\":{\"403\":1}}],[\"因此要有特殊的处理\",{\"1\":{\"418\":1}}],[\"因此将它们放在一起处理\",{\"1\":{\"406\":1}}],[\"因此得到结果\",{\"1\":{\"402\":1}}],[\"因此只凭当前的字符我们并无法确定具体应该解释成哪一个标记\",{\"1\":{\"352\":1}}],[\"因此只要调试该方法就能很容易地找出\",{\"1\":{\"243\":1}}],[\"因此在实现中我们将它作为\",{\"1\":{\"346\":1}}],[\"因此在\",{\"1\":{\"339\":1}}],[\"因此在我们的编译器\",{\"1\":{\"338\":1}}],[\"因此编译编译器时\",{\"1\":{\"338\":1}}],[\"因此计算结束后\",{\"1\":{\"337\":1}}],[\"因此实际中我们将\",{\"1\":{\"332\":1}}],[\"因此我们要做的就是生成类似的汇编代码\",{\"1\":{\"420\":1}}],[\"因此我们要消除左递归\",{\"1\":{\"364\":1}}],[\"因此我们判断它是否与数字\",{\"1\":{\"410\":1}}],[\"因此我们删除相应的指令\",{\"1\":{\"409\":1}}],[\"因此我们可以利用这一点\",{\"1\":{\"340\":1}}],[\"因此我们继续实现新的指令\",{\"1\":{\"338\":1}}],[\"因此我们采用的方法是增加指令集\",{\"1\":{\"332\":1}}],[\"因此我们将\",{\"1\":{\"328\":1}}],[\"因此我们也不需要未初始化数据段\",{\"1\":{\"325\":1}}],[\"因此先不处理\",{\"1\":{\"326\":1}}],[\"因此简单起见\",{\"1\":{\"325\":1}}],[\"因此完全不用修改\",{\"1\":{\"306\":1}}],[\"因此一个进程可以容纳数量相当可观的协程任务\",{\"1\":{\"91\":1}}],[\"因此假设不成立\",{\"1\":{\"75\":1}}],[\"因此\",{\"1\":{\"38\":1,\"60\":2,\"62\":2,\"63\":1,\"74\":1,\"153\":1,\"204\":1,\"205\":1,\"243\":1,\"245\":1,\"295\":1,\"305\":1,\"383\":2}}],[\"而忽略了同样重要的代码生成\",{\"1\":{\"426\":1}}],[\"而数字\",{\"1\":{\"410\":1}}],[\"而就像上节中提到的\",{\"1\":{\"408\":1}}],[\"而普通的函数则编译成\",{\"1\":{\"406\":1}}],[\"而剩下的较难较烦的部分是与目标代码的生成有关的\",{\"1\":{\"403\":1}}],[\"而真正的难点是如何在语法分析时收集足够多的信息\",{\"1\":{\"398\":1}}],[\"而它们的逻辑和全局变量的解析几乎一致\",{\"1\":{\"388\":1}}],[\"而②则用于生成汇编代码\",{\"1\":{\"386\":1}}],[\"而②则与上节中提到的\",{\"1\":{\"385\":1}}],[\"而②中的代码是用于将符号表中的信息恢复成全局的信息\",{\"1\":{\"384\":1}}],[\"而注意到上节中\",{\"1\":{\"374\":1}}],[\"而如果\",{\"1\":{\"418\":1}}],[\"而如果是全局变量则用\",{\"1\":{\"406\":1}}],[\"而如果只解析到类型\",{\"1\":{\"373\":1}}],[\"而如果操作同一资源\",{\"1\":{\"90\":1}}],[\"而为了实现自举\",{\"1\":{\"370\":1}}],[\"而左递归的语法是没法直接使用递归下降的方法实现的\",{\"1\":{\"364\":1}}],[\"而没有出现在\",{\"1\":{\"361\":1}}],[\"而我们可以从解析的过程中看出\",{\"1\":{\"362\":1}}],[\"而我们定义的语法不支持\",{\"1\":{\"349\":1}}],[\"而我们还存放了一些只有语法分析器才会得到的信息\",{\"1\":{\"349\":1}}],[\"而我们又不希望扩充现有指令的功能\",{\"1\":{\"332\":1}}],[\"而我们又想在执行过程中保证共享数据的强一致性\",{\"1\":{\"92\":1}}],[\"而之后的语句\",{\"1\":{\"349\":1}}],[\"而只关心这个变量名代表的唯一标识\",{\"1\":{\"349\":1}}],[\"而词法分析器能减小语法分析复杂度的原因\",{\"1\":{\"345\":1}}],[\"而词法分析器则是以源码字符串为输入\",{\"1\":{\"343\":1}}],[\"而标记流对于语法分析器而言就容易处理得多了\",{\"1\":{\"343\":1}}],[\"而在我们的虚拟机中\",{\"1\":{\"329\":1}}],[\"而在内存容量多的运行环境中则可以使用\",{\"1\":{\"286\":1}}],[\"而地址通常是需要通过计算获得\",{\"1\":{\"328\":1}}],[\"而这就意味着我们需要决定先为哪个运算符生成目标代码\",{\"1\":{\"402\":1}}],[\"而这些可能需要你重新回顾一下\",{\"1\":{\"388\":1}}],[\"而这些寄存器只是用于保存这些状态的\",{\"1\":{\"326\":1}}],[\"而这个标记足够让我们确定用哪个表达式了\",{\"1\":{\"363\":1}}],[\"而这部分能帮助我们了解计算机的工作原理\",{\"1\":{\"320\":1}}],[\"而电脑上的实际内存可能只有\",{\"1\":{\"325\":1}}],[\"而其它方面如词法分析\",{\"1\":{\"320\":1}}],[\"而会不会写编译器则是第二道\",{\"1\":{\"313\":1}}],[\"而将该方法的实现交给了子类\",{\"1\":{\"295\":1}}],[\"而将一些步骤的具体实现延迟到子类中\",{\"1\":{\"290\":1}}],[\"而不能以值作为参数\",{\"1\":{\"328\":1}}],[\"而不需要修改现有的数据结构\",{\"1\":{\"299\":1}}],[\"而不需要修改现有的代码\",{\"1\":{\"281\":1}}],[\"而不会影响系统的其他部分\",{\"1\":{\"254\":1}}],[\"而不影响系统的功能\",{\"1\":{\"254\":1}}],[\"而不是\",{\"1\":{\"352\":1,\"363\":1,\"402\":1}}],[\"而不是继承\",{\"1\":{\"125\":1}}],[\"而不是一个通用接口\",{\"1\":{\"125\":1}}],[\"而不是通过继承\",{\"1\":{\"123\":2}}],[\"而不是具体实现\",{\"1\":{\"120\":1}}],[\"而不是面向实现编程\",{\"1\":{\"119\":1}}],[\"而不是重写父类的具体方法\",{\"1\":{\"110\":1}}],[\"而不是硬编码\",{\"1\":{\"24\":1}}],[\"而\",{\"1\":{\"244\":1,\"303\":2,\"315\":1,\"328\":1,\"384\":2,\"414\":1}}],[\"而委托对象应当能够无缝地完成这些任务\",{\"1\":{\"210\":1}}],[\"而无需了解其内部实现细节\",{\"1\":{\"233\":1}}],[\"而无需暴露其底层表示\",{\"1\":{\"230\":1,\"231\":1}}],[\"而无需修改原始类的代码\",{\"1\":{\"197\":1}}],[\"而无需明确指定具体类\",{\"1\":{\"129\":1}}],[\"而文件则是叶子节点\",{\"1\":{\"187\":1}}],[\"而具体的表示则可以在运行时灵活选择\",{\"1\":{\"175\":1}}],[\"而有些事情则需要在运行时决定\",{\"1\":{\"175\":1}}],[\"而有没有锁\",{\"1\":{\"90\":1}}],[\"而是如何为运算符生成相应的汇编代码\",{\"1\":{\"426\":1}}],[\"而是单个数字的取正取负操作\",{\"1\":{\"412\":1}}],[\"而是操作\",{\"1\":{\"325\":1}}],[\"而是应该用代码将它们表现出来\",{\"1\":{\"213\":1}}],[\"而是将其他\",{\"1\":{\"164\":1}}],[\"而是相互关联的\",{\"1\":{\"105\":1}}],[\"而且这些功能需求大都是\",{\"1\":{\"305\":1}}],[\"而且当将子类替换为\",{\"1\":{\"176\":1}}],[\"而且\",{\"1\":{\"163\":1,\"285\":1}}],[\"而子类的任务是实现抽象方法\",{\"1\":{\"152\":1}}],[\"而协程虽然在手动切换过程中也无法保证状态一致\",{\"1\":{\"92\":1}}],[\"而线程是抢占使用权\",{\"1\":{\"91\":1}}],[\"而现在\",{\"1\":{\"90\":1}}],[\"然而如果你能跟我一样\",{\"1\":{\"314\":1}}],[\"然而\",{\"1\":{\"131\":1}}],[\"然而我们都忽略了一个客观事实\",{\"1\":{\"92\":1}}],[\"然而人们很快发现\",{\"1\":{\"90\":1}}],[\"然后返回它在\",{\"1\":{\"351\":1}}],[\"然后让数据结构可以接受访问者的访问即可\",{\"1\":{\"298\":1}}],[\"然后让后者去验算前者的计算结果\",{\"1\":{\"286\":1}}],[\"然后下达指示\",{\"1\":{\"239\":1}}],[\"然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理\",{\"1\":{\"179\":1}}],[\"然后再去看看\",{\"1\":{\"176\":1}}],[\"然后编写\",{\"1\":{\"163\":1}}],[\"然后保存在字段中\",{\"1\":{\"155\":1}}],[\"然后子类负责实现这些抽象方法\",{\"1\":{\"152\":1}}],[\"然后\",{\"1\":{\"90\":1}}],[\"然后才能去处理另一件事情\",{\"1\":{\"89\":1}}],[\"然后在程序中以委托的方式来使用算法\",{\"1\":{\"285\":1}}],[\"然后在具体类中实现这些行为\",{\"1\":{\"123\":1}}],[\"然后在\",{\"1\":{\"31\":1}}],[\"然后就能正常访问\",{\"1\":{\"18\":1}}],[\"防止中途出错了\",{\"1\":{\"90\":1}}],[\"如变量\",{\"1\":{\"403\":1}}],[\"如在普通的四则运算中\",{\"1\":{\"402\":1}}],[\"如经典的\",{\"1\":{\"363\":1}}],[\"如为什么用\",{\"1\":{\"363\":1}}],[\"如本例需向前查看一个字符\",{\"1\":{\"352\":1}}],[\"如本小节中的注释与除号\",{\"1\":{\"352\":1}}],[\"如标识符是函数\",{\"1\":{\"349\":1}}],[\"如数字\",{\"1\":{\"349\":1}}],[\"如右方括号\",{\"1\":{\"345\":1}}],[\"如只能操作ax寄存器\",{\"1\":{\"332\":1}}],[\"如下\",{\"1\":{\"328\":1,\"332\":1,\"349\":1,\"383\":1}}],[\"如调用帧\",{\"1\":{\"325\":1}}],[\"如int\",{\"1\":{\"325\":1}}],[\"如实现四则运算\",{\"1\":{\"315\":1}}],[\"如\",{\"1\":{\"314\":1,\"315\":1,\"317\":1,\"321\":1,\"325\":1,\"344\":1,\"345\":2,\"348\":1,\"349\":1,\"351\":2,\"361\":1,\"373\":4,\"383\":2,\"385\":1,\"406\":1,\"413\":1,\"418\":1}}],[\"如有侵权\",{\"1\":{\"312\":1,\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"如正向遍历\",{\"1\":{\"230\":1}}],[\"如果今后你仍然想编写编译器\",{\"1\":{\"427\":1}}],[\"如果\",{\"1\":{\"418\":1}}],[\"如果条件失败\",{\"1\":{\"393\":1}}],[\"如果是两个指针相减\",{\"1\":{\"418\":1}}],[\"如果是局部变量则采用与\",{\"1\":{\"406\":1}}],[\"如果是指针的指针\",{\"1\":{\"373\":1}}],[\"如果是有\",{\"1\":{\"244\":1}}],[\"如果遇到标识符就用\",{\"1\":{\"406\":1}}],[\"如果遇到\",{\"1\":{\"373\":1}}],[\"如果不是预期的标记则报错并退出\",{\"1\":{\"375\":1}}],[\"如果不想看可以跳过\",{\"1\":{\"370\":1}}],[\"如果不能比较容易地扩展类\",{\"1\":{\"305\":1}}],[\"如果不能做就将\",{\"1\":{\"179\":1}}],[\"如果分析到字符串\",{\"1\":{\"351\":1}}],[\"如果标识符已经存在\",{\"1\":{\"349\":1}}],[\"如果子函数有返回结果\",{\"1\":{\"332\":1}}],[\"如果要我说计算机专业最重要的三门课\",{\"1\":{\"313\":1}}],[\"如果要修改已经编写和测试完成的类\",{\"1\":{\"305\":1}}],[\"如果你按这个系列自己编写代码\",{\"1\":{\"429\":1}}],[\"如果你理解了上一章中的内容\",{\"1\":{\"377\":1}}],[\"如果你尝试阅读\",{\"1\":{\"314\":1}}],[\"如果你急切地想进入正篇\",{\"1\":{\"312\":1}}],[\"如果你的\",{\"1\":{\"97\":1}}],[\"如果公开了不应当被公开的信息\",{\"1\":{\"308\":1}}],[\"如果无法获取到这些信息\",{\"1\":{\"308\":1}}],[\"如果在每次扩展类时都需要修改现有的类就太麻烦了\",{\"1\":{\"305\":1}}],[\"如果在逻辑执行过程中我们需要判断变量状态\",{\"1\":{\"93\":1}}],[\"如果将处理逻辑的方法定义在\",{\"1\":{\"304\":1}}],[\"如果将这些逻辑分散到各个用户类中\",{\"1\":{\"243\":1}}],[\"如果想比较原来的算法与改进后的算法的处理速度有多大区别\",{\"1\":{\"285\":1}}],[\"如果使用\",{\"1\":{\"286\":1}}],[\"如果使用了\",{\"1\":{\"285\":1}}],[\"如果使用继承\",{\"1\":{\"122\":1}}],[\"如果这局猜拳获胜\",{\"1\":{\"282\":1}}],[\"如果这段逻辑分散在\",{\"1\":{\"243\":1}}],[\"如果多个线程同时访问\",{\"1\":{\"276\":1}}],[\"如果实例很少就不需要\",{\"1\":{\"244\":1}}],[\"如果存在很多这样的互相通信的实例\",{\"1\":{\"244\":1}}],[\"如果存在多个改变它的理由\",{\"1\":{\"115\":1}}],[\"如果有兴趣\",{\"1\":{\"428\":1}}],[\"如果有\",{\"1\":{\"244\":1}}],[\"如果发生需求变更\",{\"1\":{\"243\":1}}],[\"如果冰激凌店要为顾客准备所有的冰激凌成品那真是太麻烦了\",{\"1\":{\"205\":1}}],[\"如果再用\",{\"1\":{\"203\":1}}],[\"如果也不能自己处理\",{\"1\":{\"179\":1}}],[\"如果他可以做就自己做\",{\"1\":{\"179\":1}}],[\"如果修改\",{\"1\":{\"176\":1}}],[\"如果没有理解各个类的角色就动手增加和修改代码\",{\"1\":{\"176\":1}}],[\"如果我们的编译器要达到自举\",{\"1\":{\"338\":1}}],[\"如果我们不传递\",{\"1\":{\"164\":1}}],[\"如果我们不关注执行过程中的状态\",{\"1\":{\"93\":1}}],[\"如果我们将某个程序中依赖于操作系统的部分划分为\",{\"1\":{\"163\":1}}],[\"如果只是将应当分散的处理分散在各个类中\",{\"1\":{\"243\":1}}],[\"如果只是简单地将它们分开\",{\"1\":{\"153\":1}}],[\"如果只是为了编写包含\",{\"1\":{\"131\":1}}],[\"如果一个类需要改变\",{\"1\":{\"115\":1}}],[\"如果协程在操作共享变量的过程中\",{\"1\":{\"93\":1}}],[\"如果每个线程按顺序执行\",{\"1\":{\"90\":1}}],[\"如此往复\",{\"1\":{\"92\":1}}],[\"如图所示\",{\"1\":{\"91\":1}}],[\"如何为每个运算符生成对应的汇编代码\",{\"1\":{\"422\":1}}],[\"如何通过递归调用\",{\"1\":{\"422\":1}}],[\"如何确定具体选择哪一个\",{\"1\":{\"363\":1}}],[\"如何处理错误\",{\"1\":{\"346\":1}}],[\"如何表示语法\",{\"1\":{\"314\":1}}],[\"如何实现风格统一\",{\"1\":{\"44\":1}}],[\"如何给python\",{\"1\":{\"25\":1}}],[\"最好的方式恐怕还是要自己实现它\",{\"1\":{\"429\":1}}],[\"最近知道了一个叫\",{\"1\":{\"428\":1}}],[\"最为重要的是能\",{\"1\":{\"426\":1}}],[\"最终都根据它们的类型用\",{\"1\":{\"406\":1}}],[\"最终把源代码转换成目标代码\",{\"1\":{\"398\":1}}],[\"最终构建起我们的编译器\",{\"1\":{\"322\":1}}],[\"最重要的是理解我们会为函数生成怎样的汇编代码\",{\"1\":{\"388\":1}}],[\"最大的区别就是保存的信息不同\",{\"1\":{\"388\":1}}],[\"最简单的方法是直接调用观察者的更新方法\",{\"1\":{\"257\":1}}],[\"最后要注意的一点是\",{\"1\":{\"421\":1}}],[\"最后要注意的是还有一些字符\",{\"1\":{\"345\":1}}],[\"最后注意的是优先通常只与多元运算符相关\",{\"1\":{\"402\":1}}],[\"最后是main函数\",{\"1\":{\"365\":1}}],[\"最后再加上一个错误判断\",{\"1\":{\"338\":1}}],[\"最后祝你学得愉快\",{\"1\":{\"317\":1}}],[\"最后想介绍几个资料\",{\"1\":{\"317\":1}}],[\"最后\",{\"1\":{\"239\":1,\"422\":1}}],[\"最后的值不是0\",{\"1\":{\"90\":1}}],[\"最少知道原则\",{\"1\":{\"104\":1}}],[\"最新推荐文章于\",{\"1\":{\"29\":2}}],[\"大量重复的代码特别让人崩溃\",{\"1\":{\"429\":1}}],[\"大量的函数调用将会耗费不少的时间\",{\"1\":{\"39\":1}}],[\"大部分的代码依旧是用于解析变量\",{\"1\":{\"388\":1}}],[\"大致500+行\",{\"1\":{\"315\":1}}],[\"大家应该都会点头表示赞同吧\",{\"1\":{\"305\":1}}],[\"大家已经学习了多种设计模式\",{\"1\":{\"305\":1}}],[\"大家又发明了同步锁\",{\"1\":{\"90\":1}}],[\"于是\",{\"1\":{\"90\":1,\"92\":1}}],[\"它涉及到了\",{\"1\":{\"427\":1}}],[\"它相当于一个小型的\",{\"1\":{\"416\":1}}],[\"它相当于\",{\"1\":{\"404\":1}}],[\"它比较特殊的一点是\",{\"1\":{\"404\":1}}],[\"它本身不难\",{\"1\":{\"398\":1}}],[\"它对应的汇编代码如下\",{\"1\":{\"394\":1}}],[\"它将\",{\"1\":{\"375\":1}}],[\"它将自动忽略空白字符\",{\"1\":{\"322\":1}}],[\"它用于将数据放进寄存器或内存地址\",{\"1\":{\"328\":1}}],[\"它用于存放一条指令执行后的结果\",{\"1\":{\"326\":1}}],[\"它存放的是一个内存地址\",{\"1\":{\"326\":1}}],[\"它的类型保存在变量\",{\"1\":{\"408\":1}}],[\"它的优先级和\",{\"1\":{\"402\":1}}],[\"它的运算顺序是这样的\",{\"1\":{\"402\":1}}],[\"它的\",{\"1\":{\"394\":1}}],[\"它的语法更容易理解\",{\"1\":{\"370\":1}}],[\"它的本质上也是编译器\",{\"1\":{\"343\":1}}],[\"它的作用是将\",{\"1\":{\"329\":1}}],[\"它的作用是屏蔽了物理的细节\",{\"1\":{\"325\":1}}],[\"它的流程为\",{\"1\":{\"322\":1}}],[\"它的真正作用是帮助我们实现任务分担\",{\"1\":{\"152\":1}}],[\"它通过定义自己的指令集并支持该指令集的虚拟机来模拟编译的部分过程\",{\"1\":{\"317\":1}}],[\"它通过定义一个创建对象的接口来实现\",{\"1\":{\"129\":1}}],[\"它最让我震惊的是能够自举\",{\"1\":{\"315\":1}}],[\"它就无法工作\",{\"1\":{\"308\":1}}],[\"它是\",{\"1\":{\"307\":1}}],[\"它能够将元素集合及其关联关系组织在一起\",{\"1\":{\"304\":1}}],[\"它能做什么\",{\"1\":{\"92\":1}}],[\"它常用于需要控制资源访问的场景\",{\"1\":{\"271\":1}}],[\"它实现了\",{\"1\":{\"233\":1}}],[\"它允许你复制现有对象而无需使代码依赖它们所属的类\",{\"1\":{\"264\":1}}],[\"它允许顺序访问集合中的元素\",{\"1\":{\"231\":1}}],[\"它允许将一个类的接口转换成客户希望的另一个接口\",{\"1\":{\"139\":1}}],[\"它使类之间形成了弱关联关系\",{\"1\":{\"204\":1}}],[\"它主要用于以下情况\",{\"1\":{\"169\":1}}],[\"它们包括\",{\"1\":{\"418\":1}}],[\"它们对应的汇编代码如下\",{\"1\":{\"417\":1}}],[\"它们是以优先级从低到高排列的\",{\"1\":{\"414\":1}}],[\"它们是单字符的\",{\"1\":{\"345\":1}}],[\"它们的实现都很类似\",{\"1\":{\"418\":1}}],[\"它们的语法分析都相对容易\",{\"1\":{\"392\":1}}],[\"它们的内容比较多\",{\"1\":{\"391\":1}}],[\"它们的具体使用在后面的语法分析中会提到\",{\"1\":{\"345\":1}}],[\"它们不能被作为普通的标识符\",{\"1\":{\"354\":1}}],[\"它们不涉及优先级关系\",{\"1\":{\"345\":1}}],[\"它们都有对应的标记\",{\"1\":{\"349\":1}}],[\"它们都可以工作于这\",{\"1\":{\"163\":1}}],[\"它们自己就构成了标记\",{\"1\":{\"345\":1}}],[\"它们可以是一个数\",{\"1\":{\"328\":1}}],[\"它们基于\",{\"1\":{\"327\":1}}],[\"它们就是无符号的\",{\"1\":{\"325\":1}}],[\"它们在内存中的位置类似于下图\",{\"1\":{\"325\":1}}],[\"它们将作为我们的编译器最终输出的目标代码\",{\"1\":{\"323\":1}}],[\"它们过于强大\",{\"1\":{\"314\":1}}],[\"它们有很强的实际意义\",{\"1\":{\"314\":1}}],[\"它们呈现出一种相反的关系\",{\"1\":{\"303\":1}}],[\"它们会被解析成标识符\",{\"1\":{\"354\":1}}],[\"它们会自动收到通知并更新显示\",{\"1\":{\"250\":1}}],[\"它们会操作同一个资源\",{\"1\":{\"90\":1}}],[\"它们之间互相通信\",{\"1\":{\"244\":1}}],[\"它们之间就构成了一个小小的层次结构\",{\"1\":{\"152\":1}}],[\"它可以是一个值\",{\"1\":{\"332\":1}}],[\"它可以挂起当前协程任务\",{\"1\":{\"92\":1}}],[\"它可以在协程内部用await调用另一个协程实现异步操作\",{\"1\":{\"92\":1}}],[\"它和线程的最主要差别就是\",{\"1\":{\"91\":1}}],[\"它让调用者自己来决定什么时候让出\",{\"1\":{\"91\":1}}],[\"它应该具有反对称性\",{\"1\":{\"57\":1}}],[\"多个迭代器\",{\"0\":{\"234\":1}}],[\"多个线程同时改同一个变量\",{\"1\":{\"90\":1}}],[\"多个线程之前也并不是完全独立的\",{\"1\":{\"90\":1}}],[\"多态\",{\"1\":{\"226\":1}}],[\"多线程下\",{\"0\":{\"276\":1}}],[\"多线程在未加锁的情况下\",{\"1\":{\"92\":1}}],[\"多线程在python中只能交替执行\",{\"1\":{\"90\":1}}],[\"多线程逻辑执行结果\",{\"1\":{\"92\":1}}],[\"多了把锁\",{\"1\":{\"90\":1}}],[\"就如前文的\",{\"1\":{\"414\":1}}],[\"就返回它的唯一标识\",{\"1\":{\"349\":1}}],[\"就势必要实现\",{\"1\":{\"338\":1}}],[\"就会发现太可怕了\",{\"1\":{\"314\":1}}],[\"就会很容易出错\",{\"1\":{\"176\":1}}],[\"就实现了数据结构与处理的分离\",{\"1\":{\"308\":1}}],[\"就程序而言\",{\"1\":{\"295\":1}}],[\"就不得不去修改这些类\",{\"1\":{\"304\":1}}],[\"就不必修改\",{\"1\":{\"285\":1}}],[\"就不会发生上面这种类的依赖关系混乱的问题\",{\"1\":{\"255\":1}}],[\"就意味着我们需要引人facade了\",{\"1\":{\"213\":1}}],[\"就可以应付大多数的语法分析器编写\",{\"1\":{\"366\":1}}],[\"就可以生成一个与其他对象具有不同关系的新对象\",{\"1\":{\"204\":1}}],[\"就可以在字符串的左右两侧加上装饰字符\",{\"1\":{\"203\":1}}],[\"就可以明白调用\",{\"1\":{\"176\":1}}],[\"就像委托者自己完成一样\",{\"1\":{\"210\":1}}],[\"就像是剥洋葱时以为洋葱心要出来了\",{\"1\":{\"202\":1}}],[\"就像以前的公共电话亭\",{\"1\":{\"90\":1}}],[\"就再转给另外一个人\",{\"1\":{\"179\":1}}],[\"就自己做\",{\"1\":{\"179\":1}}],[\"就能很容易地改变实现\",{\"1\":{\"164\":1}}],[\"就需要获取并恢复这个信息\",{\"1\":{\"332\":1}}],[\"就需要存放到数据段中\",{\"1\":{\"325\":1}}],[\"就需要推卸责任\",{\"1\":{\"179\":1}}],[\"就需要先确认自己的意图\",{\"1\":{\"153\":1}}],[\"就需要重新设计该类\",{\"1\":{\"115\":1}}],[\"就算只能用单核处理任务\",{\"1\":{\"90\":1}}],[\"就是指针的加减\",{\"1\":{\"418\":1}}],[\"就是前文提到的\",{\"1\":{\"385\":1}}],[\"就是上述的消除左递归后的文法直接转换而来的\",{\"1\":{\"365\":1}}],[\"就是上例中\",{\"1\":{\"363\":1}}],[\"就是一种用来描述语法的语言\",{\"1\":{\"361\":1}}],[\"就是需要向前看的标记的个数了\",{\"1\":{\"352\":1}}],[\"就是这个标识符的哈希值\",{\"1\":{\"349\":1}}],[\"就是对应字符型和整型的存取操作\",{\"1\":{\"328\":1}}],[\"就是\",{\"1\":{\"51\":1,\"67\":1,\"203\":1}}],[\"每写一篇都特别心烦\",{\"1\":{\"429\":1}}],[\"每次遇到换行符\",{\"1\":{\"347\":1}}],[\"每次调用该函数则返回下一个标记\",{\"1\":{\"344\":1}}],[\"每次执行更新你的\",{\"1\":{\"86\":1}}],[\"每个id占用数组中的9个空间\",{\"1\":{\"349\":1}}],[\"每个标记通常包括\",{\"1\":{\"342\":1}}],[\"每个运算符都是二元的\",{\"1\":{\"337\":1}}],[\"每个请求都会沿着职责链传递\",{\"1\":{\"181\":1}}],[\"每个类只负责一个职责\",{\"1\":{\"116\":1}}],[\"每个协程的体积比线程要小得多\",{\"1\":{\"91\":1}}],[\"每执行100条字节码\",{\"1\":{\"90\":1}}],[\"雨露均沾\",{\"1\":{\"90\":1}}],[\"刘悦的技术博客\",{\"1\":{\"89\":1,\"93\":1}}],[\"主要涉及如何将语句和表达式编译成汇编代码\",{\"1\":{\"391\":1}}],[\"主要的逻辑用于解析用逗号\",{\"1\":{\"374\":1}}],[\"主要原因是我们的语言不支持跨函数递归\",{\"1\":{\"370\":1}}],[\"主程序\",{\"0\":{\"192\":1},\"1\":{\"155\":1}}],[\"主动释放使用权\",{\"1\":{\"92\":1}}],[\"主动\",{\"1\":{\"92\":1}}],[\"主动让出使用权\",{\"1\":{\"92\":1}}],[\"主动让出时间片的协程模式比线程抢占式分配的效率要好\",{\"1\":{\"91\":1}}],[\"主动切换了使用权\",{\"1\":{\"92\":1}}],[\"主动切换\",{\"0\":{\"89\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"挂起\",{\"0\":{\"89\":1},\"1\":{\"92\":1}}],[\"线程是系统态\",{\"1\":{\"91\":1}}],[\"线程操作共享资源需要加锁\",{\"1\":{\"90\":1}}],[\"线程并不安全\",{\"1\":{\"90\":1}}],[\"线程共享数据危险在于\",{\"1\":{\"90\":1}}],[\"线程安全\",{\"0\":{\"90\":1}}],[\"线程更被我们所熟知\",{\"1\":{\"89\":1}}],[\"线程\",{\"0\":{\"89\":1}}],[\"协程也不是虚空的\",{\"1\":{\"93\":1}}],[\"协程加锁执行后结果\",{\"1\":{\"92\":1}}],[\"协程在工作状态中\",{\"1\":{\"92\":1}}],[\"协程运行过程中\",{\"1\":{\"92\":1}}],[\"协程又可以切回来\",{\"1\":{\"92\":1}}],[\"协程操作共享变量不需要加锁的结论开始在坊间流传\",{\"1\":{\"92\":1}}],[\"协程本身就是单线程的\",{\"1\":{\"91\":1}}],[\"协程本身可以做成用户态\",{\"1\":{\"91\":1}}],[\"协程是否需要加锁\",{\"0\":{\"93\":1}}],[\"协程是用户态\",{\"1\":{\"91\":1}}],[\"协程是主动让出使用权\",{\"1\":{\"91\":1}}],[\"协程保证了编写过程中的思维连贯性\",{\"1\":{\"91\":1}}],[\"协程与线程向来焦孟不离\",{\"1\":{\"89\":1}}],[\"协程安全\",{\"0\":{\"89\":1,\"92\":1}}],[\"协程\",{\"0\":{\"89\":1,\"91\":1,\"94\":1}}],[\"插件\",{\"1\":{\"86\":1}}],[\"命令\",{\"1\":{\"86\":1}}],[\"后缀形式\",{\"1\":{\"419\":1}}],[\"后面我们会看到\",{\"1\":{\"406\":1}}],[\"后面的文章中\",{\"1\":{\"322\":1}}],[\"后来集成的\",{\"1\":{\"97\":1}}],[\"后者为了能恢复现场会在切换线程时保存相当多的状态\",{\"1\":{\"91\":1}}],[\"后\",{\"1\":{\"86\":1,\"203\":1}}],[\"你也可以学习看看\",{\"1\":{\"428\":1}}],[\"你可能有疑问\",{\"1\":{\"406\":1}}],[\"你可能会觉得将一个指令变成了许多指令\",{\"1\":{\"328\":1}}],[\"你就会发现\",{\"1\":{\"343\":1}}],[\"你就能写出更加高效的代码\",{\"1\":{\"313\":1}}],[\"你能对计算机程序的原理有一定的了解\",{\"1\":{\"340\":1}}],[\"你好\",{\"1\":{\"292\":1}}],[\"你将看到闭包是如何捕获变量并提供类似类的功能的\",{\"1\":{\"98\":1}}],[\"你是否曾经想过\",{\"1\":{\"98\":1}}],[\"你需要将这些更改复制到你的原生项目中\",{\"1\":{\"86\":1}}],[\"你的用\",{\"1\":{\"31\":1}}],[\"默认是\",{\"1\":{\"339\":1}}],[\"默认为\",{\"1\":{\"102\":1}}],[\"默认不支持http\",{\"1\":{\"86\":1}}],[\"默认\",{\"1\":{\"86\":1}}],[\"到底需不需要加锁\",{\"0\":{\"89\":1}}],[\"到底在哪里\",{\"0\":{\"32\":1}}],[\"到任意点的路径\",{\"1\":{\"76\":1}}],[\"点\",{\"1\":{\"76\":1}}],[\"所有的变量定义必须放在语句之前\",{\"1\":{\"421\":1}}],[\"所有的实现\",{\"1\":{\"163\":1}}],[\"所有依赖于它的对象都会得到通知并自动更新\",{\"1\":{\"251\":1}}],[\"所有显示该数据的视图都需要自动更新\",{\"1\":{\"250\":1}}],[\"所有点的出度为\",{\"1\":{\"76\":1}}],[\"所谓主动让出使用权\",{\"1\":{\"92\":1}}],[\"所以你可以执行\",{\"1\":{\"421\":1}}],[\"所以源码如下\",{\"1\":{\"417\":1}}],[\"所以生成的代码也类似于\",{\"1\":{\"416\":1}}],[\"所以直接修改栈指针的大小即可\",{\"1\":{\"406\":1}}],[\"所以直接跳过它们\",{\"1\":{\"348\":1}}],[\"所以解析的时候要注意这一点\",{\"1\":{\"404\":1}}],[\"所以先将它入栈\",{\"1\":{\"402\":1}}],[\"所以建议如果没有学过汇编\",{\"1\":{\"398\":1}}],[\"所以不多做说明\",{\"1\":{\"396\":1}}],[\"所以需要生成汇编代码\",{\"1\":{\"395\":1}}],[\"所以需要无条件跳转\",{\"1\":{\"393\":1}}],[\"所以如果执行了\",{\"1\":{\"393\":1}}],[\"所以一个类型首先有基本类型\",{\"1\":{\"373\":1}}],[\"所以还需要继续查看后续的标记\",{\"1\":{\"373\":1}}],[\"所以实际上它们间的对应关系并不是特别明显\",{\"1\":{\"370\":1}}],[\"所以实际的处理方法是提供一个函数\",{\"1\":{\"344\":1}}],[\"所以只能再向前查看字符\",{\"1\":{\"352\":1}}],[\"所以代码中并没有支持除\",{\"1\":{\"351\":1}}],[\"所以这里我们会有这样的印象\",{\"1\":{\"345\":1}}],[\"所以人们已经开发出了许多工具来生成词法分析器\",{\"1\":{\"344\":1}}],[\"所以为了获取第一个参数\",{\"1\":{\"336\":1}}],[\"所以用一个指令代替\",{\"1\":{\"335\":1}}],[\"所以用上面提到的指令\",{\"1\":{\"332\":1}}],[\"所以合在一起说\",{\"1\":{\"332\":1}}],[\"所以此时它存放的是\",{\"1\":{\"330\":1}}],[\"所以执行\",{\"1\":{\"328\":1}}],[\"所以大大简化了实现的难度\",{\"1\":{\"328\":1}}],[\"所以入栈时\",{\"1\":{\"326\":1}}],[\"所以是\",{\"1\":{\"325\":1}}],[\"所以单独存放可以节省空间\",{\"1\":{\"325\":1}}],[\"所以我希望你有足够的耐心和时间来学习\",{\"1\":{\"316\":1}}],[\"所以我们首先执行类似前缀自增自减的操作\",{\"1\":{\"419\":1}}],[\"所以我们需要给予代码生成高度的重视\",{\"1\":{\"426\":1}}],[\"所以我们需要先\",{\"1\":{\"413\":1}}],[\"所以我们需要在不修改现有类的前提下能够扩展类\",{\"1\":{\"305\":1}}],[\"所以我们用异或来实现\",{\"1\":{\"411\":1}}],[\"所以我们将结束符的解析放在了外层的\",{\"1\":{\"384\":1}}],[\"所以我们将它拆分成\",{\"1\":{\"369\":1,\"380\":1}}],[\"所以我们将它单独作为一个模块\",{\"1\":{\"322\":1}}],[\"所以我们先编写一个较为简单的编译器\",{\"1\":{\"343\":1}}],[\"所以我们提供了一个新的指令\",{\"1\":{\"336\":1}}],[\"所以我们不再需要\",{\"1\":{\"335\":1}}],[\"所以我们会依照以下步骤来构建我们的编译器\",{\"1\":{\"321\":1}}],[\"所以我们要完全手写这些功能\",{\"1\":{\"321\":1}}],[\"所以我们还需要在它们之间搭建一座桥梁\",{\"1\":{\"153\":1}}],[\"所以本项目的主要目的\",{\"1\":{\"315\":1}}],[\"所以写得很乱\",{\"1\":{\"315\":1}}],[\"所以写操作不会被争抢覆盖\",{\"1\":{\"92\":1}}],[\"所以当学校开\",{\"1\":{\"314\":1}}],[\"所以优先使用组合的方式代替继承的方式\",{\"1\":{\"122\":1}}],[\"所以说\",{\"1\":{\"93\":1}}],[\"所以肯定可以保证最终一致性\",{\"1\":{\"92\":1}}],[\"所以它对应的代码为\",{\"1\":{\"418\":1}}],[\"所以它的性能要比多线程好\",{\"1\":{\"91\":1}}],[\"所以它平均地分配时间片让处理器一视同仁\",{\"1\":{\"90\":1}}],[\"所以同一时间点还是只能有一个协程任务运行\",{\"1\":{\"91\":1}}],[\"所以加锁是为了同时只有一个线程再修改\",{\"1\":{\"90\":1}}],[\"所以\",{\"1\":{\"62\":1,\"90\":2,\"414\":2}}],[\"同样\",{\"1\":{\"412\":1}}],[\"同样我们没有相应的指令\",{\"1\":{\"411\":1}}],[\"同样在第三章\",{\"1\":{\"406\":1}}],[\"同样不能确定是否能立即计算\",{\"1\":{\"402\":1}}],[\"同理\",{\"1\":{\"93\":1,\"373\":1}}],[\"同时其它语言也有许多类似的支持\",{\"1\":{\"428\":1}}],[\"同时我们也看到\",{\"1\":{\"426\":1}}],[\"同时我们也用实例看到了理论\",{\"1\":{\"366\":1}}],[\"同时将运算符\",{\"1\":{\"402\":1}}],[\"同时值得一提的是\",{\"1\":{\"398\":1}}],[\"同时记录它们的位置与类型\",{\"1\":{\"385\":1}}],[\"同时能对汇编语言有一定的概念\",{\"1\":{\"340\":1}}],[\"同时在栈上保留一定的空间\",{\"1\":{\"333\":1}}],[\"同时开启四个协程任务\",{\"1\":{\"92\":1}}],[\"同时也不需要系统的线程调度器参与抢占式的调度\",{\"1\":{\"91\":1}}],[\"同时\",{\"1\":{\"91\":1,\"312\":1,\"427\":1}}],[\"同时修改变量\",{\"1\":{\"90\":1}}],[\"同时为了解决多个模数的问题\",{\"1\":{\"40\":1}}],[\"同构\",{\"1\":{\"76\":1}}],[\"用来求值\",{\"1\":{\"401\":1}}],[\"用尖括号\",{\"1\":{\"361\":1}}],[\"用作保存全局标识符的信息\",{\"1\":{\"349\":1}}],[\"用更多的指令来完成更多的功能\",{\"1\":{\"340\":1}}],[\"用以存放局部变量\",{\"1\":{\"333\":1}}],[\"用什么有穷自动机和无穷自动机\",{\"1\":{\"314\":1}}],[\"用于标识符的快速比较\",{\"1\":{\"349\":1}}],[\"用于实现\",{\"1\":{\"333\":1,\"334\":1}}],[\"用于为程序动态分配内存\",{\"1\":{\"325\":1}}],[\"用于处理函数调用相关的数据\",{\"1\":{\"325\":1}}],[\"用于存放未初始化的数据\",{\"1\":{\"325\":1}}],[\"用于存放初始化了的数据\",{\"1\":{\"325\":1}}],[\"用于存放代码\",{\"1\":{\"325\":1}}],[\"用于解析该参数的类型\",{\"1\":{\"385\":1}}],[\"用于解析枚举类型的定义\",{\"1\":{\"374\":1}}],[\"用于解析一个表达式\",{\"1\":{\"322\":1}}],[\"用于解释目标代码\",{\"1\":{\"322\":1}}],[\"用于语法分析\",{\"1\":{\"321\":1}}],[\"用于词法分析\",{\"1\":{\"321\":1,\"322\":1}}],[\"用于将字符串转化成内部的表示结构\",{\"1\":{\"321\":1}}],[\"用于遍历\",{\"1\":{\"233\":1}}],[\"用于创建相关或依赖对象的家族\",{\"1\":{\"129\":1}}],[\"用\",{\"1\":{\"203\":1,\"404\":1,\"412\":1}}],[\"用户可以统一地对待单个对象和组合对象\",{\"1\":{\"187\":1}}],[\"用字符串显示\",{\"1\":{\"155\":1}}],[\"用android\",{\"1\":{\"87\":1}}],[\"用acme\",{\"1\":{\"25\":1}}],[\"用图论阐述\",{\"0\":{\"76\":1}}],[\"研究\",{\"1\":{\"73\":1}}],[\"少了任何一条都不足以构建出上述的自然数系统\",{\"1\":{\"73\":1}}],[\"从上小节对四则运算的递归下降解析可以看出\",{\"1\":{\"363\":1}}],[\"从上述步骤中我们看出\",{\"1\":{\"73\":1}}],[\"从虚拟机的角度予以支持\",{\"1\":{\"338\":1}}],[\"从中一条条地加载指令执行\",{\"1\":{\"324\":1}}],[\"从观察变为通知\",{\"0\":{\"258\":1}}],[\"从早上到下午\",{\"1\":{\"170\":1}}],[\"从而简化具体的实现\",{\"1\":{\"340\":1}}],[\"从而提高了系统的可维护性和可扩展性\",{\"1\":{\"259\":1}}],[\"从而提高系统的性能和可扩展性\",{\"1\":{\"258\":1}}],[\"从而提高系统的灵活性和可维护性\",{\"1\":{\"257\":1}}],[\"从而引发无限循环\",{\"1\":{\"256\":1}}],[\"从而遵循开闭原则\",{\"1\":{\"198\":1}}],[\"从而使得现有类可以在新的环境中使用\",{\"1\":{\"140\":1}}],[\"从而导致执行过程中变量状态的\",{\"1\":{\"92\":1}}],[\"从而启动失败\",{\"1\":{\"45\":1}}],[\"从代码结构上看\",{\"1\":{\"91\":1}}],[\"从实际开发角度看\",{\"1\":{\"91\":1}}],[\"但也只有真正静下心来去克服它\",{\"1\":{\"429\":1}}],[\"但你依旧可以学习相关的知识\",{\"1\":{\"427\":1}}],[\"但这当中还有一个问题\",{\"1\":{\"418\":1}}],[\"但对理解计算机的原理有很大帮助\",{\"1\":{\"398\":1}}],[\"但没有关系\",{\"1\":{\"372\":1}}],[\"但真正看起来还是很烦\",{\"1\":{\"370\":1}}],[\"但其中用到的原理还是需要仔细推敲的\",{\"1\":{\"422\":1}}],[\"但其中并没有任何汇编代码\",{\"1\":{\"355\":1}}],[\"但其实内容不多\",{\"1\":{\"322\":1}}],[\"但其实\",{\"1\":{\"90\":1}}],[\"但由于符号表中已经有了相关的信息\",{\"1\":{\"354\":1}}],[\"但由子类决定要实例化的类是哪一个\",{\"1\":{\"220\":1}}],[\"但还有一个问题需要考虑\",{\"1\":{\"354\":1}}],[\"但还有一个问题是如何在子函数中获得传入的参数\",{\"1\":{\"336\":1}}],[\"但主要逻辑就是向前看一个字符来确定真正的标记\",{\"1\":{\"353\":1}}],[\"但仍支持\",{\"1\":{\"351\":1}}],[\"但有一点不同\",{\"1\":{\"347\":1}}],[\"但又枯燥且容易出错\",{\"1\":{\"344\":1}}],[\"但从结果可以看出\",{\"1\":{\"339\":1}}],[\"但就如上面的说\",{\"1\":{\"336\":1}}],[\"但最为重要的是\",{\"1\":{\"328\":1}}],[\"但更为简单\",{\"1\":{\"327\":1}}],[\"但更多时候我们都是在现有代码的基础上进行增加和修改\",{\"1\":{\"176\":1}}],[\"但我们一直用\",{\"1\":{\"407\":1}}],[\"但我们不确定数字\",{\"1\":{\"402\":1}}],[\"但我们上面的四则运算的文法就是左递归的\",{\"1\":{\"364\":1}}],[\"但我们的虚拟机中\",{\"1\":{\"340\":1}}],[\"但我们的虚拟机中只使用\",{\"1\":{\"326\":1}}],[\"但我们的\",{\"1\":{\"332\":1}}],[\"但我们讲解的顺序并不依据它\",{\"1\":{\"327\":1}}],[\"但我们还没有写任何编译相关的代码\",{\"1\":{\"326\":1}}],[\"但我不会评价大家的工作细节\",{\"1\":{\"239\":1}}],[\"但理解起来应该作为无符号的整型\",{\"1\":{\"325\":1}}],[\"但实际编译项目时\",{\"1\":{\"426\":1}}],[\"但实际上由于我们还将在符号表中加入关键字如\",{\"1\":{\"349\":1}}],[\"但实际上我们构建的是\",{\"1\":{\"320\":1}}],[\"但实际情况并非如此\",{\"1\":{\"328\":1}}],[\"但实际实现上较为复杂且与编译无关\",{\"1\":{\"325\":1}}],[\"但需要了解的是\",{\"1\":{\"325\":1}}],[\"但确为自己重写\",{\"1\":{\"315\":1}}],[\"但随着计算机性能的提升\",{\"1\":{\"313\":1}}],[\"但它又与编译器没有太大的联系\",{\"1\":{\"338\":1}}],[\"但它却难以应对\",{\"1\":{\"307\":1}}],[\"但它们的接口并不符合当前系统的需求\",{\"1\":{\"140\":1}}],[\"但如果你查看了\",{\"1\":{\"377\":1}}],[\"但如果有兴趣的话\",{\"1\":{\"376\":1}}],[\"但如果能掌握它\",{\"1\":{\"366\":1}}],[\"但如果需要修改现有代码\",{\"1\":{\"305\":1}}],[\"但如有条件还请支持正版\",{\"1\":{\"102\":1}}],[\"但程序暂时无法直接决定由哪个对象负责处理时\",{\"1\":{\"179\":1}}],[\"但不知道构建的具体步骤\",{\"1\":{\"174\":1}}],[\"但不知道对象的具体表示\",{\"1\":{\"174\":1}}],[\"但委托是弱关联关系\",{\"1\":{\"164\":1}}],[\"但切换过程是争抢的\",{\"1\":{\"92\":1}}],[\"但归根结底\",{\"1\":{\"91\":1}}],[\"但事实上是\",{\"1\":{\"89\":1}}],[\"但\",{\"1\":{\"73\":1,\"245\":1}}],[\"但是两节课后我就放弃了\",{\"1\":{\"314\":1}}],[\"但是要达到这个目的是有条件的\",{\"1\":{\"308\":1}}],[\"但是需要考虑到的是\",{\"1\":{\"244\":1}}],[\"但是没有将应当集中的处理集中起来\",{\"1\":{\"243\":1}}],[\"但是在本章中的示例程序中\",{\"1\":{\"243\":1}}],[\"但是意见难以统一\",{\"1\":{\"239\":1}}],[\"但是越装饰\",{\"1\":{\"203\":1}}],[\"但是它们的使用目的不同\",{\"1\":{\"202\":1}}],[\"但是接口\",{\"1\":{\"202\":1}}],[\"但是有时候也确实存在需要\",{\"1\":{\"179\":1}}],[\"但是不能改变父类原有的功能\",{\"1\":{\"109\":1}}],[\"但是给一个垂死的人注射吗啡\",{\"1\":{\"93\":1}}],[\"但是我们也付出了相应的代价\",{\"1\":{\"92\":1}}],[\"但是可以保证最终一致性呢\",{\"1\":{\"92\":1}}],[\"但是所有协程执行完毕后\",{\"1\":{\"92\":1}}],[\"但是线程时系统调度\",{\"1\":{\"90\":1}}],[\"但是python受限于gil全局解释器锁\",{\"1\":{\"90\":1}}],[\"但是模数个数少的时候可以缩写\",{\"1\":{\"40\":1}}],[\"但是\",{\"1\":{\"39\":1,\"152\":1,\"304\":1,\"305\":1,\"338\":1}}],[\"但是这种方法有着严重的缺陷\",{\"1\":{\"38\":1}}],[\"ⅳ\",{\"0\":{\"80\":1},\"1\":{\"72\":1}}],[\"其实只要不执行\",{\"1\":{\"409\":1}}],[\"其实提前看字符的概念也存在于编译器\",{\"1\":{\"352\":1}}],[\"其实是抄\",{\"1\":{\"350\":1}}],[\"其实不然\",{\"1\":{\"285\":1}}],[\"其它的我们便不再详述\",{\"1\":{\"418\":1}}],[\"其它的标记的解析就相对容易一些了\",{\"1\":{\"353\":1}}],[\"其它语句并不直接生成汇编代码\",{\"1\":{\"396\":1}}],[\"其它语句\",{\"0\":{\"396\":1},\"1\":{\"391\":1}}],[\"其它就不多说了\",{\"1\":{\"350\":1}}],[\"其它\",{\"0\":{\"353\":1,\"375\":1},\"1\":{\"341\":1,\"369\":1}}],[\"其职责是引起该类变化的原因\",{\"1\":{\"115\":1}}],[\"其他类依然可以调用\",{\"1\":{\"202\":1}}],[\"其他设计原则是实现开闭原则的手段和工具\",{\"1\":{\"105\":1}}],[\"其他线程又说我拿不到锁\",{\"1\":{\"90\":1}}],[\"其他线程只能等待\",{\"1\":{\"90\":1}}],[\"其中①用于解析函数体内的局部变量的定义\",{\"1\":{\"386\":1}}],[\"其中①与全局变量定义的解析十分一样\",{\"1\":{\"385\":1}}],[\"其中①中我们没有消耗最后的\",{\"1\":{\"384\":1}}],[\"其中的自顶向下方法就是我们所说的递归下降\",{\"1\":{\"360\":1}}],[\"其中的\",{\"1\":{\"328\":1,\"373\":1,\"375\":1}}],[\"其中的数据段我们只用来存放字符串\",{\"1\":{\"325\":1}}],[\"其中数据段\",{\"1\":{\"325\":1}}],[\"其中\",{\"1\":{\"72\":1,\"370\":1}}],[\"其与自然数\",{\"1\":{\"59\":1}}],[\"可惜的是它的代码初衷是代码最小化\",{\"1\":{\"315\":1}}],[\"可作为组件复用\",{\"1\":{\"305\":1}}],[\"可替换性是指一个对象可以被另一个具有相同接口的对象替换\",{\"1\":{\"254\":1}}],[\"可替換性\",{\"1\":{\"174\":1}}],[\"可能唯一不好理解的是获取十六进制的值相关的代码\",{\"1\":{\"350\":1}}],[\"可能包含多个字符\",{\"1\":{\"345\":1}}],[\"可能会更具普适性\",{\"1\":{\"317\":1}}],[\"可能会导致创建多个实例\",{\"1\":{\"276\":1}}],[\"可能会有读者认为\",{\"1\":{\"244\":1}}],[\"可能同时违反其他原则\",{\"1\":{\"105\":1}}],[\"可是如果在执行事务逻辑块中主动放弃执行权了\",{\"1\":{\"93\":1}}],[\"可调试性强\",{\"1\":{\"91\":1}}],[\"可读性高\",{\"1\":{\"91\":1}}],[\"可知\",{\"1\":{\"72\":1}}],[\"可以看看\",{\"1\":{\"428\":1}}],[\"可以看到和之前有同样的输出\",{\"1\":{\"421\":1}}],[\"可以看到\",{\"1\":{\"92\":2,\"362\":1,\"365\":1}}],[\"可以自己实现看看\",{\"1\":{\"418\":1}}],[\"可以自己先试着去实现它\",{\"1\":{\"376\":1}}],[\"可以参考\",{\"1\":{\"402\":1}}],[\"可以学习学习这些文法\",{\"1\":{\"428\":1}}],[\"可以学习学习\",{\"1\":{\"398\":1}}],[\"可以认为语句就是表达式加上末尾的分号\",{\"1\":{\"392\":1}}],[\"可以是\",{\"1\":{\"361\":1}}],[\"可以得到个位数的值\",{\"1\":{\"350\":1}}],[\"可以理解为变量名\",{\"1\":{\"349\":1}}],[\"可以帮助我们设计出这样的类\",{\"1\":{\"305\":1}}],[\"可以通过在子类中增加方法以实现新的功能\",{\"1\":{\"295\":1}}],[\"可以通过子类来定制产品的创建过程\",{\"1\":{\"221\":1}}],[\"可以方便地根据棋手的选择切换\",{\"1\":{\"285\":1}}],[\"可以方便地增加新的产品族而不影响现有代码\",{\"1\":{\"129\":1}}],[\"可以避免在多个地方重复相同的算法逻辑\",{\"1\":{\"281\":1}}],[\"可以避免创建多个实例带来的资源浪费和不一致性问题\",{\"1\":{\"271\":1}}],[\"可以很容易地添加新的策略\",{\"1\":{\"281\":1}}],[\"可以很容易地添加新的处理者而不影响现有代码\",{\"1\":{\"180\":1}}],[\"可以根据需要实现不同的迭代器\",{\"1\":{\"230\":1}}],[\"可以根据需要动态地添加或删除职责\",{\"1\":{\"198\":1}}],[\"可以动态地增加功能\",{\"0\":{\"204\":1}}],[\"可以在运行时动态地改变职责链的结构\",{\"1\":{\"180\":1}}],[\"可以在不修改集合对象的情况下\",{\"1\":{\"230\":1}}],[\"可以在不修改现有代码的情况下\",{\"1\":{\"107\":1}}],[\"可以在不同的上下文中重用相同的构建逻辑\",{\"1\":{\"169\":1}}],[\"可以在不改变原有代码的情况下\",{\"1\":{\"107\":1}}],[\"可以将这七个原则分为以下两部分\",{\"1\":{\"105\":1}}],[\"可以构造出分段状自然数系统\",{\"1\":{\"81\":1}}],[\"可以构造出\",{\"1\":{\"80\":1}}],[\"可以构造出环状自然数系统\",{\"1\":{\"79\":1}}],[\"可以构造出菊花图自然数系统\",{\"1\":{\"78\":1}}],[\"可以构造出空集自然数系统\",{\"1\":{\"77\":1}}],[\"可以使用双重检查锁定\",{\"1\":{\"276\":1}}],[\"可以使用\",{\"1\":{\"44\":1}}],[\"可以使用的\",{\"1\":{\"31\":1}}],[\"可以快速\",{\"1\":{\"4\":1}}],[\"假设要在某个表格计算软件的开发版本中进行复杂的计算\",{\"1\":{\"286\":1}}],[\"假设我们现在需要制作另外一个对话框\",{\"1\":{\"245\":1}}],[\"假设现在我们要在示例程序中增加一个\",{\"1\":{\"307\":1}}],[\"假设现在我们要在示例程序中增加新的具体工厂\",{\"1\":{\"133\":1}}],[\"假设现在有\",{\"1\":{\"244\":1}}],[\"假设现在有一个类\",{\"1\":{\"151\":1}}],[\"假设\",{\"1\":{\"72\":1,\"75\":1}}],[\"假设存在一个算数系统的模型满足\",{\"1\":{\"46\":1}}],[\"证明了乘法运算规则的交换律之后\",{\"1\":{\"69\":1}}],[\"证明了加法运算规则的交换律之后\",{\"1\":{\"53\":1}}],[\"存在内存地址上就另当别论\",{\"1\":{\"337\":1}}],[\"存在从\",{\"1\":{\"76\":1}}],[\"存在点\",{\"1\":{\"76\":1}}],[\"存在\",{\"1\":{\"66\":1}}],[\"存放这个标识符的值\",{\"1\":{\"349\":1}}],[\"存放标识符本身的字符串\",{\"1\":{\"349\":1}}],[\"存放日志\",{\"1\":{\"14\":1}}],[\"存放ssl证书\",{\"1\":{\"14\":1}}],[\"乘法\",{\"1\":{\"402\":1}}],[\"乘法消去保序性\",{\"0\":{\"75\":1}}],[\"乘法消去律\",{\"0\":{\"72\":1},\"1\":{\"72\":1}}],[\"乘法保序性\",{\"0\":{\"74\":1}}],[\"乘法结合律\",{\"0\":{\"71\":1}}],[\"乘法结果的唯一性\",{\"0\":{\"67\":1}}],[\"乘法结果的存在性\",{\"0\":{\"66\":1}}],[\"乘法分配律\",{\"0\":{\"70\":1}}],[\"乘法交换律\",{\"0\":{\"69\":1}}],[\"乘法的性质\",{\"0\":{\"68\":1}}],[\"乘法的定义\",{\"0\":{\"65\":1}}],[\"任何python线程执行前\",{\"1\":{\"90\":1}}],[\"任何自然数的后继存在且唯一\",{\"1\":{\"47\":1}}],[\"任意点的入度小于等于\",{\"1\":{\"76\":1}}],[\"任意非零自然数\",{\"1\":{\"72\":1}}],[\"任意两个自然数\",{\"1\":{\"62\":1}}],[\"序的完全性\",{\"0\":{\"62\":1}}],[\"序的传递性\",{\"0\":{\"61\":1}}],[\"序的反对称性\",{\"0\":{\"60\":1}}],[\"序的定义\",{\"0\":{\"57\":1}}],[\"ⅲ\",{\"0\":{\"79\":1},\"1\":{\"59\":1,\"72\":3}}],[\"满足不同的需求\",{\"1\":{\"221\":1}}],[\"满足\",{\"1\":{\"57\":1,\"72\":1,\"75\":1}}],[\"当解析完=右边的表达式后\",{\"1\":{\"415\":1}}],[\"当前优先级的运算符\",{\"1\":{\"414\":1}}],[\"当该标识符是全局定义的枚举类型时\",{\"1\":{\"406\":1}}],[\"当它是一个指向基本类型的指针时\",{\"1\":{\"373\":1}}],[\"当局部标识符的名字与全局标识符相同时\",{\"1\":{\"349\":1}}],[\"当用户的程序需要分配内存时\",{\"1\":{\"325\":1}}],[\"当时很火的\",{\"1\":{\"315\":1}}],[\"当需要增加新的处理时\",{\"1\":{\"298\":1}}],[\"当需要创建不同表示的对象时\",{\"1\":{\"169\":1}}],[\"当模型的状态发生变化时\",{\"1\":{\"259\":1}}],[\"当系统中有大量的观察者时\",{\"1\":{\"258\":1}}],[\"当观察者的行为会对被观察对象产生影响时\",{\"1\":{\"256\":1}}],[\"当数据模型发生变化时\",{\"1\":{\"250\":2}}],[\"当发生分散灾难时\",{\"0\":{\"243\":1}}],[\"当出现争执时大家就会找仲裁者进行商量\",{\"1\":{\"239\":1}}],[\"当某个程序员得意地说出\",{\"1\":{\"213\":1}}],[\"当顾客下单后只需要在冰激凌上加上各种香料就可以了\",{\"1\":{\"205\":1}}],[\"当一个表达式解析结束时\",{\"1\":{\"408\":1}}],[\"当一个终结符有多个选择时\",{\"1\":{\"363\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"251\":1}}],[\"当一个对象的构建过程非常复杂时\",{\"1\":{\"169\":1}}],[\"当一个人被要求做什么事情时\",{\"1\":{\"179\":1}}],[\"当外部请求程序进行某个处理\",{\"1\":{\"179\":1}}],[\"当想要增加功能时\",{\"1\":{\"163\":1}}],[\"当然\",{\"1\":{\"153\":1,\"255\":1,\"313\":1,\"325\":1,\"345\":1,\"388\":1,\"403\":1,\"421\":1}}],[\"当类的层次结构只有一层时\",{\"1\":{\"153\":1}}],[\"当子类实现了父类\",{\"1\":{\"152\":1}}],[\"当只有一个具体工厂时\",{\"1\":{\"131\":1}}],[\"当我对全局变量balance进行加法运算后\",{\"1\":{\"92\":1}}],[\"当我们调用\",{\"1\":{\"414\":1}}],[\"当我们想要通过改善算法来提高算法的处理速度时\",{\"1\":{\"285\":1}}],[\"当我们想要编写子类时\",{\"1\":{\"153\":1}}],[\"当我们想在\",{\"1\":{\"151\":1}}],[\"当我们执行第一句代码print\",{\"1\":{\"92\":1}}],[\"当我们写完了vue项目后\",{\"1\":{\"84\":1}}],[\"当别的协程任务执行完毕\",{\"1\":{\"92\":1}}],[\"当\",{\"0\":{\"256\":1},\"1\":{\"59\":1,\"62\":2,\"164\":1}}],[\"当且仅当\",{\"1\":{\"57\":1}}],[\"当且仅当存在自然数\",{\"1\":{\"57\":1}}],[\"当今科学界最具争议性的项目\",{\"1\":{\"4\":1}}],[\"时我们并不能确定\",{\"1\":{\"373\":1}}],[\"时直接从\",{\"1\":{\"328\":1}}],[\"时由乘法运算规则\",{\"1\":{\"69\":1}}],[\"时\",{\"1\":{\"53\":1,\"54\":1,\"59\":1,\"69\":1,\"70\":1,\"71\":1,\"86\":1,\"176\":1,\"304\":1}}],[\"时有\",{\"1\":{\"53\":2,\"54\":1,\"55\":4,\"62\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":2}}],[\"首先我们介绍\",{\"1\":{\"332\":1}}],[\"首先是数字\",{\"1\":{\"404\":1}}],[\"首先是之前定义过的\",{\"1\":{\"372\":1}}],[\"首先是\",{\"1\":{\"328\":1,\"361\":1}}],[\"首先在全局变量中加入一个枚举类型\",{\"1\":{\"327\":1}}],[\"首先要说明的是\",{\"1\":{\"320\":1}}],[\"首先\",{\"1\":{\"59\":1,\"69\":1}}],[\"首先当\",{\"1\":{\"54\":1,\"55\":2,\"69\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"首先由加法运算规则\",{\"1\":{\"53\":1}}],[\"首先有\",{\"1\":{\"53\":2,\"69\":1}}],[\"对应的\",{\"1\":{\"393\":1}}],[\"对应的汇编代码也比较直观\",{\"1\":{\"413\":1}}],[\"对应的汇编代码流程为\",{\"1\":{\"393\":1}}],[\"对应的汇编代码为\",{\"1\":{\"333\":1,\"334\":1,\"418\":1}}],[\"对应的汇编指令为\",{\"1\":{\"335\":1}}],[\"对词法分析器而言\",{\"1\":{\"346\":1}}],[\"对照\",{\"1\":{\"317\":1}}],[\"对数据结构中的元素进行处理的任务被分离出来\",{\"1\":{\"308\":1}}],[\"对修改是关闭的\",{\"1\":{\"305\":1}}],[\"对修改关闭的类具有高可复用性\",{\"1\":{\"305\":1}}],[\"对修改关闭\",{\"0\":{\"305\":1},\"1\":{\"106\":1,\"125\":1,\"299\":1}}],[\"对扩展是开放的\",{\"1\":{\"305\":1}}],[\"对扩展开放\",{\"0\":{\"305\":1},\"1\":{\"106\":1,\"125\":1,\"299\":1,\"305\":1}}],[\"对比这两个方法会发现\",{\"1\":{\"303\":1}}],[\"对象种类繁多\",{\"1\":{\"264\":1}}],[\"对\",{\"1\":{\"203\":1}}],[\"对于学习或考试而言或许可以\",{\"1\":{\"426\":1}}],[\"对于学习构建编译器帮助不大\",{\"1\":{\"321\":1}}],[\"对于变量\",{\"1\":{\"409\":1}}],[\"对于提高我们的水平还是很有帮助的\",{\"1\":{\"366\":1}}],[\"对于语法分析而言\",{\"1\":{\"349\":1}}],[\"对于那些能够明确地用语言描述出来的知识\",{\"1\":{\"213\":1}}],[\"对于\",{\"1\":{\"62\":1}}],[\"对于任意自然数\",{\"1\":{\"47\":1,\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"对任意自然数\",{\"1\":{\"53\":3,\"54\":1,\"55\":3,\"69\":3,\"70\":1,\"71\":1,\"72\":2}}],[\"根据标识符后的运算符\",{\"1\":{\"406\":1}}],[\"根据类型的不同有\",{\"1\":{\"328\":1}}],[\"根据文法来生成编译器\",{\"1\":{\"314\":1}}],[\"根据上一局的手势从概率上计算出下一局的手势\",{\"1\":{\"282\":1}}],[\"根据开闭原则\",{\"1\":{\"106\":1}}],[\"根据乘法消去律有\",{\"1\":{\"75\":1}}],[\"根据乘法运算规则\",{\"1\":{\"66\":1,\"67\":1}}],[\"根据序的反对称性有\",{\"1\":{\"75\":1}}],[\"根据加法结合律得出\",{\"1\":{\"61\":1}}],[\"根据加法结果的存在性得到\",{\"1\":{\"61\":1}}],[\"根据加法运算规则\",{\"1\":{\"50\":1,\"51\":1}}],[\"根据正自然数的性质得出\",{\"1\":{\"60\":1}}],[\"根据\",{\"1\":{\"53\":3,\"54\":1,\"55\":2,\"59\":2,\"69\":3,\"70\":1,\"71\":1,\"72\":1}}],[\"考虑诸如\",{\"1\":{\"415\":1}}],[\"考虑下列函数\",{\"1\":{\"383\":1}}],[\"考虑从乘法运算的定义下手\",{\"1\":{\"69\":1}}],[\"考虑从加法运算的定义下手\",{\"1\":{\"53\":1}}],[\"考虑到函数取模的优点\",{\"1\":{\"40\":1}}],[\"且当\",{\"1\":{\"421\":1}}],[\"且根据不同的类型移动的位移不同\",{\"1\":{\"418\":1}}],[\"且多数情况下如此\",{\"1\":{\"345\":1}}],[\"且不需要判断类型\",{\"1\":{\"328\":1}}],[\"且程序行为不变\",{\"1\":{\"125\":1}}],[\"且需要导出为pptx推荐\",{\"1\":{\"96\":1}}],[\"且乘法运算的结果存在且唯一之后\",{\"1\":{\"68\":1}}],[\"且\",{\"1\":{\"57\":1,\"60\":1,\"61\":1}}],[\"且加法运算的结果存在且唯一之后\",{\"1\":{\"52\":1}}],[\"且满足两个条件\",{\"1\":{\"47\":1}}],[\"成立\",{\"1\":{\"50\":1,\"51\":1,\"53\":3,\"54\":1,\"55\":3,\"66\":1,\"67\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":2}}],[\"ⅴ\",{\"0\":{\"81\":1},\"1\":{\"50\":1,\"51\":1,\"53\":3,\"54\":1,\"55\":2,\"59\":1,\"62\":1,\"66\":1,\"67\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":1}}],[\"ⅱ\",{\"0\":{\"78\":1},\"1\":{\"50\":2,\"51\":2,\"53\":1,\"66\":1,\"67\":1,\"69\":1,\"72\":1}}],[\"得到结果\",{\"1\":{\"402\":1}}],[\"得到\",{\"1\":{\"402\":2}}],[\"得到的\",{\"1\":{\"32\":1}}],[\"得益于接口\",{\"1\":{\"202\":1}}],[\"得知\",{\"1\":{\"53\":3,\"54\":1,\"55\":2,\"69\":3,\"70\":1,\"71\":1,\"72\":1}}],[\"得出对于任意自然数\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"得证\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"有了bnf方法后\",{\"1\":{\"365\":1}}],[\"有一个或多个标记是以同样的字符开头的\",{\"1\":{\"352\":1}}],[\"有一次在\",{\"1\":{\"315\":1}}],[\"有用\",{\"1\":{\"338\":1}}],[\"有点类似于\",{\"1\":{\"328\":1}}],[\"有些事情是可以在设计阶段决定的\",{\"1\":{\"175\":1}}],[\"有两种方式实现\",{\"1\":{\"143\":1}}],[\"有什么区别呢\",{\"1\":{\"90\":1}}],[\"有任意两个自然数\",{\"1\":{\"62\":1}}],[\"有\",{\"1\":{\"50\":4,\"51\":4,\"53\":3,\"54\":2,\"55\":1,\"60\":2,\"61\":2,\"63\":1,\"66\":3,\"67\":3,\"69\":3,\"70\":1,\"71\":2,\"72\":3,\"74\":1,\"75\":1}}],[\"有大量的题目要求对一些数字取模\",{\"1\":{\"35\":1}}],[\"ⅰ\",{\"0\":{\"77\":1},\"1\":{\"50\":1,\"51\":1,\"53\":1,\"66\":1,\"67\":1,\"69\":1}}],[\"记得事先写一些用于输出汇编代码的函数\",{\"1\":{\"429\":1}}],[\"记得我们说过词法分析器也是某种意义上的编译器\",{\"1\":{\"346\":1}}],[\"记录\",{\"0\":{\"87\":1}}],[\"记\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"也提到了优先级一般只与多元运算符有关\",{\"1\":{\"403\":1}}],[\"也许现在还想学习编译原理的人只可能是因为兴趣了\",{\"1\":{\"313\":1}}],[\"也不会被隐藏起来\",{\"1\":{\"202\":1}}],[\"也无法理解程序整体\",{\"1\":{\"176\":1}}],[\"也难以透彻地理解类的层次结构\",{\"1\":{\"153\":1}}],[\"也是一样的问题\",{\"1\":{\"332\":1}}],[\"也是用于指向栈的某些位置\",{\"1\":{\"326\":1}}],[\"也是不客观的\",{\"1\":{\"93\":1}}],[\"也是自然数\",{\"1\":{\"50\":1,\"66\":1}}],[\"也就能理解下面的源代码了\",{\"1\":{\"415\":1}}],[\"也就会导致写操作被原子性覆盖\",{\"1\":{\"92\":1}}],[\"也就是没有切换挂起状态\",{\"1\":{\"93\":1}}],[\"也就是一旦通过await关键字切换协程\",{\"1\":{\"92\":1}}],[\"也就是第二行代码print\",{\"1\":{\"92\":1}}],[\"也就是说由于我们的指令过于简单\",{\"1\":{\"332\":1}}],[\"也就是说可以\",{\"1\":{\"243\":1}}],[\"也就是说将\",{\"1\":{\"133\":1}}],[\"也就是说\",{\"1\":{\"49\":1,\"65\":1,\"152\":1,\"163\":1,\"202\":2,\"295\":2,\"304\":1}}],[\"也可以看文末给出的链接\",{\"1\":{\"418\":1}}],[\"也可以认为\",{\"1\":{\"402\":1}}],[\"也可以是一个地址\",{\"1\":{\"332\":1}}],[\"也可以是其它的数据\",{\"1\":{\"325\":1}}],[\"也可以说是\",{\"1\":{\"327\":1}}],[\"也可以直接\",{\"1\":{\"322\":1,\"340\":1,\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"421\":1}}],[\"也可以将它们自由组合成为新的对象\",{\"1\":{\"205\":1}}],[\"也可以理解为把程序\",{\"1\":{\"92\":1}}],[\"也可另外指定\",{\"1\":{\"9\":1}}],[\"也更简单\",{\"1\":{\"91\":1}}],[\"也能释放锁\",{\"1\":{\"90\":1}}],[\"也只能用到1个核\",{\"1\":{\"90\":1}}],[\"也唯一\",{\"1\":{\"51\":1,\"67\":1}}],[\"都比\",{\"1\":{\"428\":1}}],[\"都指向\",{\"1\":{\"393\":1}}],[\"都会非常困难\",{\"1\":{\"243\":1}}],[\"都具有递归结构\",{\"1\":{\"202\":1}}],[\"都无需修改抽象工厂和\",{\"1\":{\"133\":1}}],[\"都保持了其一致性\",{\"1\":{\"92\":1}}],[\"都保证了其状态的一致性\",{\"1\":{\"92\":1}}],[\"都有唯一的数\",{\"1\":{\"72\":1}}],[\"都有序关系\",{\"1\":{\"62\":2}}],[\"都可以进行乘法运算\",{\"1\":{\"65\":1}}],[\"都可以进行加法运算\",{\"1\":{\"49\":1}}],[\"都是存放在计算机的\",{\"1\":{\"383\":1}}],[\"都是唯一的\",{\"1\":{\"51\":1,\"67\":1}}],[\"都是自然数\",{\"1\":{\"49\":1,\"50\":1,\"65\":1,\"66\":1}}],[\"都是在这个路径下的\",{\"1\":{\"32\":1}}],[\"定义了变量\",{\"1\":{\"349\":1}}],[\"定义了接口\",{\"1\":{\"152\":1}}],[\"定义抽象接口\",{\"1\":{\"121\":1}}],[\"定义接口或抽象类\",{\"1\":{\"120\":1}}],[\"定义乘法的运算规则\",{\"1\":{\"65\":1}}],[\"定义正自然数为非\",{\"1\":{\"58\":1}}],[\"定义\",{\"1\":{\"57\":1}}],[\"定义自然数的序即定义\",{\"1\":{\"57\":1}}],[\"定义加法的运算规则\",{\"1\":{\"49\":1}}],[\"定义dns解析器\",{\"1\":{\"16\":1}}],[\"则结果是两个指针间隔的元素个数\",{\"1\":{\"418\":1}}],[\"则移动\",{\"1\":{\"418\":1}}],[\"则移动一字节\",{\"1\":{\"418\":1}}],[\"则意味着函数要退出了\",{\"1\":{\"395\":1}}],[\"则跳转到\",{\"1\":{\"393\":1}}],[\"则再加上\",{\"1\":{\"373\":1}}],[\"则可以断定是函数了\",{\"1\":{\"373\":1}}],[\"则说明是注释\",{\"1\":{\"352\":1}}],[\"则用于从子函数中返回\",{\"1\":{\"332\":1}}],[\"则会导致其失去作为可复用组件的独立性\",{\"1\":{\"176\":1}}],[\"则不需要加锁\",{\"1\":{\"93\":1}}],[\"则必须加锁\",{\"1\":{\"93\":1}}],[\"则对连通性无要求\",{\"1\":{\"81\":1}}],[\"则对一个数可以是多个数的后继\",{\"1\":{\"80\":1}}],[\"则对\",{\"1\":{\"79\":1}}],[\"则对点的出度无规定\",{\"1\":{\"78\":1}}],[\"则允许不存在\",{\"1\":{\"77\":1}}],[\"则存在正自然数\",{\"1\":{\"75\":1}}],[\"则由加法运算规则\",{\"1\":{\"72\":1}}],[\"则\",{\"1\":{\"49\":2,\"50\":1,\"51\":1,\"60\":1,\"61\":1,\"62\":3,\"63\":1,\"65\":2,\"66\":1,\"67\":1,\"74\":1,\"75\":1}}],[\"则有\",{\"1\":{\"47\":1,\"72\":1}}],[\"则需要写多个函数\",{\"1\":{\"39\":1}}],[\"为例\",{\"1\":{\"418\":1}}],[\"为例介绍几种写法\",{\"1\":{\"37\":1}}],[\"为\",{\"1\":{\"402\":2}}],[\"为零或不为零情况下的跳转\",{\"1\":{\"331\":1}}],[\"为此\",{\"1\":{\"308\":1}}],[\"为了实际将这个值保存起来\",{\"1\":{\"415\":1}}],[\"为了实现\",{\"1\":{\"331\":1}}],[\"为了防止因为顺序排列而执行了\",{\"1\":{\"393\":1}}],[\"为了解决这个问题\",{\"1\":{\"256\":1,\"276\":1}}],[\"为了对比\",{\"1\":{\"92\":1}}],[\"为什么选择递归下降\",{\"0\":{\"363\":1},\"1\":{\"359\":1}}],[\"为什么不能直接使用\",{\"1\":{\"332\":1}}],[\"为什么\",{\"1\":{\"328\":1}}],[\"为什么使用\",{\"0\":{\"299\":1}}],[\"为什么使用观察者模式\",{\"0\":{\"250\":1}}],[\"为什么使用外观模式\",{\"1\":{\"213\":1}}],[\"为什么使用装饰器模式\",{\"0\":{\"198\":1}}],[\"为什么使用此类\",{\"0\":{\"180\":1,\"239\":1}}],[\"为什么要用\",{\"1\":{\"346\":1}}],[\"为什么要用适配器模式\",{\"0\":{\"140\":1}}],[\"为什么要学编译原理\",{\"0\":{\"313\":1}}],[\"为什么要这么复杂\",{\"0\":{\"304\":1}}],[\"为什么要特意编写\",{\"0\":{\"285\":1}}],[\"为什么要使用迭代器模式\",{\"0\":{\"230\":1}}],[\"为什么要使用\",{\"0\":{\"169\":1,\"221\":1,\"264\":1,\"271\":1,\"291\":1}}],[\"为什么要使用抽象工厂模式\",{\"0\":{\"129\":1}}],[\"为自然数时\",{\"1\":{\"62\":1}}],[\"为自然数且\",{\"1\":{\"54\":1,\"55\":2,\"59\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"为正自然数时有\",{\"1\":{\"59\":1}}],[\"为正自然数\",{\"1\":{\"59\":4}}],[\"为真命题可以推出\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"为真命题可以推理出\",{\"1\":{\"47\":1}}],[\"为真命题\",{\"1\":{\"47\":2,\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"由上可以看出\",{\"1\":{\"349\":1}}],[\"由调用者将参数出栈\",{\"1\":{\"332\":1}}],[\"由调用者将参数入栈\",{\"1\":{\"332\":1}}],[\"由于取变量的值与函数的调用都是以\",{\"1\":{\"406\":1}}],[\"由于语法分析本身比较复杂\",{\"1\":{\"369\":1,\"380\":1}}],[\"由于本编译器的目的是达到自己编译自己\",{\"1\":{\"351\":1}}],[\"由于本人水平一般\",{\"1\":{\"317\":1}}],[\"由于我们的目标是能自举\",{\"1\":{\"349\":1}}],[\"由于词法分析的工作很常见\",{\"1\":{\"344\":1}}],[\"由于只存放字符串\",{\"1\":{\"325\":1}}],[\"由于其他地方并没有控制消息发布和订阅的逻辑处理\",{\"1\":{\"243\":1}}],[\"由于笔者不太喜欢java\",{\"1\":{\"226\":1}}],[\"由此有\",{\"1\":{\"75\":1}}],[\"由此知道假设不成立\",{\"1\":{\"72\":1}}],[\"由乘法运算规则\",{\"1\":{\"66\":1,\"67\":1}}],[\"由加法结果的唯一性有\",{\"1\":{\"67\":1}}],[\"由加法结果的存在性有\",{\"1\":{\"66\":1}}],[\"由加法消去律得到\",{\"1\":{\"60\":1}}],[\"由加法运算规则\",{\"1\":{\"50\":1,\"51\":1}}],[\"由\",{\"1\":{\"47\":1,\"50\":2,\"51\":2,\"60\":2,\"61\":2,\"62\":1,\"63\":1,\"66\":1,\"67\":1,\"72\":2,\"74\":1}}],[\"是解释器\",{\"1\":{\"422\":1}}],[\"是指针时\",{\"1\":{\"418\":1}}],[\"是逆序将参数入栈的\",{\"1\":{\"406\":1}}],[\"是第几个参数\",{\"1\":{\"385\":1}}],[\"是以字符\",{\"1\":{\"384\":2}}],[\"是放在一起解析的\",{\"1\":{\"384\":1}}],[\"是对前一章提到的\",{\"1\":{\"370\":1}}],[\"是如何帮助我们的工程实现的\",{\"1\":{\"366\":1}}],[\"是因为几乎所有手工编写的语法分析器都或多或少地有它的影子\",{\"1\":{\"366\":1}}],[\"是因为之后我们将用\",{\"1\":{\"332\":1}}],[\"是因为表达式在语法分析中相对独立并且比较复杂\",{\"1\":{\"322\":1}}],[\"是跳转指令\",{\"1\":{\"330\":1}}],[\"是比较困难的\",{\"1\":{\"328\":1}}],[\"是数据还是地址\",{\"1\":{\"328\":1}}],[\"是所有指令中最基础的一个\",{\"1\":{\"328\":1}}],[\"是非常重要的\",{\"1\":{\"174\":1}}],[\"是一个一元运算符\",{\"1\":{\"405\":1}}],[\"是一个普通的变量还是一个函数\",{\"1\":{\"373\":1}}],[\"是一种结构型设计模式\",{\"1\":{\"139\":1}}],[\"是一款简洁高效的\",{\"1\":{\"102\":1}}],[\"是没有必要的\",{\"1\":{\"131\":1}}],[\"是不客观的\",{\"1\":{\"93\":1}}],[\"是的\",{\"1\":{\"92\":1,\"93\":1}}],[\"是线程调度器抢占划分时间片给其他线程跑\",{\"1\":{\"90\":1}}],[\"是\",{\"1\":{\"72\":1,\"92\":1,\"155\":1,\"339\":1,\"418\":2}}],[\"是唯一的\",{\"1\":{\"51\":2,\"67\":2}}],[\"是否属于优先级更高的运算符\",{\"1\":{\"402\":1}}],[\"是否唯一\",{\"1\":{\"51\":1,\"67\":1}}],[\"是否存在\",{\"1\":{\"50\":1,\"66\":1}}],[\"是否是自然数\",{\"1\":{\"50\":1,\"66\":1}}],[\"是任意自然数\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"是真命题\",{\"1\":{\"47\":1}}],[\"是关于自然数\",{\"1\":{\"47\":1}}],[\"是自然数且\",{\"1\":{\"51\":1,\"53\":3,\"69\":3}}],[\"是自然数\",{\"1\":{\"47\":1,\"49\":1,\"50\":7,\"51\":2,\"61\":1,\"65\":1,\"66\":6,\"67\":2}}],[\"是什么\",{\"0\":{\"31\":1}}],[\"共有五条\",{\"1\":{\"47\":1}}],[\"即当\",{\"1\":{\"418\":1}}],[\"即可\",{\"1\":{\"406\":1,\"409\":1}}],[\"即跨行的字符串拼接\",{\"1\":{\"404\":1}}],[\"即在这断代码之前\",{\"1\":{\"382\":1}}],[\"即我们将该变量的类别设置成了\",{\"1\":{\"374\":1}}],[\"即我们自己的虚拟机\",{\"1\":{\"322\":1}}],[\"即代码中的\",{\"1\":{\"373\":1}}],[\"即全局的定义语句\",{\"1\":{\"373\":1}}],[\"即向前看\",{\"1\":{\"356\":1}}],[\"即提前看多个字符\",{\"1\":{\"352\":1}}],[\"即用一个整型数组来保存相关的id信息\",{\"1\":{\"349\":1}}],[\"即用户主动触发协程切换\",{\"1\":{\"92\":1}}],[\"即如果它是个变量\",{\"1\":{\"349\":1}}],[\"即并不是多个字符共同构成标记\",{\"1\":{\"345\":1}}],[\"即前几篇中提到的\",{\"1\":{\"344\":1}}],[\"即与代码的上下文是有关系的\",{\"1\":{\"344\":1}}],[\"即标记本身和标记的值\",{\"1\":{\"342\":1}}],[\"即一连串的标记\",{\"1\":{\"342\":1}}],[\"即有两个参数\",{\"1\":{\"337\":1}}],[\"即保存当前的栈指针\",{\"1\":{\"333\":1}}],[\"即结果\",{\"1\":{\"331\":1}}],[\"即能自己编译自己\",{\"1\":{\"315\":1}}],[\"即构造一个工具\",{\"1\":{\"314\":1}}],[\"即使最初实例很少\",{\"1\":{\"244\":1}}],[\"即使这些装饰边框都只具有非常简单的功能\",{\"1\":{\"205\":1}}],[\"即使被装饰物被边框装饰起来了\",{\"1\":{\"202\":1}}],[\"即使理解了\",{\"1\":{\"176\":1}}],[\"即使多个线程跑在8核处理上\",{\"1\":{\"90\":1}}],[\"即子类可以扩展父类的功能\",{\"1\":{\"109\":1}}],[\"即python3\",{\"1\":{\"92\":1}}],[\"即不会触发系统的全局解释器锁\",{\"1\":{\"91\":1}}],[\"即所谓的\",{\"1\":{\"91\":1}}],[\"即证明了乘法消去的保序性\",{\"1\":{\"75\":1}}],[\"即乘法结合律成立\",{\"1\":{\"71\":1}}],[\"即乘法分配律成立\",{\"1\":{\"70\":1}}],[\"即乘法交换律成立\",{\"1\":{\"69\":1}}],[\"即先证明乘法的两条运算规则符合交换律\",{\"1\":{\"69\":1}}],[\"即先证明加法的两条运算规则符合交换律\",{\"1\":{\"53\":1}}],[\"即任意两个自然数都可以进行乘法运算\",{\"1\":{\"68\":1}}],[\"即任意两个自然数都可以进行加法运算\",{\"1\":{\"52\":1}}],[\"即对于正自然数\",{\"1\":{\"59\":1}}],[\"即对于任意自然数\",{\"1\":{\"53\":1,\"54\":1,\"55\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"即加法结合律成立\",{\"1\":{\"54\":1}}],[\"即加法交换律成立\",{\"1\":{\"53\":1}}],[\"即由\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"即\",{\"1\":{\"49\":1,\"50\":3,\"51\":3,\"55\":2,\"65\":1,\"66\":3,\"67\":3,\"72\":2,\"76\":5,\"151\":1,\"244\":2,\"286\":1,\"330\":1,\"342\":1,\"346\":1,\"363\":1,\"411\":1,\"414\":1,\"419\":1}}],[\"即假定\",{\"1\":{\"46\":1}}],[\"即写成\",{\"1\":{\"40\":1}}],[\"公理系统\",{\"2\":{\"83\":1}}],[\"公理系统内出发\",{\"1\":{\"73\":1}}],[\"公理自然不能从\",{\"1\":{\"73\":1}}],[\"公理自身任有待研究\",{\"1\":{\"73\":1}}],[\"公理每一条公理都被使用过\",{\"1\":{\"73\":1}}],[\"公理构建出了一个自然数代数系统\",{\"1\":{\"73\":1}}],[\"公理的合理性\",{\"0\":{\"73\":1}}],[\"公理相容\",{\"1\":{\"46\":1}}],[\"公理\",{\"0\":{\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1},\"1\":{\"46\":1,\"47\":1,\"50\":2,\"51\":2,\"53\":3,\"54\":1,\"55\":2,\"59\":2,\"62\":1,\"66\":1,\"67\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":4}}],[\"自己实现了一个c语言的编译器\",{\"1\":{\"422\":1}}],[\"自己和被委托对象的一致性\",{\"0\":{\"210\":1}}],[\"自增自减\",{\"0\":{\"413\":1,\"419\":1},\"1\":{\"401\":2}}],[\"自底向上是不断地将终结符进行合并\",{\"1\":{\"360\":1}}],[\"自顶向下是从起始非终结符开始\",{\"1\":{\"360\":1}}],[\"自然数与有向图\",{\"1\":{\"76\":1}}],[\"自然数中最重要的运算当然是加法\",{\"1\":{\"48\":1}}],[\"自然数的乘法也十分重要\",{\"1\":{\"64\":1}}],[\"自然数的乘法运算\",{\"0\":{\"64\":1}}],[\"自然数的序是全序关系\",{\"1\":{\"57\":1}}],[\"自然数的序为两个自然数的关系\",{\"1\":{\"56\":1}}],[\"自然数的序\",{\"0\":{\"56\":1}}],[\"自然数的加法运算\",{\"0\":{\"48\":1}}],[\"自然数的定义\",{\"0\":{\"47\":1}}],[\"自然数的定义则是构建此算术公理系统的第一步\",{\"1\":{\"46\":1}}],[\"自然数这个新的数学对象因我们的假设而确立\",{\"1\":{\"47\":1}}],[\"自然数\",{\"0\":{\"46\":1},\"1\":{\"58\":1}}],[\"自由访问知识和文化\",{\"1\":{\"4\":1}}],[\"若在此通过\",{\"1\":{\"384\":1}}],[\"若是\",{\"1\":{\"352\":1}}],[\"若得到的是单个字符\",{\"1\":{\"351\":1}}],[\"若碰到了一个我们不认识的字符该怎么处理\",{\"1\":{\"346\":1}}],[\"若无特殊理由\",{\"1\":{\"305\":1}}],[\"若去除\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1}}],[\"若有\",{\"1\":{\"72\":1}}],[\"若\",{\"1\":{\"49\":2,\"50\":1,\"51\":1,\"60\":1,\"61\":1,\"62\":3,\"63\":1,\"65\":2,\"66\":1,\"67\":1,\"74\":1,\"75\":1}}],[\"若deactivate\",{\"1\":{\"45\":1}}],[\"若activate\",{\"1\":{\"45\":1}}],[\"会使用到\",{\"1\":{\"374\":1}}],[\"会增加许多的成本\",{\"1\":{\"340\":1}}],[\"会出现\",{\"1\":{\"339\":1}}],[\"会生成如下的\",{\"1\":{\"332\":1}}],[\"会有许多相似的代码\",{\"1\":{\"316\":1}}],[\"会有\",{\"1\":{\"244\":1}}],[\"会编写一个\",{\"1\":{\"151\":1}}],[\"会导致父类的任何变换都可能影响到子类的行为\",{\"1\":{\"122\":1}}],[\"会导致activating\",{\"1\":{\"45\":1}}],[\"会分两种情况\",{\"1\":{\"93\":1}}],[\"会被转交\",{\"1\":{\"203\":1}}],[\"会被顺序执行\",{\"1\":{\"92\":1}}],[\"会被强行终止\",{\"1\":{\"45\":1}}],[\"会和adb冲突\",{\"1\":{\"87\":1}}],[\"会给你创建两个\",{\"1\":{\"31\":1}}],[\"=<=\",{\"1\":{\"418\":1}}],[\"=左边的就称作\",{\"1\":{\"361\":1}}],[\"==\",{\"1\":{\"181\":1,\"240\":1,\"251\":1,\"328\":5,\"329\":1,\"330\":1,\"331\":2,\"332\":2,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":17,\"338\":8,\"345\":2,\"347\":1,\"348\":1,\"349\":3,\"350\":2,\"351\":6,\"352\":2,\"353\":33,\"365\":7,\"373\":8,\"374\":2,\"375\":1,\"382\":1,\"384\":1,\"385\":5,\"386\":6,\"393\":2,\"394\":1,\"395\":1,\"396\":2,\"404\":3,\"405\":5,\"406\":9,\"407\":5,\"408\":2,\"409\":3,\"410\":2,\"411\":1,\"412\":3,\"413\":6,\"415\":4,\"416\":2,\"417\":2,\"418\":3,\"419\":5,\"420\":2}}],[\"===>\",{\"1\":{\"393\":1}}],[\"===\",{\"1\":{\"181\":2,\"199\":3,\"240\":2,\"273\":2,\"277\":2,\"282\":4}}],[\"==============================\",{\"1\":{\"170\":2,\"171\":2}}],[\"=>\",{\"1\":{\"130\":2,\"170\":2,\"189\":2,\"240\":1,\"251\":2,\"277\":2,\"300\":1,\"342\":1,\"362\":11}}],[\"=\",{\"1\":{\"44\":7,\"86\":1,\"90\":7,\"91\":5,\"92\":21,\"121\":3,\"124\":3,\"130\":20,\"143\":4,\"156\":1,\"157\":1,\"159\":3,\"160\":4,\"170\":11,\"181\":13,\"189\":1,\"192\":7,\"199\":10,\"215\":5,\"222\":7,\"232\":10,\"240\":7,\"251\":11,\"265\":18,\"273\":5,\"277\":4,\"282\":31,\"292\":9,\"300\":15,\"322\":8,\"325\":6,\"326\":3,\"328\":6,\"329\":1,\"330\":1,\"331\":2,\"332\":4,\"333\":3,\"334\":1,\"335\":3,\"336\":1,\"337\":17,\"338\":8,\"339\":11,\"345\":3,\"346\":1,\"348\":2,\"349\":11,\"350\":8,\"351\":9,\"352\":3,\"353\":29,\"354\":9,\"361\":4,\"363\":3,\"364\":5,\"365\":19,\"370\":13,\"373\":23,\"374\":10,\"381\":8,\"382\":2,\"384\":5,\"385\":14,\"386\":16,\"393\":6,\"394\":6,\"395\":2,\"396\":2,\"404\":9,\"405\":6,\"406\":19,\"407\":3,\"408\":2,\"409\":1,\"410\":5,\"411\":6,\"412\":8,\"413\":10,\"414\":1,\"415\":7,\"416\":6,\"417\":8,\"418\":10,\"419\":14,\"420\":8,\"421\":7}}],[\"=404\",{\"1\":{\"16\":3,\"22\":5}}],[\"安装路径打开\",{\"1\":{\"102\":1}}],[\"安装目录下\",{\"1\":{\"102\":1}}],[\"安装了\",{\"1\":{\"97\":1}}],[\"安装\",{\"0\":{\"85\":1}}],[\"安装editorconfig插件\",{\"1\":{\"44\":1}}],[\"安装证书\",{\"0\":{\"21\":1}}],[\"唯一特殊的地方是\",{\"1\":{\"395\":1}}],[\"唯一\",{\"1\":{\"51\":4,\"67\":4}}],[\"唯一的缺点就是类型名难写\",{\"1\":{\"40\":1}}],[\"唯独你没懂\",{\"0\":{\"29\":1},\"1\":{\"28\":1}}],[\"将参数出栈\",{\"1\":{\"402\":2}}],[\"将运算符\",{\"1\":{\"402\":1}}],[\"将它改成\",{\"1\":{\"372\":1}}],[\"将它们加入符号表\",{\"1\":{\"354\":1}}],[\"将对应地址中的整数载入\",{\"1\":{\"328\":1}}],[\"将对应地址中的字符载入\",{\"1\":{\"328\":1}}],[\"将\",{\"1\":{\"328\":3,\"345\":2,\"402\":1}}],[\"将语法树转化成目标代码\",{\"1\":{\"321\":1}}],[\"将词法分析得到的标记流\",{\"1\":{\"321\":1}}],[\"将来对数据结构的改良就会变得非常困难\",{\"1\":{\"308\":1}}],[\"将数据结构与操作分离\",{\"1\":{\"299\":1}}],[\"将通用的算法结构放在父类中\",{\"1\":{\"291\":1}}],[\"将这些逻辑集中在中介者类中是更明智的选择\",{\"1\":{\"243\":1}}],[\"将类的这两个层次结构分离开有利于独立地对它们进行扩展\",{\"1\":{\"163\":1}}],[\"将现有类的接口转换为所需的接口\",{\"1\":{\"140\":1}}],[\"将具体实现传递给高层模块\",{\"1\":{\"120\":1}}],[\"将不同的算法封装在独立的类中\",{\"1\":{\"281\":1}}],[\"将不同的功能模块分开\",{\"1\":{\"116\":1}}],[\"将不同的职责分离到不同的类中\",{\"1\":{\"116\":2}}],[\"将下载的工具解压后得到的两个\",{\"1\":{\"102\":1}}],[\"将其称为新的乘法运算规则\",{\"1\":{\"69\":1}}],[\"将其称为新的加法运算规则\",{\"1\":{\"53\":1}}],[\"将模数直接包含在类型中\",{\"1\":{\"40\":1}}],[\"将卷的挂载目录改为由命令输入\",{\"1\":{\"24\":1}}],[\"泛型编程\",{\"0\":{\"40\":1}}],[\"泛型与\",{\"0\":{\"35\":1}}],[\"并执行\",{\"1\":{\"421\":1}}],[\"并根据它们类型使用\",{\"1\":{\"409\":1}}],[\"并直接修改\",{\"1\":{\"407\":1}}],[\"并将之前的\",{\"1\":{\"402\":1}}],[\"并将保存在\",{\"1\":{\"384\":1}}],[\"并将被观察对象自身作为参数传递\",{\"1\":{\"257\":1}}],[\"并实现其中解析变量定义部分\",{\"1\":{\"369\":1}}],[\"并实现它们定义的抽象方法\",{\"1\":{\"133\":1}}],[\"并用它来实现了四则运算的语法分析器\",{\"1\":{\"366\":1}}],[\"并用它完成一个基本的四则运算的语法分析器\",{\"1\":{\"359\":1}}],[\"并提前为它们赋予必要的信息\",{\"1\":{\"354\":1}}],[\"并提供一个全局访问点\",{\"1\":{\"271\":1}}],[\"并不作为语法的一部分\",{\"1\":{\"346\":1}}],[\"并不是直接处理\",{\"1\":{\"325\":1}}],[\"并不是说是没写过编译器就不是好程序员\",{\"1\":{\"313\":1}}],[\"并退出整个程序\",{\"1\":{\"346\":1}}],[\"并仿照\",{\"1\":{\"340\":1}}],[\"并输出\",{\"1\":{\"322\":1}}],[\"并在所有的\",{\"1\":{\"307\":1}}],[\"并把对各元素的处理交给访问者类\",{\"1\":{\"298\":1}}],[\"并嫌弃cpp中没有interface\",{\"1\":{\"226\":1}}],[\"并使用它们来增加这个新功能\",{\"1\":{\"155\":1}}],[\"并点击激活\",{\"1\":{\"102\":1}}],[\"并回车\",{\"1\":{\"102\":2}}],[\"并没有保证\",{\"1\":{\"92\":1}}],[\"并且它的结果是\",{\"1\":{\"405\":1}}],[\"并且它用很少的代码就完成了一个功能相当完善的\",{\"1\":{\"315\":1}}],[\"并且三条指令写来比较麻烦且浪费空间\",{\"1\":{\"335\":1}}],[\"并且我们也只有一个寄存器\",{\"1\":{\"329\":1}}],[\"并且最重要的是\",{\"1\":{\"314\":1}}],[\"并且可以扩展或重写这些行为和属性\",{\"1\":{\"209\":1}}],[\"并且协程切换并不是系统态抢占式\",{\"1\":{\"92\":1}}],[\"并且会非常频繁地进行切换\",{\"1\":{\"91\":1}}],[\"并且如果要对多个模数取模\",{\"1\":{\"39\":1}}],[\"并且如果编译器没有任何优化\",{\"1\":{\"39\":1}}],[\"并发异步编程之争\",{\"0\":{\"89\":1}}],[\"并添加以下内容\",{\"1\":{\"44\":1}}],[\"并自动重载docker\",{\"1\":{\"25\":1}}],[\"第二个参数放在\",{\"1\":{\"337\":1}}],[\"第二种\",{\"0\":{\"39\":1}}],[\"第一个参数放在栈顶\",{\"1\":{\"337\":1}}],[\"第一篇完全没有正题相关的内容也是希望你能有所心理准备再开始学习\",{\"1\":{\"316\":1}}],[\"第一种策略是\",{\"1\":{\"282\":1}}],[\"第一种\",{\"0\":{\"38\":1}}],[\"第\",{\"1\":{\"152\":1}}],[\"不知道你是否有同感\",{\"1\":{\"426\":1}}],[\"不指定的话一般认为是第一个出现的非终结符\",{\"1\":{\"362\":1}}],[\"不断地对非终结符进行分解\",{\"1\":{\"360\":1}}],[\"不识别\",{\"1\":{\"346\":1}}],[\"不能因为方法的调用顺序发生改变而产生问题\",{\"1\":{\"255\":1}}],[\"不仅要考虑函数的地址\",{\"1\":{\"332\":1}}],[\"不仅会增加代码的复杂性\",{\"1\":{\"243\":1}}],[\"不仅如此\",{\"1\":{\"239\":1}}],[\"不同类型的集合可以使用相同的遍历方式\",{\"1\":{\"230\":1}}],[\"不同的只是赋值的信息\",{\"1\":{\"354\":1}}],[\"不同的表示\",{\"1\":{\"169\":1}}],[\"不同的自然数后继不同\",{\"1\":{\"47\":1}}],[\"不需要修改现有代码\",{\"1\":{\"221\":1}}],[\"不管是香草味\",{\"1\":{\"205\":1}}],[\"不过据说c\",{\"1\":{\"317\":1}}],[\"不过这并不是什么问题\",{\"1\":{\"243\":1}}],[\"不过\",{\"1\":{\"176\":1,\"202\":1,\"255\":1,\"317\":1}}],[\"不必对\",{\"1\":{\"163\":1}}],[\"不要使用类继承\",{\"1\":{\"122\":1}}],[\"不应强迫用户依赖他们不使用的接口\",{\"1\":{\"118\":1}}],[\"不应引入违反父类预期的新行为\",{\"1\":{\"110\":1}}],[\"不符合单一职责原则的类\",{\"1\":{\"117\":1}}],[\"不会出现强制转换后的问题\",{\"1\":{\"339\":1}}],[\"不会影响其他功能\",{\"1\":{\"107\":1}}],[\"不会触发ondidclosetextdocument事件\",{\"1\":{\"45\":1}}],[\"不用外部工具\",{\"1\":{\"315\":1}}],[\"不用改变框架代码\",{\"1\":{\"204\":1}}],[\"不用类也能封装数据和方法\",{\"1\":{\"98\":1}}],[\"不用操心运算时忘记取模\",{\"1\":{\"40\":1}}],[\"不支持\",{\"1\":{\"352\":1}}],[\"不支持动画\",{\"1\":{\"97\":1}}],[\"不支持导出pptx\",{\"1\":{\"96\":1}}],[\"不易写出错的代码\",{\"1\":{\"91\":1}}],[\"不易检验\",{\"1\":{\"38\":1,\"39\":1}}],[\"不加锁的话\",{\"1\":{\"90\":1}}],[\"不妨试试这些自动生成工具\",{\"1\":{\"427\":1}}],[\"不妨记作\",{\"1\":{\"72\":1}}],[\"不妨设\",{\"1\":{\"72\":1}}],[\"不是任何自然数的后继\",{\"1\":{\"47\":1}}],[\"不推荐运用这种方法\",{\"1\":{\"38\":1}}],[\"不方便输出结果\",{\"1\":{\"36\":1}}],[\"忘记取模\",{\"1\":{\"38\":1}}],[\"清晰明了\",{\"1\":{\"38\":1}}],[\"要容易\",{\"1\":{\"428\":1}}],[\"要根据它的类型放大\",{\"1\":{\"418\":1}}],[\"要理解函数定义的解析过程\",{\"1\":{\"388\":1}}],[\"要理解这些寄存器的作用\",{\"1\":{\"326\":1}}],[\"要是深入词法分析器\",{\"1\":{\"343\":1}}],[\"要引入的命令有\",{\"1\":{\"332\":1}}],[\"要执行的计算机指令\",{\"1\":{\"326\":1}}],[\"要么就是借助了自动生成的工具\",{\"1\":{\"315\":1}}],[\"要么是因为这道题目直接考察了模的性质和运用\",{\"1\":{\"36\":1}}],[\"要么是因为答案是浮点数\",{\"1\":{\"36\":1}}],[\"要求栈顶存放地址\",{\"1\":{\"328\":2}}],[\"要求子类去实现抽象方法\",{\"1\":{\"295\":1}}],[\"要求\",{\"1\":{\"179\":1,\"328\":2}}],[\"要同时进行多件事情本来就需要正在运行的让出处理器\",{\"1\":{\"89\":1}}],[\"要部署的\",{\"1\":{\"14\":1}}],[\"背景介绍\",{\"0\":{\"36\":1}}],[\"中我们介绍过内置函数的支持\",{\"1\":{\"406\":1}}],[\"中即可\",{\"1\":{\"404\":1}}],[\"中存放的是参数的位置\",{\"1\":{\"385\":1}}],[\"中存放地址\",{\"1\":{\"328\":2}}],[\"中存放如指针\",{\"1\":{\"325\":1}}],[\"中的值执行减\",{\"1\":{\"419\":1}}],[\"中的信息还原\",{\"1\":{\"384\":1}}],[\"中的全局变量不同\",{\"1\":{\"383\":1}}],[\"中的位置\",{\"1\":{\"382\":1}}],[\"中的一种\",{\"1\":{\"361\":1}}],[\"中的\",{\"1\":{\"328\":1,\"352\":1}}],[\"中的数据作为整数存放入地址中\",{\"1\":{\"328\":1}}],[\"中的数据作为字符存放入地址中\",{\"1\":{\"328\":1}}],[\"中的内存\",{\"1\":{\"325\":1}}],[\"中的书籍\",{\"1\":{\"233\":2}}],[\"中间代码的表示\",{\"1\":{\"314\":1}}],[\"中注册有多个\",{\"1\":{\"255\":1}}],[\"中增加多少个功能\",{\"1\":{\"163\":1}}],[\"中增加新功能时\",{\"1\":{\"151\":1}}],[\"中增加\",{\"1\":{\"134\":1}}],[\"中文官网\",{\"1\":{\"102\":1}}],[\"中\",{\"1\":{\"35\":1,\"152\":1,\"328\":6,\"329\":1,\"332\":1,\"337\":2,\"385\":1,\"408\":1,\"415\":1}}],[\"技术分享等内容\",{\"1\":{\"34\":1}}],[\"技术\",{\"0\":{\"34\":1}}],[\"工作所需的条件\",{\"0\":{\"308\":1}}],[\"工作流程\",{\"0\":{\"33\":1}}],[\"工厂方法\",{\"2\":{\"225\":1}}],[\"工厂模式\",{\"1\":{\"120\":1}}],[\"工具\",{\"0\":{\"103\":1}}],[\"工具下载\",{\"1\":{\"102\":1}}],[\"工具使用\",{\"1\":{\"34\":1}}],[\"工具等资源\",{\"1\":{\"4\":1}}],[\"去处理\",{\"1\":{\"203\":1}}],[\"去手动异步执行另一个协程\",{\"1\":{\"92\":1}}],[\"去\",{\"1\":{\"32\":1}}],[\"打开\",{\"1\":{\"32\":1}}],[\"在后期解析语句和表达式时\",{\"1\":{\"426\":1}}],[\"在学习\",{\"1\":{\"420\":1}}],[\"在执行自增自减后\",{\"1\":{\"419\":1}}],[\"在作指针减法时\",{\"1\":{\"418\":1}}],[\"在解析\",{\"1\":{\"415\":1}}],[\"在解析的过程中\",{\"1\":{\"383\":1}}],[\"在前文的一元运算符处理中也用到了这一点\",{\"1\":{\"414\":1}}],[\"在计算一个运算符\",{\"1\":{\"402\":1}}],[\"在函数体内局部变量就会覆盖全局变量\",{\"1\":{\"384\":1}}],[\"在函数内访问它们是通过\",{\"1\":{\"383\":1}}],[\"在思考这个问题之前\",{\"1\":{\"383\":1}}],[\"在main函数中进行初始化如下\",{\"1\":{\"354\":1}}],[\"在main函数中加入初始化代码\",{\"1\":{\"325\":1}}],[\"在语法分析前将关键字提前加入符号表\",{\"1\":{\"354\":1}}],[\"在我们的编译器中共识别\",{\"1\":{\"392\":1}}],[\"在我们的\",{\"1\":{\"352\":1}}],[\"在我看来\",{\"1\":{\"313\":1}}],[\"在分析时\",{\"1\":{\"351\":2}}],[\"在全局中添加如下定义\",{\"1\":{\"345\":1}}],[\"在全局中加入如下定义\",{\"1\":{\"326\":1}}],[\"在代码的开头\",{\"1\":{\"339\":1}}],[\"在将调用子函数时压入栈中的数据清除\",{\"1\":{\"334\":1}}],[\"在实际调用函数时\",{\"1\":{\"332\":1}}],[\"在调用函数时会使用到它\",{\"1\":{\"326\":1}}],[\"在调用那个方法之前需要先在这个类中注册一下\",{\"1\":{\"213\":1}}],[\"在调用那个类之前需要先调用这个类\",{\"1\":{\"213\":1}}],[\"在写编译器的时候会遇到两个主要问题\",{\"1\":{\"316\":1}}],[\"在开始进入正题之前\",{\"1\":{\"312\":1}}],[\"在不修改现有代码的前提下进行扩展\",{\"1\":{\"305\":1}}],[\"在不改变被装饰物的前提下增加功能\",{\"0\":{\"203\":1}}],[\"在练习题中\",{\"1\":{\"304\":1}}],[\"在父类中\",{\"1\":{\"295\":1}}],[\"在父类中定义处理流程的框架\",{\"1\":{\"290\":1}}],[\"在子类中重写父类的方法可以改变程序的行为\",{\"1\":{\"295\":1}}],[\"在子类中可以使用父类中定义的方法\",{\"1\":{\"295\":1}}],[\"在子类中实现具体处理\",{\"1\":{\"290\":1}}],[\"在内存容量少的运行环境中可以使用\",{\"1\":{\"286\":1}}],[\"在程序运行中也可以切换角色\",{\"1\":{\"286\":1}}],[\"在多线程环境中\",{\"1\":{\"276\":1}}],[\"在示例程序的\",{\"1\":{\"255\":1}}],[\"在示例程序中\",{\"1\":{\"164\":1,\"202\":2,\"245\":1,\"255\":1,\"304\":1,\"308\":1}}],[\"在观察者模式中\",{\"1\":{\"254\":1,\"257\":1}}],[\"在图形用户界面\",{\"1\":{\"250\":1}}],[\"在某些情况下\",{\"1\":{\"234\":1,\"258\":1}}],[\"在上面的代码中\",{\"1\":{\"233\":1,\"277\":1}}],[\"在本节中\",{\"1\":{\"231\":1}}],[\"在委托模式中\",{\"1\":{\"210\":1}}],[\"在文件系统中\",{\"1\":{\"187\":1}}],[\"在这个前提下\",{\"1\":{\"343\":1}}],[\"在这个示例程序中\",{\"1\":{\"243\":1,\"281\":1}}],[\"在这个示例中\",{\"1\":{\"181\":1,\"197\":1,\"214\":1,\"251\":1}}],[\"在这种要求之下\",{\"1\":{\"37\":1}}],[\"在其内部调用了类的特有的方法\",{\"1\":{\"176\":1}}],[\"在判断到底应该修改哪个类时\",{\"1\":{\"176\":1}}],[\"在编程时\",{\"1\":{\"176\":1}}],[\"在设计类时\",{\"1\":{\"305\":1}}],[\"在设计\",{\"1\":{\"255\":1}}],[\"在设计模式中\",{\"1\":{\"254\":1}}],[\"在设计软件时\",{\"1\":{\"175\":1}}],[\"在设计一个系统模块的时候\",{\"1\":{\"106\":1}}],[\"在面向对象编程中\",{\"1\":{\"174\":1,\"209\":1}}],[\"在桥的哪一侧\",{\"1\":{\"155\":1}}],[\"在软件开发中\",{\"1\":{\"140\":1}}],[\"在发现类有多个职责时\",{\"1\":{\"116\":1}}],[\"在所有线程相互独立且不会操作同一资源的模式下\",{\"1\":{\"90\":1}}],[\"在python编程领域\",{\"1\":{\"89\":1}}],[\"在明确证明了自然数乘法运算的良好性质\",{\"1\":{\"68\":1}}],[\"在明确证明了自然数加法运算的良好性质\",{\"1\":{\"52\":1}}],[\"在考察序的性质之前\",{\"1\":{\"58\":1}}],[\"在此承认次假设的基础之上\",{\"1\":{\"46\":1}}],[\"在项目根目录下创建\",{\"1\":{\"44\":1}}],[\"在\",{\"1\":{\"31\":1,\"35\":1,\"133\":1,\"134\":2,\"152\":1,\"155\":1,\"202\":1,\"203\":1,\"220\":1,\"298\":1,\"303\":1,\"308\":1,\"326\":1,\"328\":1,\"329\":1,\"339\":1,\"385\":1,\"418\":1}}],[\"在准备好前端项目及安装相应环境后\",{\"1\":{\"15\":1}}],[\"的表示方法\",{\"1\":{\"428\":1}}],[\"的表达式\",{\"1\":{\"415\":1}}],[\"的地址两次\",{\"1\":{\"413\":1}}],[\"的优先级最高\",{\"1\":{\"414\":1}}],[\"的优先级最低\",{\"1\":{\"414\":1}}],[\"的优先级高于\",{\"1\":{\"413\":1}}],[\"的优先级就要高于\",{\"1\":{\"345\":1}}],[\"的指针取值\",{\"1\":{\"408\":1}}],[\"的指令集\",{\"1\":{\"327\":1}}],[\"的形式\",{\"1\":{\"406\":1}}],[\"的形式返回\",{\"1\":{\"351\":1}}],[\"的运算符\",{\"1\":{\"402\":1}}],[\"的运算结果为\",{\"1\":{\"49\":1,\"65\":1}}],[\"的结果\",{\"1\":{\"402\":1}}],[\"的结果是否唯一\",{\"1\":{\"51\":1,\"67\":1}}],[\"的实质就是两个运算符在抢参数\",{\"1\":{\"402\":1}}],[\"的实际运行顺序是\",{\"1\":{\"402\":1}}],[\"的实例作为参数传递给\",{\"1\":{\"164\":1}}],[\"的位置\",{\"1\":{\"385\":1,\"393\":1}}],[\"的产生式转换成函数的过程\",{\"1\":{\"377\":1}}],[\"的具体表示方法后就不难理解了\",{\"1\":{\"377\":1}}],[\"的扩展\",{\"1\":{\"370\":1}}],[\"的概念了\",{\"1\":{\"363\":1}}],[\"的概念\",{\"1\":{\"352\":1,\"356\":1}}],[\"的注释\",{\"1\":{\"352\":1}}],[\"的语法\",{\"1\":{\"351\":1}}],[\"的转义符\",{\"1\":{\"351\":1}}],[\"的源代码的\",{\"1\":{\"350\":1}}],[\"的字符个数\",{\"1\":{\"352\":1}}],[\"的字符\",{\"1\":{\"346\":1}}],[\"的一个问题\",{\"1\":{\"346\":1}}],[\"的一个命题\",{\"1\":{\"47\":1}}],[\"的功能包含了\",{\"1\":{\"335\":1}}],[\"的功能\",{\"1\":{\"333\":1}}],[\"的功能是抽象的\",{\"1\":{\"155\":1}}],[\"的子函数\",{\"1\":{\"332\":1}}],[\"的作用是跳转到地址为\",{\"1\":{\"332\":1}}],[\"的作用是将值或寄存器\",{\"1\":{\"329\":1}}],[\"的作用是退栈\",{\"1\":{\"328\":1}}],[\"的值\",{\"1\":{\"330\":1,\"407\":1,\"418\":1}}],[\"的值放入栈中\",{\"1\":{\"329\":1}}],[\"的值放到栈上\",{\"1\":{\"328\":1}}],[\"的值减小\",{\"1\":{\"326\":1}}],[\"的内容放在\",{\"1\":{\"328\":1}}],[\"的函数\",{\"1\":{\"322\":1}}],[\"的代码完全是手工实现的\",{\"1\":{\"315\":1}}],[\"的代码\",{\"1\":{\"314\":1}}],[\"的代码后才能理解\",{\"1\":{\"176\":1}}],[\"的学生顶多学到语法分析就结束了\",{\"1\":{\"314\":1}}],[\"的课程后\",{\"1\":{\"314\":1}}],[\"的意思\",{\"1\":{\"305\":2}}],[\"的算法\",{\"1\":{\"286\":1}}],[\"的行为会对被观察对象产生影响时\",{\"0\":{\"256\":1}}],[\"的顺序\",{\"0\":{\"255\":1}}],[\"的交互\",{\"1\":{\"243\":1}}],[\"的原因\",{\"1\":{\"243\":1}}],[\"的时候\",{\"1\":{\"213\":1}}],[\"的透明性\",{\"0\":{\"202\":1},\"1\":{\"202\":1}}],[\"的层次结构\",{\"1\":{\"187\":1}}],[\"的情况\",{\"1\":{\"179\":1}}],[\"的\",{\"1\":{\"163\":1,\"202\":1,\"255\":4,\"328\":2}}],[\"的缩写\",{\"1\":{\"155\":1}}],[\"的最上层\",{\"1\":{\"155\":1}}],[\"的类型\",{\"1\":{\"408\":1}}],[\"的类来访问数据结构中的元素\",{\"1\":{\"298\":1}}],[\"的类\",{\"1\":{\"155\":3}}],[\"的操作等价于\",{\"1\":{\"420\":1}}],[\"的操作\",{\"1\":{\"92\":1,\"413\":1}}],[\"的入度无规定\",{\"1\":{\"79\":1}}],[\"的假设矛盾\",{\"1\":{\"75\":1}}],[\"的和\",{\"1\":{\"59\":1}}],[\"的任意性\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"的性质和\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"的后继\",{\"1\":{\"47\":1,\"72\":1}}],[\"的话\",{\"1\":{\"39\":1}}],[\"的开发过程了\",{\"1\":{\"31\":1}}],[\"的开发环境去\",{\"1\":{\"31\":1}}],[\"的环境下\",{\"1\":{\"31\":1}}],[\"的图形界面\",{\"1\":{\"31\":1}}],[\"发现是\",{\"1\":{\"363\":1}}],[\"发送者无需知道哪个对象会处理请求\",{\"1\":{\"180\":1,\"181\":1}}],[\"发生变化的代码只有\",{\"1\":{\"164\":1}}],[\"发行版\",{\"1\":{\"31\":1}}],[\"发布\",{\"1\":{\"29\":2}}],[\"下一条\",{\"1\":{\"326\":1,\"330\":1}}],[\"下一章中我们将讲解语句的解析\",{\"1\":{\"388\":1}}],[\"下一章中我们将介绍如何解析函数的定义\",{\"1\":{\"377\":1}}],[\"下一章中\",{\"1\":{\"322\":1,\"356\":1}}],[\"下一个人如果可以自己处理\",{\"1\":{\"179\":1}}],[\"下一步\",{\"1\":{\"102\":1}}],[\"下午好\",{\"1\":{\"170\":1,\"171\":1}}],[\"下面以加法为例\",{\"1\":{\"418\":1}}],[\"下面以式子\",{\"1\":{\"37\":1}}],[\"下面是\",{\"1\":{\"372\":1}}],[\"下面是相应的源代码\",{\"1\":{\"322\":1}}],[\"下面的例子\",{\"1\":{\"332\":1}}],[\"下面我们逐一解释\",{\"1\":{\"392\":1}}],[\"下面我们用我们的汇编写一小段程序\",{\"1\":{\"339\":1}}],[\"下面我们来看一段使用了\",{\"1\":{\"282\":1}}],[\"下面我们试着通过删除公理的方法来寻找反例\",{\"1\":{\"76\":1}}],[\"下面我们需要证明对于任意两个自然数\",{\"1\":{\"49\":1,\"65\":1}}],[\"下面我将阐述为什么每条公理都是必须的\",{\"1\":{\"73\":1}}],[\"下面证明乘法消去律\",{\"1\":{\"72\":1}}],[\"下面证明乘法结合律\",{\"1\":{\"71\":1}}],[\"下面证明乘法分配律\",{\"1\":{\"70\":1}}],[\"下面证明乘法交换律\",{\"1\":{\"69\":1}}],[\"下面证明加法消去律\",{\"1\":{\"55\":1}}],[\"下面证明加法结合律\",{\"1\":{\"54\":1}}],[\"下面证明加法交换律\",{\"1\":{\"53\":1}}],[\"下文用\",{\"1\":{\"47\":1}}],[\"下的实践是\",{\"1\":{\"31\":1}}],[\"下载错误查看\",{\"1\":{\"8\":1}}],[\"这也是我自己的感慨吧\",{\"1\":{\"429\":1}}],[\"这也意味着一元运算符的优先级总是高于多元运算符\",{\"1\":{\"403\":1}}],[\"这部分对于整个编译器的编写其实是十分重要的\",{\"1\":{\"426\":1}}],[\"这部分也将同时解析参数本身\",{\"1\":{\"403\":1}}],[\"这次是后缀形式的\",{\"1\":{\"419\":1}}],[\"这包括\",{\"1\":{\"417\":1}}],[\"这和第三章\",{\"1\":{\"406\":1}}],[\"这章讲解语句的解析\",{\"1\":{\"391\":1}}],[\"这两行代码起的就是这个作用\",{\"1\":{\"386\":1}}],[\"这两个角色共同决定了实际进行的处理\",{\"1\":{\"303\":1}}],[\"这段代码线性地遍历所有标识符\",{\"1\":{\"384\":1}}],[\"这段示例程序的功能是让电脑玩\",{\"1\":{\"282\":1}}],[\"这么做的原因是\",{\"1\":{\"384\":1}}],[\"这么做的理由有两点\",{\"1\":{\"320\":1}}],[\"这相当于是整个函数定义的语法解析的框架\",{\"1\":{\"384\":1}}],[\"这点在后面的语法分析器我们就能体会\",{\"1\":{\"342\":1}}],[\"这点复杂度还是不算什么的\",{\"1\":{\"314\":1}}],[\"这后生成的目标代码便是我们的指令集\",{\"1\":{\"321\":1}}],[\"这意味着我们可以像运行脚本一样去运行\",{\"1\":{\"320\":1}}],[\"这意味着我们可以轻松地替换观察者或被观察者\",{\"1\":{\"254\":1}}],[\"这篇博客并没有使用诸如\",{\"1\":{\"317\":1}}],[\"这篇文章将带你走进闭包的奇妙世界\",{\"1\":{\"98\":1}}],[\"这些就是我们要支持的标记符\",{\"1\":{\"345\":1}}],[\"这些工具允许我们通过正则表达式来识别标记\",{\"1\":{\"344\":1}}],[\"这些函数就是可用的\",{\"1\":{\"338\":1}}],[\"这些函数的二进制代码就被编译进了我们的编译器\",{\"1\":{\"338\":1}}],[\"这些指令只接受一个参数\",{\"1\":{\"328\":1}}],[\"这些指令的顺序安排是有意的\",{\"1\":{\"327\":1}}],[\"这些理论试图教会我们如何用通用的方法来自动解决问题\",{\"1\":{\"314\":1}}],[\"这些题目要么是因为答案太大\",{\"1\":{\"36\":1}}],[\"这其中最主要的原因是\",{\"1\":{\"314\":1}}],[\"这一章\",{\"1\":{\"388\":1}}],[\"这一系列教程将带你从头编写一个\",{\"1\":{\"312\":1}}],[\"这一功能的类\",{\"1\":{\"155\":1}}],[\"这是整个编译器的最后一部分\",{\"1\":{\"401\":1}}],[\"这是上一章的\",{\"1\":{\"381\":1}}],[\"这是正常的\",{\"1\":{\"355\":1}}],[\"这是汇编中最难理解的部分\",{\"1\":{\"332\":1}}],[\"这是我们要支持的全部指令\",{\"1\":{\"327\":1}}],[\"这是\",{\"1\":{\"320\":1,\"323\":1,\"416\":1}}],[\"这是一种稍微有些笨的策略\",{\"1\":{\"282\":1}}],[\"这是因为\",{\"1\":{\"384\":1}}],[\"这是因为在\",{\"1\":{\"245\":1}}],[\"这是因为只有\",{\"1\":{\"164\":1}}],[\"这可能会导致被观察对象再次通知所有观察者\",{\"1\":{\"256\":1}}],[\"这可能吗\",{\"1\":{\"92\":1}}],[\"这就意味着表达式\",{\"1\":{\"402\":1}}],[\"这就用到了上一章中提到的\",{\"1\":{\"363\":1}}],[\"这就涉及到编译器\",{\"1\":{\"346\":1}}],[\"这就需要事先将这个位置信息存储起来\",{\"1\":{\"332\":1}}],[\"这就像我们可以自由选择香草味冰激凌\",{\"1\":{\"205\":1}}],[\"这就体现了它们之间的一致性\",{\"1\":{\"202\":1}}],[\"这就是开闭原则\",{\"1\":{\"305\":1}}],[\"这就是所谓的里氏替换原则\",{\"1\":{\"209\":1}}],[\"这就是接口\",{\"1\":{\"202\":1}}],[\"这就是\",{\"1\":{\"155\":1,\"179\":1,\"305\":2}}],[\"这就是为了增加新功能而产生的层次结构\",{\"1\":{\"151\":1}}],[\"这就是主动让出\",{\"1\":{\"92\":1}}],[\"这时\",{\"1\":{\"134\":1,\"164\":1,\"176\":1,\"239\":1,\"245\":1,\"286\":1,\"307\":1}}],[\"这\",{\"1\":{\"133\":1,\"244\":2}}],[\"这并不是事情的全貌\",{\"1\":{\"90\":1}}],[\"这并不是什么缺陷\",{\"1\":{\"89\":1}}],[\"这个\",{\"1\":{\"346\":2}}],[\"这个顺序要特别注意\",{\"1\":{\"337\":1}}],[\"这个主题\",{\"1\":{\"308\":1}}],[\"这个gil全局解释器锁实际上把所有线程的执行代码都给上了锁\",{\"1\":{\"90\":1}}],[\"这个图满足如下性质\",{\"1\":{\"76\":1}}],[\"这实际上是符合客观逻辑的\",{\"1\":{\"89\":1}}],[\"这与\",{\"1\":{\"75\":1}}],[\"这究竟是为什么呢\",{\"1\":{\"73\":1}}],[\"这违背了\",{\"1\":{\"72\":1}}],[\"这样你就不需要重复造轮子\",{\"1\":{\"428\":1}}],[\"这样你就能用\",{\"1\":{\"31\":1}}],[\"这样它就成了全局的常量了\",{\"1\":{\"374\":1}}],[\"这样当源代码中出现关键字时\",{\"1\":{\"354\":1}}],[\"这样我们就有了一个最简单的编译器\",{\"1\":{\"322\":1}}],[\"这样做的主要原因是为了简化虚拟机的实现\",{\"1\":{\"329\":1}}],[\"这样做的缺点是\",{\"1\":{\"308\":1}}],[\"这样做的好处是请求的发送者和接收者解耦\",{\"1\":{\"181\":1}}],[\"这样看起来程序好像变复杂了\",{\"1\":{\"285\":1}}],[\"这样可以确保逻辑的一致性和可维护性\",{\"1\":{\"243\":1}}],[\"这样\",{\"1\":{\"202\":1,\"203\":1,\"239\":1,\"298\":1,\"308\":1}}],[\"这样很容易使类的层次结构变得复杂\",{\"1\":{\"153\":1}}],[\"这样一来\",{\"1\":{\"133\":1,\"163\":1}}],[\"这样的设计可能显得有些过于复杂\",{\"1\":{\"131\":1}}],[\"这样子类可以决定实例化哪个类\",{\"1\":{\"129\":1}}],[\"这样在扩展功能时\",{\"1\":{\"107\":1}}],[\"这样就构成了一个小小的类层次结构\",{\"1\":{\"151\":1}}],[\"这样就定义了自然数\",{\"1\":{\"47\":1}}],[\"这样就解决了类型名长的缺点\",{\"1\":{\"40\":1}}],[\"这样使用的时候\",{\"1\":{\"40\":1}}],[\"这种顺序的唯一作用就是在打印调试信息时更加方便\",{\"1\":{\"327\":1}}],[\"这种消息分发的方式一般被称为双重分发\",{\"1\":{\"303\":1}}],[\"这种责任被称为\",{\"1\":{\"295\":1}}],[\"这种一致性确保了委托模式的灵活性和可维护性\",{\"1\":{\"210\":1}}],[\"这种情况下\",{\"1\":{\"179\":1}}],[\"这种设计方式提高了系统的灵活性和可扩展性\",{\"1\":{\"175\":1}}],[\"这种职责分离使得代码更加清晰\",{\"1\":{\"174\":1}}],[\"这种层次结构并非用于方便我们增加新的方法\",{\"1\":{\"152\":1}}],[\"这种模式通过组合而不是继承来实现功能的扩展\",{\"1\":{\"149\":1}}],[\"这种主动让出型的调度方式更为高效\",{\"1\":{\"91\":1}}],[\"这种处理方式是在画蛇添足\",{\"1\":{\"90\":1}}],[\"这种异步编程方式被广大开发者所认可\",{\"1\":{\"90\":1}}],[\"这种写法的式子依旧太长\",{\"1\":{\"39\":1}}],[\"这种方法可以减少观察者对被观察对象的依赖\",{\"1\":{\"257\":1}}],[\"这种方法有效地解决了直接取模的忘记取模的漏洞\",{\"1\":{\"39\":1}}],[\"这种方法是直接取模\",{\"1\":{\"38\":1}}],[\"这便是本文写作的背景\",{\"1\":{\"35\":1}}],[\"这中间就会导致\",{\"1\":{\"31\":1}}],[\"这里就不多作解释\",{\"1\":{\"416\":1}}],[\"这里\",{\"1\":{\"393\":1,\"414\":1}}],[\"这里最为重要的一点是\",{\"1\":{\"383\":1}}],[\"这里不再多说\",{\"1\":{\"364\":1}}],[\"这里会有一个疑问\",{\"1\":{\"363\":1}}],[\"这里我简单介绍一下\",{\"1\":{\"361\":1}}],[\"这里我们解析的就是类似\",{\"1\":{\"413\":1}}],[\"这里我们就能看到\",{\"1\":{\"409\":1}}],[\"这里我们就采用第二种方法\",{\"1\":{\"354\":1}}],[\"这里我们讲解其中的一些细节\",{\"1\":{\"373\":1}}],[\"这里我们要额外介绍\",{\"1\":{\"352\":1}}],[\"这里我们要为我们的虚拟机构建自己的指令集\",{\"1\":{\"327\":1}}],[\"这里我们首先要了解的是当参数调用时\",{\"1\":{\"336\":1}}],[\"这里我们约定\",{\"1\":{\"332\":1}}],[\"这里我们把\",{\"1\":{\"332\":1}}],[\"这里我们只实现两个最简单的条件判断\",{\"1\":{\"331\":1}}],[\"这里这样写的目的是装b\",{\"1\":{\"350\":1}}],[\"这里要说明这样一个观点\",{\"1\":{\"426\":1}}],[\"这里要注意的是在ascii码中\",{\"1\":{\"350\":1}}],[\"这里要解释的一点是\",{\"1\":{\"328\":1}}],[\"这里解释一下具体的含义\",{\"1\":{\"349\":1}}],[\"这里注意的是\",{\"1\":{\"344\":1}}],[\"这里需要的是注意每个函数的作用\",{\"1\":{\"322\":1}}],[\"这里有一个单独用于解析\",{\"1\":{\"322\":1}}],[\"这里也出现了可替换性\",{\"0\":{\"254\":1}}],[\"这里的一个问题是\",{\"1\":{\"346\":1}}],[\"这里的原理是\",{\"1\":{\"338\":1}}],[\"这里的数据可以是代码\",{\"1\":{\"325\":1}}],[\"这里的类的层次结构并非用于增加功能\",{\"1\":{\"152\":1}}],[\"这里的finally\",{\"1\":{\"90\":1}}],[\"这里其实也存在层次结构\",{\"1\":{\"152\":1}}],[\"这里说的\",{\"1\":{\"133\":1}}],[\"这里将目录修改为目标目录\",{\"1\":{\"21\":1}}],[\"这里是所有详细的教程和指南\",{\"1\":{\"101\":1}}],[\"这里是所有与技术相关的文章\",{\"1\":{\"34\":1}}],[\"这里是所有个人感想\",{\"1\":{\"2\":1}}],[\"这里是推荐的书籍\",{\"1\":{\"4\":1}}],[\"这里是你参与或开发的项目介绍和进展\",{\"1\":{\"3\":1}}],[\"等工具\",{\"1\":{\"428\":1}}],[\"等工具来编写\",{\"1\":{\"317\":1}}],[\"等指令\",{\"1\":{\"328\":1}}],[\"等等知识\",{\"1\":{\"427\":1}}],[\"等等\",{\"1\":{\"314\":1,\"345\":1,\"406\":1}}],[\"等待显示序列号\",{\"1\":{\"102\":1}}],[\"等待提示\",{\"1\":{\"102\":1}}],[\"等函数\",{\"1\":{\"40\":1}}],[\"等\",{\"1\":{\"31\":1,\"317\":1,\"345\":1,\"349\":1,\"351\":1,\"354\":1}}],[\"服务本体\",{\"1\":{\"31\":1}}],[\"0xffff\",{\"1\":{\"411\":1}}],[\"0x123\",{\"1\":{\"350\":1}}],[\"017\",{\"1\":{\"350\":1}}],[\"0<=x\",{\"1\":{\"40\":1}}],[\"0\",{\"0\":{\"312\":1},\"1\":{\"29\":1,\"90\":1,\"91\":1,\"92\":17,\"156\":1,\"160\":1,\"181\":1,\"182\":1,\"189\":1,\"193\":3,\"199\":4,\"232\":2,\"251\":3,\"252\":2,\"273\":1,\"277\":1,\"282\":14,\"292\":2,\"300\":2,\"301\":3,\"312\":2,\"320\":1,\"322\":7,\"323\":1,\"325\":3,\"326\":2,\"328\":1,\"338\":1,\"339\":2,\"341\":1,\"348\":1,\"349\":1,\"350\":11,\"351\":1,\"352\":1,\"359\":1,\"365\":8,\"369\":1,\"372\":1,\"374\":1,\"380\":1,\"385\":1,\"391\":1,\"401\":1,\"404\":2,\"406\":2,\"410\":4,\"412\":1,\"425\":1}}],[\"06\",{\"1\":{\"29\":2}}],[\"遵循开闭原则\",{\"1\":{\"198\":1}}],[\"遵循行为一致性\",{\"1\":{\"110\":1}}],[\"遵循契约\",{\"1\":{\"110\":1}}],[\"遵循单一职责原则\",{\"1\":{\"107\":1}}],[\"遵循\",{\"1\":{\"29\":1}}],[\"2|\",{\"1\":{\"402\":1}}],[\"2+3\",{\"1\":{\"402\":1}}],[\"2+3的值\",{\"1\":{\"402\":1}}],[\"2+\",{\"1\":{\"336\":2,\"383\":2}}],[\"2^32\",{\"1\":{\"325\":1}}],[\"22\",{\"1\":{\"252\":2}}],[\"26\",{\"1\":{\"252\":2}}],[\"264\",{\"1\":{\"182\":1}}],[\"256\",{\"1\":{\"322\":1,\"325\":1}}],[\"25\",{\"1\":{\"252\":2}}],[\"297\",{\"1\":{\"182\":1}}],[\"28\",{\"1\":{\"92\":1,\"252\":2}}],[\"2014\",{\"1\":{\"401\":1}}],[\"2016\",{\"1\":{\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"425\":1}}],[\"2015\",{\"1\":{\"320\":1,\"323\":1,\"341\":1}}],[\"2017\",{\"1\":{\"226\":1}}],[\"20\",{\"1\":{\"244\":1,\"251\":1,\"252\":2,\"339\":1,\"373\":1,\"402\":2}}],[\"20000\",{\"1\":{\"192\":1,\"193\":2,\"300\":1,\"301\":2}}],[\"200\",{\"1\":{\"181\":1,\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"208\",{\"1\":{\"89\":1,\"93\":1}}],[\"2024\",{\"1\":{\"29\":2}}],[\"2\",{\"1\":{\"31\":1,\"44\":1,\"91\":1,\"92\":3,\"181\":1,\"244\":1,\"252\":2,\"282\":3,\"312\":1,\"320\":2,\"323\":17,\"332\":2,\"336\":2,\"338\":4,\"341\":3,\"342\":2,\"355\":1,\"359\":2,\"362\":2,\"369\":7,\"380\":7,\"383\":2,\"386\":1,\"391\":3,\"401\":14,\"402\":7,\"406\":1,\"425\":2}}],[\"231\",{\"1\":{\"182\":1}}],[\"23\",{\"1\":{\"29\":2}}],[\"居然把路径藏在这里\",{\"0\":{\"29\":1},\"1\":{\"28\":1}}],[\"|add\",{\"1\":{\"418\":1}}],[\"|10\",{\"1\":{\"362\":1}}],[\"|9\",{\"1\":{\"362\":1}}],[\"|8\",{\"1\":{\"362\":1}}],[\"|5\",{\"1\":{\"362\":1}}],[\"|4\",{\"1\":{\"362\":1}}],[\"|<\",{\"1\":{\"349\":1,\"386\":1}}],[\"|token|hash|name|type|class|value|btype|bclass|bvalue|\",{\"1\":{\"349\":1}}],[\"|你好\",{\"1\":{\"293\":5}}],[\"||\",{\"1\":{\"200\":6,\"325\":6,\"349\":5,\"350\":3,\"351\":1,\"353\":9,\"365\":1,\"386\":1,\"407\":1,\"409\":1,\"413\":1,\"415\":1,\"417\":2}}],[\"|+\",{\"1\":{\"200\":2,\"325\":3,\"402\":9}}],[\"|hello|\",{\"1\":{\"200\":1}}],[\"|hello\",{\"1\":{\"161\":7,\"293\":5}}],[\"|`\",{\"1\":{\"160\":1,\"292\":1}}],[\"|\",{\"0\":{\"29\":1},\"1\":{\"28\":1,\"161\":7,\"199\":2,\"200\":2,\"273\":1,\"277\":1,\"293\":10,\"325\":4,\"336\":10,\"337\":1,\"343\":4,\"353\":3,\"361\":6,\"364\":5,\"370\":7,\"373\":2,\"381\":5,\"383\":9,\"384\":1,\"402\":12,\"418\":4}}],[\"踩坑记录\",{\"0\":{\"29\":1,\"30\":1},\"1\":{\"28\":1}}],[\"续订泛域名证书\",{\"1\":{\"25\":1}}],[\"使我们能直接使用编译器\",{\"1\":{\"325\":1}}],[\"使一个类的实例化延迟到其子类\",{\"1\":{\"220\":1}}],[\"使代码更易于维护和理解\",{\"1\":{\"169\":1}}],[\"使它们可以独立变化\",{\"1\":{\"149\":1}}],[\"使得代码更清晰\",{\"1\":{\"299\":1}}],[\"使得代码更加清晰\",{\"1\":{\"281\":1}}],[\"使得对象的创建更加灵活\",{\"1\":{\"264\":1}}],[\"使得客户端代码更加简洁和易读\",{\"1\":{\"230\":1}}],[\"使得客户端代码可以更容易地使用子系统的功能\",{\"1\":{\"214\":1}}],[\"使得客户端代码不需要了解子系统的内部细节\",{\"1\":{\"213\":1}}],[\"使得每一层只关注自己的职责\",{\"1\":{\"213\":1}}],[\"使得在设计时可以决定构建的步骤和逻辑\",{\"1\":{\"175\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"169\":1}}],[\"使得系统功能模块相对独立\",{\"1\":{\"113\":1}}],[\"使得函数\",{\"1\":{\"91\":1}}],[\"使得一段时间内只有一个线程可以操作这个资源\",{\"1\":{\"90\":1}}],[\"使flask支持\",{\"0\":{\"24\":1}}],[\"使用了单例模式\",{\"1\":{\"282\":1}}],[\"使用了id卡`\",{\"1\":{\"222\":1}}],[\"使用迭代器模式有以下几个优点\",{\"1\":{\"230\":1}}],[\"使用此设计模式的理由\",{\"0\":{\"149\":1,\"187\":1,\"281\":1}}],[\"使用委托这种弱关联关系可以很方便地整体替换算法\",{\"1\":{\"285\":1}}],[\"使用委托\",{\"1\":{\"143\":1}}],[\"使用继承\",{\"1\":{\"143\":1}}],[\"使用继承的方式\",{\"1\":{\"124\":1}}],[\"使用抽象工厂模式\",{\"1\":{\"131\":1}}],[\"使用抽象类和接口\",{\"1\":{\"107\":1,\"110\":1}}],[\"使用多个专门的接口\",{\"1\":{\"125\":1}}],[\"使用多个专门的接口比使用单个通用接口要好得多\",{\"1\":{\"118\":1}}],[\"使用聚合\",{\"1\":{\"123\":1}}],[\"使用组合的方式\",{\"1\":{\"124\":1}}],[\"使用组合\",{\"1\":{\"123\":1}}],[\"使用依赖注入\",{\"1\":{\"121\":1}}],[\"使用工厂模式创建对象\",{\"1\":{\"120\":1}}],[\"使用接口和抽象类\",{\"1\":{\"120\":1}}],[\"使用门面模式\",{\"1\":{\"114\":1}}],[\"使用设计模式\",{\"1\":{\"107\":1}}],[\"使用await关键字让出使用权\",{\"1\":{\"92\":1}}],[\"使用权\",{\"1\":{\"92\":1}}],[\"使用capacitor和ionic将vue项目迁移到mobile端\",{\"0\":{\"84\":1}}],[\"使用docker\",{\"1\":{\"25\":1}}],[\"使用\",{\"1\":{\"16\":1,\"22\":2,\"31\":1,\"86\":1,\"87\":1,\"92\":1,\"163\":1,\"180\":1,\"187\":1,\"205\":1,\"221\":1,\"264\":1,\"285\":1,\"306\":1}}],[\"重写的代码历时一周\",{\"1\":{\"315\":1}}],[\"重新定义算法中的某些步骤\",{\"1\":{\"290\":1}}],[\"重构\",{\"1\":{\"116\":1}}],[\"重要的是去理解如何将这些语句编译成汇编代码\",{\"1\":{\"392\":1}}],[\"重要\",{\"1\":{\"87\":1,\"94\":1}}],[\"重启container\",{\"0\":{\"23\":1}}],[\"重定向到automaton\",{\"1\":{\"16\":1,\"22\":2}}],[\"3+\",{\"1\":{\"336\":1,\"383\":1}}],[\"32位系统\",{\"1\":{\"418\":1}}],[\"32\",{\"1\":{\"325\":1,\"339\":1}}],[\"32k\",{\"1\":{\"16\":1}}],[\"3573\",{\"1\":{\"283\":2}}],[\"3572\",{\"1\":{\"283\":1}}],[\"3571\",{\"1\":{\"283\":1}}],[\"3570\",{\"1\":{\"283\":1}}],[\"3569\",{\"1\":{\"283\":1}}],[\"3568\",{\"1\":{\"283\":1}}],[\"3567\",{\"1\":{\"283\":1}}],[\"37\",{\"1\":{\"252\":2}}],[\"31500\",{\"1\":{\"193\":1,\"301\":1}}],[\"363\",{\"1\":{\"182\":1}}],[\"330\",{\"1\":{\"182\":1}}],[\"33\",{\"1\":{\"181\":1,\"182\":1}}],[\"3\",{\"0\":{\"341\":1},\"1\":{\"92\":1,\"152\":1,\"163\":2,\"244\":1,\"252\":2,\"282\":5,\"312\":1,\"320\":1,\"321\":1,\"323\":3,\"332\":2,\"336\":1,\"338\":1,\"341\":14,\"342\":2,\"359\":2,\"362\":2,\"369\":4,\"374\":1,\"376\":1,\"380\":4,\"391\":3,\"393\":1,\"401\":10,\"402\":9,\"406\":1,\"416\":1,\"425\":2}}],[\"396\",{\"1\":{\"182\":1}}],[\"39\",{\"1\":{\"29\":2}}],[\"3049\",{\"1\":{\"283\":8}}],[\"3001\",{\"1\":{\"401\":1}}],[\"30000\",{\"1\":{\"193\":3,\"301\":3}}],[\"300\",{\"1\":{\"181\":1,\"192\":1,\"193\":3,\"300\":1,\"301\":3}}],[\"30\",{\"1\":{\"29\":2,\"244\":1,\"252\":2,\"339\":1}}],[\"301\",{\"1\":{\"22\":2}}],[\"进程的内存会被分成几个段\",{\"1\":{\"325\":1}}],[\"进而当\",{\"1\":{\"53\":3,\"54\":1,\"55\":2,\"59\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":1}}],[\"进而\",{\"1\":{\"51\":1,\"59\":1,\"61\":1,\"63\":1,\"67\":1,\"74\":1}}],[\"进而有\",{\"1\":{\"50\":1,\"66\":1}}],[\"进有\",{\"1\":{\"50\":1,\"51\":1,\"66\":1,\"67\":1}}],[\"进入acme\",{\"1\":{\"20\":1}}],[\"进行编译\",{\"1\":{\"421\":1}}],[\"进行解析的时候\",{\"1\":{\"414\":1}}],[\"进行语法分析\",{\"1\":{\"362\":1}}],[\"进行安装\",{\"1\":{\"102\":1}}],[\"进行包含\",{\"1\":{\"31\":1}}],[\"进行修改\",{\"1\":{\"15\":1}}],[\"进行如下操作\",{\"1\":{\"15\":1}}],[\"申请证书\",{\"0\":{\"20\":1}}],[\"升级为https\",{\"0\":{\"19\":1}}],[\"及函数定义\",{\"1\":{\"373\":1}}],[\"及时进行重构\",{\"1\":{\"116\":1}}],[\"及\",{\"1\":{\"18\":1,\"332\":1,\"338\":1,\"382\":1,\"387\":1,\"405\":1}}],[\"失败\",{\"1\":{\"16\":1,\"22\":2}}],[\"或波浪号\",{\"1\":{\"345\":1}}],[\"或其他线程同步机制\",{\"1\":{\"276\":1}}],[\"或是调试起来十分困难\",{\"1\":{\"429\":1}}],[\"或是重新学习学习汇编相关的知识\",{\"1\":{\"388\":1}}],[\"或是函数的局部变量等\",{\"1\":{\"325\":1}}],[\"或是如果不小心修改了\",{\"1\":{\"176\":1}}],[\"或是要修改具体工厂的\",{\"1\":{\"133\":1}}],[\"或是\",{\"1\":{\"97\":1}}],[\"或者使用更复杂的事件处理机制\",{\"1\":{\"256\":1}}],[\"或者说如果我们把代码中使用基类的地方用它的派生类所代替\",{\"1\":{\"109\":1}}],[\"或者说的更简单一点\",{\"1\":{\"92\":1}}],[\"或者执行过程中要根据变量状态进行一些下游操作\",{\"1\":{\"93\":1}}],[\"或\",{\"1\":{\"16\":1,\"22\":2,\"72\":1,\"314\":1,\"373\":1,\"406\":1,\"419\":1}}],[\"4|\",{\"1\":{\"402\":1}}],[\"4+\",{\"1\":{\"336\":1}}],[\"4g\",{\"1\":{\"325\":1}}],[\"44\",{\"1\":{\"252\":2}}],[\"443\",{\"1\":{\"17\":2,\"22\":3}}],[\"49\",{\"1\":{\"252\":2}}],[\"495\",{\"1\":{\"182\":1}}],[\"46\",{\"1\":{\"252\":2}}],[\"462\",{\"1\":{\"182\":1}}],[\"43\",{\"1\":{\"252\":2}}],[\"404\",{\"1\":{\"433\":1}}],[\"400\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"4096\",{\"1\":{\"16\":1}}],[\"429\",{\"1\":{\"181\":1,\"182\":1}}],[\"4版本的yield\",{\"1\":{\"92\":1}}],[\"4\",{\"0\":{\"359\":1},\"1\":{\"16\":1,\"29\":1,\"133\":1,\"244\":1,\"265\":2,\"312\":1,\"315\":1,\"320\":1,\"322\":1,\"323\":3,\"326\":1,\"336\":1,\"338\":1,\"341\":3,\"342\":2,\"359\":3,\"362\":2,\"369\":3,\"380\":3,\"387\":1,\"391\":2,\"401\":4,\"402\":6,\"418\":1,\"425\":2}}],[\"k\",{\"1\":{\"314\":1,\"317\":1,\"352\":2,\"356\":2,\"363\":1}}],[\"kinds\",{\"1\":{\"350\":1}}],[\"kingsonfu\",{\"1\":{\"32\":1}}],[\"kid\",{\"1\":{\"240\":1,\"241\":3}}],[\"know\",{\"1\":{\"240\":1}}],[\"kcodetime\",{\"1\":{\"45\":1}}],[\"keep\",{\"1\":{\"354\":1}}],[\"keepalive\",{\"1\":{\"16\":1}}],[\"keywords\",{\"1\":{\"354\":1}}],[\"key\",{\"1\":{\"21\":2,\"22\":6,\"215\":1,\"265\":1}}],[\"kts\",{\"1\":{\"8\":1}}],[\"n$\",{\"1\":{\"251\":2}}],[\"n<h1>$\",{\"1\":{\"215\":1}}],[\"num\",{\"1\":{\"345\":1,\"350\":1,\"351\":3,\"361\":1,\"362\":4,\"364\":1,\"365\":3,\"370\":2,\"373\":2,\"374\":3,\"404\":2,\"406\":1,\"412\":2,\"414\":1}}],[\"numbervoid\",{\"1\":{\"322\":1}}],[\"numbergenerator\",{\"1\":{\"251\":17}}],[\"number\",{\"1\":{\"156\":1,\"160\":1,\"181\":18,\"189\":1,\"190\":1,\"191\":2,\"199\":9,\"232\":4,\"251\":9,\"273\":1,\"277\":1,\"282\":4,\"292\":1,\"300\":3,\"342\":5,\"349\":1,\"350\":2,\"406\":1}}],[\"null\",{\"1\":{\"181\":1,\"265\":2,\"273\":3,\"277\":4,\"365\":2}}],[\"n`\",{\"1\":{\"130\":1,\"170\":3,\"215\":3}}],[\"normal\",{\"1\":{\"407\":1}}],[\"now\",{\"1\":{\"405\":1,\"418\":2}}],[\"non\",{\"1\":{\"370\":3,\"381\":3}}],[\"nothing\",{\"1\":{\"322\":2,\"412\":1}}],[\"note\",{\"1\":{\"282\":1,\"373\":1}}],[\"not\",{\"1\":{\"240\":1,\"300\":2,\"322\":2,\"325\":3,\"331\":1,\"348\":1,\"410\":1,\"411\":1,\"418\":1,\"433\":1}}],[\"notifyobservers\",{\"1\":{\"251\":2,\"255\":1}}],[\"notify\",{\"1\":{\"240\":6,\"243\":3}}],[\"nosupport\",{\"1\":{\"181\":5}}],[\"node\",{\"1\":{\"102\":2,\"130\":1,\"144\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1}}],[\"nopush\",{\"1\":{\"16\":1}}],[\"n\",{\"1\":{\"90\":6,\"91\":3,\"92\":12,\"130\":6,\"170\":5,\"215\":1,\"251\":1,\"322\":4,\"325\":3,\"338\":1,\"347\":1,\"348\":1,\"351\":5,\"352\":1,\"365\":2,\"373\":2,\"374\":2,\"375\":1,\"385\":2,\"386\":2,\"406\":2,\"408\":1,\"409\":1,\"413\":1,\"415\":1,\"416\":1,\"420\":1}}],[\"net\",{\"1\":{\"401\":1}}],[\"networks\",{\"1\":{\"17\":2}}],[\"ne\",{\"1\":{\"327\":1,\"337\":1,\"345\":2,\"353\":1,\"414\":1}}],[\"need\",{\"1\":{\"240\":1}}],[\"nexthand2\",{\"1\":{\"282\":3}}],[\"nexthand\",{\"1\":{\"282\":7}}],[\"nexthand1\",{\"1\":{\"282\":3}}],[\"next\",{\"1\":{\"181\":8,\"232\":3,\"233\":1,\"322\":5,\"344\":1,\"346\":2,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"353\":1,\"354\":4,\"365\":3,\"372\":2,\"373\":1,\"374\":4,\"375\":2}}],[\"news\",{\"1\":{\"130\":2}}],[\"new\",{\"1\":{\"121\":2,\"124\":2,\"130\":4,\"143\":3,\"159\":6,\"170\":4,\"181\":7,\"190\":1,\"192\":14,\"199\":9,\"215\":1,\"222\":2,\"232\":6,\"240\":4,\"251\":3,\"265\":4,\"273\":1,\"277\":1,\"282\":7,\"292\":3,\"300\":18,\"332\":1,\"333\":3,\"336\":8,\"349\":1,\"383\":7,\"385\":1}}],[\"newline\",{\"1\":{\"44\":1}}],[\"names\",{\"1\":{\"282\":2}}],[\"name\",{\"1\":{\"16\":2,\"22\":5,\"181\":10,\"189\":3,\"191\":2,\"232\":5,\"240\":3,\"265\":4,\"282\":5,\"300\":4,\"349\":5,\"384\":1,\"385\":2,\"386\":1}}],[\"nginx\",{\"0\":{\"12\":1},\"1\":{\"12\":2,\"13\":1,\"14\":2,\"16\":17,\"17\":10,\"20\":4,\"21\":4,\"22\":15,\"25\":2},\"2\":{\"26\":1}}],[\"xx\",{\"1\":{\"420\":1}}],[\"xxx\",{\"1\":{\"373\":1,\"392\":1}}],[\"xzp740813\",{\"1\":{\"401\":1}}],[\"xc\",{\"1\":{\"339\":2,\"421\":5}}],[\"xor\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"411\":2,\"414\":1,\"418\":4}}],[\"x86\",{\"1\":{\"327\":1,\"328\":2,\"329\":1,\"332\":1,\"340\":1}}],[\"x<p\",{\"1\":{\"40\":1}}],[\"x+y+z\",{\"1\":{\"40\":1}}],[\"x+y\",{\"1\":{\"38\":1}}],[\"x\",{\"1\":{\"16\":1,\"39\":1,\"40\":2,\"350\":2,\"373\":1,\"402\":3,\"412\":2}}],[\"$\",{\"1\":{\"130\":1,\"143\":2,\"170\":2,\"181\":3,\"189\":2,\"190\":1,\"191\":1,\"215\":4,\"240\":4,\"251\":2,\"265\":4,\"273\":1,\"277\":1,\"282\":6,\"300\":4}}],[\"$host$request\",{\"1\":{\"22\":2}}],[\"$http\",{\"1\":{\"16\":3}}],[\"$uri\",{\"1\":{\"16\":6,\"22\":10}}],[\"$body\",{\"1\":{\"16\":1}}],[\"$status\",{\"1\":{\"16\":1}}],[\"$request\",{\"1\":{\"16\":1}}],[\"$remote\",{\"1\":{\"16\":2}}],[\"$time\",{\"1\":{\"16\":1}}],[\"right\",{\"1\":{\"342\":1}}],[\"role\",{\"1\":{\"240\":1}}],[\"row\",{\"1\":{\"199\":9}}],[\"rootdir\",{\"1\":{\"192\":6,\"300\":6}}],[\"root\",{\"1\":{\"16\":2,\"20\":2,\"21\":1,\"22\":3,\"44\":1,\"192\":2,\"193\":21,\"300\":2,\"301\":21}}],[\"random\",{\"1\":{\"251\":1,\"282\":2}}],[\"randomnumbergenerator\",{\"1\":{\"251\":5}}],[\"range\",{\"1\":{\"90\":2,\"92\":1}}],[\"rawclose\",{\"1\":{\"157\":1,\"158\":1,\"160\":1}}],[\"rawprint\",{\"1\":{\"157\":1,\"158\":1,\"160\":1}}],[\"rawopen\",{\"1\":{\"157\":1,\"158\":1,\"160\":1}}],[\"r\",{\"1\":{\"92\":1,\"351\":1}}],[\"run\",{\"1\":{\"16\":1,\"91\":1,\"92\":3}}],[\"remove\",{\"1\":{\"332\":1,\"334\":2}}],[\"remote\",{\"1\":{\"31\":1}}],[\"ret\",{\"1\":{\"332\":9,\"335\":2}}],[\"returns\",{\"1\":{\"421\":1}}],[\"returnret\",{\"1\":{\"335\":1}}],[\"returned\",{\"1\":{\"322\":1}}],[\"return\",{\"0\":{\"395\":1},\"1\":{\"22\":2,\"39\":3,\"40\":4,\"130\":6,\"170\":2,\"181\":11,\"189\":3,\"190\":1,\"191\":2,\"199\":13,\"215\":2,\"222\":4,\"232\":6,\"251\":1,\"265\":3,\"273\":1,\"277\":1,\"282\":12,\"300\":7,\"322\":6,\"325\":3,\"328\":1,\"332\":3,\"338\":2,\"345\":1,\"346\":1,\"349\":3,\"350\":1,\"351\":2,\"352\":1,\"353\":15,\"354\":2,\"365\":11,\"370\":1,\"373\":1,\"381\":1,\"391\":1,\"392\":1,\"395\":6,\"414\":1}}],[\"regex\",{\"1\":{\"317\":1}}],[\"registers\",{\"1\":{\"326\":1}}],[\"registerproduct\",{\"1\":{\"222\":3}}],[\"register\",{\"1\":{\"117\":2,\"265\":4}}],[\"read\",{\"1\":{\"322\":3,\"327\":1,\"338\":3,\"354\":1,\"406\":1}}],[\"readonly\",{\"1\":{\"282\":2}}],[\"real\",{\"1\":{\"240\":1}}],[\"repeat\",{\"1\":{\"265\":3}}],[\"repos\",{\"1\":{\"8\":1}}],[\"repository\",{\"1\":{\"8\":12}}],[\"repositoriesmode\",{\"1\":{\"8\":2}}],[\"repositories\",{\"1\":{\"8\":2}}],[\"received\",{\"1\":{\"240\":1,\"241\":6}}],[\"receivemessage\",{\"1\":{\"240\":2}}],[\"reduce\",{\"1\":{\"189\":1}}],[\"rest\",{\"1\":{\"404\":1}}],[\"restore\",{\"1\":{\"332\":1,\"335\":2}}],[\"resolved\",{\"1\":{\"181\":2,\"182\":16}}],[\"resolve\",{\"1\":{\"181\":6}}],[\"resolver\",{\"1\":{\"16\":2}}],[\"responsibility\",{\"1\":{\"179\":1,\"180\":1,\"181\":1,\"295\":1}}],[\"result\",{\"1\":{\"170\":2,\"282\":1,\"283\":1,\"332\":1,\"418\":1}}],[\"res\",{\"1\":{\"91\":1,\"92\":3}}],[\"reverse\",{\"1\":{\"25\":1}}],[\"release\",{\"1\":{\"90\":1}}],[\"releases\",{\"1\":{\"8\":2}}],[\"reloadcmd\",{\"1\":{\"21\":1}}],[\"rewrite\",{\"1\":{\"16\":1,\"22\":2}}],[\"referer\",{\"1\":{\"16\":1}}],[\"142961332\",{\"1\":{\"401\":1}}],[\"147\",{\"1\":{\"349\":1}}],[\"15\",{\"1\":{\"350\":3,\"402\":2}}],[\"1500\",{\"1\":{\"193\":1,\"301\":1}}],[\"1+\",{\"1\":{\"336\":2,\"383\":2}}],[\"13\",{\"1\":{\"252\":4}}],[\"132\",{\"1\":{\"182\":1}}],[\"123\",{\"1\":{\"350\":1}}],[\"128\",{\"1\":{\"345\":1,\"414\":1}}],[\"12\",{\"1\":{\"244\":1,\"332\":2,\"334\":1}}],[\"198\",{\"1\":{\"182\":1}}],[\"16\",{\"1\":{\"252\":2,\"350\":2}}],[\"165\",{\"1\":{\"182\":1}}],[\"16k\",{\"1\":{\"16\":1}}],[\"18\",{\"1\":{\"92\":1,\"252\":2}}],[\"10+20\",{\"1\":{\"339\":1}}],[\"1024\",{\"1\":{\"322\":1}}],[\"1000\",{\"1\":{\"325\":1}}],[\"10000\",{\"1\":{\"192\":1,\"193\":2,\"282\":1,\"283\":2,\"300\":1,\"301\":2}}],[\"1000000\",{\"1\":{\"90\":2,\"92\":1}}],[\"100\",{\"1\":{\"181\":1,\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"10\",{\"1\":{\"90\":1,\"91\":1,\"92\":6,\"239\":1,\"252\":2,\"323\":1,\"325\":1,\"339\":1,\"341\":1,\"349\":1,\"350\":1,\"365\":1,\"373\":1,\"401\":1,\"406\":1,\"420\":2}}],[\"10s\",{\"1\":{\"16\":1}}],[\"1ll\",{\"1\":{\"39\":1,\"40\":1}}],[\"11\",{\"1\":{\"252\":2,\"323\":1}}],[\"1190000040806239\",{\"1\":{\"97\":1}}],[\"11578073\",{\"1\":{\"32\":1}}],[\"114\",{\"1\":{\"16\":4}}],[\"17\",{\"1\":{\"29\":2,\"92\":1}}],[\"1\",{\"0\":{\"46\":1,\"320\":1},\"1\":{\"16\":1,\"92\":3,\"155\":1,\"181\":1,\"199\":9,\"272\":1,\"274\":1,\"282\":18,\"312\":1,\"320\":3,\"322\":5,\"323\":6,\"325\":3,\"328\":1,\"331\":2,\"332\":3,\"333\":1,\"336\":2,\"338\":7,\"340\":1,\"341\":3,\"349\":1,\"350\":1,\"359\":2,\"362\":1,\"365\":1,\"369\":3,\"373\":3,\"374\":3,\"375\":1,\"380\":3,\"382\":1,\"383\":3,\"385\":2,\"386\":3,\"391\":7,\"393\":1,\"394\":2,\"401\":4,\"402\":1,\"406\":3,\"408\":1,\"409\":1,\"411\":2,\"412\":1,\"413\":1,\"415\":1,\"416\":2,\"417\":2,\"418\":1,\"420\":1,\"425\":2}}],[\"we\",{\"1\":{\"348\":1}}],[\"welcome\",{\"1\":{\"215\":2,\"216\":2}}],[\"web\",{\"1\":{\"86\":1}}],[\"web服务器添加https功能\",{\"1\":{\"25\":1}}],[\"webnet\",{\"1\":{\"17\":2}}],[\"write\",{\"1\":{\"315\":1,\"320\":1,\"322\":1,\"323\":1,\"340\":1,\"341\":1,\"355\":1,\"359\":1,\"369\":1,\"376\":1,\"380\":1,\"387\":1,\"391\":1,\"397\":1,\"421\":1,\"425\":1}}],[\"writer\",{\"1\":{\"215\":13}}],[\"wrapper\",{\"1\":{\"8\":1}}],[\"won\",{\"1\":{\"282\":3}}],[\"wodfan\",{\"1\":{\"92\":2}}],[\"working\",{\"1\":{\"121\":1}}],[\"work\",{\"1\":{\"92\":2,\"121\":3}}],[\"worker\",{\"1\":{\"16\":2,\"121\":9}}],[\"world\",{\"1\":{\"92\":2,\"159\":1,\"161\":1,\"199\":1,\"200\":3,\"232\":1,\"233\":1,\"240\":1,\"265\":3,\"266\":3,\"292\":1,\"293\":5}}],[\"when\",{\"1\":{\"406\":1}}],[\"which\",{\"1\":{\"406\":1}}],[\"white\",{\"1\":{\"365\":1}}],[\"whitespace\",{\"1\":{\"44\":1}}],[\"while\",{\"0\":{\"394\":1},\"1\":{\"232\":1,\"322\":1,\"328\":1,\"345\":1,\"346\":4,\"348\":1,\"349\":3,\"350\":3,\"351\":1,\"352\":1,\"354\":5,\"365\":3,\"370\":3,\"372\":1,\"373\":2,\"374\":1,\"381\":3,\"384\":3,\"385\":2,\"386\":4,\"391\":1,\"392\":1,\"394\":4,\"396\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"414\":2}}],[\"what\",{\"1\":{\"31\":1}}],[\"will\",{\"1\":{\"348\":1}}],[\"with\",{\"1\":{\"90\":3,\"92\":6,\"273\":1,\"274\":1,\"277\":1,\"350\":2,\"392\":1}}],[\"without\",{\"1\":{\"90\":1,\"91\":5,\"92\":15}}],[\"width\",{\"1\":{\"44\":1,\"160\":3,\"292\":3}}],[\"winner\",{\"1\":{\"283\":6}}],[\"winningstrategy\",{\"1\":{\"282\":6}}],[\"wincount++\",{\"1\":{\"282\":1}}],[\"wincount\",{\"1\":{\"282\":2}}],[\"win\",{\"1\":{\"282\":9,\"283\":8}}],[\"windows\",{\"1\":{\"32\":2,\"163\":2}}],[\"win10\",{\"1\":{\"31\":3,\"32\":1}}],[\"wsl$\",{\"1\":{\"32\":3}}],[\"wsl2\",{\"0\":{\"29\":1,\"30\":1},\"1\":{\"28\":1,\"32\":1}}],[\"wsl\",{\"0\":{\"28\":1,\"32\":1},\"1\":{\"31\":4}}],[\"www\",{\"1\":{\"16\":1,\"22\":4,\"32\":1,\"130\":11}}],[\"warning\",{\"1\":{\"265\":2}}],[\"warn\",{\"1\":{\"16\":5,\"22\":5}}],[\"部分\",{\"1\":{\"133\":1,\"187\":1,\"371\":1}}],[\"部分ide默认直接支持\",{\"1\":{\"44\":1}}],[\"部分路径以实际为准\",{\"1\":{\"15\":1}}],[\"部署一个\",{\"1\":{\"12\":1}}],[\"部署\",{\"0\":{\"12\":1},\"2\":{\"27\":1}}],[\"└──\",{\"1\":{\"14\":2}}],[\"lvalue\",{\"1\":{\"365\":12,\"413\":1,\"415\":2}}],[\"lt\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"lc\",{\"1\":{\"327\":1,\"328\":5,\"406\":4,\"408\":1,\"409\":4,\"413\":2,\"415\":1,\"420\":1}}],[\"ll\",{\"1\":{\"314\":1,\"317\":1,\"352\":1}}],[\"left\",{\"1\":{\"342\":1}}],[\"le\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"leaving\",{\"1\":{\"386\":1}}],[\"lea\",{\"0\":{\"336\":1},\"1\":{\"323\":1,\"327\":1,\"336\":2,\"406\":1}}],[\"lev\",{\"0\":{\"335\":1},\"1\":{\"323\":1,\"327\":1,\"332\":2,\"335\":2,\"386\":1,\"395\":2}}],[\"level\",{\"1\":{\"322\":2,\"414\":3}}],[\"lemon\",{\"1\":{\"317\":1}}],[\"lexer\",{\"1\":{\"343\":1}}],[\"lex\",{\"1\":{\"314\":2,\"344\":1}}],[\"legs\",{\"1\":{\"232\":1,\"233\":1}}],[\"length\",{\"1\":{\"160\":1,\"199\":1,\"265\":7,\"292\":1,\"300\":1}}],[\"let\",{\"1\":{\"130\":13,\"156\":1,\"160\":2,\"181\":7,\"192\":7,\"199\":7,\"215\":3,\"251\":3,\"265\":9,\"282\":4,\"292\":3,\"300\":9,\"317\":1}}],[\"letsencrypt\",{\"1\":{\"17\":1,\"22\":6}}],[\"lf\",{\"1\":{\"44\":1}}],[\"lan\",{\"1\":{\"345\":1,\"353\":1,\"414\":1,\"417\":3}}],[\"lalr\",{\"1\":{\"314\":1}}],[\"last++\",{\"1\":{\"232\":1}}],[\"last\",{\"1\":{\"232\":3,\"345\":1,\"346\":1,\"349\":4,\"351\":2}}],[\"latex\",{\"1\":{\"192\":1,\"193\":2,\"300\":1,\"301\":2}}],[\"latest\",{\"1\":{\"17\":1}}],[\"large\",{\"1\":{\"16\":1}}],[\"lookahead\",{\"1\":{\"352\":1,\"356\":1}}],[\"look\",{\"1\":{\"349\":1}}],[\"loop\",{\"1\":{\"91\":3,\"92\":9}}],[\"lor\",{\"1\":{\"345\":1,\"353\":1,\"414\":1,\"417\":2}}],[\"load\",{\"1\":{\"328\":3,\"336\":1,\"406\":1}}],[\"low\",{\"1\":{\"325\":1,\"336\":1,\"383\":1}}],[\"lotabout\",{\"1\":{\"320\":1,\"322\":1,\"323\":1,\"340\":1,\"341\":1,\"355\":1,\"359\":1,\"369\":1,\"376\":1,\"380\":1,\"387\":1,\"391\":1,\"397\":1,\"421\":1,\"425\":1}}],[\"losecount++\",{\"1\":{\"282\":1}}],[\"losecount\",{\"1\":{\"282\":2}}],[\"lose\",{\"1\":{\"282\":4,\"283\":8}}],[\"long\",{\"1\":{\"232\":1,\"233\":1,\"339\":4}}],[\"loc\",{\"1\":{\"345\":1,\"384\":1,\"385\":2,\"386\":2,\"406\":1,\"414\":1}}],[\"locking\",{\"1\":{\"276\":1}}],[\"lock\",{\"1\":{\"90\":8,\"91\":5,\"92\":23,\"277\":4}}],[\"locating\",{\"1\":{\"32\":1}}],[\"location\",{\"1\":{\"16\":3,\"22\":6}}],[\"local\",{\"1\":{\"16\":1,\"336\":2,\"383\":5,\"384\":2,\"385\":1,\"386\":11,\"406\":1}}],[\"logic\",{\"1\":{\"417\":2}}],[\"loginframe\",{\"1\":{\"245\":2}}],[\"login\",{\"1\":{\"117\":2}}],[\"log\",{\"1\":{\"14\":2,\"16\":29,\"17\":1,\"22\":30,\"121\":1,\"124\":4,\"130\":2,\"143\":2,\"160\":2,\"170\":4,\"181\":2,\"189\":1,\"191\":1,\"192\":2,\"199\":1,\"215\":2,\"222\":1,\"232\":1,\"240\":3,\"251\":2,\"265\":8,\"273\":2,\"277\":1,\"282\":6,\"292\":5,\"300\":4}}],[\"logs\",{\"1\":{\"14\":1,\"17\":1}}],[\"literal\",{\"1\":{\"351\":2}}],[\"li\",{\"1\":{\"327\":1,\"328\":5,\"406\":4,\"408\":1,\"409\":4,\"413\":2,\"415\":2,\"420\":1}}],[\"lightning\",{\"1\":{\"240\":1,\"241\":3}}],[\"liskov\",{\"1\":{\"209\":1}}],[\"listvisitor\",{\"1\":{\"300\":6,\"304\":1}}],[\"listpicture\",{\"1\":{\"134\":1}}],[\"listpage\",{\"1\":{\"130\":5}}],[\"listtray\",{\"1\":{\"130\":5}}],[\"listlink\",{\"1\":{\"130\":5}}],[\"listfactory\",{\"1\":{\"130\":5,\"134\":2}}],[\"listen\",{\"1\":{\"16\":2,\"22\":5}}],[\"list\",{\"1\":{\"7\":1}}],[\"limit\",{\"1\":{\"181\":5}}],[\"limitsupport\",{\"1\":{\"181\":7}}],[\"li><li>再见\",{\"1\":{\"171\":1}}],[\"li><li>晚安\",{\"1\":{\"171\":1}}],[\"li><li>下午好\",{\"1\":{\"171\":1}}],[\"li><\",{\"1\":{\"171\":2}}],[\"li>`\",{\"1\":{\"170\":1}}],[\"li>\",{\"1\":{\"130\":10}}],[\"license\",{\"1\":{\"102\":2}}],[\"liuyue$\",{\"1\":{\"92\":4}}],[\"liuyue\",{\"1\":{\"92\":6}}],[\"linkpage\",{\"1\":{\"130\":1}}],[\"link\",{\"1\":{\"130\":8,\"133\":1,\"215\":2}}],[\"linesecond\",{\"1\":{\"404\":1}}],[\"linelen\",{\"1\":{\"365\":2}}],[\"linecap\",{\"1\":{\"365\":2}}],[\"linear\",{\"1\":{\"349\":1}}],[\"line\",{\"1\":{\"44\":1,\"292\":4,\"322\":3,\"365\":3,\"373\":2,\"374\":2,\"375\":1,\"385\":2,\"386\":2,\"404\":3,\"406\":2,\"408\":1,\"409\":1,\"413\":1,\"415\":1,\"416\":1,\"420\":1}}],[\"linux\",{\"1\":{\"31\":2}}],[\"like\",{\"1\":{\"21\":1,\"374\":1,\"386\":1}}],[\"live\",{\"1\":{\"17\":1,\"22\":6}}],[\"libgen\",{\"1\":{\"4\":2}}],[\"lib\",{\"1\":{\"4\":1,\"32\":2}}],[\"library\",{\"1\":{\"4\":2,\"354\":1}}],[\"yet\",{\"1\":{\"322\":1}}],[\"yacc\",{\"1\":{\"314\":2,\"428\":1}}],[\"yahoo<\",{\"1\":{\"130\":2}}],[\"yahoo\",{\"1\":{\"130\":12}}],[\"yuki<\",{\"1\":{\"216\":1}}],[\"yukiのページへようこそ\",{\"1\":{\"216\":1}}],[\"yuki\",{\"1\":{\"192\":5,\"193\":3,\"215\":1,\"216\":2,\"300\":5,\"301\":3}}],[\"y\",{\"1\":{\"39\":1,\"40\":1}}],[\"yml\",{\"1\":{\"14\":1,\"17\":1}}],[\"your\",{\"1\":{\"45\":1}}],[\"you\",{\"1\":{\"7\":1}}],[\"bsion\",{\"1\":{\"428\":1}}],[\"bss\",{\"1\":{\"325\":2}}],[\"bxxx\",{\"1\":{\"384\":1,\"385\":1}}],[\"bxxxx\",{\"1\":{\"349\":1}}],[\"bnf\",{\"1\":{\"361\":1,\"363\":3,\"366\":1,\"370\":1,\"428\":2}}],[\"bnf什么的\",{\"1\":{\"314\":1}}],[\"bvalue\",{\"1\":{\"349\":2,\"384\":1,\"385\":1,\"386\":1}}],[\"btype\",{\"1\":{\"349\":2,\"384\":1,\"385\":1,\"386\":1}}],[\"bclass\",{\"1\":{\"349\":2,\"384\":1,\"385\":1,\"386\":1}}],[\"brak\",{\"1\":{\"345\":1,\"353\":1,\"414\":2,\"420\":2}}],[\"bracket\",{\"1\":{\"342\":2}}],[\"bridge\",{\"0\":{\"148\":1},\"1\":{\"145\":1,\"148\":1,\"149\":1,\"153\":1,\"161\":1,\"163\":2}}],[\"bp+\",{\"1\":{\"336\":1,\"383\":1}}],[\"bp\",{\"1\":{\"326\":3,\"333\":2,\"335\":2,\"336\":9,\"383\":7,\"385\":5,\"386\":2,\"406\":2}}],[\"bitwise\",{\"1\":{\"411\":1,\"418\":1}}],[\"bison\",{\"1\":{\"314\":1,\"315\":1,\"317\":1,\"321\":1}}],[\"bible\",{\"1\":{\"232\":1,\"233\":1}}],[\"binary\",{\"1\":{\"414\":1}}],[\"bin\",{\"1\":{\"192\":1,\"193\":6,\"300\":1,\"301\":6}}],[\"bindir\",{\"1\":{\"192\":4,\"300\":4}}],[\"b4\",{\"1\":{\"199\":2,\"202\":1}}],[\"b3\",{\"1\":{\"199\":2}}],[\"b2\",{\"1\":{\"199\":3}}],[\"b1\",{\"1\":{\"199\":3}}],[\"body\",{\"1\":{\"370\":2,\"373\":1,\"381\":2,\"382\":1,\"384\":1,\"386\":1}}],[\"body><\",{\"1\":{\"130\":2,\"170\":1,\"171\":1,\"215\":1,\"216\":1}}],[\"box\",{\"1\":{\"265\":4}}],[\"books\",{\"1\":{\"232\":4}}],[\"bookshelfiterator\",{\"1\":{\"232\":5,\"233\":1}}],[\"bookshelf\",{\"1\":{\"232\":21,\"233\":3,\"234\":1}}],[\"book\",{\"1\":{\"232\":19,\"233\":1}}],[\"boolean\",{\"1\":{\"181\":4,\"232\":2,\"282\":5}}],[\"borderchar\",{\"1\":{\"199\":4}}],[\"border\",{\"1\":{\"199\":8,\"202\":2}}],[\"bob使用了id卡\",{\"1\":{\"223\":1}}],[\"bob\",{\"1\":{\"181\":3,\"182\":4,\"222\":1}}],[\"ba\",{\"1\":{\"393\":1}}],[\"bad\",{\"1\":{\"373\":1,\"374\":2,\"385\":1,\"386\":1,\"406\":1,\"408\":1,\"409\":1,\"413\":1,\"415\":1}}],[\"basetype\",{\"1\":{\"373\":4,\"386\":2}}],[\"banner\",{\"1\":{\"142\":1,\"143\":13}}],[\"balance\",{\"1\":{\"90\":12,\"91\":7,\"92\":32}}],[\"backend\",{\"1\":{\"31\":1}}],[\"behaviour\",{\"1\":{\"406\":1}}],[\"because\",{\"1\":{\"348\":1}}],[\"bet\",{\"1\":{\"282\":3}}],[\"be\",{\"1\":{\"181\":1,\"182\":3,\"373\":1,\"406\":1}}],[\"bepinex\",{\"1\":{\"43\":1}}],[\"below\",{\"1\":{\"21\":1}}],[\"b+p\",{\"1\":{\"39\":1}}],[\"b\",{\"1\":{\"39\":5,\"244\":7,\"322\":1,\"340\":1,\"355\":1,\"373\":1,\"374\":1,\"376\":1,\"383\":2,\"387\":1,\"393\":8,\"394\":4,\"396\":1,\"397\":1,\"416\":1,\"417\":4,\"421\":1}}],[\"by\",{\"1\":{\"29\":1,\"181\":1,\"182\":13,\"240\":1,\"241\":6}}],[\"bytes\",{\"1\":{\"16\":1}}],[\"blog\",{\"1\":{\"14\":3,\"16\":4,\"17\":2,\"22\":7,\"401\":1}}],[\"but\",{\"1\":{\"406\":1}}],[\"button\",{\"1\":{\"7\":1}}],[\"buf\",{\"1\":{\"199\":3}}],[\"buffers\",{\"1\":{\"16\":1}}],[\"buffer\",{\"1\":{\"16\":1,\"130\":21,\"160\":4,\"170\":19}}],[\"bug\",{\"0\":{\"87\":1},\"1\":{\"133\":1,\"243\":3,\"286\":1}}],[\"builder\",{\"0\":{\"168\":1,\"169\":1},\"1\":{\"135\":1,\"169\":3,\"170\":24,\"171\":1,\"174\":2,\"175\":1,\"176\":7,\"275\":1}}],[\"build\",{\"1\":{\"17\":1,\"18\":1,\"21\":1,\"23\":1,\"86\":2,\"317\":1}}],[\"bupt\",{\"1\":{\"12\":1,\"16\":4,\"18\":3,\"20\":2,\"21\":4,\"22\":14}}],[\"│\",{\"1\":{\"14\":6}}],[\"├──\",{\"1\":{\"14\":12}}],[\"ulchar\",{\"1\":{\"265\":5}}],[\"ul><\",{\"1\":{\"171\":1}}],[\"ul><p>晚上<\",{\"1\":{\"171\":1}}],[\"ul>\",{\"1\":{\"130\":5,\"170\":1}}],[\"ul>`\",{\"1\":{\"130\":1}}],[\"unary\",{\"1\":{\"405\":1}}],[\"unwind\",{\"1\":{\"384\":1}}],[\"unknown\",{\"1\":{\"338\":1}}],[\"underlinepen\",{\"1\":{\"265\":5}}],[\"undefined\",{\"1\":{\"45\":1,\"181\":1,\"406\":1}}],[\"unit\",{\"1\":{\"406\":1}}],[\"unityexplorer\",{\"1\":{\"43\":1}}],[\"unix\",{\"1\":{\"163\":2}}],[\"universe\",{\"1\":{\"159\":1,\"161\":5}}],[\"until\",{\"1\":{\"91\":1,\"92\":3}}],[\"utf\",{\"1\":{\"44\":1}}],[\"u\",{\"1\":{\"38\":1,\"39\":1,\"40\":2,\"240\":2}}],[\"uri\",{\"1\":{\"22\":2}}],[\"url\",{\"1\":{\"8\":2,\"130\":10}}],[\"url=uri\",{\"1\":{\"8\":12}}],[\"upen\",{\"1\":{\"265\":2}}],[\"update\",{\"1\":{\"251\":4,\"255\":4}}],[\"up\",{\"1\":{\"18\":1,\"21\":1,\"23\":1}}],[\"us\",{\"1\":{\"130\":5}}],[\"use\",{\"1\":{\"21\":1,\"222\":5,\"265\":6,\"332\":1,\"410\":1,\"411\":1}}],[\"user3\",{\"1\":{\"240\":2}}],[\"user2\",{\"1\":{\"240\":2}}],[\"user1\",{\"1\":{\"240\":2}}],[\"username\",{\"1\":{\"215\":6}}],[\"userprofile\",{\"1\":{\"117\":1}}],[\"usersexcludingsender\",{\"1\":{\"240\":2}}],[\"users\",{\"1\":{\"92\":2,\"240\":4}}],[\"user\",{\"1\":{\"16\":3,\"117\":1,\"192\":1,\"193\":1,\"240\":13,\"243\":2,\"300\":1,\"301\":1}}],[\"usrdir\",{\"1\":{\"192\":5,\"300\":5}}],[\"usr\",{\"1\":{\"16\":3,\"17\":2,\"22\":5,\"192\":1,\"193\":10,\"300\":1,\"301\":10}}],[\"ubuntu\",{\"1\":{\"13\":1,\"21\":4,\"31\":2}}],[\"环境\",{\"0\":{\"13\":1}}],[\"提前看字符的原理是\",{\"1\":{\"352\":1}}],[\"提出的要求\",{\"1\":{\"203\":1}}],[\"提高性能\",{\"1\":{\"264\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"230\":1,\"281\":1}}],[\"提高代码的可维护性和可扩展性\",{\"1\":{\"221\":1}}],[\"提高了系统的可扩展性和可维护性\",{\"1\":{\"149\":1}}],[\"提高模块的相对独立性\",{\"1\":{\"113\":1}}],[\"提示\",{\"1\":{\"12\":1}}],[\"提供所有科学知识\",{\"1\":{\"4\":1}}],[\"配置docker\",{\"0\":{\"17\":1}}],[\"配置nginx反向代理\",{\"0\":{\"24\":1}}],[\"配置nginx\",{\"0\":{\"16\":1}}],[\"配置http服务\",{\"0\":{\"15\":1}}],[\"配置以及如何升级到\",{\"1\":{\"12\":1}}],[\"配置\",{\"1\":{\"12\":1}}],[\"我认为这并无不可\",{\"1\":{\"427\":1}}],[\"我认为这也是初学者实现编译器的一大难点\",{\"1\":{\"398\":1}}],[\"我认为至少占了重要程度的50\",{\"1\":{\"426\":1}}],[\"我认为有几个要点需要强调\",{\"1\":{\"356\":1}}],[\"我知道\",{\"1\":{\"372\":1}}],[\"我仍然认为通过定义\",{\"1\":{\"317\":1}}],[\"我相信绝大多数\",{\"1\":{\"314\":1}}],[\"我是先写程序再总结上面的文法\",{\"1\":{\"370\":1}}],[\"我是抱着满腔热情去上课的\",{\"1\":{\"314\":1}}],[\"我是要增加功能呢\",{\"1\":{\"153\":1}}],[\"我对编译器一直心存敬佩\",{\"1\":{\"314\":1}}],[\"我会说是\",{\"1\":{\"313\":1}}],[\"我会从团队整体出发进行考虑\",{\"1\":{\"239\":1}}],[\"我来负责仲裁\",{\"1\":{\"239\":1}}],[\"我才不用rust呢\",{\"1\":{\"226\":1}}],[\"我得拿到锁才能操作\",{\"1\":{\"90\":1}}],[\"我们才能有所成长吧\",{\"1\":{\"429\":1}}],[\"我们才可以编写出具有高可替换性的类\",{\"1\":{\"152\":1}}],[\"我们用了专门的一章讲解了\",{\"1\":{\"428\":1}}],[\"我们用了很暴力的手段编写了我们的词法分析器\",{\"1\":{\"427\":1}}],[\"我们用词法分析器将源码转换成标记流\",{\"1\":{\"352\":1}}],[\"我们其实通过了参数\",{\"1\":{\"414\":1}}],[\"我们没有取负的操作\",{\"1\":{\"412\":1}}],[\"我们没有直接的逻辑取反指令\",{\"1\":{\"410\":1}}],[\"我们会遇到许多的挫折\",{\"1\":{\"429\":1}}],[\"我们会先加载它的地址\",{\"1\":{\"409\":1}}],[\"我们会将\",{\"1\":{\"345\":1}}],[\"我们主要从它的目标代码入手\",{\"1\":{\"403\":1}}],[\"我们看看下面的伪代码\",{\"1\":{\"393\":1}}],[\"我们实现的\",{\"1\":{\"386\":1}}],[\"我们实现的词法分析器与传统意义上的词法分析器不太相同\",{\"1\":{\"349\":1}}],[\"我们已经为变量\",{\"1\":{\"415\":1}}],[\"我们已经为当前的标识符\",{\"1\":{\"382\":1}}],[\"我们已经知道了什么时候开始解析函数的定义\",{\"1\":{\"382\":1}}],[\"我们把词法分析器的代码一并贴上\",{\"1\":{\"365\":1}}],[\"我们向前看一个标记\",{\"1\":{\"363\":1}}],[\"我们假设词法分析器已经正确地将其中的数字识别成了标记\",{\"1\":{\"362\":1}}],[\"我们对\",{\"1\":{\"362\":1}}],[\"我们下一章见\",{\"1\":{\"356\":1}}],[\"我们直接贴上代码\",{\"1\":{\"353\":1,\"365\":1}}],[\"我们之前说过\",{\"1\":{\"352\":1}}],[\"我们以异或\",{\"1\":{\"418\":1}}],[\"我们以\",{\"1\":{\"351\":1}}],[\"我们并不关心一个变量具体叫什么名字\",{\"1\":{\"349\":1}}],[\"我们并不会一次性地将所有源码全部转换成标记流\",{\"1\":{\"344\":1}}],[\"我们知道\",{\"1\":{\"346\":1}}],[\"我们同时还用它来处理空白字符\",{\"1\":{\"346\":1}}],[\"我们为\",{\"1\":{\"337\":1}}],[\"我们依旧用上面的例子\",{\"1\":{\"336\":1}}],[\"我们连函数调用都无法实现\",{\"1\":{\"332\":1}}],[\"我们这里的\",{\"1\":{\"328\":1}}],[\"我们这里并不需要了解太多\",{\"1\":{\"325\":1}}],[\"我们只关心三个内容\",{\"1\":{\"325\":1}}],[\"我们只需要编写新的访问者\",{\"1\":{\"298\":1}}],[\"我们的代码是自举的\",{\"1\":{\"421\":1}}],[\"我们的代码里有一些指针的强制转换\",{\"1\":{\"339\":1}}],[\"我们的电脑上已经有了这些函数的实现\",{\"1\":{\"338\":1}}],[\"我们的\",{\"1\":{\"332\":1,\"336\":1}}],[\"我们的编译器支持指针类型\",{\"1\":{\"373\":1}}],[\"我们的编译器并不支持宏定义\",{\"1\":{\"348\":1}}],[\"我们的编译器是以标记流为输入\",{\"1\":{\"343\":1}}],[\"我们的编译器参数是顺序入栈的\",{\"1\":{\"332\":1}}],[\"我们的编译器主要包括\",{\"1\":{\"322\":1}}],[\"我们的虚拟机还是工作良好的\",{\"1\":{\"339\":1}}],[\"我们的虚拟机只有一个寄存器\",{\"1\":{\"328\":1}}],[\"我们的虚拟机中\",{\"1\":{\"326\":1}}],[\"我们的虚拟机并不打算模拟完整的计算机\",{\"1\":{\"325\":1}}],[\"我们要使用变量\",{\"1\":{\"413\":1}}],[\"我们要从整体上讲解如何设计我们的\",{\"1\":{\"320\":1}}],[\"我们要在\",{\"1\":{\"134\":1}}],[\"我们也将构建出一个能用的\",{\"1\":{\"312\":1}}],[\"我们能对编译器的构建有一定的了解\",{\"1\":{\"312\":1}}],[\"我们在第三章的虚拟机中提到过\",{\"1\":{\"386\":1}}],[\"我们在本章的学习过程中已经提到过很多次了\",{\"1\":{\"308\":1}}],[\"我们在理解类的层次时\",{\"1\":{\"295\":1}}],[\"我们提倡扩展\",{\"1\":{\"305\":1}}],[\"我们还需要初始化虚拟机的栈\",{\"1\":{\"421\":1}}],[\"我们还需要注意下面将要提到的情况\",{\"1\":{\"255\":1}}],[\"我们还可能返回除号\",{\"1\":{\"352\":1}}],[\"我们还要编写进行其他处理的\",{\"1\":{\"304\":1}}],[\"我们创建了\",{\"1\":{\"304\":1}}],[\"我们来整理一下\",{\"1\":{\"303\":1}}],[\"我们编写一个表示\",{\"1\":{\"298\":1}}],[\"我们声明了抽象方法\",{\"1\":{\"295\":1}}],[\"我们考虑了两种猜拳的策略\",{\"1\":{\"282\":1}}],[\"我们考虑泛型编程\",{\"1\":{\"40\":1}}],[\"我们展示了如何使用观察者模式来管理状态变化\",{\"1\":{\"251\":1}}],[\"我们就着手虚拟机的实现\",{\"1\":{\"426\":1}}],[\"我们就来逐一说明\",{\"1\":{\"401\":1}}],[\"我们就将它的类型加上\",{\"1\":{\"373\":1}}],[\"我们就知道是需要解析枚举类型\",{\"1\":{\"373\":1}}],[\"我们就能知道它们是特殊的关键字\",{\"1\":{\"354\":1}}],[\"我们就需要一个中立的仲裁者站出来说\",{\"1\":{\"239\":1}}],[\"我们就实现了不修改被装饰的类即可增加功能\",{\"1\":{\"203\":1}}],[\"我们可能会修改或删除现有的\",{\"1\":{\"406\":1}}],[\"我们可能需要从观察模式转变为通知模式\",{\"1\":{\"258\":1}}],[\"我们可能需要为同一个集合编写多个具体迭代器\",{\"1\":{\"234\":1}}],[\"我们可将扮演\",{\"1\":{\"245\":1}}],[\"我们可以正确调用\",{\"1\":{\"421\":1}}],[\"我们可以很容易地直接将\",{\"1\":{\"363\":1}}],[\"我们可以这样认为\",{\"1\":{\"343\":1}}],[\"我们可以使用的内存地址为\",{\"1\":{\"325\":1}}],[\"我们可以准备两种算法\",{\"1\":{\"286\":1}}],[\"我们可以考虑使用事件总线或消息队列来集中处理通知\",{\"1\":{\"258\":1}}],[\"我们可以考虑将多个对象组成一条职责链\",{\"1\":{\"179\":1}}],[\"我们可以引入一个标志位来跟踪通知状态\",{\"1\":{\"256\":1}}],[\"我们可以为\",{\"1\":{\"234\":1}}],[\"我们可以轻松地遍历\",{\"1\":{\"233\":1}}],[\"我们可以轻松地添加其他具体工厂\",{\"1\":{\"131\":1}}],[\"我们可以更好地管理和操作集合数据\",{\"1\":{\"230\":1}}],[\"我们可以更灵活地管理对象的创建过程\",{\"1\":{\"221\":1}}],[\"我们可以在不修改现有类的情况下添加新功能\",{\"1\":{\"198\":1}}],[\"我们可以将这些视图注册为观察者\",{\"1\":{\"250\":1}}],[\"我们可以将\",{\"1\":{\"163\":1}}],[\"我们定义了几个类和接口来实现迭代器模式\",{\"1\":{\"233\":1}}],[\"我们定义一个用于创建对象的接口\",{\"1\":{\"220\":1}}],[\"我们不另外处理它们的原因是\",{\"1\":{\"345\":1}}],[\"我们不得不在\",{\"1\":{\"307\":1}}],[\"我们不应该将它们隐藏在自己脑袋中\",{\"1\":{\"213\":1}}],[\"我们不妨通过类的运算符重载来进一步优化\",{\"1\":{\"40\":1}}],[\"我们完全不需要对被装饰的类做任何修改\",{\"1\":{\"203\":1}}],[\"我们使用装饰器模式来动态地给对象添加职责\",{\"1\":{\"197\":1}}],[\"我们使用了策略模式\",{\"1\":{\"281\":1}}],[\"我们使用了外观模式\",{\"1\":{\"214\":1}}],[\"我们使用了\",{\"1\":{\"181\":1}}],[\"我们必须先计算优先级高的运算符\",{\"1\":{\"402\":1}}],[\"我们必须时刻关汴这种\",{\"1\":{\"174\":1}}],[\"我们必须要做以下修改\",{\"1\":{\"134\":1}}],[\"我们必须要对所有的具体工厂进行相应的修改才行\",{\"1\":{\"134\":1}}],[\"我们需要类似下面的汇编代码\",{\"1\":{\"415\":1}}],[\"我们需要不断地向右扫描\",{\"1\":{\"414\":1}}],[\"我们需要处理多运算符的优先级问题\",{\"1\":{\"414\":1}}],[\"我们需要在栈上为局部变量预留空间\",{\"1\":{\"386\":1}}],[\"我们需要所有的变量定义出现在所有的语句之前\",{\"1\":{\"386\":1}}],[\"我们需要知道后面参数的类型\",{\"1\":{\"405\":1}}],[\"我们需要知道参数的个数\",{\"1\":{\"383\":1}}],[\"我们需要知道这两个\",{\"1\":{\"349\":1}}],[\"我们需要了解当\",{\"1\":{\"383\":1}}],[\"我们需要得到\",{\"1\":{\"336\":1}}],[\"我们需要条件判断相关的指令\",{\"1\":{\"331\":1}}],[\"我们需要首先在全局添加如下代码\",{\"1\":{\"325\":1}}],[\"我们需要特别小心\",{\"1\":{\"256\":1}}],[\"我们需要先阅读现有代码\",{\"1\":{\"176\":1}}],[\"我们需要编写一个定义这些操作系统的共同接口\",{\"1\":{\"163\":1}}],[\"我们需要将它存放到前一篇文章中说的\",{\"1\":{\"351\":1}}],[\"我们需要将当前的行号加一\",{\"1\":{\"347\":1}}],[\"我们需要将\",{\"1\":{\"153\":1}}],[\"我们需要证明乘法结果的存在性和唯一性\",{\"1\":{\"65\":1}}],[\"我们需要证明加法结果的存在性和唯一性\",{\"1\":{\"49\":1}}],[\"我们学习了抽象类的作用\",{\"1\":{\"152\":1}}],[\"我们应该养成具体问题具体分析的辩证唯物思想\",{\"1\":{\"93\":1}}],[\"我们再用多线程试一下同样的逻辑\",{\"1\":{\"92\":1}}],[\"我们将介绍递归下降的语法分析器\",{\"1\":{\"356\":1}}],[\"我们将同时分析单个字符如\",{\"1\":{\"351\":1}}],[\"我们将专门作为一个小节\",{\"1\":{\"326\":1}}],[\"我们将实现其中的eval函数\",{\"1\":{\"322\":1}}],[\"我们将逐个填充每个函数的功能\",{\"1\":{\"322\":1}}],[\"我们将展示如何使用\",{\"1\":{\"231\":1}}],[\"我们将借助另一个公理系统\",{\"1\":{\"73\":1}}],[\"我们将详细讲解环境配置\",{\"1\":{\"12\":1}}],[\"我们成功地由\",{\"1\":{\"73\":1}}],[\"我们终于可以对自然数乘法的性质进行进一步的探索\",{\"1\":{\"68\":1}}],[\"我们终于可以对自然数加法的性质进行进一步的探索\",{\"1\":{\"52\":1}}],[\"我们预先准备以方便证明\",{\"1\":{\"58\":1}}],[\"我们即可建立如今最常用的算术公理系统\",{\"1\":{\"46\":1}}],[\"我的是\",{\"1\":{\"31\":1}}],[\"我的博客构建库\",{\"1\":{\"4\":1}}],[\"我还没有研究透\",{\"1\":{\"31\":1}}],[\"和字符串如\",{\"1\":{\"351\":1}}],[\"和文法并编写解析算法\",{\"1\":{\"317\":1}}],[\"和文法的定义\",{\"1\":{\"317\":1}}],[\"和被观察者\",{\"1\":{\"254\":1}}],[\"和开源作者们使用同一套流程\",{\"1\":{\"33\":1}}],[\"和\",{\"1\":{\"12\":2,\"50\":2,\"66\":1,\"72\":1,\"102\":1,\"131\":1,\"148\":1,\"233\":1,\"244\":4,\"286\":1,\"303\":1,\"313\":1,\"328\":1,\"371\":1,\"392\":1,\"393\":1,\"402\":1,\"417\":1}}],[\"本节中我们专注语法分析器部分的实现\",{\"1\":{\"365\":1}}],[\"本节的代码可以在\",{\"1\":{\"322\":1}}],[\"本例中是\",{\"1\":{\"362\":1}}],[\"本质上这个指令并不是必需的\",{\"1\":{\"335\":1}}],[\"本质上是因为我们的\",{\"1\":{\"334\":1}}],[\"本章有两个难点\",{\"1\":{\"422\":1}}],[\"本章讲解了如何将语句编译成汇编代码\",{\"1\":{\"398\":1}}],[\"本章讲解函数定义相关的内容\",{\"1\":{\"380\":1}}],[\"本章的内容应该不难\",{\"1\":{\"377\":1}}],[\"本章的代码依旧无法运行\",{\"1\":{\"387\":1,\"397\":1}}],[\"本章的代码还无法正常运行\",{\"1\":{\"376\":1}}],[\"本章的代码可以在\",{\"1\":{\"340\":1,\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"421\":1}}],[\"本章要讲解的就是上节文法中的\",{\"1\":{\"371\":1}}],[\"本章我们进行了最后的解析\",{\"1\":{\"422\":1}}],[\"本章我们将讲解递归下降的方法\",{\"1\":{\"359\":1}}],[\"本章我们为我们的编译器构建了词法分析器\",{\"1\":{\"356\":1}}],[\"本章我们要讲解如何构建词法分析器\",{\"1\":{\"341\":1}}],[\"本章我们要构建一台虚拟的电脑\",{\"1\":{\"323\":1}}],[\"本章中我们发一发牢骚\",{\"1\":{\"425\":1}}],[\"本章中我们用了不多的代码完成了函数定义的解析\",{\"1\":{\"388\":1}}],[\"本章中我们用\",{\"1\":{\"369\":1}}],[\"本章中我们介绍了递归下降的方法\",{\"1\":{\"366\":1}}],[\"本章中我们回顾了计算机的内部运行原理\",{\"1\":{\"340\":1}}],[\"本章中要学习的\",{\"1\":{\"153\":1}}],[\"本项目中的代码逻辑绝大多数取自\",{\"1\":{\"315\":1}}],[\"本篇是一些闲聊\",{\"1\":{\"312\":1}}],[\"本来就没有两全其美的解决方案\",{\"1\":{\"92\":1}}],[\"本来就只能一个人打电话\",{\"1\":{\"90\":1}}],[\"本文转自\",{\"1\":{\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"本文转载自\",{\"1\":{\"312\":1}}],[\"本文为博主原创文章\",{\"1\":{\"29\":1}}],[\"本文是\",{\"1\":{\"12\":1}}],[\"本文将介绍如何使用\",{\"1\":{\"12\":1}}],[\"本地调试工具\",{\"1\":{\"9\":1}}],[\"+var\",{\"1\":{\"412\":1}}],[\"+global\",{\"1\":{\"370\":1}}],[\"++p时\",{\"1\":{\"413\":1}}],[\"++p\",{\"1\":{\"413\":2}}],[\"++pos\",{\"1\":{\"386\":1}}],[\"++text\",{\"1\":{\"386\":3,\"393\":4,\"394\":4,\"395\":1,\"404\":4,\"405\":2,\"406\":13,\"408\":1,\"410\":4,\"411\":4,\"412\":6,\"413\":7,\"415\":1,\"416\":4,\"417\":4,\"418\":8,\"419\":14,\"420\":7}}],[\"++line\",{\"1\":{\"347\":1}}],[\"++src\",{\"1\":{\"346\":1,\"350\":2,\"352\":1}}],[\"++\",{\"1\":{\"282\":3,\"353\":10,\"365\":2,\"406\":1,\"407\":1,\"408\":1}}],[\"+|return\",{\"1\":{\"336\":1,\"383\":1}}],[\"+|\",{\"1\":{\"200\":2,\"325\":4,\"336\":7,\"383\":6,\"402\":6}}],[\"+=\",{\"1\":{\"160\":2,\"170\":15,\"181\":1,\"199\":1,\"215\":4,\"251\":1,\"282\":1,\"292\":2,\"300\":1,\"332\":1}}],[\"+\",{\"0\":{\"12\":2},\"1\":{\"90\":2,\"91\":1,\"92\":4,\"130\":1,\"160\":2,\"161\":12,\"189\":1,\"199\":19,\"200\":12,\"215\":3,\"265\":2,\"282\":4,\"292\":2,\"293\":8,\"325\":2,\"326\":1,\"331\":2,\"334\":1,\"336\":6,\"337\":1,\"338\":1,\"342\":1,\"343\":8,\"345\":1,\"349\":22,\"350\":6,\"353\":3,\"361\":2,\"362\":2,\"364\":1,\"365\":4,\"373\":4,\"382\":1,\"383\":3,\"384\":1,\"385\":1,\"386\":1,\"393\":2,\"394\":2,\"402\":27,\"404\":1,\"405\":1,\"407\":1,\"409\":1,\"416\":2,\"417\":2,\"418\":3,\"420\":1,\"421\":1}}],[\"7章函数定义\",{\"1\":{\"406\":1}}],[\"7|\",{\"1\":{\"402\":1}}],[\"7\",{\"0\":{\"391\":1},\"1\":{\"8\":1,\"91\":1,\"92\":4,\"312\":1,\"320\":1,\"323\":2,\"341\":2,\"350\":1,\"359\":2,\"369\":1,\"380\":1,\"391\":2,\"401\":2,\"425\":1}}],[\"80\",{\"1\":{\"16\":2,\"17\":2,\"22\":2,\"232\":1,\"233\":1}}],[\"8\",{\"0\":{\"401\":1},\"1\":{\"8\":1,\"16\":4,\"44\":1,\"90\":1,\"91\":1,\"92\":6,\"312\":1,\"320\":1,\"323\":2,\"341\":2,\"350\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":2,\"425\":1}}],[\"m32\",{\"1\":{\"339\":2}}],[\"mcmp\",{\"1\":{\"327\":1,\"338\":1}}],[\"mset\",{\"1\":{\"327\":1,\"338\":1}}],[\"m\",{\"1\":{\"325\":1}}],[\"mbox\",{\"1\":{\"265\":2}}],[\"mvc\",{\"0\":{\"259\":1},\"1\":{\"259\":2}}],[\"me\",{\"1\":{\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"425\":1}}],[\"mechanism\",{\"1\":{\"277\":1}}],[\"memcmp\",{\"1\":{\"338\":2,\"349\":1,\"354\":1}}],[\"memset\",{\"1\":{\"325\":3,\"326\":1,\"338\":2,\"354\":1}}],[\"memento\",{\"1\":{\"267\":1}}],[\"memory\",{\"1\":{\"325\":1,\"373\":2,\"382\":1}}],[\"memo\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"messaging\",{\"1\":{\"240\":1}}],[\"messagebox\",{\"1\":{\"265\":6}}],[\"messages\",{\"1\":{\"240\":2}}],[\"message\",{\"1\":{\"215\":2,\"240\":5,\"241\":9,\"265\":2}}],[\"mediator\",{\"0\":{\"238\":1},\"1\":{\"217\":1,\"240\":11,\"241\":1,\"243\":1,\"244\":1,\"260\":1}}],[\"method\",{\"0\":{\"220\":1,\"221\":1,\"290\":1,\"291\":1},\"1\":{\"135\":1,\"152\":1,\"165\":1,\"172\":1,\"220\":2,\"221\":2,\"223\":2,\"235\":1,\"290\":1,\"293\":1,\"294\":1}}],[\"md\",{\"0\":{\"103\":1}}],[\"mytornado\",{\"1\":{\"92\":5}}],[\"multiply\",{\"1\":{\"342\":1}}],[\"multidisplay\",{\"1\":{\"156\":1,\"159\":1}}],[\"mul\",{\"1\":{\"39\":1,\"327\":1,\"337\":1,\"345\":2,\"353\":1,\"373\":2,\"385\":2,\"386\":2,\"405\":2,\"407\":2,\"408\":2,\"412\":1,\"414\":1,\"418\":3,\"420\":1}}],[\"move\",{\"1\":{\"404\":1}}],[\"movw\",{\"1\":{\"328\":1}}],[\"movb\",{\"1\":{\"328\":1}}],[\"mov\",{\"0\":{\"328\":1},\"1\":{\"323\":1,\"328\":6,\"332\":4,\"335\":1}}],[\"mod\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"model\",{\"0\":{\"259\":1},\"1\":{\"259\":1}}],[\"modint1\",{\"1\":{\"40\":1}}],[\"modint<int\",{\"1\":{\"40\":3}}],[\"modint\",{\"0\":{\"35\":1},\"1\":{\"40\":9},\"2\":{\"42\":1,\"100\":1}}],[\"mobile\",{\"2\":{\"88\":1}}],[\"more\",{\"1\":{\"32\":1}}],[\"missing\",{\"1\":{\"416\":1}}],[\"mixmark\",{\"1\":{\"103\":1}}],[\"mime\",{\"1\":{\"16\":1}}],[\"mirrors\",{\"1\":{\"8\":1}}],[\"may\",{\"1\":{\"373\":1}}],[\"malc\",{\"1\":{\"327\":1,\"338\":1}}],[\"malloc\",{\"1\":{\"322\":2,\"325\":6,\"338\":2,\"354\":1,\"406\":1}}],[\"macro\",{\"1\":{\"348\":1}}],[\"machine\",{\"1\":{\"325\":1,\"326\":1}}],[\"macintosh\",{\"1\":{\"163\":2}}],[\"match\",{\"1\":{\"365\":8,\"373\":10,\"375\":2,\"384\":5,\"385\":5,\"386\":5,\"393\":4,\"394\":3,\"395\":2,\"396\":4,\"404\":3,\"405\":6,\"406\":4,\"407\":5,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":3,\"413\":1,\"415\":1,\"416\":2,\"417\":2,\"418\":2,\"420\":2}}],[\"math\",{\"1\":{\"251\":2,\"282\":4}}],[\"mater\",{\"1\":{\"240\":1,\"241\":3}}],[\"mamoru\",{\"1\":{\"215\":2}}],[\"mailprop\",{\"1\":{\"215\":2}}],[\"mailaddress\",{\"1\":{\"215\":4}}],[\"mailaddr\",{\"1\":{\"215\":2}}],[\"mailto\",{\"1\":{\"215\":2,\"216\":1}}],[\"maildata\",{\"1\":{\"215\":3}}],[\"mail\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"mainly\",{\"1\":{\"349\":1}}],[\"main\",{\"0\":{\"159\":1,\"192\":1},\"1\":{\"16\":2,\"130\":2,\"133\":1,\"143\":1,\"144\":1,\"155\":1,\"161\":1,\"164\":2,\"170\":1,\"171\":1,\"181\":1,\"182\":1,\"193\":1,\"199\":1,\"200\":1,\"215\":1,\"216\":1,\"222\":1,\"223\":1,\"232\":1,\"233\":1,\"241\":1,\"251\":1,\"252\":1,\"265\":1,\"266\":1,\"273\":1,\"274\":1,\"282\":1,\"292\":1,\"293\":1,\"300\":1,\"301\":1,\"322\":1,\"325\":1,\"326\":1,\"339\":2,\"354\":3,\"365\":1,\"421\":3}}],[\"maintenance\",{\"0\":{\"7\":1},\"1\":{\"7\":1}}],[\"making\",{\"1\":{\"192\":2,\"193\":2,\"216\":1,\"300\":2,\"301\":2}}],[\"make\",{\"1\":{\"332\":1,\"333\":3,\"373\":1}}],[\"makewelcomepage\",{\"1\":{\"215\":2}}],[\"makeline\",{\"1\":{\"199\":3}}],[\"makeitems\",{\"1\":{\"170\":5}}],[\"makestring\",{\"1\":{\"170\":5}}],[\"maketitle\",{\"1\":{\"170\":4}}],[\"makehtml\",{\"1\":{\"130\":8}}],[\"manage\",{\"1\":{\"121\":2,\"240\":1}}],[\"manager\",{\"1\":{\"121\":4,\"265\":12}}],[\"master\",{\"1\":{\"92\":1}}],[\"maps\",{\"1\":{\"32\":1}}],[\"mavencentral\",{\"1\":{\"8\":2}}],[\"maven\",{\"1\":{\"8\":26}}],[\"markdown\",{\"1\":{\"4\":1,\"97\":3,\"102\":1}}],[\"duplicate\",{\"1\":{\"373\":1,\"385\":1,\"386\":1,\"413\":1}}],[\"dump\",{\"1\":{\"325\":1}}],[\"daddy\",{\"1\":{\"232\":1,\"233\":1}}],[\"days\",{\"1\":{\"232\":1,\"233\":1}}],[\"data++\",{\"1\":{\"351\":1}}],[\"databasename\",{\"1\":{\"215\":1}}],[\"database\",{\"1\":{\"215\":6}}],[\"data\",{\"1\":{\"31\":1,\"32\":7,\"322\":1,\"325\":8,\"351\":4,\"373\":5,\"404\":4}}],[\"divide\",{\"1\":{\"352\":1}}],[\"div\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"352\":2,\"414\":1}}],[\"directly\",{\"1\":{\"353\":1}}],[\"directory\",{\"0\":{\"189\":1},\"1\":{\"189\":6,\"192\":16,\"300\":14,\"304\":3,\"307\":1,\"308\":2}}],[\"director2\",{\"1\":{\"170\":2}}],[\"director\",{\"1\":{\"169\":1,\"170\":8,\"174\":1,\"176\":2}}],[\"dir\",{\"1\":{\"300\":4}}],[\"digitobserver\",{\"1\":{\"251\":5,\"252\":20,\"255\":1}}],[\"diary\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"diana\",{\"1\":{\"181\":3,\"182\":3}}],[\"dispatch\",{\"1\":{\"303\":1}}],[\"displayimpl\",{\"0\":{\"158\":1},\"1\":{\"155\":1,\"156\":3,\"157\":4,\"158\":1,\"160\":3,\"164\":1}}],[\"display\",{\"0\":{\"157\":1},\"1\":{\"155\":6,\"156\":3,\"157\":2,\"159\":5,\"164\":5,\"199\":36,\"202\":2,\"203\":3,\"292\":4}}],[\"displayprofile\",{\"1\":{\"117\":2}}],[\"distro\",{\"1\":{\"31\":3}}],[\"distributionurl=https\",{\"1\":{\"8\":1}}],[\"d3\",{\"1\":{\"159\":2,\"292\":2}}],[\"d2\",{\"1\":{\"159\":2,\"292\":2}}],[\"d1\",{\"1\":{\"159\":2,\"292\":2}}],[\"driving\",{\"1\":{\"124\":2}}],[\"drive\",{\"1\":{\"124\":3}}],[\"do\",{\"1\":{\"322\":2,\"412\":1}}],[\"double\",{\"1\":{\"276\":1,\"303\":1}}],[\"done\",{\"1\":{\"102\":1,\"181\":2}}],[\"doc\",{\"1\":{\"192\":1,\"193\":1,\"240\":1,\"241\":3,\"300\":1,\"301\":1}}],[\"documentation\",{\"1\":{\"25\":2}}],[\"docker部署certbot与nginx来获取ssl证书添加https及自动更新\",{\"1\":{\"25\":1}}],[\"dockerfile\",{\"1\":{\"14\":1,\"17\":3}}],[\"docker\",{\"0\":{\"12\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1},\"1\":{\"12\":2,\"13\":2,\"14\":1,\"17\":1,\"18\":1,\"21\":1,\"23\":1,\"28\":1,\"31\":10,\"32\":10}}],[\"dcqe\",{\"1\":{\"102\":1}}],[\"dnspy\",{\"1\":{\"43\":1}}],[\"dp\",{\"1\":{\"36\":1}}],[\"dereference\",{\"1\":{\"408\":3}}],[\"details\",{\"1\":{\"401\":1}}],[\"demo函数被调用时\",{\"1\":{\"383\":1}}],[\"demo\",{\"1\":{\"383\":1}}],[\"declenum\",{\"1\":{\"370\":1}}],[\"decl\",{\"1\":{\"370\":10,\"371\":2,\"373\":8,\"381\":7,\"382\":2,\"384\":4,\"385\":1}}],[\"declarations\",{\"1\":{\"384\":1,\"386\":1}}],[\"declaration\",{\"0\":{\"373\":1,\"374\":1},\"1\":{\"369\":2,\"370\":2,\"372\":3,\"373\":10,\"374\":1,\"375\":1,\"382\":1,\"384\":1,\"385\":2,\"386\":4}}],[\"dec\",{\"1\":{\"345\":1,\"350\":2,\"353\":1,\"413\":1,\"414\":1}}],[\"decochar\",{\"1\":{\"265\":8}}],[\"decorator\",{\"0\":{\"197\":1},\"1\":{\"145\":1,\"194\":1,\"200\":1,\"202\":3,\"203\":2,\"204\":1,\"205\":2,\"206\":1,\"267\":1}}],[\"deleteobserver\",{\"1\":{\"251\":1}}],[\"delegation\",{\"1\":{\"143\":4}}],[\"dest\",{\"1\":{\"328\":2}}],[\"design\",{\"0\":{\"434\":1},\"1\":{\"130\":2,\"144\":1,\"161\":2,\"171\":2,\"182\":2,\"193\":2,\"200\":2,\"216\":2,\"223\":2,\"233\":2,\"240\":1,\"241\":2,\"252\":2,\"266\":2,\"274\":2,\"293\":2,\"301\":2}}],[\"desktop\",{\"0\":{\"31\":1},\"1\":{\"31\":5,\"32\":4}}],[\"devtool\",{\"1\":{\"312\":1}}],[\"device\",{\"1\":{\"307\":2}}],[\"dev\",{\"1\":{\"96\":1}}],[\"define\",{\"1\":{\"339\":1}}],[\"def\",{\"1\":{\"90\":2,\"91\":1,\"92\":5}}],[\"default\",{\"1\":{\"16\":1,\"322\":1,\"404\":1,\"406\":1}}],[\"deploy\",{\"1\":{\"86\":1}}],[\"dependencyresolutionmanagement\",{\"1\":{\"8\":1}}],[\"d\",{\"1\":{\"14\":1,\"16\":1,\"17\":4,\"18\":1,\"20\":2,\"21\":2,\"23\":1,\"130\":1,\"144\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1,\"322\":2,\"325\":3,\"338\":2,\"365\":3,\"373\":2,\"374\":3,\"375\":2,\"385\":2,\"386\":2,\"406\":2,\"408\":1,\"409\":1,\"413\":1,\"415\":1,\"416\":1,\"420\":1}}],[\"f\",{\"1\":{\"350\":2}}],[\"found\",{\"1\":{\"349\":1,\"433\":1}}],[\"forward\",{\"1\":{\"404\":1}}],[\"forwarded\",{\"1\":{\"16\":1}}],[\"foreach\",{\"1\":{\"130\":2,\"170\":2,\"189\":1,\"251\":1,\"300\":1}}],[\"for\",{\"1\":{\"16\":1,\"90\":4,\"92\":3,\"156\":1,\"160\":1,\"181\":1,\"199\":2,\"215\":1,\"216\":1,\"240\":2,\"251\":2,\"282\":2,\"292\":2,\"300\":1,\"322\":1,\"325\":5,\"332\":1,\"333\":1,\"336\":1,\"349\":2,\"373\":2,\"384\":1,\"386\":2,\"393\":1,\"395\":1,\"406\":1,\"414\":1}}],[\"format\",{\"1\":{\"16\":1}}],[\"fd\",{\"1\":{\"322\":4,\"325\":1}}],[\"fn\",{\"1\":{\"277\":2}}],[\"flex\",{\"1\":{\"314\":1,\"315\":1,\"317\":1,\"321\":1,\"344\":1}}],[\"flyweight\",{\"1\":{\"267\":1,\"287\":1}}],[\"floor\",{\"1\":{\"251\":1,\"282\":2}}],[\"flask\",{\"0\":{\"12\":1},\"1\":{\"12\":1,\"25\":3}}],[\"frameadd\",{\"1\":{\"334\":1}}],[\"framepush\",{\"1\":{\"333\":1}}],[\"frame\",{\"1\":{\"325\":1,\"332\":3,\"333\":2,\"334\":1,\"335\":2}}],[\"fred\",{\"1\":{\"181\":3,\"182\":1}}],[\"from\",{\"1\":{\"17\":1,\"92\":1,\"130\":15,\"143\":6,\"156\":2,\"157\":1,\"159\":3,\"160\":1,\"170\":7,\"181\":14,\"189\":1,\"191\":1,\"192\":3,\"199\":9,\"215\":3,\"222\":6,\"232\":9,\"251\":12,\"265\":5,\"273\":1,\"282\":10,\"292\":4,\"300\":15,\"332\":2,\"334\":2}}],[\"falt\",{\"1\":{\"355\":1}}],[\"false\",{\"1\":{\"181\":4,\"282\":2,\"393\":1,\"410\":1}}],[\"fault\",{\"1\":{\"339\":1}}],[\"fastbutmorememorystrategy\",{\"1\":{\"286\":1}}],[\"factor\",{\"1\":{\"365\":4}}],[\"factory\",{\"0\":{\"220\":1,\"221\":1},\"1\":{\"130\":21,\"133\":3,\"134\":2,\"135\":1,\"165\":1,\"172\":1,\"217\":1,\"220\":2,\"221\":2,\"222\":12,\"223\":1,\"235\":1,\"287\":1,\"294\":1}}],[\"facade\",{\"0\":{\"213\":1},\"1\":{\"172\":1,\"214\":1,\"216\":1,\"246\":1,\"275\":1}}],[\"failed\",{\"1\":{\"45\":1}}],[\"fail\",{\"1\":{\"8\":1,\"181\":2}}],[\"func\",{\"1\":{\"384\":1,\"386\":1}}],[\"functions\",{\"1\":{\"406\":1}}],[\"functionvoid\",{\"1\":{\"354\":1}}],[\"functionenum\",{\"1\":{\"354\":1,\"373\":1}}],[\"function\",{\"1\":{\"130\":1,\"277\":1,\"336\":1,\"370\":2,\"373\":4,\"375\":1,\"381\":1,\"382\":2,\"384\":5,\"385\":1,\"386\":2,\"396\":1,\"406\":4}}],[\"function执行时间超过5s\",{\"1\":{\"45\":1}}],[\"function执行时间过长\",{\"1\":{\"45\":1}}],[\"fun\",{\"1\":{\"345\":1,\"373\":1,\"382\":2,\"406\":1,\"414\":1}}],[\"fullborder\",{\"1\":{\"199\":8,\"203\":1}}],[\"fullchain\",{\"1\":{\"21\":2,\"22\":3}}],[\"fields\",{\"1\":{\"349\":1}}],[\"fight\",{\"1\":{\"282\":3}}],[\"first\",{\"1\":{\"45\":1,\"404\":2}}],[\"finally\",{\"1\":{\"90\":1}}],[\"final\",{\"1\":{\"44\":1}}],[\"filetreatmentexception\",{\"1\":{\"190\":1}}],[\"filename\",{\"1\":{\"170\":4,\"215\":3}}],[\"files\",{\"1\":{\"16\":3,\"22\":5,\"102\":1}}],[\"file\",{\"0\":{\"191\":1},\"1\":{\"9\":3,\"21\":3,\"170\":2,\"171\":2,\"191\":1,\"192\":9,\"300\":15,\"304\":3,\"307\":1,\"322\":1}}],[\"filter\",{\"1\":{\"7\":1,\"240\":1,\"251\":1}}],[\"jnz\",{\"0\":{\"331\":1},\"1\":{\"323\":1,\"327\":1,\"331\":1,\"417\":2}}],[\"jz\",{\"0\":{\"331\":1},\"1\":{\"323\":1,\"327\":1,\"331\":1,\"393\":2,\"394\":2,\"416\":1,\"417\":2}}],[\"jmp\",{\"0\":{\"330\":1},\"1\":{\"323\":1,\"327\":1,\"330\":3,\"332\":1,\"393\":4,\"394\":2,\"416\":1}}],[\"just\",{\"1\":{\"386\":1,\"404\":1}}],[\"jump\",{\"1\":{\"330\":1,\"331\":2}}],[\"junk\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"judge\",{\"1\":{\"36\":1}}],[\"java这些成熟的语言都是手动实现的\",{\"1\":{\"317\":1}}],[\"java\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"jp\",{\"1\":{\"130\":5}}],[\"join\",{\"1\":{\"90\":1,\"92\":1,\"130\":2}}],[\"jcenter\",{\"1\":{\"8\":2}}],[\"jitpack\",{\"1\":{\"8\":2}}],[\"h>enum\",{\"1\":{\"365\":1}}],[\"h>int\",{\"1\":{\"322\":1}}],[\"h>\",{\"1\":{\"322\":3,\"348\":1,\"365\":1}}],[\"hv\",{\"1\":{\"282\":2}}],[\"high\",{\"1\":{\"325\":1,\"336\":1,\"383\":1}}],[\"history\",{\"1\":{\"282\":8}}],[\"hiroshi\",{\"1\":{\"215\":1,\"216\":2}}],[\"h\",{\"1\":{\"282\":7,\"292\":1,\"293\":5}}],[\"href\",{\"1\":{\"215\":2}}],[\"href=\",{\"1\":{\"130\":6,\"215\":1,\"216\":1}}],[\"hyuki\",{\"1\":{\"215\":7,\"216\":4}}],[\"hana\",{\"1\":{\"282\":1,\"283\":7}}],[\"hanako\",{\"1\":{\"192\":4,\"193\":2,\"215\":2,\"300\":4,\"301\":2}}],[\"handle\",{\"1\":{\"354\":1}}],[\"handvalue\",{\"1\":{\"282\":22}}],[\"hand\",{\"1\":{\"282\":28}}],[\"hash\",{\"1\":{\"346\":1,\"349\":10}}],[\"has\",{\"1\":{\"240\":1,\"407\":1,\"408\":1}}],[\"hasnext\",{\"1\":{\"232\":3,\"233\":1}}],[\"have\",{\"1\":{\"240\":2}}],[\"harmony\",{\"1\":{\"43\":1}}],[\"h1><p>从早上到下午<\",{\"1\":{\"171\":1}}],[\"h1>\",{\"1\":{\"130\":1,\"215\":1,\"216\":1}}],[\"h1>`\",{\"1\":{\"130\":1,\"170\":1}}],[\"hex\",{\"1\":{\"350\":2}}],[\"here\",{\"1\":{\"346\":1,\"347\":1}}],[\"heap\",{\"1\":{\"325\":2}}],[\"head><body>\",{\"1\":{\"215\":1,\"216\":1}}],[\"head><body><h1>问候<\",{\"1\":{\"171\":1}}],[\"head><body>`\",{\"1\":{\"170\":1}}],[\"head>\",{\"1\":{\"130\":1}}],[\"head>`\",{\"1\":{\"130\":1}}],[\"header\",{\"1\":{\"16\":2}}],[\"helloworld\",{\"1\":{\"312\":1}}],[\"hello\",{\"1\":{\"92\":5,\"143\":2,\"144\":4,\"159\":3,\"199\":2,\"200\":3,\"265\":3,\"266\":3,\"292\":1,\"339\":1,\"421\":2}}],[\"home\",{\"1\":{\"21\":4}}],[\"html<html><head><title>welcome\",{\"1\":{\"216\":1}}],[\"htmlwriter\",{\"1\":{\"215\":5}}],[\"html`\",{\"1\":{\"170\":1}}],[\"htmlbuilder\",{\"1\":{\"170\":9,\"176\":2}}],[\"html>が作成されました\",{\"1\":{\"171\":1}}],[\"html>\",{\"1\":{\"130\":1,\"170\":1,\"215\":1,\"216\":1}}],[\"html>`\",{\"1\":{\"130\":1}}],[\"html2text\",{\"1\":{\"103\":1}}],[\"html\",{\"0\":{\"103\":1},\"1\":{\"16\":3,\"17\":2,\"22\":5,\"32\":1,\"131\":1,\"170\":1,\"171\":1,\"192\":1,\"193\":1,\"215\":1,\"216\":1,\"300\":1,\"301\":1}}],[\"http\",{\"1\":{\"16\":1,\"18\":3,\"130\":11}}],[\"https\",{\"0\":{\"24\":1},\"1\":{\"8\":14,\"12\":1,\"22\":2,\"32\":1,\"45\":1,\"89\":1,\"93\":1,\"96\":1,\"97\":2,\"103\":2,\"320\":1,\"322\":1,\"323\":1,\"340\":1,\"341\":1,\"355\":1,\"359\":1,\"369\":1,\"376\":1,\"380\":1,\"387\":1,\"391\":1,\"397\":1,\"401\":1,\"421\":1,\"425\":1}}],[\"hub的目标是\",{\"1\":{\"4\":1}}],[\"hub\",{\"1\":{\"4\":1}}],[\"修改的工作量就会越大\",{\"1\":{\"134\":1}}],[\"修改配置\",{\"0\":{\"22\":1}}],[\"修改\",{\"1\":{\"8\":1}}],[\"国内镜像\",{\"1\":{\"8\":1}}],[\"csdn\",{\"1\":{\"401\":1}}],[\"cycle\",{\"1\":{\"326\":1}}],[\"cpu\",{\"1\":{\"324\":2,\"326\":1,\"327\":2}}],[\"cpp\",{\"1\":{\"317\":1}}],[\"c4\",{\"1\":{\"315\":4,\"350\":1}}],[\"currently\",{\"1\":{\"351\":1}}],[\"current\",{\"1\":{\"322\":1,\"349\":13,\"354\":6,\"373\":6,\"374\":3,\"382\":2,\"384\":11,\"385\":11,\"386\":11,\"406\":1}}],[\"currentdir\",{\"1\":{\"300\":7}}],[\"currenthandvalue\",{\"1\":{\"282\":10}}],[\"creating\",{\"1\":{\"170\":2,\"171\":2,\"240\":1}}],[\"created\",{\"1\":{\"273\":1,\"274\":1,\"277\":1}}],[\"createclone\",{\"1\":{\"265\":4}}],[\"create\",{\"1\":{\"222\":4,\"240\":1,\"265\":6}}],[\"createproduct\",{\"1\":{\"222\":3}}],[\"createpicture\",{\"1\":{\"134\":1}}],[\"createpage\",{\"1\":{\"130\":3}}],[\"createtray\",{\"1\":{\"130\":5}}],[\"createlink\",{\"1\":{\"130\":8}}],[\"c\",{\"0\":{\"312\":1,\"320\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1},\"1\":{\"102\":1,\"244\":4,\"312\":15,\"315\":4,\"320\":16,\"322\":4,\"323\":15,\"328\":1,\"332\":2,\"337\":1,\"338\":1,\"339\":3,\"340\":2,\"341\":12,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"352\":1,\"355\":1,\"359\":12,\"365\":2,\"369\":13,\"376\":1,\"380\":12,\"386\":2,\"387\":1,\"391\":12,\"392\":1,\"393\":1,\"394\":1,\"397\":1,\"401\":11,\"402\":2,\"404\":1,\"406\":1,\"416\":1,\"418\":1,\"420\":1,\"421\":5,\"425\":13},\"2\":{\"319\":1,\"358\":1,\"368\":1,\"379\":1,\"390\":1,\"400\":1,\"424\":1,\"432\":1}}],[\"cn\",{\"1\":{\"89\":1,\"93\":1,\"96\":1}}],[\"cnblogs\",{\"1\":{\"32\":1}}],[\"cast\",{\"1\":{\"407\":3}}],[\"caller\",{\"1\":{\"332\":2}}],[\"callee\",{\"1\":{\"332\":4}}],[\"call\",{\"1\":{\"327\":1,\"332\":10,\"333\":2,\"335\":2,\"396\":1,\"406\":6,\"421\":1}}],[\"calling\",{\"1\":{\"325\":1}}],[\"category\",{\"1\":{\"323\":1}}],[\"catchaw\",{\"1\":{\"240\":1,\"241\":3}}],[\"catch\",{\"1\":{\"130\":1,\"265\":2}}],[\"card3\",{\"1\":{\"222\":2}}],[\"card2\",{\"1\":{\"222\":2}}],[\"card1\",{\"1\":{\"222\":2}}],[\"car\",{\"1\":{\"124\":7}}],[\"caption\",{\"1\":{\"130\":20,\"215\":2}}],[\"cap\",{\"1\":{\"86\":2}}],[\"capacitorhttp\",{\"1\":{\"86\":1}}],[\"capacitorconfig\",{\"1\":{\"86\":1}}],[\"capacitor\",{\"1\":{\"85\":1}}],[\"cannot\",{\"1\":{\"181\":1,\"182\":3}}],[\"can\",{\"1\":{\"7\":1,\"240\":1,\"406\":1}}],[\"cho\",{\"1\":{\"282\":2}}],[\"checked\",{\"1\":{\"276\":1}}],[\"cheat\",{\"1\":{\"4\":2}}],[\"ch\",{\"1\":{\"199\":4,\"292\":5}}],[\"china\",{\"1\":{\"159\":1,\"161\":1}}],[\"chatappmediator\",{\"1\":{\"240\":6,\"243\":2}}],[\"character\",{\"1\":{\"322\":1,\"328\":2,\"351\":3,\"353\":1,\"404\":1}}],[\"char\",{\"1\":{\"322\":1,\"325\":1,\"328\":2,\"338\":6,\"339\":1,\"345\":1,\"346\":1,\"349\":3,\"354\":4,\"365\":3,\"373\":5,\"383\":1,\"385\":3,\"386\":2,\"404\":3,\"405\":7,\"406\":1,\"407\":3,\"408\":1,\"413\":2,\"414\":1,\"415\":1,\"418\":1,\"419\":5,\"420\":2}}],[\"chardisplay\",{\"1\":{\"292\":5}}],[\"charlie使用了id卡\",{\"1\":{\"223\":1}}],[\"charlie\",{\"1\":{\"181\":3,\"182\":1,\"222\":1}}],[\"charset\",{\"1\":{\"44\":1}}],[\"chain\",{\"1\":{\"179\":1,\"180\":1,\"181\":1}}],[\"chainofresponsibility\",{\"0\":{\"179\":1},\"1\":{\"182\":1}}],[\"change\",{\"1\":{\"90\":2,\"91\":5,\"92\":16}}],[\"ccompiler\",{\"0\":{\"434\":1}}],[\"cc\",{\"1\":{\"29\":1}}],[\"cer\",{\"1\":{\"21\":2,\"22\":3}}],[\"certificates\",{\"1\":{\"25\":1}}],[\"certificate\",{\"1\":{\"22\":6}}],[\"cert\",{\"1\":{\"21\":3}}],[\"central\",{\"1\":{\"8\":2}}],[\"colon\",{\"1\":{\"416\":1}}],[\"colleaguecheckbox\",{\"1\":{\"245\":1}}],[\"colleaguetextfield\",{\"1\":{\"245\":1}}],[\"colleaguebutton\",{\"1\":{\"245\":1}}],[\"collaborators\",{\"1\":{\"240\":1}}],[\"could\",{\"1\":{\"322\":2,\"325\":3}}],[\"count\",{\"1\":{\"199\":2,\"251\":2}}],[\"countdisplay\",{\"0\":{\"156\":1},\"1\":{\"155\":2,\"156\":1,\"159\":4,\"164\":3}}],[\"code\",{\"1\":{\"45\":1,\"97\":2,\"130\":1,\"144\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"240\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1,\"322\":1,\"343\":1,\"386\":1,\"393\":1,\"395\":1,\"404\":2,\"405\":1,\"406\":2,\"410\":1,\"411\":1}}],[\"copy\",{\"1\":{\"17\":2,\"86\":1}}],[\"convenienceint\",{\"1\":{\"373\":1}}],[\"conditional\",{\"1\":{\"416\":1}}],[\"condition\",{\"1\":{\"393\":1}}],[\"cond\",{\"1\":{\"345\":1,\"353\":1,\"414\":1,\"416\":3}}],[\"concretevisitor\",{\"0\":{\"306\":1},\"1\":{\"303\":1,\"304\":3,\"306\":2,\"307\":1}}],[\"concreteelement\",{\"0\":{\"307\":1},\"1\":{\"303\":1,\"306\":1,\"307\":1}}],[\"concretestrategy\",{\"1\":{\"285\":1}}],[\"concreteobserver\",{\"1\":{\"255\":1}}],[\"concretemediator\",{\"1\":{\"245\":2}}],[\"concretecolleague\",{\"1\":{\"245\":3}}],[\"concreteclass\",{\"1\":{\"152\":1}}],[\"concrete\",{\"1\":{\"240\":1}}],[\"concreteiterator\",{\"1\":{\"234\":1}}],[\"concreteimplementor\",{\"1\":{\"163\":1,\"164\":1}}],[\"concretedecorator\",{\"1\":{\"205\":1}}],[\"console\",{\"1\":{\"121\":1,\"124\":4,\"130\":2,\"143\":2,\"160\":2,\"170\":4,\"181\":2,\"189\":1,\"191\":1,\"192\":2,\"199\":1,\"215\":2,\"222\":1,\"232\":1,\"240\":3,\"251\":2,\"265\":9,\"273\":2,\"277\":1,\"282\":6,\"292\":5,\"300\":4}}],[\"construct\",{\"1\":{\"170\":3}}],[\"constructor\",{\"1\":{\"121\":1,\"124\":1,\"130\":6,\"143\":3,\"156\":1,\"157\":1,\"160\":1,\"170\":1,\"181\":5,\"189\":1,\"191\":1,\"199\":4,\"215\":3,\"222\":1,\"232\":3,\"240\":1,\"251\":1,\"265\":2,\"273\":1,\"277\":1,\"282\":4,\"292\":2,\"300\":2}}],[\"const\",{\"1\":{\"40\":9,\"86\":1,\"121\":2,\"124\":2,\"143\":2,\"159\":3,\"170\":6,\"222\":5,\"232\":4,\"240\":7,\"251\":4,\"265\":3,\"273\":2,\"282\":5,\"292\":3,\"300\":2}}],[\"constexpr\",{\"1\":{\"38\":1,\"39\":1}}],[\"controller\",{\"0\":{\"259\":1},\"1\":{\"259\":1}}],[\"contents\",{\"1\":{\"320\":1,\"323\":1,\"341\":1,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"content\",{\"1\":{\"43\":1,\"130\":4}}],[\"context\",{\"1\":{\"17\":1}}],[\"containers\",{\"1\":{\"32\":1}}],[\"connections\",{\"1\":{\"16\":1}}],[\"config\",{\"1\":{\"86\":1}}],[\"conf\",{\"1\":{\"14\":4,\"16\":5,\"17\":6,\"22\":2}}],[\"comma\",{\"1\":{\"373\":1}}],[\"command\",{\"1\":{\"183\":1,\"194\":1,\"267\":1}}],[\"comments\",{\"1\":{\"352\":2}}],[\"community\",{\"1\":{\"32\":2}}],[\"compiler\",{\"1\":{\"317\":1}}],[\"complete\",{\"1\":{\"91\":1,\"92\":3}}],[\"composite\",{\"0\":{\"186\":1},\"1\":{\"135\":1,\"172\":1,\"183\":1,\"187\":2,\"192\":1,\"193\":2,\"202\":2,\"223\":1,\"235\":1,\"267\":1,\"300\":1,\"301\":1,\"309\":1}}],[\"compose\",{\"1\":{\"13\":1,\"14\":1,\"17\":1,\"18\":1,\"21\":1,\"23\":1}}],[\"component\",{\"1\":{\"7\":1,\"240\":1}}],[\"com\",{\"1\":{\"8\":13,\"32\":1,\"45\":1,\"97\":2,\"103\":2,\"130\":11,\"215\":5,\"216\":2,\"322\":1,\"340\":1,\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"421\":1}}],[\"cd\",{\"0\":{\"9\":1},\"1\":{\"21\":2},\"2\":{\"10\":1,\"11\":1}}],[\"cinderella\",{\"1\":{\"232\":1,\"233\":1}}],[\"ci\",{\"0\":{\"9\":1},\"2\":{\"10\":1,\"11\":1}}],[\"clean\",{\"1\":{\"406\":1}}],[\"clos\",{\"1\":{\"327\":1,\"338\":1}}],[\"close\",{\"1\":{\"155\":1,\"156\":1,\"157\":2,\"170\":4,\"215\":2,\"292\":4,\"322\":1,\"325\":1,\"338\":2,\"354\":1}}],[\"clone\",{\"1\":{\"322\":2,\"340\":2,\"355\":2,\"376\":2,\"387\":2,\"397\":2,\"421\":2}}],[\"cloud\",{\"1\":{\"8\":1}}],[\"classes\",{\"1\":{\"345\":1}}],[\"class\",{\"1\":{\"40\":1,\"117\":3,\"121\":2,\"124\":4,\"130\":9,\"143\":4,\"156\":1,\"157\":1,\"158\":1,\"160\":1,\"170\":4,\"181\":6,\"189\":1,\"190\":1,\"191\":1,\"199\":5,\"215\":3,\"222\":3,\"232\":3,\"240\":2,\"251\":4,\"265\":3,\"273\":1,\"277\":1,\"282\":4,\"292\":3,\"300\":5,\"349\":3,\"354\":1,\"373\":3,\"374\":1,\"382\":1,\"384\":2,\"385\":3,\"386\":3,\"406\":5}}],[\"client\",{\"1\":{\"16\":2,\"240\":1}}],[\"click\",{\"1\":{\"7\":2}}],[\"i++\",{\"1\":{\"156\":1,\"160\":1,\"199\":2,\"251\":2,\"282\":2,\"292\":2,\"300\":1,\"339\":8,\"354\":2,\"374\":1}}],[\"iworker\",{\"1\":{\"121\":4}}],[\"if\",{\"0\":{\"393\":1},\"1\":{\"90\":1,\"181\":5,\"199\":3,\"240\":2,\"273\":1,\"277\":2,\"282\":8,\"300\":2,\"322\":3,\"325\":3,\"328\":5,\"329\":1,\"330\":1,\"331\":5,\"332\":2,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":16,\"338\":8,\"345\":1,\"347\":1,\"348\":1,\"349\":3,\"350\":3,\"351\":6,\"352\":2,\"353\":24,\"354\":2,\"365\":7,\"370\":3,\"373\":10,\"374\":4,\"375\":1,\"381\":3,\"382\":1,\"384\":1,\"385\":5,\"386\":3,\"391\":1,\"392\":1,\"393\":8,\"394\":2,\"395\":2,\"396\":2,\"404\":2,\"405\":3,\"406\":9,\"407\":2,\"408\":2,\"409\":2,\"410\":1,\"411\":1,\"412\":3,\"413\":3,\"414\":1,\"415\":2,\"416\":4,\"417\":2,\"418\":3,\"420\":3,\"421\":1}}],[\"i\",{\"1\":{\"90\":2,\"92\":1,\"156\":2,\"160\":2,\"181\":4,\"199\":5,\"251\":4,\"282\":5,\"292\":4,\"300\":3,\"322\":4,\"325\":2,\"332\":2,\"333\":1,\"339\":1,\"354\":4,\"373\":1,\"374\":3}}],[\"iterator\",{\"1\":{\"223\":1,\"232\":14,\"233\":4,\"300\":4,\"308\":1,\"309\":1}}],[\"items\",{\"1\":{\"170\":5}}],[\"item\",{\"1\":{\"130\":21,\"170\":4}}],[\"it\",{\"1\":{\"90\":4,\"91\":5,\"92\":20,\"232\":3,\"240\":1,\"300\":3,\"348\":1,\"351\":1,\"373\":1,\"406\":1}}],[\"immediate\",{\"1\":{\"328\":1}}],[\"imm\",{\"1\":{\"327\":1,\"328\":3,\"339\":2,\"404\":3,\"405\":1,\"406\":4,\"409\":1,\"410\":1,\"411\":1,\"412\":2,\"413\":1,\"415\":2,\"418\":2,\"419\":3,\"420\":1}}],[\"implemented\",{\"1\":{\"300\":2}}],[\"implementor\",{\"1\":{\"163\":1}}],[\"implementation\",{\"1\":{\"155\":1}}],[\"implements\",{\"1\":{\"121\":1,\"143\":1,\"222\":1,\"232\":2,\"240\":2,\"251\":2,\"265\":2,\"282\":2,\"300\":1}}],[\"impl\",{\"1\":{\"155\":3,\"156\":2,\"157\":7}}],[\"import\",{\"1\":{\"90\":1,\"91\":1,\"92\":5,\"130\":15,\"143\":6,\"156\":2,\"157\":1,\"159\":3,\"160\":1,\"170\":7,\"181\":14,\"189\":1,\"191\":1,\"192\":3,\"199\":9,\"215\":3,\"222\":6,\"232\":9,\"251\":12,\"265\":5,\"273\":1,\"282\":10,\"292\":4,\"300\":15}}],[\"img\",{\"1\":{\"91\":1}}],[\"images\",{\"1\":{\"31\":1}}],[\"idmain\",{\"1\":{\"354\":2}}],[\"idsize\",{\"1\":{\"349\":2,\"384\":1}}],[\"identifierenum\",{\"1\":{\"349\":1}}],[\"identifier\",{\"1\":{\"349\":5,\"373\":3,\"374\":1,\"382\":1,\"386\":1}}],[\"idcardfactory\",{\"1\":{\"222\":5}}],[\"idcard\",{\"1\":{\"222\":7}}],[\"id\",{\"1\":{\"89\":1,\"93\":1,\"273\":1,\"274\":1,\"277\":1,\"345\":1,\"349\":15,\"354\":6,\"370\":8,\"373\":17,\"374\":5,\"381\":5,\"382\":2,\"384\":11,\"385\":14,\"386\":12,\"406\":18,\"414\":1}}],[\"isweakerthan\",{\"1\":{\"282\":1}}],[\"isstrongerthan\",{\"1\":{\"282\":3}}],[\"issue\",{\"1\":{\"20\":2}}],[\"is\",{\"1\":{\"31\":1,\"43\":1,\"124\":2,\"181\":1,\"182\":13,\"240\":1,\"322\":1,\"331\":2,\"351\":2,\"405\":1,\"406\":3,\"418\":2}}],[\"isn\",{\"0\":{\"7\":1}}],[\"initializer\",{\"1\":{\"374\":1}}],[\"invalid\",{\"1\":{\"373\":1,\"386\":1}}],[\"information\",{\"1\":{\"373\":1}}],[\"increment\",{\"1\":{\"413\":1}}],[\"inc\",{\"1\":{\"345\":1,\"353\":1,\"407\":2,\"408\":2,\"409\":1,\"410\":1,\"411\":1,\"412\":2,\"413\":3,\"414\":1,\"419\":3}}],[\"include\",{\"1\":{\"16\":2,\"240\":1,\"322\":4,\"348\":1,\"365\":2}}],[\"independent\",{\"1\":{\"240\":1}}],[\"index++\",{\"1\":{\"232\":1}}],[\"index\",{\"1\":{\"232\":6,\"385\":5,\"386\":3,\"406\":1}}],[\"indent\",{\"1\":{\"44\":1}}],[\"inheritance\",{\"1\":{\"143\":4}}],[\"inject\",{\"1\":{\"102\":2}}],[\"into\",{\"1\":{\"351\":1}}],[\"integer\",{\"1\":{\"328\":2}}],[\"intel\",{\"1\":{\"328\":1}}],[\"interpreter\",{\"1\":{\"309\":1,\"315\":1,\"320\":1,\"322\":1,\"323\":1,\"340\":1,\"341\":1,\"355\":1,\"359\":1,\"369\":1,\"376\":1,\"380\":1,\"387\":1,\"391\":1,\"397\":1,\"421\":1,\"425\":1}}],[\"interface\",{\"1\":{\"121\":1,\"143\":1,\"222\":1,\"232\":2,\"240\":2,\"251\":1,\"265\":1,\"282\":1,\"300\":1}}],[\"int\",{\"1\":{\"38\":2,\"39\":11,\"322\":6,\"325\":3,\"326\":3,\"328\":3,\"330\":1,\"331\":2,\"332\":9,\"333\":1,\"335\":2,\"336\":1,\"338\":2,\"339\":3,\"345\":1,\"346\":1,\"349\":13,\"351\":1,\"354\":4,\"365\":20,\"373\":14,\"374\":2,\"375\":1,\"382\":1,\"383\":4,\"385\":7,\"386\":5,\"393\":2,\"394\":2,\"404\":4,\"405\":8,\"406\":1,\"407\":2,\"410\":1,\"411\":1,\"412\":2,\"413\":1,\"414\":1,\"416\":2,\"417\":4,\"418\":3,\"419\":3,\"420\":1,\"421\":5}}],[\"instruction\",{\"1\":{\"338\":1}}],[\"instructionsenum\",{\"1\":{\"327\":1}}],[\"instanceof\",{\"1\":{\"300\":2}}],[\"instance\",{\"1\":{\"240\":1,\"273\":5,\"274\":1,\"277\":6}}],[\"install\",{\"1\":{\"21\":1}}],[\"insert\",{\"1\":{\"44\":1}}],[\"inspect\",{\"1\":{\"32\":1}}],[\"in\",{\"0\":{\"7\":1,\"28\":1},\"1\":{\"7\":2,\"32\":1,\"90\":4,\"92\":3,\"232\":1,\"233\":1,\"328\":4,\"345\":1,\"406\":2,\"415\":1,\"416\":1}}],[\"ionic打包后的相对路径不正确\",{\"1\":{\"87\":1}}],[\"ionic\",{\"1\":{\"85\":1,\"86\":4}}],[\"io\",{\"1\":{\"4\":1,\"8\":2,\"103\":1}}],[\"5501\",{\"1\":{\"401\":1}}],[\"55718\",{\"1\":{\"97\":1}}],[\"50\",{\"1\":{\"251\":1}}],[\"500\",{\"1\":{\"181\":1,\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"5版本开始引入了新的关键字\",{\"1\":{\"92\":1}}],[\"5\",{\"0\":{\"7\":1,\"369\":1},\"1\":{\"7\":1,\"159\":1,\"244\":1,\"292\":1,\"312\":1,\"320\":1,\"323\":2,\"328\":1,\"332\":2,\"338\":1,\"341\":3,\"342\":2,\"359\":2,\"369\":2,\"380\":1,\"391\":1,\"397\":1,\"401\":4,\"402\":7,\"425\":2}}],[\"tk\",{\"1\":{\"365\":4,\"375\":3}}],[\"tutor\",{\"1\":{\"339\":2,\"421\":5}}],[\"turndown\",{\"1\":{\"103\":1}}],[\"tmp\",{\"1\":{\"192\":1,\"193\":2,\"300\":1,\"301\":2,\"328\":1,\"338\":7,\"373\":2,\"406\":4,\"407\":4,\"413\":2,\"415\":2,\"418\":1,\"419\":1,\"420\":3,\"421\":3}}],[\"tmpdir\",{\"1\":{\"192\":2,\"300\":2}}],[\"ts\",{\"0\":{\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1},\"1\":{\"130\":12,\"143\":6,\"144\":2,\"161\":2,\"170\":5,\"171\":2,\"181\":7,\"182\":2,\"193\":2,\"199\":6,\"200\":2,\"215\":4,\"216\":2,\"222\":5,\"223\":2,\"232\":6,\"233\":2,\"241\":2,\"251\":6,\"252\":2,\"265\":5,\"266\":2,\"273\":2,\"274\":2,\"282\":6,\"292\":4,\"293\":2,\"300\":7,\"301\":2}}],[\"typora\",{\"1\":{\"102\":8}}],[\"typora激活教程\",{\"0\":{\"102\":1}}],[\"typedef\",{\"1\":{\"40\":1}}],[\"type\",{\"1\":{\"16\":1,\"349\":4,\"354\":2,\"370\":4,\"373\":16,\"374\":1,\"381\":4,\"384\":2,\"385\":11,\"386\":8,\"404\":2,\"405\":7,\"406\":7,\"407\":4,\"408\":5,\"409\":2,\"410\":1,\"411\":1,\"412\":2,\"413\":2,\"415\":3,\"417\":2,\"418\":4,\"419\":5,\"420\":3}}],[\"typescript\",{\"0\":{\"231\":1},\"1\":{\"231\":1,\"232\":1,\"251\":1},\"2\":{\"127\":1,\"137\":1,\"147\":1,\"167\":1,\"178\":1,\"185\":1,\"196\":1,\"212\":1,\"219\":1,\"225\":1,\"228\":1,\"237\":1,\"248\":1,\"262\":1,\"269\":1,\"279\":1,\"289\":1,\"297\":1,\"311\":1}}],[\"types\",{\"1\":{\"16\":1,\"354\":1,\"373\":1}}],[\"tail\",{\"1\":{\"365\":8}}],[\"tail><term\",{\"1\":{\"364\":1}}],[\"tail><expr\",{\"1\":{\"364\":1}}],[\"tail>\",{\"1\":{\"364\":6}}],[\"tag\",{\"1\":{\"323\":1}}],[\"taro\",{\"1\":{\"282\":1,\"283\":1}}],[\"target=change\",{\"1\":{\"90\":2,\"92\":4}}],[\"takahashi\",{\"1\":{\"215\":1}}],[\"table\",{\"1\":{\"320\":1,\"323\":1,\"341\":1,\"349\":2,\"354\":2,\"359\":1,\"369\":1,\"380\":1,\"391\":1,\"401\":1,\"425\":1}}],[\"tab\",{\"1\":{\"44\":1}}],[\"treated\",{\"1\":{\"373\":1}}],[\"trouble\",{\"1\":{\"181\":38,\"182\":16}}],[\"track\",{\"1\":{\"354\":1}}],[\"traysearch\",{\"1\":{\"130\":4}}],[\"trayyahoo\",{\"1\":{\"130\":4}}],[\"traynews\",{\"1\":{\"130\":4}}],[\"tray\",{\"1\":{\"130\":11,\"133\":1}}],[\"trailing\",{\"1\":{\"44\":1}}],[\"trim\",{\"1\":{\"44\":1}}],[\"true\",{\"1\":{\"44\":3,\"86\":2,\"181\":3,\"273\":1,\"274\":1,\"282\":1,\"393\":1}}],[\"try\",{\"1\":{\"16\":3,\"22\":5,\"90\":1,\"130\":1,\"265\":2}}],[\"that\",{\"1\":{\"240\":1,\"373\":1}}],[\"three\",{\"1\":{\"350\":1}}],[\"thread\",{\"1\":{\"90\":2,\"92\":4}}],[\"threads\",{\"1\":{\"90\":3,\"92\":3}}],[\"threading\",{\"1\":{\"90\":4,\"92\":5}}],[\"throw\",{\"1\":{\"190\":1,\"300\":2}}],[\"this\",{\"1\":{\"43\":1,\"121\":2,\"124\":3,\"130\":18,\"143\":8,\"156\":3,\"157\":7,\"160\":6,\"170\":25,\"181\":17,\"189\":7,\"190\":3,\"191\":3,\"199\":20,\"215\":6,\"222\":7,\"232\":16,\"240\":7,\"251\":9,\"265\":11,\"273\":3,\"277\":5,\"282\":46,\"292\":11,\"300\":18,\"373\":1,\"384\":1,\"406\":1}}],[\"there\",{\"1\":{\"373\":1,\"406\":1}}],[\"them\",{\"1\":{\"240\":1}}],[\"the\",{\"0\":{\"7\":1},\"1\":{\"7\":6,\"31\":1,\"43\":2,\"232\":1,\"233\":1,\"240\":12,\"241\":3,\"322\":1,\"329\":2,\"330\":1,\"351\":2,\"353\":1,\"354\":1,\"373\":6,\"382\":1,\"385\":1,\"386\":4,\"404\":3,\"406\":3,\"408\":1,\"409\":2,\"413\":1,\"415\":1,\"418\":2}}],[\"term\",{\"1\":{\"365\":8}}],[\"tex\",{\"1\":{\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"textbuilder\",{\"1\":{\"170\":9,\"176\":1}}],[\"text\",{\"1\":{\"98\":1,\"170\":1,\"171\":1,\"322\":1,\"325\":11,\"339\":9,\"373\":1,\"382\":2,\"393\":2,\"394\":2,\"409\":3,\"413\":4,\"415\":3,\"416\":2,\"417\":2}}],[\"template\",{\"0\":{\"290\":1,\"291\":1},\"1\":{\"152\":1,\"165\":1,\"172\":1,\"223\":1,\"290\":1,\"293\":1}}],[\"template<typename\",{\"1\":{\"40\":1}}],[\"test\",{\"1\":{\"92\":2}}],[\"tencent\",{\"1\":{\"8\":1}}],[\"title><\",{\"1\":{\"130\":2,\"170\":1,\"171\":1,\"215\":1,\"216\":1}}],[\"title\",{\"1\":{\"130\":9,\"170\":7,\"215\":5,\"323\":1}}],[\"times\",{\"1\":{\"156\":2}}],[\"time\",{\"1\":{\"92\":1}}],[\"timeout\",{\"1\":{\"16\":2}}],[\"tips\",{\"0\":{\"86\":1}}],[\"tieway59\",{\"1\":{\"29\":1}}],[\"tz=asia\",{\"1\":{\"17\":1}}],[\"tcp\",{\"1\":{\"16\":1}}],[\"t\",{\"0\":{\"7\":1},\"1\":{\"40\":5,\"90\":4,\"92\":4,\"351\":1,\"365\":3}}],[\"toc\",{\"1\":{\"359\":1}}],[\"tokens\",{\"1\":{\"345\":1}}],[\"tokenchar\",{\"1\":{\"322\":1}}],[\"token\",{\"1\":{\"317\":2,\"321\":1,\"322\":6,\"342\":3,\"343\":1,\"345\":1,\"346\":2,\"347\":2,\"348\":1,\"349\":16,\"350\":27,\"351\":14,\"352\":2,\"353\":45,\"354\":3,\"365\":20,\"372\":2,\"373\":12,\"374\":7,\"375\":2,\"382\":1,\"384\":1,\"385\":6,\"386\":9,\"393\":2,\"394\":1,\"395\":2,\"396\":3,\"404\":5,\"405\":4,\"406\":4,\"407\":6,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":4,\"413\":4,\"414\":2,\"415\":1,\"416\":2,\"417\":2,\"418\":2,\"419\":2,\"420\":1}}],[\"total\",{\"1\":{\"282\":1,\"283\":1}}],[\"tomato\",{\"1\":{\"240\":1,\"241\":3}}],[\"tomura\",{\"1\":{\"192\":5,\"193\":3,\"215\":2,\"300\":5,\"301\":3}}],[\"tostring\",{\"1\":{\"181\":2,\"190\":1,\"282\":6,\"300\":1}}],[\"todo\",{\"1\":{\"24\":1,\"33\":1,\"43\":1,\"45\":1,\"94\":1,\"317\":1}}],[\"tools\",{\"0\":{\"7\":1},\"1\":{\"7\":1}}],[\"to\",{\"0\":{\"6\":1},\"1\":{\"32\":1,\"215\":1,\"216\":2,\"240\":7,\"241\":3,\"322\":1,\"328\":5,\"330\":1,\"354\":2,\"404\":1,\"406\":2,\"413\":1}}],[\"questions\",{\"0\":{\"6\":1}}],[\"qt\",{\"0\":{\"5\":1,\"6\":1,\"7\":2},\"1\":{\"7\":2}}],[\"occurs\",{\"1\":{\"406\":1}}],[\"oct\",{\"1\":{\"350\":2}}],[\"octet\",{\"1\":{\"16\":1}}],[\"out\",{\"1\":{\"339\":1}}],[\"output\",{\"1\":{\"130\":2,\"282\":1}}],[\"op\",{\"1\":{\"328\":6,\"329\":1,\"330\":1,\"331\":2,\"332\":2,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":16,\"338\":9}}],[\"operators\",{\"1\":{\"345\":1}}],[\"operator\",{\"1\":{\"40\":3,\"352\":1,\"405\":1,\"414\":2}}],[\"operator+\",{\"1\":{\"40\":1}}],[\"open\",{\"1\":{\"7\":1,\"155\":1,\"156\":1,\"157\":2,\"292\":4,\"322\":2,\"327\":1,\"338\":3,\"354\":2}}],[\"order\",{\"1\":{\"345\":1}}],[\"or\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":4,\"396\":1,\"407\":1,\"414\":1,\"417\":2}}],[\"org\",{\"1\":{\"4\":1}}],[\"old\",{\"1\":{\"322\":2,\"325\":2,\"332\":1,\"335\":1,\"336\":1,\"383\":1}}],[\"o\",{\"1\":{\"251\":4,\"421\":1}}],[\"observers\",{\"1\":{\"251\":5}}],[\"observer2\",{\"1\":{\"251\":2}}],[\"observer1\",{\"1\":{\"251\":2}}],[\"observer\",{\"0\":{\"249\":1,\"255\":1,\"256\":1},\"1\":{\"246\":1,\"251\":19,\"252\":1,\"254\":1,\"255\":3}}],[\"object\",{\"1\":{\"240\":2,\"265\":1}}],[\"owners\",{\"1\":{\"222\":3}}],[\"owner\",{\"1\":{\"222\":11}}],[\"oddsupport\",{\"1\":{\"181\":5}}],[\"oi\",{\"0\":{\"35\":1},\"1\":{\"35\":1},\"2\":{\"41\":1,\"99\":1}}],[\"other\",{\"1\":{\"9\":1,\"240\":1}}],[\"only\",{\"1\":{\"351\":1,\"405\":1,\"406\":1}}],[\"online\",{\"1\":{\"12\":1,\"16\":4,\"18\":3,\"20\":2,\"21\":4,\"22\":14}}],[\"ones\",{\"1\":{\"386\":1}}],[\"one\",{\"1\":{\"349\":2,\"404\":1}}],[\"onto\",{\"1\":{\"329\":1}}],[\"on\",{\"1\":{\"8\":1,\"16\":2,\"32\":1,\"328\":2,\"385\":1,\"386\":1,\"418\":2}}],[\"off\",{\"1\":{\"16\":1}}],[\"of\",{\"1\":{\"4\":1,\"43\":1,\"44\":1,\"179\":1,\"180\":1,\"181\":1,\"240\":4,\"320\":1,\"322\":1,\"323\":1,\"329\":1,\"341\":1,\"349\":2,\"354\":2,\"359\":1,\"369\":1,\"373\":4,\"380\":1,\"382\":1,\"385\":5,\"386\":4,\"391\":1,\"401\":1,\"404\":1,\"406\":3,\"409\":3,\"413\":1,\"418\":1,\"425\":1}}],[\"emit\",{\"1\":{\"386\":1,\"393\":1,\"395\":1,\"404\":2,\"405\":1,\"406\":2,\"410\":1,\"411\":1}}],[\"empty\",{\"1\":{\"370\":5,\"381\":5,\"396\":1}}],[\"emoji\",{\"1\":{\"4\":2}}],[\"ebnf\",{\"0\":{\"370\":1,\"381\":1},\"1\":{\"369\":2,\"370\":1,\"377\":3,\"380\":1,\"381\":1}}],[\"ebppop\",{\"1\":{\"335\":1}}],[\"ebpmov\",{\"1\":{\"333\":1}}],[\"ebp\",{\"1\":{\"332\":6,\"333\":1,\"335\":1}}],[\"escape\",{\"1\":{\"351\":2}}],[\"esp\",{\"1\":{\"332\":6,\"333\":2,\"334\":2,\"335\":1}}],[\"eax\",{\"1\":{\"332\":1}}],[\"each\",{\"1\":{\"240\":1}}],[\"eq\",{\"1\":{\"327\":1,\"337\":1,\"345\":2,\"353\":1,\"410\":1,\"414\":1}}],[\"eof\",{\"1\":{\"322\":1}}],[\"eval\",{\"1\":{\"322\":3,\"328\":2}}],[\"even\",{\"1\":{\"282\":4,\"283\":3}}],[\"event\",{\"1\":{\"91\":1,\"92\":3,\"240\":4}}],[\"events\",{\"1\":{\"16\":1,\"240\":1}}],[\"e\",{\"1\":{\"265\":4}}],[\"ey\",{\"1\":{\"240\":1,\"241\":3}}],[\"element\",{\"1\":{\"300\":5,\"303\":4,\"308\":1}}],[\"else\",{\"1\":{\"181\":3,\"199\":3,\"282\":7,\"300\":1,\"328\":4,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":16,\"338\":9,\"345\":1,\"348\":1,\"349\":1,\"350\":3,\"351\":2,\"352\":2,\"353\":23,\"354\":1,\"365\":5,\"370\":1,\"373\":2,\"375\":1,\"381\":1,\"382\":1,\"385\":1,\"392\":1,\"393\":7,\"394\":1,\"395\":1,\"396\":3,\"404\":1,\"405\":2,\"406\":7,\"407\":2,\"408\":2,\"409\":2,\"410\":1,\"411\":1,\"412\":3,\"413\":3,\"414\":1,\"415\":1,\"416\":2,\"417\":2,\"418\":2,\"420\":2}}],[\"elmo\",{\"1\":{\"181\":3,\"182\":4}}],[\"enter\",{\"1\":{\"333\":1}}],[\"ent\",{\"0\":{\"333\":1},\"1\":{\"323\":1,\"327\":1,\"332\":1,\"333\":2,\"386\":1}}],[\"entries\",{\"1\":{\"192\":2,\"193\":2,\"300\":2,\"301\":2}}],[\"entry\",{\"0\":{\"190\":1},\"1\":{\"187\":1,\"189\":12,\"190\":4,\"191\":3,\"192\":2,\"300\":34}}],[\"enum\",{\"0\":{\"374\":1},\"1\":{\"282\":1,\"345\":2,\"354\":1,\"369\":1,\"370\":2,\"371\":1,\"373\":9,\"374\":4,\"406\":2,\"414\":2}}],[\"en\",{\"1\":{\"240\":5}}],[\"engine\",{\"1\":{\"124\":15}}],[\"enhanced\",{\"1\":{\"97\":1}}],[\"enabled\",{\"1\":{\"86\":1}}],[\"enduml\",{\"1\":{\"222\":1}}],[\"end\",{\"1\":{\"44\":1,\"392\":1,\"404\":1}}],[\"environment\",{\"1\":{\"17\":1}}],[\"env\",{\"1\":{\"9\":2}}],[\"editorconfig文件\",{\"1\":{\"44\":1}}],[\"editorconfig\",{\"1\":{\"44\":1}}],[\"etc\",{\"1\":{\"16\":2,\"17\":4,\"22\":6}}],[\"error\",{\"1\":{\"14\":1,\"16\":10,\"22\":10,\"130\":2,\"190\":1,\"265\":1,\"300\":2}}],[\"exists\",{\"1\":{\"373\":1,\"386\":1}}],[\"exist\",{\"1\":{\"373\":1}}],[\"existing\",{\"1\":{\"349\":1}}],[\"exit\",{\"1\":{\"327\":1,\"338\":3,\"339\":2,\"354\":2,\"365\":1,\"373\":2,\"374\":2,\"375\":1,\"385\":2,\"386\":2,\"406\":2,\"408\":1,\"409\":1,\"413\":1,\"415\":1,\"416\":1,\"420\":1,\"421\":2}}],[\"expession\",{\"1\":{\"415\":1}}],[\"expected\",{\"1\":{\"365\":1,\"375\":1,\"420\":1}}],[\"expr\",{\"1\":{\"365\":8,\"373\":1,\"404\":2,\"405\":6,\"406\":4,\"407\":3,\"408\":5,\"409\":2,\"410\":1,\"411\":1,\"412\":2,\"413\":2,\"415\":4,\"416\":1,\"417\":2,\"418\":3,\"419\":5,\"420\":2}}],[\"expressionvoid\",{\"1\":{\"373\":1}}],[\"expression\",{\"1\":{\"322\":3,\"370\":5,\"374\":1,\"381\":4,\"387\":1,\"392\":3,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":1,\"406\":1,\"407\":2,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":2,\"413\":1,\"414\":1,\"415\":1,\"416\":2,\"417\":2,\"418\":2,\"420\":1,\"422\":1}}],[\"export\",{\"1\":{\"130\":9,\"143\":5,\"156\":1,\"157\":1,\"158\":1,\"160\":1,\"170\":4,\"181\":6,\"189\":1,\"190\":1,\"191\":1,\"199\":5,\"215\":3,\"222\":4,\"232\":5,\"251\":5,\"265\":4,\"273\":1,\"277\":1,\"282\":6,\"292\":3,\"300\":6}}],[\"example\",{\"1\":{\"240\":1}}],[\"excite\",{\"1\":{\"130\":5}}],[\"extending\",{\"1\":{\"240\":1}}],[\"extends\",{\"1\":{\"124\":1,\"130\":6,\"143\":2,\"156\":1,\"160\":1,\"170\":2,\"181\":4,\"189\":1,\"191\":1,\"199\":4,\"222\":1,\"251\":1,\"292\":2,\"300\":3}}],[\"extension\",{\"1\":{\"45\":2}}],[\"execute\",{\"1\":{\"251\":3}}],[\"exe\",{\"1\":{\"102\":5}}],[\"ex\",{\"1\":{\"4\":1}}],[\"p++\",{\"1\":{\"413\":1,\"419\":1}}],[\"p+z\",{\"1\":{\"38\":1}}],[\"ptr\",{\"1\":{\"354\":1,\"373\":5,\"385\":1,\"386\":1,\"404\":1,\"405\":1,\"407\":1,\"408\":2,\"409\":1,\"413\":1,\"418\":1,\"419\":3,\"420\":3}}],[\"pc+1\",{\"1\":{\"332\":1}}],[\"pc++\",{\"1\":{\"328\":1,\"333\":1,\"334\":1,\"336\":1}}],[\"pc\",{\"1\":{\"326\":2,\"330\":4,\"331\":6,\"332\":4,\"335\":2,\"338\":1,\"339\":1}}],[\"p3\",{\"1\":{\"265\":2}}],[\"p2\",{\"1\":{\"265\":2}}],[\"p1\",{\"1\":{\"265\":2}}],[\"pbd\",{\"1\":{\"143\":2}}],[\"pbi\",{\"1\":{\"143\":2}}],[\"picture\",{\"1\":{\"134\":1}}],[\"pid\",{\"1\":{\"16\":2}}],[\"ps\",{\"1\":{\"130\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1,\"316\":1}}],[\"peg\",{\"1\":{\"428\":1}}],[\"people\",{\"1\":{\"130\":5,\"240\":1}}],[\"peano\",{\"0\":{\"73\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1},\"1\":{\"46\":2,\"47\":1,\"50\":2,\"51\":2,\"53\":3,\"54\":1,\"55\":2,\"59\":2,\"62\":1,\"66\":1,\"67\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":4,\"73\":5}}],[\"push<expr2>\",{\"1\":{\"418\":1}}],[\"push\",{\"0\":{\"329\":1},\"1\":{\"130\":16,\"189\":1,\"222\":1,\"240\":1,\"251\":1,\"300\":1,\"323\":1,\"327\":1,\"328\":1,\"329\":3,\"332\":7,\"339\":2,\"406\":1,\"410\":1,\"411\":1,\"412\":1,\"413\":4,\"415\":1,\"418\":4,\"419\":3,\"420\":2,\"421\":1}}],[\"publishing\",{\"1\":{\"241\":3}}],[\"publish\",{\"1\":{\"240\":3}}],[\"publishmessage\",{\"1\":{\"240\":4}}],[\"publisher\",{\"1\":{\"45\":1}}],[\"public\",{\"1\":{\"8\":2,\"40\":1,\"130\":1,\"170\":15,\"240\":2,\"251\":5,\"273\":1,\"277\":1}}],[\"ppt\",{\"1\":{\"97\":1}}],[\"py\",{\"1\":{\"92\":2}}],[\"python3\",{\"0\":{\"89\":1},\"1\":{\"92\":2}}],[\"python\",{\"1\":{\"13\":1,\"92\":1}}],[\"position\",{\"1\":{\"386\":1,\"404\":1}}],[\"pos\",{\"1\":{\"346\":1,\"349\":4,\"351\":2,\"386\":3}}],[\"postfix\",{\"1\":{\"414\":1}}],[\"post\",{\"1\":{\"43\":1,\"97\":1}}],[\"pop\",{\"1\":{\"328\":1,\"332\":1,\"335\":1}}],[\"poolsize\",{\"1\":{\"322\":5,\"325\":9,\"326\":2,\"421\":1}}],[\"pointer<expr1>\",{\"1\":{\"418\":1}}],[\"pointer\",{\"1\":{\"322\":1,\"373\":1,\"385\":2,\"405\":1,\"415\":1,\"418\":1,\"420\":2}}],[\"powershell\",{\"1\":{\"102\":1}}],[\"ports\",{\"1\":{\"17\":1}}],[\"p><ul><li>晚上好\",{\"1\":{\"171\":1}}],[\"p><ul><li>早上好\",{\"1\":{\"171\":1}}],[\"p>`\",{\"1\":{\"170\":1}}],[\"p>\",{\"1\":{\"40\":1,\"215\":1,\"216\":2}}],[\"p=998244353\",{\"1\":{\"38\":1,\"39\":1}}],[\"p\",{\"1\":{\"32\":1,\"38\":2,\"39\":2,\"40\":2,\"222\":3,\"265\":8,\"370\":1,\"404\":4,\"413\":1,\"419\":1,\"429\":1}}],[\"prtf\",{\"1\":{\"327\":1,\"338\":1}}],[\"pre\",{\"1\":{\"413\":1}}],[\"precedence\",{\"1\":{\"345\":1,\"407\":1,\"408\":1}}],[\"prevhand\",{\"1\":{\"282\":3}}],[\"prevhandvalue\",{\"1\":{\"282\":5}}],[\"preview\",{\"1\":{\"97\":1}}],[\"prefix\",{\"1\":{\"189\":3,\"190\":1,\"191\":2}}],[\"principle\",{\"1\":{\"209\":1}}],[\"printf\",{\"1\":{\"322\":4,\"325\":3,\"338\":7,\"354\":1,\"365\":2,\"373\":2,\"374\":2,\"375\":1,\"385\":2,\"386\":2,\"406\":3,\"408\":1,\"409\":1,\"413\":1,\"415\":1,\"416\":1,\"420\":1}}],[\"printlist\",{\"1\":{\"190\":1,\"192\":2}}],[\"printlistwithprefix\",{\"1\":{\"189\":2,\"190\":2,\"191\":1}}],[\"printline\",{\"1\":{\"160\":3,\"292\":3}}],[\"printstrong\",{\"1\":{\"143\":6}}],[\"printweak\",{\"1\":{\"143\":6}}],[\"printbanner2\",{\"1\":{\"143\":3}}],[\"printbanner\",{\"1\":{\"142\":1,\"143\":11}}],[\"print\",{\"1\":{\"90\":1,\"91\":1,\"92\":10,\"142\":1,\"143\":10,\"155\":1,\"156\":1,\"157\":2,\"292\":4}}],[\"private\",{\"1\":{\"40\":1,\"121\":1,\"124\":1,\"143\":2,\"157\":1,\"160\":3,\"170\":4,\"181\":5,\"189\":2,\"191\":2,\"199\":3,\"215\":3,\"222\":2,\"232\":5,\"240\":2,\"251\":2,\"265\":3,\"273\":3,\"277\":4,\"282\":16,\"292\":4,\"300\":5}}],[\"privkey\",{\"1\":{\"21\":1,\"22\":3}}],[\"probstrategy\",{\"1\":{\"282\":6}}],[\"proto\",{\"1\":{\"265\":2}}],[\"prototype\",{\"0\":{\"263\":1,\"264\":1},\"1\":{\"264\":2,\"266\":1,\"275\":1}}],[\"protected\",{\"1\":{\"130\":3,\"181\":5,\"189\":1,\"190\":1,\"191\":1,\"199\":1,\"222\":2,\"292\":3}}],[\"product\",{\"1\":{\"222\":13,\"265\":13}}],[\"program\",{\"0\":{\"372\":1},\"1\":{\"102\":1,\"322\":3,\"325\":1,\"326\":1,\"339\":1,\"354\":1,\"369\":1,\"370\":1,\"372\":2}}],[\"proxy\",{\"1\":{\"16\":1,\"22\":2,\"25\":1}}],[\"processes\",{\"1\":{\"16\":1}}],[\"properties\",{\"1\":{\"8\":1}}],[\"project\",{\"1\":{\"8\":1,\"14\":1,\"17\":2}}],[\"paa\",{\"1\":{\"282\":2}}],[\"payload\",{\"1\":{\"240\":5}}],[\"parenthesis\",{\"1\":{\"407\":2}}],[\"params+1\",{\"1\":{\"385\":1}}],[\"params++\",{\"1\":{\"385\":1}}],[\"params\",{\"1\":{\"385\":2}}],[\"param\",{\"1\":{\"383\":5}}],[\"parameter\",{\"1\":{\"370\":2,\"373\":1,\"381\":2,\"382\":1,\"384\":1,\"385\":6,\"386\":1}}],[\"paragraph\",{\"1\":{\"215\":3}}],[\"parsed\",{\"1\":{\"349\":1}}],[\"parse\",{\"1\":{\"346\":1,\"347\":1,\"349\":1,\"350\":1,\"351\":1,\"353\":8,\"373\":5,\"374\":1,\"393\":3,\"414\":1}}],[\"parser\",{\"1\":{\"317\":1,\"343\":1}}],[\"part\",{\"1\":{\"4\":1,\"373\":2,\"384\":1}}],[\"pattern\",{\"1\":{\"139\":1,\"144\":1,\"214\":1,\"240\":1,\"281\":1}}],[\"patern\",{\"1\":{\"130\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1}}],[\"patern>\",{\"1\":{\"130\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1}}],[\"pagemaker\",{\"1\":{\"215\":5}}],[\"page\",{\"1\":{\"130\":12,\"133\":1,\"215\":1,\"216\":2}}],[\"pack\",{\"1\":{\"32\":2}}],[\"pass\",{\"1\":{\"16\":1,\"22\":2,\"406\":1}}],[\"player2\",{\"1\":{\"282\":7}}],[\"player1\",{\"1\":{\"282\":7}}],[\"player\",{\"1\":{\"282\":6}}],[\"plays\",{\"1\":{\"240\":1}}],[\"plantuml\",{\"1\":{\"4\":1}}],[\"plugins\",{\"1\":{\"86\":1}}],[\"pluginmanagement\",{\"1\":{\"8\":1}}],[\"plugin\",{\"0\":{\"43\":1,\"45\":1},\"1\":{\"8\":3,\"43\":1}}],[\"got\",{\"1\":{\"365\":1}}],[\"google\",{\"1\":{\"8\":4,\"130\":3}}],[\"glo\",{\"1\":{\"345\":1,\"373\":1,\"374\":1,\"406\":1,\"414\":1}}],[\"global\",{\"0\":{\"373\":1},\"1\":{\"90\":2,\"91\":1,\"92\":4,\"369\":1,\"370\":1,\"372\":3,\"373\":6,\"386\":1,\"406\":1}}],[\"gcc\",{\"1\":{\"339\":2,\"421\":1}}],[\"gt\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"guu\",{\"1\":{\"282\":2}}],[\"gui\",{\"1\":{\"250\":1}}],[\"guide\",{\"1\":{\"25\":1,\"96\":1}}],[\"graph\",{\"1\":{\"251\":4}}],[\"graphobserver\",{\"1\":{\"251\":5,\"252\":20,\"255\":1}}],[\"gradlepluginportal\",{\"1\":{\"8\":1}}],[\"gradle\",{\"1\":{\"8\":6}}],[\"group\",{\"1\":{\"240\":1,\"241\":3}}],[\"group`\",{\"1\":{\"240\":1}}],[\"groups\",{\"1\":{\"240\":1}}],[\"gmw\",{\"1\":{\"130\":6}}],[\"git\",{\"1\":{\"322\":1,\"340\":1,\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"421\":1}}],[\"github\",{\"0\":{\"33\":1},\"1\":{\"4\":1,\"103\":2,\"315\":1,\"322\":2,\"340\":2,\"355\":2,\"376\":2,\"387\":2,\"397\":2,\"421\":2}}],[\"gil\",{\"1\":{\"91\":1}}],[\"gather\",{\"1\":{\"91\":1,\"92\":3}}],[\"games\",{\"1\":{\"282\":1,\"283\":8}}],[\"gamecount++\",{\"1\":{\"282\":3}}],[\"gamecount\",{\"1\":{\"282\":2}}],[\"game\",{\"0\":{\"43\":1},\"1\":{\"43\":1,\"192\":1,\"193\":1,\"300\":1,\"301\":1}}],[\"ge\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"gen\",{\"1\":{\"102\":2}}],[\"generatedid++\",{\"1\":{\"273\":1,\"277\":1}}],[\"generatedid\",{\"1\":{\"273\":2,\"277\":2}}],[\"generator\",{\"1\":{\"251\":8,\"317\":1}}],[\"generally\",{\"1\":{\"32\":1}}],[\"genesis\",{\"1\":{\"4\":2}}],[\"getline\",{\"1\":{\"365\":1}}],[\"getlength\",{\"1\":{\"232\":2}}],[\"getsum\",{\"1\":{\"282\":2}}],[\"getsize\",{\"1\":{\"189\":2,\"190\":2,\"191\":1,\"300\":5}}],[\"gethand\",{\"1\":{\"282\":3}}],[\"gethtml\",{\"1\":{\"215\":2}}],[\"getinstance\",{\"1\":{\"273\":3,\"276\":1,\"277\":2}}],[\"getbookat\",{\"1\":{\"232\":2}}],[\"getowners\",{\"1\":{\"222\":1}}],[\"getowner\",{\"1\":{\"222\":2}}],[\"getproperties\",{\"1\":{\"215\":2}}],[\"getproduct\",{\"1\":{\"130\":2}}],[\"getrowtext\",{\"1\":{\"199\":7,\"202\":1}}],[\"getrows\",{\"1\":{\"199\":8,\"202\":1,\"203\":2}}],[\"getresult\",{\"1\":{\"170\":4}}],[\"getcolumns\",{\"1\":{\"199\":8,\"202\":1,\"203\":2}}],[\"getname\",{\"1\":{\"189\":1,\"190\":2,\"191\":1,\"232\":2,\"300\":5}}],[\"getnumber\",{\"1\":{\"181\":4,\"251\":5}}],[\"get\",{\"1\":{\"45\":1,\"91\":1,\"92\":3,\"322\":1,\"372\":1,\"409\":2}}],[\"免费并且不受限制地\",{\"1\":{\"4\":1}}],[\"skip\",{\"1\":{\"348\":1,\"352\":1,\"365\":1,\"373\":1}}],[\"symbols\",{\"1\":{\"349\":3,\"384\":1}}],[\"symbol\",{\"1\":{\"349\":2,\"354\":2}}],[\"system\",{\"1\":{\"406\":1}}],[\"sys\",{\"1\":{\"345\":1,\"354\":1,\"406\":1,\"414\":1}}],[\"synchronized\",{\"1\":{\"277\":3}}],[\"sync\",{\"1\":{\"86\":2}}],[\"sc\",{\"1\":{\"327\":1,\"328\":4,\"413\":1,\"415\":1,\"419\":2}}],[\"sci\",{\"1\":{\"4\":2}}],[\"sbox\",{\"1\":{\"265\":2}}],[\"s\",{\"1\":{\"215\":1,\"216\":2,\"265\":7,\"317\":1,\"322\":1,\"370\":1,\"415\":1,\"429\":1}}],[\"single\",{\"1\":{\"349\":1,\"351\":1}}],[\"singleton2\",{\"1\":{\"273\":2}}],[\"singleton1\",{\"1\":{\"273\":2}}],[\"singleton\",{\"0\":{\"270\":1,\"271\":1},\"1\":{\"135\":1,\"217\":1,\"223\":1,\"271\":2,\"273\":11,\"274\":2,\"276\":1,\"277\":6}}],[\"si\",{\"1\":{\"327\":1,\"328\":4,\"413\":1,\"415\":2,\"419\":2}}],[\"simulate\",{\"1\":{\"277\":1}}],[\"sideborder\",{\"1\":{\"199\":7,\"203\":2}}],[\"sizeof\",{\"0\":{\"405\":1},\"1\":{\"345\":1,\"354\":1,\"373\":1,\"401\":1,\"404\":2,\"405\":9,\"413\":2,\"414\":1,\"418\":1,\"419\":6,\"420\":1}}],[\"size\",{\"1\":{\"16\":1,\"191\":2,\"300\":5,\"322\":2,\"365\":1,\"386\":1}}],[\"src++\",{\"1\":{\"322\":1,\"348\":1,\"349\":1,\"350\":2,\"351\":3,\"353\":1,\"365\":1}}],[\"src\",{\"1\":{\"130\":1,\"144\":1,\"161\":1,\"171\":1,\"182\":1,\"193\":1,\"200\":1,\"216\":1,\"223\":1,\"233\":1,\"241\":1,\"252\":1,\"266\":1,\"274\":1,\"293\":1,\"301\":1,\"322\":6,\"346\":1,\"348\":2,\"349\":10,\"350\":6,\"351\":2,\"352\":3,\"353\":19,\"354\":1,\"365\":9}}],[\"ssize\",{\"1\":{\"365\":1}}],[\"sspai\",{\"1\":{\"97\":1}}],[\"ssl\",{\"1\":{\"22\":9,\"25\":1}}],[\"slowbutlessmemorystrategy\",{\"1\":{\"286\":1}}],[\"slash\",{\"1\":{\"265\":2}}],[\"sli\",{\"1\":{\"96\":1}}],[\"slidev\",{\"0\":{\"95\":1}}],[\"sleep\",{\"1\":{\"92\":3}}],[\"spm=1001\",{\"1\":{\"401\":1}}],[\"sp++\",{\"1\":{\"328\":3,\"332\":1,\"335\":2,\"337\":16}}],[\"sp\",{\"1\":{\"326\":4,\"329\":1,\"332\":1,\"333\":4,\"334\":2,\"335\":1,\"338\":16,\"421\":6}}],[\"space\",{\"1\":{\"44\":1,\"365\":1}}],[\"specialsupport\",{\"1\":{\"181\":5}}],[\"special\",{\"1\":{\"36\":1}}],[\"same\",{\"1\":{\"408\":1}}],[\"save\",{\"1\":{\"328\":2,\"332\":1,\"333\":1,\"386\":1,\"415\":1}}],[\"savedir\",{\"1\":{\"300\":2}}],[\"sato\",{\"1\":{\"215\":1}}],[\"sa\",{\"1\":{\"29\":1}}],[\"sum\",{\"1\":{\"282\":3}}],[\"supported\",{\"1\":{\"351\":1,\"405\":1}}],[\"support\",{\"1\":{\"181\":28,\"348\":1}}],[\"super\",{\"1\":{\"130\":4,\"143\":2,\"156\":1,\"160\":1,\"181\":3,\"189\":1,\"191\":1,\"199\":4,\"251\":1,\"292\":2,\"300\":2}}],[\"subtract\",{\"1\":{\"342\":1}}],[\"subroutine\",{\"1\":{\"332\":4}}],[\"subclass\",{\"1\":{\"295\":1}}],[\"subject\",{\"1\":{\"254\":1,\"255\":1}}],[\"subscribing\",{\"1\":{\"241\":3}}],[\"subscribes\",{\"1\":{\"240\":1}}],[\"subscribe\",{\"1\":{\"240\":3}}],[\"subscriptions\",{\"1\":{\"240\":1}}],[\"substitution\",{\"1\":{\"209\":1}}],[\"sub\",{\"1\":{\"39\":1,\"327\":1,\"332\":1,\"333\":1,\"336\":1,\"337\":1,\"345\":1,\"353\":1,\"386\":1,\"412\":2,\"413\":1,\"414\":1,\"419\":3}}],[\"su\",{\"1\":{\"20\":1,\"21\":1}}],[\"sudo\",{\"1\":{\"20\":1,\"21\":1}}],[\"stdin\",{\"1\":{\"365\":1}}],[\"stored\",{\"1\":{\"406\":1}}],[\"store\",{\"1\":{\"349\":1,\"351\":1,\"385\":1,\"386\":1,\"404\":1}}],[\"step\",{\"1\":{\"322\":1,\"340\":1,\"355\":1,\"376\":1,\"387\":1,\"397\":1,\"402\":3,\"421\":1}}],[\"study\",{\"1\":{\"282\":5}}],[\"studio时不能打开360手机助手\",{\"1\":{\"87\":1}}],[\"studio下载gradle太慢可换源\",{\"1\":{\"8\":1}}],[\"studio换源\",{\"0\":{\"8\":1}}],[\"stacksp\",{\"1\":{\"421\":1}}],[\"stackvoid\",{\"1\":{\"385\":1}}],[\"stackchar\",{\"1\":{\"325\":1}}],[\"stack\",{\"1\":{\"325\":6,\"326\":2,\"328\":2,\"329\":1,\"332\":1,\"333\":2,\"386\":2,\"406\":1,\"421\":1}}],[\"stackint\",{\"1\":{\"322\":1}}],[\"statement>b\",{\"1\":{\"393\":1}}],[\"statement>\",{\"1\":{\"392\":1,\"393\":3}}],[\"statements\",{\"1\":{\"386\":2}}],[\"statementnon\",{\"1\":{\"370\":1,\"381\":1}}],[\"statement\",{\"1\":{\"370\":12,\"381\":12,\"386\":1,\"387\":1,\"392\":1,\"393\":5,\"394\":1,\"396\":2}}],[\"state\",{\"1\":{\"287\":1}}],[\"static\",{\"1\":{\"215\":3,\"273\":3,\"277\":4,\"282\":3}}],[\"starts\",{\"1\":{\"350\":2}}],[\"start\",{\"1\":{\"90\":1,\"92\":1,\"124\":4}}],[\"started\",{\"1\":{\"45\":1,\"124\":2}}],[\"struct\",{\"1\":{\"349\":2}}],[\"strong\",{\"1\":{\"265\":2}}],[\"strategy\",{\"0\":{\"280\":1,\"285\":1},\"1\":{\"207\":1,\"281\":1,\"282\":20,\"285\":4,\"286\":1,\"294\":1}}],[\"str\",{\"1\":{\"160\":6,\"170\":5,\"292\":6}}],[\"strings\",{\"1\":{\"404\":1}}],[\"stringdisplay\",{\"1\":{\"199\":6,\"292\":6}}],[\"stringdisplayimpl\",{\"0\":{\"160\":1},\"1\":{\"155\":1,\"159\":5,\"160\":1,\"164\":2}}],[\"string\",{\"1\":{\"130\":26,\"143\":14,\"160\":2,\"170\":14,\"181\":6,\"189\":3,\"190\":3,\"191\":3,\"199\":13,\"215\":13,\"222\":8,\"232\":3,\"240\":7,\"265\":10,\"282\":5,\"292\":4,\"300\":5,\"322\":1,\"351\":3,\"404\":1}}],[\"stream\",{\"1\":{\"16\":1,\"342\":1,\"343\":1}}],[\"style\",{\"1\":{\"44\":1}}],[\"shr\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"shl\",{\"1\":{\"327\":1,\"337\":1,\"345\":1,\"353\":1,\"414\":1}}],[\"should\",{\"1\":{\"240\":1,\"373\":1}}],[\"showcase\",{\"1\":{\"265\":3}}],[\"show\",{\"1\":{\"199\":5,\"202\":1}}],[\"showwithaster\",{\"1\":{\"143\":3}}],[\"showwithparen\",{\"1\":{\"143\":3}}],[\"sh帮你免费且自动更新的https证书\",{\"1\":{\"25\":1}}],[\"sh的安装目录\",{\"1\":{\"20\":1}}],[\"shanghai\",{\"1\":{\"17\":1}}],[\"share\",{\"1\":{\"16\":3,\"17\":2,\"22\":5}}],[\"sh\",{\"0\":{\"12\":1},\"1\":{\"12\":1,\"13\":1,\"20\":3,\"21\":2}}],[\"sheet\",{\"1\":{\"4\":2}}],[\"several\",{\"1\":{\"406\":1}}],[\"semicolon\",{\"1\":{\"392\":1}}],[\"seperated\",{\"1\":{\"373\":1}}],[\"segmentation\",{\"1\":{\"339\":1,\"355\":1}}],[\"segment\",{\"1\":{\"325\":6,\"382\":1}}],[\"segmentfault\",{\"1\":{\"97\":1}}],[\"search\",{\"1\":{\"130\":2,\"349\":1}}],[\"services\",{\"1\":{\"17\":1}}],[\"server\",{\"1\":{\"16\":4,\"22\":10}}],[\"sender\",{\"1\":{\"240\":4}}],[\"sendfile\",{\"1\":{\"16\":1}}],[\"sent\",{\"1\":{\"16\":1}}],[\"second\",{\"1\":{\"404\":1}}],[\"secrets\",{\"1\":{\"9\":1}}],[\"secret\",{\"1\":{\"9\":1}}],[\"section\",{\"1\":{\"7\":1}}],[\"setup\",{\"1\":{\"421\":1}}],[\"setnext\",{\"1\":{\"181\":6}}],[\"set\",{\"1\":{\"8\":1}}],[\"settings\",{\"1\":{\"8\":1}}],[\"see\",{\"1\":{\"7\":1}}],[\"select\",{\"1\":{\"7\":1}}],[\"so\",{\"1\":{\"404\":1,\"406\":1}}],[\"source\",{\"1\":{\"322\":3,\"328\":2,\"343\":1}}],[\"solution\",{\"1\":{\"240\":1}}],[\"solutions\",{\"0\":{\"6\":1}}],[\"somethinggood\",{\"1\":{\"151\":2}}],[\"something\",{\"1\":{\"151\":4}}],[\"some\",{\"0\":{\"6\":1}}],[\"virtual\",{\"1\":{\"325\":1,\"326\":1}}],[\"view\",{\"0\":{\"259\":1},\"1\":{\"259\":1}}],[\"visit\",{\"1\":{\"300\":4,\"303\":2,\"307\":1,\"308\":1}}],[\"visitor\",{\"0\":{\"298\":1,\"299\":1,\"308\":1},\"1\":{\"194\":1,\"235\":1,\"298\":1,\"300\":23,\"301\":1,\"303\":6,\"304\":2,\"306\":1,\"307\":3,\"308\":3}}],[\"visualstudio\",{\"1\":{\"45\":1}}],[\"vi\",{\"1\":{\"192\":1,\"193\":2,\"300\":1,\"301\":2}}],[\"vs\",{\"1\":{\"97\":2}}],[\"vscode中可以使用\",{\"1\":{\"86\":1}}],[\"vscode\",{\"0\":{\"45\":1},\"1\":{\"87\":1}}],[\"v3u\",{\"1\":{\"89\":1,\"93\":1}}],[\"void\",{\"1\":{\"40\":1,\"121\":1,\"130\":3,\"143\":10,\"158\":3,\"170\":13,\"181\":3,\"189\":1,\"190\":2,\"191\":1,\"199\":1,\"215\":6,\"222\":4,\"232\":1,\"240\":2,\"251\":8,\"265\":3,\"277\":1,\"282\":6,\"292\":4,\"300\":3,\"322\":2,\"328\":1,\"332\":1,\"346\":1,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"353\":1,\"354\":2,\"365\":2,\"372\":1,\"374\":1,\"375\":1,\"384\":1,\"386\":1}}],[\"volumes\",{\"1\":{\"17\":1,\"32\":2}}],[\"v+p\",{\"1\":{\"40\":1}}],[\"v+a\",{\"1\":{\"40\":3}}],[\"v<a\",{\"1\":{\"40\":1}}],[\"v>=p\",{\"1\":{\"40\":1}}],[\"v=x\",{\"1\":{\"40\":1}}],[\"v\",{\"1\":{\"40\":10,\"325\":1}}],[\"val\",{\"1\":{\"349\":1,\"350\":10,\"351\":7,\"365\":5,\"374\":1,\"404\":2,\"412\":1}}],[\"value\",{\"1\":{\"328\":3,\"329\":1,\"342\":1,\"349\":4,\"354\":1,\"365\":12,\"373\":2,\"374\":1,\"382\":1,\"384\":1,\"385\":3,\"386\":2,\"406\":6,\"418\":1}}],[\"valid=300s\",{\"1\":{\"16\":1}}],[\"variables\",{\"1\":{\"384\":1,\"386\":2}}],[\"variable\",{\"1\":{\"332\":1,\"333\":1,\"354\":1,\"370\":3,\"371\":1,\"373\":7,\"381\":2,\"384\":3,\"385\":1,\"386\":2,\"406\":5}}],[\"vars\",{\"1\":{\"9\":1}}],[\"var\",{\"1\":{\"9\":1,\"16\":10,\"17\":1,\"22\":10,\"32\":2,\"336\":2,\"412\":1,\"415\":1,\"420\":1}}],[\"vue\",{\"0\":{\"12\":1},\"1\":{\"12\":1}}],[\"vuepress\",{\"1\":{\"4\":1}}],[\"version\",{\"1\":{\"4\":1,\"8\":1,\"32\":2}}],[\"after\",{\"1\":{\"402\":3}}],[\"a=10\",{\"1\":{\"374\":1}}],[\"a是41\",{\"1\":{\"350\":1}}],[\"ax上需要保留原来的值\",{\"1\":{\"419\":1}}],[\"axxor\",{\"1\":{\"418\":1}}],[\"axpush\",{\"1\":{\"418\":1}}],[\"ax\",{\"1\":{\"326\":3,\"328\":26,\"329\":4,\"331\":5,\"332\":1,\"336\":2,\"337\":34,\"338\":7,\"339\":1,\"404\":1,\"406\":1,\"415\":1,\"419\":1}}],[\"ai\",{\"1\":{\"285\":1}}],[\"a>\",{\"1\":{\"215\":1,\"216\":1}}],[\"a><\",{\"1\":{\"130\":6}}],[\"adj\",{\"0\":{\"334\":1},\"1\":{\"323\":1,\"327\":1,\"332\":1,\"334\":2,\"406\":1}}],[\"adapter\",{\"1\":{\"139\":1,\"143\":1,\"144\":1,\"165\":1,\"207\":1}}],[\"addobserver\",{\"1\":{\"251\":3}}],[\"add\",{\"1\":{\"39\":3,\"40\":1,\"130\":10,\"189\":1,\"190\":1,\"192\":13,\"300\":16,\"322\":1,\"327\":1,\"332\":3,\"334\":2,\"336\":1,\"337\":1,\"339\":1,\"342\":1,\"345\":2,\"353\":1,\"354\":2,\"412\":2,\"413\":1,\"414\":1,\"418\":5,\"419\":3,\"420\":1}}],[\"address\",{\"1\":{\"328\":6,\"330\":1,\"336\":3,\"373\":2,\"382\":1,\"383\":2,\"406\":1,\"409\":3,\"413\":1}}],[\"address+\",{\"1\":{\"325\":1,\"336\":1,\"383\":1}}],[\"address|\",{\"1\":{\"325\":1}}],[\"address>\",{\"1\":{\"130\":1}}],[\"address>`\",{\"1\":{\"130\":1}}],[\"addr\",{\"1\":{\"16\":1,\"416\":4,\"417\":4}}],[\"ab\",{\"1\":{\"394\":1}}],[\"abstractdisplay\",{\"1\":{\"292\":8}}],[\"abstractclass\",{\"1\":{\"152\":2}}],[\"abstractfactory\",{\"1\":{\"130\":1,\"275\":1}}],[\"abstract\",{\"1\":{\"130\":10,\"133\":1,\"134\":1,\"143\":3,\"158\":4,\"165\":1,\"170\":5,\"172\":1,\"181\":2,\"190\":4,\"199\":5,\"217\":1,\"222\":3,\"251\":3,\"287\":1,\"292\":4,\"300\":6}}],[\"about\",{\"0\":{\"6\":1},\"1\":{\"240\":1}}],[\"automatically\",{\"1\":{\"240\":1}}],[\"automaton\",{\"1\":{\"14\":3,\"16\":9,\"17\":2,\"18\":2,\"20\":1,\"22\":16}}],[\"author\",{\"1\":{\"130\":8}}],[\"authservice\",{\"1\":{\"117\":1}}],[\"aaronsw\",{\"1\":{\"103\":1}}],[\"await\",{\"1\":{\"92\":5,\"93\":1}}],[\"array\",{\"1\":{\"420\":1}}],[\"array<item>\",{\"1\":{\"130\":1}}],[\"are\",{\"1\":{\"404\":1,\"405\":1,\"406\":1}}],[\"area\",{\"1\":{\"322\":1,\"325\":3}}],[\"article\",{\"1\":{\"401\":1}}],[\"arbitrary\",{\"1\":{\"322\":1}}],[\"arg\",{\"1\":{\"336\":3,\"383\":2}}],[\"arg3\",{\"1\":{\"336\":1}}],[\"arg2\",{\"1\":{\"336\":1}}],[\"arg1\",{\"1\":{\"336\":1}}],[\"arguments\",{\"1\":{\"332\":2,\"334\":2,\"336\":1,\"406\":3}}],[\"argv++\",{\"1\":{\"322\":1}}],[\"argv\",{\"1\":{\"322\":3,\"339\":1,\"365\":1,\"421\":1}}],[\"argc\",{\"1\":{\"322\":2,\"339\":1,\"365\":1,\"421\":1}}],[\"args=\",{\"1\":{\"90\":2,\"92\":4}}],[\"around\",{\"1\":{\"232\":1,\"233\":1}}],[\"archive\",{\"1\":{\"7\":1}}],[\"asimpile\",{\"0\":{\"434\":1}}],[\"assignment\",{\"1\":{\"415\":1}}],[\"assign\",{\"1\":{\"345\":2,\"353\":1,\"373\":2,\"374\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"406\":1,\"407\":1,\"414\":2,\"415\":3,\"416\":1,\"420\":1}}],[\"assembly\",{\"1\":{\"343\":1}}],[\"assetstudioassetstudio\",{\"1\":{\"43\":1}}],[\"assert\",{\"1\":{\"40\":1}}],[\"as\",{\"1\":{\"92\":1,\"143\":2,\"189\":1,\"240\":1,\"353\":1,\"407\":1,\"408\":1}}],[\"async\",{\"1\":{\"91\":1,\"92\":5}}],[\"asyncio\",{\"0\":{\"89\":1},\"1\":{\"91\":3,\"92\":13}}],[\"aggregate\",{\"1\":{\"232\":5,\"233\":2}}],[\"aggregateerror\",{\"1\":{\"45\":1}}],[\"again\",{\"1\":{\"92\":2}}],[\"agent\",{\"1\":{\"16\":1}}],[\"append\",{\"1\":{\"404\":1}}],[\"appendbook\",{\"1\":{\"232\":5}}],[\"app\",{\"1\":{\"240\":1}}],[\"application\",{\"1\":{\"16\":1,\"240\":1}}],[\"api\",{\"0\":{\"202\":1},\"1\":{\"45\":1,\"152\":2,\"163\":1,\"202\":5,\"203\":1,\"285\":2}}],[\"a<b\",{\"1\":{\"39\":1}}],[\"a+b\",{\"1\":{\"39\":2}}],[\"a+b>=p\",{\"1\":{\"39\":1}}],[\"any\",{\"1\":{\"232\":2,\"265\":3,\"277\":2}}],[\"an\",{\"1\":{\"170\":1,\"171\":1,\"240\":1,\"373\":1,\"405\":1}}],[\"ans=\",{\"1\":{\"40\":1}}],[\"ans=mul\",{\"1\":{\"39\":1}}],[\"ans=1ll\",{\"1\":{\"38\":1}}],[\"android\",{\"0\":{\"8\":1},\"1\":{\"8\":2,\"86\":1}}],[\"and\",{\"1\":{\"7\":1,\"240\":3,\"327\":1,\"335\":1,\"337\":1,\"345\":3,\"353\":5,\"405\":1,\"409\":2,\"414\":2,\"417\":1,\"418\":2}}],[\"accept\",{\"1\":{\"300\":7,\"303\":2,\"308\":1}}],[\"access\",{\"1\":{\"14\":1,\"16\":9,\"22\":10,\"420\":1}}],[\"acc\",{\"1\":{\"189\":2}}],[\"acquire\",{\"1\":{\"90\":1}}],[\"acme申请\",{\"1\":{\"25\":1}}],[\"acme\",{\"0\":{\"12\":1},\"1\":{\"12\":1,\"13\":1,\"14\":1,\"17\":1,\"20\":3,\"21\":5}}],[\"actually\",{\"1\":{\"405\":1}}],[\"actual\",{\"1\":{\"373\":1}}],[\"act\",{\"1\":{\"9\":5}}],[\"alone\",{\"1\":{\"373\":1}}],[\"alt\",{\"1\":{\"98\":1}}],[\"alice使用了id卡\",{\"1\":{\"223\":1}}],[\"alice\",{\"1\":{\"181\":4,\"222\":1}}],[\"alias\",{\"1\":{\"16\":1,\"22\":2}}],[\"aliyun\",{\"1\":{\"8\":12}}],[\"allocate\",{\"1\":{\"325\":1}}],[\"allowmixedcontent\",{\"1\":{\"86\":1}}],[\"all\",{\"1\":{\"8\":1,\"240\":1,\"384\":1,\"404\":1}}],[\"a\",{\"1\":{\"4\":1,\"39\":6,\"40\":6,\"89\":1,\"93\":1,\"97\":1,\"170\":1,\"171\":1,\"240\":4,\"244\":8,\"277\":1,\"315\":1,\"317\":1,\"320\":1,\"322\":1,\"323\":1,\"339\":1,\"340\":1,\"341\":1,\"349\":8,\"350\":4,\"351\":5,\"355\":1,\"359\":1,\"369\":1,\"373\":2,\"374\":1,\"376\":1,\"380\":1,\"383\":3,\"387\":1,\"391\":1,\"393\":4,\"394\":4,\"396\":1,\"397\":1,\"406\":1,\"408\":2,\"409\":2,\"411\":1,\"415\":2,\"416\":1,\"418\":3,\"420\":2,\"421\":1,\"425\":1}}],[\"一节提到的\",{\"1\":{\"414\":1}}],[\"一节中所说的修改或删除\",{\"1\":{\"409\":1}}],[\"一是运算符的优先级问题\",{\"1\":{\"401\":1}}],[\"一是容易忘记大括号\",{\"1\":{\"38\":1}}],[\"一元运算符\",{\"0\":{\"403\":1},\"1\":{\"401\":1}}],[\"一旦遇到了\",{\"1\":{\"395\":1}}],[\"一旦同名\",{\"1\":{\"384\":1}}],[\"一些非终结符如<expr>被递归地使用了\",{\"1\":{\"362\":1}}],[\"一种是自底向上\",{\"1\":{\"360\":1}}],[\"一种是自顶向下\",{\"1\":{\"360\":1}}],[\"一般终结符对应于词法分析器输出的标记\",{\"1\":{\"361\":1}}],[\"一般有两种处理方法\",{\"1\":{\"354\":1}}],[\"一般处理的方法有两种\",{\"1\":{\"346\":1}}],[\"一般而言\",{\"1\":{\"321\":1}}],[\"一般的编译器相关的教程要么就十分简单\",{\"1\":{\"315\":1}}],[\"一般编译原理的课程会说一些\",{\"1\":{\"314\":1}}],[\"一侧增加类即可\",{\"1\":{\"163\":1}}],[\"一致性是指委托对象应当具有与委托者相同的接口或行为\",{\"1\":{\"210\":1}}],[\"一致性\",{\"1\":{\"129\":1}}],[\"一路点击\",{\"1\":{\"102\":1}}],[\"一方面没有很好的测试用例\",{\"1\":{\"316\":1}}],[\"一方面想了解它的工作原理\",{\"1\":{\"313\":1}}],[\"一方面\",{\"1\":{\"91\":1,\"328\":1}}],[\"一方面减少了心智负担\",{\"1\":{\"40\":1}}],[\"一个标记\",{\"1\":{\"345\":1}}],[\"一个语法分析器生成器\",{\"1\":{\"317\":1}}],[\"一个观察者在接收到通知后修改了被观察对象的状态\",{\"1\":{\"256\":1}}],[\"一个类只负责一个职责\",{\"1\":{\"125\":1}}],[\"一个类只对应一个职责\",{\"1\":{\"115\":1}}],[\"一个类对另一个类的依赖应该建立在最小的接口上\",{\"1\":{\"118\":1}}],[\"一个实体应当尽量少地与其他实体之间发生相互作用\",{\"1\":{\"113\":1}}],[\"一个原则可以是另一个原则的加强或基础\",{\"1\":{\"105\":1}}],[\"一个用于存储附属的数据\",{\"1\":{\"31\":1}}],[\"一个包含\",{\"1\":{\"31\":1}}],[\"一个通用性很强的工具\",{\"1\":{\"4\":1}}],[\"一位热衷于探索全栈开发领域的技术爱好者\",{\"1\":{\"1\":1}}],[\"zero\",{\"1\":{\"331\":1}}],[\"zeroelse\",{\"1\":{\"331\":1}}],[\"zip\",{\"1\":{\"8\":1}}],[\"z\",{\"1\":{\"4\":1,\"39\":1,\"40\":1,\"349\":4}}],[\"网站\",{\"1\":{\"4\":1}}],[\"资源\",{\"0\":{\"4\":1}}],[\"项目地址\",{\"1\":{\"315\":1}}],[\"项目的初衷\",{\"0\":{\"315\":1}}],[\"项目结构\",{\"0\":{\"14\":1},\"1\":{\"12\":1}}],[\"项目\",{\"0\":{\"3\":1,\"12\":1},\"1\":{\"12\":1,\"14\":1}}],[\"致力于打造高效\",{\"1\":{\"1\":1}}],[\"擅长将前端与后端技术无缝结合\",{\"1\":{\"1\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
