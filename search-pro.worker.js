const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":510,\"nextId\":510,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"6\",\"7\":\"6#some-solutions-to-questions-about-qt\",\"8\":\"6#the-qt-5-isn-t-in-qt-maintenance-tools\",\"9\":\"7\",\"10\":\"8\",\"11\":\"8@0\",\"12\":\"8@1\",\"13\":\"9\",\"14\":\"9#环境\",\"15\":\"9#项目结构\",\"16\":\"9#配置http服务\",\"17\":\"9#配置nginx\",\"18\":\"9#配置docker\",\"19\":\"9#启动项目\",\"20\":\"9#升级为https\",\"21\":\"9#申请证书\",\"22\":\"9#安装证书\",\"23\":\"9#修改配置\",\"24\":\"9#重启container\",\"25\":\"9#配置nginx反向代理-使flask支持-https\",\"26\":\"9#参考资料\",\"27\":\"9@0\",\"28\":\"9@1\",\"29\":\"10\",\"30\":\"10#docker-wsl2-踩坑记录-唯独你没懂-居然把路径藏在这里\",\"31\":\"10#docker-wsl2-踩坑记录\",\"32\":\"10#docker-desktop-是什么\",\"33\":\"10#wsl-里的-docker-到底在哪里\",\"34\":\"11\",\"35\":\"12\",\"36\":\"13\",\"37\":\"13#背景介绍\",\"38\":\"13#过去的做法\",\"39\":\"13#第一种-直接取模\",\"40\":\"13#第二种-函数取模\",\"41\":\"13#泛型编程\",\"42\":\"13@0\",\"43\":\"13@1\",\"44\":\"14\",\"45\":\"14@0\",\"46\":\"14@1\",\"47\":\"15\",\"48\":\"16\",\"49\":\"17\",\"50\":\"18\",\"51\":\"18#自然数的定义\",\"52\":\"18#自然数的加法运算\",\"53\":\"18#加法的定义\",\"54\":\"18#加法结果的存在性\",\"55\":\"18#加法结果的唯一性\",\"56\":\"18#加法的性质\",\"57\":\"18#加法交换律\",\"58\":\"18#加法结合律\",\"59\":\"18#加法消去律\",\"60\":\"18#自然数的序\",\"61\":\"18#序的定义\",\"62\":\"18#正自然数\",\"63\":\"18#正自然数的性质\",\"64\":\"18#序的反对称性\",\"65\":\"18#序的传递性\",\"66\":\"18#序的完全性\",\"67\":\"18#加法保序性\",\"68\":\"18#自然数的乘法运算\",\"69\":\"18#乘法的定义\",\"70\":\"18#乘法结果的存在性\",\"71\":\"18#乘法结果的唯一性\",\"72\":\"18#乘法的性质\",\"73\":\"18#乘法交换律\",\"74\":\"18#乘法分配律\",\"75\":\"18#乘法结合律\",\"76\":\"18#乘法消去律\",\"77\":\"18#peano-公理的合理性\",\"78\":\"18#乘法保序性\",\"79\":\"18#乘法消去保序性\",\"80\":\"18#用图论阐述-peano-系统\",\"81\":\"18#peano-公理-i\",\"82\":\"18#peano-公理-ii\",\"83\":\"18#peano-公理-iii\",\"84\":\"18#peano-公理-iv\",\"85\":\"18#peano-公理-v\",\"86\":\"18@0\",\"87\":\"18@1\",\"88\":\"19\",\"89\":\"19#安装\",\"90\":\"19#tips\",\"91\":\"19#bug-记录\",\"92\":\"19@1\",\"93\":\"20\",\"94\":\"20#线程安全\",\"95\":\"20#协程\",\"96\":\"20#协程安全\",\"97\":\"20#协程是否需要加锁\",\"98\":\"21\",\"99\":\"22\",\"100\":\"22#缺点\",\"101\":\"22#缺点-1\",\"102\":\"23\",\"103\":\"23@0\",\"104\":\"23@1\",\"105\":\"24\",\"106\":\"25\",\"107\":\"26\",\"108\":\"27\",\"109\":\"27#关系\",\"110\":\"27#开闭原则\",\"111\":\"27#实现方法\",\"112\":\"27#里氏代换原则\",\"113\":\"27#里氏代换原则-1\",\"114\":\"27#实现方法-1\",\"115\":\"27#示例\",\"116\":\"27#迪米特原则\",\"117\":\"27#迪米特原则-1\",\"118\":\"27#实现方法-2\",\"119\":\"27#单一职责原则\",\"120\":\"27#实现方法-3\",\"121\":\"27#示例-1\",\"122\":\"27#接口隔离原则\",\"123\":\"27#依赖倒置原则\",\"124\":\"27#实现方法-4\",\"125\":\"27#示例-2\",\"126\":\"27#组合-聚合复用原则\",\"127\":\"27#实现方法-5\",\"128\":\"27#示例-3\",\"129\":\"27#总结\",\"130\":\"27@0\",\"131\":\"27@1\",\"132\":\"28\",\"133\":\"28#为什么要使用抽象工厂模式\",\"134\":\"28#示例代码\",\"135\":\"28#增加其它工厂\",\"136\":\"28#拓展思路的要点\",\"137\":\"28#易于增加具体工厂\",\"138\":\"28#难以增加新的零件\",\"139\":\"28#相关的设计模式\",\"140\":\"28@0\",\"141\":\"28@1\",\"142\":\"29\",\"143\":\"29#适配器模式\",\"144\":\"29#为什么要用适配器模式\",\"145\":\"29#类比\",\"146\":\"29#类比-1\",\"147\":\"29#示例程序\",\"148\":\"29#运行结果\",\"149\":\"29#相关的设计模式\",\"150\":\"29@0\",\"151\":\"29@1\",\"152\":\"30\",\"153\":\"30#使用此设计模式的理由\",\"154\":\"30#类的层次结构的两个作用\",\"155\":\"30#增加新功能时\",\"156\":\"30#增加新的实现时\",\"157\":\"30#类的层次结构的混杂和分离\",\"158\":\"30#示例代码\",\"159\":\"30#类的一览表\",\"160\":\"30#countdisplay-ts\",\"161\":\"30#display-ts\",\"162\":\"30#displayimpl-ts\",\"163\":\"30#main-ts\",\"164\":\"30#stringdisplayimpl-ts\",\"165\":\"30#运行结果\",\"166\":\"30#拓展思路的要点\",\"167\":\"30#分开后更容易扩展\",\"168\":\"30#继承是强关联-委托是弱关联\",\"169\":\"30#相关的设计模式\",\"170\":\"30@0\",\"171\":\"30@1\",\"172\":\"31\",\"173\":\"31#为什么要使用-builder-模式\",\"174\":\"31#代码示例\",\"175\":\"31#运行结果\",\"176\":\"31#相关设计模式\",\"177\":\"31#拓展思路的要点\",\"178\":\"31#谁知道什么\",\"179\":\"31#设计时能够决定的事情和不能决定的事情\",\"180\":\"31#代码的阅读方法和修改方法\",\"181\":\"31@0\",\"182\":\"31@1\",\"183\":\"32\",\"184\":\"32#为什么使用此类\",\"185\":\"32#示例代码\",\"186\":\"32#运行结果\",\"187\":\"32#相关的设计模式\",\"188\":\"32@0\",\"189\":\"32@1\",\"190\":\"33\",\"191\":\"33#为什么使用此模式\",\"192\":\"33#示例代码\",\"193\":\"33#运行结果\",\"194\":\"33#拓展思路的要点\",\"195\":\"33#命令中应该包含哪些信息\",\"196\":\"33#保存历史记录\",\"197\":\"33#相关的设计模式\",\"198\":\"33@0\",\"199\":\"33@1\",\"200\":\"34\",\"201\":\"34#使用此设计模式的理由\",\"202\":\"34#示例代码\",\"203\":\"34#目录类-directory-ts\",\"204\":\"34#抽象条目类-entry-ts\",\"205\":\"34#文件类-file-ts\",\"206\":\"34#主程序-main-ts\",\"207\":\"34#运行结果\",\"208\":\"34#相关的设计模式\",\"209\":\"34@0\",\"210\":\"34@1\",\"211\":\"35\",\"212\":\"35#为什么使用装饰器模式\",\"213\":\"35#代码示例\",\"214\":\"35#运行结果\",\"215\":\"35#拓展思路的要点\",\"216\":\"35#api-的透明性\",\"217\":\"35#在不改变被装饰物的前提下增加功能\",\"218\":\"35#可以动态地增加功能\",\"219\":\"35#只需要一些装饰物即可添加许多功能\",\"220\":\"35#导致增加许多很小的类\",\"221\":\"35#相关的设计模式\",\"222\":\"35#继承和委托中的一致性\",\"223\":\"35#父类和子类的一致性\",\"224\":\"35#自己和被委托对象的一致性\",\"225\":\"35@0\",\"226\":\"35@1\",\"227\":\"36\",\"228\":\"36@0\",\"229\":\"36@1\",\"230\":\"37\",\"231\":\"37#示例代码\",\"232\":\"37#代码实现\",\"233\":\"37#运行结果\",\"234\":\"37#相关设计模式\",\"235\":\"37@0\",\"236\":\"37@1\",\"237\":\"38\",\"238\":\"38#为什么要使用-factory-method\",\"239\":\"38#示例代码\",\"240\":\"38#运行结果\",\"241\":\"38@0\",\"242\":\"38@1\",\"243\":\"39\",\"244\":\"39#为什么使用-flyweight-模式\",\"245\":\"39#实例代码\",\"246\":\"39#运行结果\",\"247\":\"39#拓展思路的要点\",\"248\":\"39#对多个地方产生影响\",\"249\":\"39#intrinsic-与-extrinsic\",\"250\":\"39#不要让被共享的实例被垃圾回收器回收了\",\"251\":\"39#内存之外的其它资源\",\"252\":\"39#相关的设计模式\",\"253\":\"39@0\",\"254\":\"39@1\",\"255\":\"40\",\"256\":\"40@0\",\"257\":\"40@1\",\"258\":\"41\",\"259\":\"41#为什么使用此模式\",\"260\":\"41#示例代码\",\"261\":\"41#运行结果\",\"262\":\"41@0\",\"263\":\"41@1\",\"264\":\"42\",\"265\":\"42#为什么要使用迭代器模式\",\"266\":\"42#typescript-实现迭代器模式\",\"267\":\"42#代码示例\",\"268\":\"42#运行结果\",\"269\":\"42#多个迭代器\",\"270\":\"42#相关的设计模式\",\"271\":\"42@0\",\"272\":\"42@1\",\"273\":\"43\",\"274\":\"43#为什么使用此类\",\"275\":\"43#示例代码\",\"276\":\"43#运行结果\",\"277\":\"43#拓展思路的要点\",\"278\":\"43#当发生分散灾难时\",\"279\":\"43#通信线路的增加\",\"280\":\"43#哪些角色可以复用\",\"281\":\"43#相关的设计模式\",\"282\":\"43@0\",\"283\":\"43@1\",\"284\":\"44\",\"285\":\"44#为什么使用-memento-模式\",\"286\":\"44#示例代码\",\"287\":\"44#运行结果\",\"288\":\"44#拓展思路的要点\",\"289\":\"44#两种接口和可见性\",\"290\":\"44#需要多少个-memento\",\"291\":\"44#memento-的有效期限是多久\",\"292\":\"44#划分-caretaker-和-originator-角色的意义\",\"293\":\"44#相关的设计模式\",\"294\":\"44@0\",\"295\":\"44@1\",\"296\":\"45\",\"297\":\"45#为什么使用观察者模式\",\"298\":\"45#示例代码\",\"299\":\"45#运行结果\",\"300\":\"45#拓展思路的要点\",\"301\":\"45#这里也出现了可替换性\",\"302\":\"45#observer-的顺序\",\"303\":\"45#当-observer-的行为会对被观察对象产生影响时\",\"304\":\"45#传递更新信息的方式\",\"305\":\"45#从观察变为通知\",\"306\":\"45#mvc-model-view-controller\",\"307\":\"45#相关的设计模式\",\"308\":\"45@0\",\"309\":\"45@1\",\"310\":\"46\",\"311\":\"46#为什么要使用-prototype-模式\",\"312\":\"46#示例代码\",\"313\":\"46#运行结果\",\"314\":\"46#相关设计模式\",\"315\":\"46@0\",\"316\":\"46@1\",\"317\":\"47\",\"318\":\"47#为什么使用代理模式\",\"319\":\"47#实例代码\",\"320\":\"47#运行结果\",\"321\":\"47#拓展思路的要点\",\"322\":\"47#使用代理人来提升处理速度\",\"323\":\"47#有必要划分代理人和本人吗\",\"324\":\"47#代理与委托\",\"325\":\"47#透明性\",\"326\":\"47#http-代理\",\"327\":\"47#各种-proxy-模式\",\"328\":\"47#相关的设计模式\",\"329\":\"47@0\",\"330\":\"47@1\",\"331\":\"48\",\"332\":\"48#为什么要使用-singleton-模式\",\"333\":\"48#总结\",\"334\":\"48#示例代码\",\"335\":\"48#运行结果\",\"336\":\"48#相关设计模式\",\"337\":\"48#多线程下\",\"338\":\"48#双重检查锁定示例代码\",\"339\":\"48@0\",\"340\":\"48@1\",\"341\":\"49\",\"342\":\"49#为什么使用-state-模式\",\"343\":\"49#示例代码\",\"344\":\"49#运行结果\",\"345\":\"49#拓展思路的要点\",\"346\":\"49#分而治之\",\"347\":\"49#依赖于状态的处理\",\"348\":\"49#应当是谁来管理状态的迁移\",\"349\":\"49#不会自相矛盾\",\"350\":\"49#易于增加新的状态\",\"351\":\"49#实例的多面性\",\"352\":\"49#相关的设计模式\",\"353\":\"49@0\",\"354\":\"49@1\",\"355\":\"50\",\"356\":\"50#使用此设计模式的理由\",\"357\":\"50#示例程序\",\"358\":\"50#运行结果\",\"359\":\"50#拓展思路的要点\",\"360\":\"50#为什么要特意编写-strategy\",\"361\":\"50#程序运行中也可以切换策略\",\"362\":\"50#相关的设计模式\",\"363\":\"50@0\",\"364\":\"50@1\",\"365\":\"51\",\"366\":\"51#为什么要使用-template-method-模式\",\"367\":\"51#示例代码\",\"368\":\"51#运行结果\",\"369\":\"51#相关设计模式\",\"370\":\"51#延申-类的层次与抽象类\",\"371\":\"51@0\",\"372\":\"51@1\",\"373\":\"52\",\"374\":\"52#为什么使用-visitor-模式\",\"375\":\"52#示例代码\",\"376\":\"52#运行结果\",\"377\":\"52#拓展思路的要点\",\"378\":\"52#双重分发\",\"379\":\"52#为什么要这么复杂\",\"380\":\"52#开闭原则——对扩展开放-对修改关闭\",\"381\":\"52#易于增加-concretevisitor-角色\",\"382\":\"52#难以增加-concreteelement-角色\",\"383\":\"52#visitor-工作所需的条件\",\"384\":\"52#相关的设计模式\",\"385\":\"52@0\",\"386\":\"52@1\",\"387\":\"53\",\"388\":\"53#为什么要学编译原理\",\"389\":\"53#理论很复杂-实现也很复杂\",\"390\":\"53#项目的初衷\",\"391\":\"53#做好心理准备\",\"392\":\"53#参考资料\",\"393\":\"53@0\",\"394\":\"53@1\",\"395\":\"54\",\"396\":\"54#编译器的构建流程\",\"397\":\"54#编译器框架\",\"398\":\"55\",\"399\":\"55#计算机的内部工作原理\",\"400\":\"55#内存\",\"401\":\"55#寄存器\",\"402\":\"55#指令集\",\"403\":\"55#mov\",\"404\":\"55#push\",\"405\":\"55#jmp\",\"406\":\"55#jz-jnz\",\"407\":\"55#子函数调用\",\"408\":\"55#ent\",\"409\":\"55#adj\",\"410\":\"55#lev\",\"411\":\"55#lea\",\"412\":\"55#运算符指令\",\"413\":\"55#内置函数\",\"414\":\"55#测试\",\"415\":\"55#小结\",\"416\":\"56\",\"417\":\"56#什么是词法分析器\",\"418\":\"56#词法分析器与编译器\",\"419\":\"56#词法分析器的实现\",\"420\":\"56#支持的标记\",\"421\":\"56#词法分析器的框架\",\"422\":\"56#换行符\",\"423\":\"56#宏定义\",\"424\":\"56#标识符与符号表\",\"425\":\"56#数字\",\"426\":\"56#字符串\",\"427\":\"56#注释\",\"428\":\"56#其它\",\"429\":\"56#关键字与内置函数\",\"430\":\"56#代码\",\"431\":\"56#小结\",\"432\":\"56@0\",\"433\":\"56@1\",\"434\":\"57\",\"435\":\"57#什么是递归下降\",\"436\":\"57#终结符与非终结符\",\"437\":\"57#四则运算的递归下降\",\"438\":\"57#为什么选择递归下降\",\"439\":\"57#左递归\",\"440\":\"57#四则运算的实现\",\"441\":\"57#小结\",\"442\":\"57@0\",\"443\":\"57@1\",\"444\":\"58\",\"445\":\"58#ebnf-表示\",\"446\":\"58#解析变量的定义\",\"447\":\"58#program\",\"448\":\"58#global-declaration\",\"449\":\"58#enum-declaration\",\"450\":\"58#其它\",\"451\":\"58#代码\",\"452\":\"58#小结\",\"453\":\"58@0\",\"454\":\"58@1\",\"455\":\"59\",\"456\":\"59#ebnf-表示\",\"457\":\"59#解析函数的定义\",\"458\":\"59#函数参数与汇编代码\",\"459\":\"59#函数定义的解析\",\"460\":\"59#解析参数\",\"461\":\"59#函数体的解析\",\"462\":\"59#代码\",\"463\":\"59#小结\",\"464\":\"59@0\",\"465\":\"59@1\",\"466\":\"60\",\"467\":\"60#语句\",\"468\":\"60#if-语句\",\"469\":\"60#while-语句\",\"470\":\"60#return-语句\",\"471\":\"60#其它语句\",\"472\":\"60#代码\",\"473\":\"60#小结\",\"474\":\"60@0\",\"475\":\"60@1\",\"476\":\"61\",\"477\":\"61#运算符的优先级\",\"478\":\"61#一元运算符\",\"479\":\"61#常量\",\"480\":\"61#sizeof\",\"481\":\"61#变量与函数调用\",\"482\":\"61#强制转换\",\"483\":\"61#指针取值\",\"484\":\"61#取址操作\",\"485\":\"61#逻辑取反\",\"486\":\"61#按位取反\",\"487\":\"61#正负号\",\"488\":\"61#自增自减\",\"489\":\"61#二元运算符\",\"490\":\"61#赋值操作\",\"491\":\"61#三目运算符\",\"492\":\"61#逻辑运算符\",\"493\":\"61#数学运算符\",\"494\":\"61#自增自减-1\",\"495\":\"61#数组取值操作\",\"496\":\"61#代码\",\"497\":\"61#小结\",\"498\":\"61@0\",\"499\":\"61@1\",\"500\":\"62\",\"501\":\"62#虚拟机与目标代码\",\"502\":\"62#词法分析\",\"503\":\"62#语法分析\",\"504\":\"62#关于编代码\",\"505\":\"62#结语\",\"506\":\"62@0\",\"507\":\"62@1\",\"508\":\"63\",\"509\":\"64\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,5],\"2\":[1,3],\"3\":[1,16],\"4\":[1,2],\"5\":[1,35],\"6\":[1],\"7\":[6],\"8\":[9,21],\"9\":[2,49],\"10\":[2,12],\"11\":[null,null,2],\"12\":[null,null,2],\"13\":[9,20],\"14\":[1,7],\"15\":[1,24],\"16\":[1,5],\"17\":[1,95],\"18\":[1,37],\"19\":[1,12],\"20\":[1],\"21\":[1,15],\"22\":[1,29],\"23\":[1,49],\"24\":[1,6],\"25\":[3,4],\"26\":[1,19],\"27\":[null,null,1],\"28\":[null,null,1],\"29\":[3,7],\"30\":[6,20],\"31\":[3],\"32\":[3,48],\"33\":[4,40],\"34\":[2,4],\"35\":[1,5],\"36\":[4,6],\"37\":[1,14],\"38\":[1,5],\"39\":[2,21],\"40\":[2,32],\"41\":[1,51],\"42\":[null,null,1],\"43\":[null,null,1],\"44\":[3,14],\"45\":[null,null,1],\"46\":[null,null,1],\"47\":[2,15],\"48\":[1,32],\"49\":[2,27],\"50\":[4,9],\"51\":[1,23],\"52\":[1,2],\"53\":[1,12],\"54\":[1,35],\"55\":[1,38],\"56\":[1,5],\"57\":[1,27],\"58\":[1,17],\"59\":[1,19],\"60\":[1,2],\"61\":[1,10],\"62\":[1,5],\"63\":[1,18],\"64\":[1,9],\"65\":[1,10],\"66\":[1,17],\"67\":[1,7],\"68\":[1,2],\"69\":[1,12],\"70\":[1,37],\"71\":[1,38],\"72\":[1,5],\"73\":[1,29],\"74\":[1,17],\"75\":[1,17],\"76\":[1,42],\"77\":[2,18],\"78\":[1,7],\"79\":[1,15],\"80\":[3,13],\"81\":[3,4],\"82\":[3,4],\"83\":[3,5],\"84\":[3,5],\"85\":[3,4],\"86\":[null,null,1],\"87\":[null,null,1],\"88\":[1,4],\"89\":[1,2],\"90\":[1,34],\"91\":[2,8],\"92\":[null,null,1],\"93\":[9,21],\"94\":[1,100],\"95\":[1,71],\"96\":[1,179],\"97\":[1,41],\"98\":[1,3],\"99\":[1,1],\"100\":[1,8],\"101\":[1,29],\"102\":[1,10],\"103\":[null,null,1],\"104\":[null,null,1],\"105\":[1,2],\"106\":[1,45],\"107\":[4,8],\"108\":[1,12],\"109\":[1,19],\"110\":[1,7],\"111\":[1,14],\"112\":[1],\"113\":[1,8],\"114\":[1,10],\"115\":[1],\"116\":[1],\"117\":[1,5],\"118\":[1,11],\"119\":[1,7],\"120\":[1,11],\"121\":[1,13],\"122\":[1,5],\"123\":[1,8],\"124\":[1,12],\"125\":[1,25],\"126\":[2,7],\"127\":[1,9],\"128\":[1,22],\"129\":[1,22],\"130\":[null,null,1],\"131\":[null,null,2],\"132\":[1],\"133\":[1,14],\"134\":[1,133],\"135\":[1,15],\"136\":[1],\"137\":[1,27],\"138\":[1,26],\"139\":[1,6],\"140\":[null,null,1],\"141\":[null,null,3],\"142\":[1],\"143\":[1,7],\"144\":[1,7],\"145\":[1],\"146\":[1,11],\"147\":[1,45],\"148\":[1,11],\"149\":[1,2],\"150\":[null,null,1],\"151\":[null,null,2],\"152\":[2,7],\"153\":[1,7],\"154\":[1],\"155\":[1,15],\"156\":[1,30],\"157\":[1,23],\"158\":[1],\"159\":[1,50],\"160\":[2,28],\"161\":[2,20],\"162\":[2,9],\"163\":[2,21],\"164\":[2,36],\"165\":[1,18],\"166\":[1],\"167\":[1,44],\"168\":[2,29],\"169\":[1,6],\"170\":[null,null,1],\"171\":[null,null,3],\"172\":[2],\"173\":[3,17],\"174\":[1,83],\"175\":[1,42],\"176\":[1,7],\"177\":[1],\"178\":[1,20],\"179\":[1,9],\"180\":[1,41],\"181\":[null,null,1],\"182\":[null,null,3],\"183\":[2,26],\"184\":[1,12],\"185\":[1,94],\"186\":[1,39],\"187\":[1,3],\"188\":[null,null,1],\"189\":[null,null,3],\"190\":[2],\"191\":[1,6],\"192\":[1,56],\"193\":[1,24],\"194\":[1],\"195\":[1,23],\"196\":[1,23],\"197\":[1,4],\"198\":[null,null,1],\"199\":[null,null,3],\"200\":[2],\"201\":[1,15],\"202\":[1],\"203\":[4,39],\"204\":[4,26],\"205\":[4,29],\"206\":[4,49],\"207\":[1,46],\"208\":[1,4],\"209\":[null,null,1],\"210\":[null,null,3],\"211\":[2,5],\"212\":[2,9],\"213\":[1,62],\"214\":[1,20],\"215\":[1],\"216\":[2,55],\"217\":[1,42],\"218\":[1,7],\"219\":[1,23],\"220\":[1,3],\"221\":[1,3],\"222\":[1],\"223\":[1,9],\"224\":[1,7],\"225\":[null,null,1],\"226\":[null,null,3],\"227\":[1,37],\"228\":[null,null,1],\"229\":[null,null,2],\"230\":[2,23],\"231\":[1,8],\"232\":[1,89],\"233\":[1,41],\"234\":[1,5],\"235\":[null,null,1],\"236\":[null,null,3],\"237\":[3,8],\"238\":[3,21],\"239\":[1,50],\"240\":[1,20],\"241\":[null,null,1],\"242\":[null,null,4],\"243\":[2],\"244\":[3,10],\"245\":[1,74],\"246\":[1,21],\"247\":[1],\"248\":[1,66],\"249\":[3,44],\"250\":[1,54],\"251\":[1,25],\"252\":[1,4],\"253\":[null,null,1],\"254\":[null,null,3],\"255\":[1,20],\"256\":[null,null,1],\"257\":[null,null,2],\"258\":[2],\"259\":[1,17],\"260\":[1,117],\"261\":[1,22],\"262\":[null,null,1],\"263\":[null,null,3],\"264\":[1],\"265\":[1,25],\"266\":[2,8],\"267\":[1,63],\"268\":[1,45],\"269\":[1,9],\"270\":[1,5],\"271\":[null,null,1],\"272\":[null,null,2],\"273\":[2],\"274\":[1,26],\"275\":[1,118],\"276\":[1,28],\"277\":[1],\"278\":[1,43],\"279\":[1,38],\"280\":[1,26],\"281\":[1,3],\"282\":[null,null,1],\"283\":[null,null,3],\"284\":[2],\"285\":[3,8],\"286\":[1,96],\"287\":[1,29],\"288\":[1],\"289\":[1,22],\"290\":[2,14],\"291\":[2,13],\"292\":[5,32],\"293\":[1,4],\"294\":[null,null,1],\"295\":[null,null,3],\"296\":[2],\"297\":[1,11],\"298\":[1,77],\"299\":[1,33],\"300\":[1],\"301\":[1,12],\"302\":[2,32],\"303\":[3,11],\"304\":[1,9],\"305\":[1,9],\"306\":[5,18],\"307\":[1,2],\"308\":[null,null,1],\"309\":[null,null,3],\"310\":[2],\"311\":[3,14],\"312\":[1,71],\"313\":[1,15],\"314\":[1,6],\"315\":[null,null,1],\"316\":[null,null,3],\"317\":[2],\"318\":[1,22],\"319\":[1,82],\"320\":[1,20],\"321\":[1],\"322\":[1,11],\"323\":[1,11],\"324\":[1,7],\"325\":[1,6],\"326\":[2,9],\"327\":[3,25],\"328\":[1,3],\"329\":[null,null,1],\"330\":[null,null,3],\"331\":[2],\"332\":[3,10],\"333\":[2,6],\"334\":[1,39],\"335\":[1,19],\"336\":[1,5],\"337\":[1,14],\"338\":[1,44],\"339\":[null,null,1],\"340\":[null,null,3],\"341\":[2],\"342\":[3,8],\"343\":[1,79],\"344\":[1,49],\"345\":[1],\"346\":[1,44],\"347\":[1,49],\"348\":[1,88],\"349\":[1,21],\"350\":[1,50],\"351\":[1,54],\"352\":[1,3],\"353\":[null,null,1],\"354\":[null,null,3],\"355\":[2],\"356\":[1,16],\"357\":[1,121],\"358\":[1,26],\"359\":[1],\"360\":[2,28],\"361\":[1,26],\"362\":[1,5],\"363\":[null,null,1],\"364\":[null,null,4],\"365\":[3,10],\"366\":[5,10],\"367\":[1,59],\"368\":[1,22],\"369\":[1,4],\"370\":[2,25],\"371\":[null,null,1],\"372\":[null,null,3],\"373\":[2,13],\"374\":[4,11],\"375\":[1,103],\"376\":[1,46],\"377\":[1],\"378\":[1,24],\"379\":[1,33],\"380\":[3,35],\"381\":[3,10],\"382\":[3,25],\"383\":[2,32],\"384\":[1,4],\"385\":[null,null,1],\"386\":[null,null,3],\"387\":[5,46],\"388\":[1,28],\"389\":[3,56],\"390\":[1,40],\"391\":[1,14],\"392\":[1,45],\"393\":[null,null,1],\"394\":[null,null,3],\"395\":[5,55],\"396\":[1,27],\"397\":[1,130],\"398\":[1,71],\"399\":[1,9],\"400\":[1,125],\"401\":[1,58],\"402\":[1,58],\"403\":[1,119],\"404\":[1,24],\"405\":[1,27],\"406\":[2,24],\"407\":[1,127],\"408\":[1,35],\"409\":[1,25],\"410\":[1,36],\"411\":[1,62],\"412\":[1,51],\"413\":[1,68],\"414\":[1,63],\"415\":[1,35],\"416\":[5,54],\"417\":[1,35],\"418\":[1,26],\"419\":[1,18],\"420\":[1,86],\"421\":[1,42],\"422\":[1,12],\"423\":[1,28],\"424\":[1,135],\"425\":[1,61],\"426\":[1,63],\"427\":[1,61],\"428\":[1,56],\"429\":[1,81],\"430\":[1,24],\"431\":[1,18],\"432\":[null,null,1],\"433\":[null,null,3],\"434\":[5,47],\"435\":[1,11],\"436\":[1,33],\"437\":[1,37],\"438\":[1,37],\"439\":[1,23],\"440\":[1,70],\"441\":[1,16],\"442\":[null,null,1],\"443\":[null,null,3],\"444\":[5,55],\"445\":[2,44],\"446\":[1,7],\"447\":[2,20],\"448\":[3,130],\"449\":[3,51],\"450\":[1,25],\"451\":[1,22],\"452\":[1,13],\"453\":[null,null,1],\"454\":[null,null,3],\"455\":[5,51],\"456\":[2,21],\"457\":[1,37],\"458\":[1,56],\"459\":[1,67],\"460\":[1,77],\"461\":[1,93],\"462\":[1,24],\"463\":[1,18],\"464\":[null,null,1],\"465\":[null,null,3],\"466\":[5,49],\"467\":[1,28],\"468\":[2,62],\"469\":[2,32],\"470\":[2,22],\"471\":[1,21],\"472\":[1,21],\"473\":[1,16],\"474\":[null,null,1],\"475\":[null,null,3],\"476\":[5,76],\"477\":[1,95],\"478\":[1,15],\"479\":[1,60],\"480\":[1,45],\"481\":[1,151],\"482\":[1,36],\"483\":[1,42],\"484\":[1,47],\"485\":[1,28],\"486\":[1,31],\"487\":[1,33],\"488\":[1,62],\"489\":[1,76],\"490\":[1,57],\"491\":[1,39],\"492\":[1,33],\"493\":[1,101],\"494\":[1,39],\"495\":[1,50],\"496\":[1,60],\"497\":[1,17],\"498\":[null,null,1],\"499\":[null,null,3],\"500\":[5,46],\"501\":[1,18],\"502\":[1,13],\"503\":[1,32],\"504\":[1,24],\"505\":[1,3],\"506\":[null,null,1],\"507\":[null,null,3],\"508\":[1,3],\"509\":[3]},\"averageFieldLength\":[1.5359372734962677,28.656239105492254,0.7775985546750903],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"一位热衷于探索全栈开发领域的技术爱好者，擅长将前端与后端技术无缝结合，致力于打造高效、优雅的解决方案。\"]},\"2\":{\"h\":\"随笔\",\"t\":[\"这里是所有个人感想、生活记录等非技术类文章。\"]},\"3\":{\"h\":\"命里有时终须有\",\"t\":[\"alt text\",\"昨日在玩“三国杀：将成名”时，我抽奖一发就中了大奖——“清河公主”传说皮。这让我不禁感慨：“命里有时终须有，命里无时莫强求。”这句话真是道出了人生的真谛，有些事情是强求不来的，顺其自然反而能得到意想不到的收获。\"]},\"4\":{\"h\":\"项目\",\"t\":[\"这里是你参与或开发的项目介绍和进展。\"]},\"5\":{\"h\":\"资源\",\"t\":[\"这里是推荐的书籍、网站、工具等资源。\",\"github - 世界上最大的代码托管平台\",\"Z-Library – 世界上最大的电子图书馆。自由访问知识和文化。\",\"Vuepress - 我的博客构建库\",\"plantUML - 一个通用性很强的工具，可以快速、直接地创建各种图表\",\"emoji-cheat-sheet - A markdown version emoji cheat sheet\",\"Sci-hub —— 当今科学界最具争议性的项目。Sci-hub的目标是 免费并且不受限制地 提供所有科学知识。\",\"Lib.Genesis —— Part of Library Genesis. ex libgen.io, libgen.org\"]},\"6\":{\"h\":\"Qt\"},\"7\":{\"h\":\"Some Solutions to Questions about Qt\"},\"8\":{\"h\":\"The qt-5 isn't in Qt Maintenance tools\",\"t\":[\"Open the Qt Maintenance Tools.\",\"click the Archive in the Select-Component section.\",\"click the filter button and you can see the qt-5 in the list.\"]},\"9\":{\"h\":\"android studio换源\",\"t\":[\"国内镜像\",\"Android Studio下载gradle太慢可换源\",\"android.plugin version 下载错误查看\",\"修改 settings.gradle.kts\",\"pluginManagement { repositories { maven { url=uri (\\\"https://jitpack.io\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/releases\\\") } // maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url=uri (\\\"https://maven.aliyun.com/repository/google\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/central\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/gradle-plugin\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/public\\\") } google() mavenCentral() gradlePluginPortal() } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { maven { url=uri (\\\"https://jitpack.io\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/releases\\\") } // maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url=uri (\\\"https://maven.aliyun.com/repository/google\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/central\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/gradle-plugin\\\") } maven { url=uri (\\\"https://maven.aliyun.com/repository/public\\\") } google() mavenCentral() } } \",\"gradle-wrapper.properties 换成对应的版本\",\"distributionUrl=https\\\\://mirrors.cloud.tencent.com/gradle/gradle-8.7-all.zip \"]},\"10\":{\"h\":\"CI/CD\",\"t\":[\"本地调试工具 act\",\"需要创建配置文件\",\"也可另外指定\",\"act --var-file \\\"./.act/.vars\\\" --secret-file \\\"./.act/.secrets\\\" --env-file \\\"./.act/.env\\\" {{other}} \"]},\"11\":{\"c\":[\"CI/CD\"]},\"12\":{\"c\":[\"CI/CD\"]},\"13\":{\"h\":\"docker + nginx + acme.sh 部署 vue/flask 项目\",\"t\":[\"本文将介绍如何使用 Docker、Nginx 和 acme.sh 部署一个 Vue 和 Flask 项目。我们将详细讲解环境配置、项目结构、Nginx 配置、Docker 配置以及如何升级到 HTTPS。\",\"提示\",\"需要先申请一个域名，本文是 bupt.online\"]},\"14\":{\"h\":\"环境\",\"t\":[\"Ubuntu\",\"Docker\",\"Docker-Compose\",\"acme.sh\",\"(python)\",\"nginx\"]},\"15\":{\"h\":\"项目结构\",\"t\":[\"./nginx ├── acme # 存放SSL证书 ├── conf.d │ ├── Automaton.conf │ ├── blog.conf ├── docker-compose.yml ├── DockerFile ├── logs # 存放日志 │ ├── access.log │ ├── Automaton │ ├── blog │ └── error.log ├── nginx.conf ./project # 要部署的（前端）项目 ├── Automaton └── blog \"]},\"16\":{\"h\":\"配置http服务\",\"t\":[\"在准备好前端项目及安装相应环境后，进行如下操作(部分路径以实际为准，进行修改)\"]},\"17\":{\"h\":\"配置nginx\",\"t\":[\"nginx.conf\",\"user nginx; worker_processes 1; error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; events { worker_connections 4096; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' '$status $body_bytes_sent \\\"$http_referer\\\" ' '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; # access_log /var/log/nginx/access.log main; access_log off; error_log /var/log/nginx/error.log warn; sendfile on; #tcp_nopush on; keepalive_timeout 65; # 定义DNS解析器 resolver 8.8.8.8 114.114.114.114 valid=300s; resolver_timeout 10s; # 增加请求头和Cookie的大小限制 client_header_buffer_size 16k; large_client_header_buffers 4 32k; include /etc/nginx/conf.d/*.conf; } \",\"Automaton.conf\",\"server { listen 80; server_name Automaton.bupt.online; location / { root /usr/share/nginx/html/Automaton; try_files $uri $uri/ =404; } access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } \",\"blog.conf\",\"server { listen 80; server_name bupt.online www.bupt.online; location / { root /usr/share/nginx/html/blog; try_files $uri $uri/ =404; # access_log /var/log/nginx/blog/access.log; error_log /var/log/nginx/blog/error.log warn; } location /Automaton { # 使用 proxy_pass 或 rewrite 重定向到Automaton.bupt.online 失败 alias /usr/share/nginx/html/Automaton/; try_files $uri $uri/ =404; # access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } } \"]},\"18\":{\"h\":\"配置docker\",\"t\":[\"DockerFile\",\"FROM nginx:latest COPY nginx.conf /etc/nginx/nginx.conf COPY conf.d /etc/nginx/conf.d \",\"docker-compose.yml\",\"services: nginx: build: context: . dockerfile: DockerFile ports: - \\\"80:80\\\" - \\\"443:443\\\" volumes: - ../project/blog:/usr/share/nginx/html/blog - ../project/Automaton:/usr/share/nginx/html/Automaton - ./logs:/var/log/nginx - ./conf.d:/etc/nginx/conf.d - ./acme:/etc/letsencrypt/live networks: - webnet environment: - TZ=Asia/Shanghai networks: webnet: \"]},\"19\":{\"h\":\"启动项目\",\"t\":[\"docker-compose up -d --build \",\"然后就能正常访问 http://bupt.online 及 http://automaton.bupt.online ， http://bupt.online/Automaton\"]},\"20\":{\"h\":\"升级为https\"},\"21\":{\"h\":\"申请证书\",\"t\":[\"进入acme.sh的安装目录(/root/.acme.sh)\",\"sudo su root acme.sh --issue -d bupt.online --nginx # Nginx acme.sh --issue -d Automaton.bupt.online --nginx # Nginx \"]},\"22\":{\"h\":\"安装证书\",\"t\":[\"这里将目录修改为目标目录\",\"# sudo su root # cd .acme.sh # use like below acme.sh --install-cert -d bupt.online \\\\ --cert-file /home/ubuntu/nginx/acme/bupt.online/cert.cer \\\\ --key-file /home/ubuntu/nginx/acme/bupt.online/privkey.key \\\\ --fullchain-file /home/ubuntu/nginx/acme/bupt.online/fullchain.cer \\\\ --reloadcmd \\\"cd /home/ubuntu/nginx && docker-compose up -d --build\\\" \"]},\"23\":{\"h\":\"修改配置\",\"t\":[\"blog.conf\",\"server { listen 80; server_name bupt.online www.bupt.online; return 301 https://$host$request_uri; } server { listen 443 ssl; server_name bupt.online; ssl_certificate /etc/letsencrypt/live/bupt.online/fullchain.cer; ssl_certificate_key /etc/letsencrypt/live/bupt.online/privkey.key; location / { root /usr/share/nginx/html/blog; try_files $uri $uri/ =404; # access_log /var/log/nginx/blog/access.log; error_log /var/log/nginx/blog/error.log warn; } location /Automaton { # 使用 proxy_pass 或 rewrite 重定向到Automaton.bupt.online 失败 alias /usr/share/nginx/html/Automaton/; try_files $uri $uri/ =404; # access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } } server { listen 443 ssl; server_name www.bupt.online; ssl_certificate /etc/letsencrypt/live/www.bupt.online/fullchain.cer; ssl_certificate_key /etc/letsencrypt/live/www.bupt.online/privkey.key; location / { root /usr/share/nginx/html/blog; try_files $uri $uri/ =404; # access_log /var/log/nginx/blog/access.log; error_log /var/log/nginx/blog/error.log warn; } location /Automaton { # 使用 proxy_pass 或 rewrite 重定向到Automaton.bupt.online 失败 alias /usr/share/nginx/html/Automaton/; try_files $uri $uri/ =404; # access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } } \",\"Automaton.conf\",\"server { listen 80; server_name Automaton.bupt.online; location / { return 301 https://$host$request_uri; } } server { listen 443 ssl; server_name Automaton.bupt.online; ssl_certificate /etc/letsencrypt/live/Automaton.bupt.online/fullchain.cer; ssl_certificate_key /etc/letsencrypt/live/Automaton.bupt.online/privkey.key; location / { root /usr/share/nginx/html/Automaton; try_files $uri $uri/ =404; } access_log /var/log/nginx/Automaton/access.log; error_log /var/log/nginx/Automaton/error.log warn; } \"]},\"24\":{\"h\":\"重启container\",\"t\":[\"docker-compose up -d --build \"]},\"25\":{\"h\":\"配置nginx反向代理，使flask支持 https\",\"t\":[\"Flask 部署\",\"#TODO - 添加flask+nginx配置\"]},\"26\":{\"h\":\"参考资料\",\"t\":[\"Nginx Documentation\",\"Flask Documentation\",\"Reverse Proxy Guide\",\"SSL Certificates\",\"用acme.sh帮你免费且自动更新的HTTPS证书，省时又省力\",\"docker部署certbot与nginx来获取ssl证书添加https及自动更新\",\"使用docker acme申请、续订泛域名证书，并自动重载docker nginx\",\"Flask: 如何给Python Flask Web服务器添加HTTPS功能\"]},\"27\":{\"c\":[\"nginx\"]},\"28\":{\"c\":[\"部署\"]},\"29\":{\"h\":\"docker in wsl\",\"t\":[\"转载自：docker wsl2 踩坑记录 | 唯独你没懂，居然把路径藏在这里\"]},\"30\":{\"h\":\"docker wsl2 踩坑记录 | 唯独你没懂，居然把路径藏在这里\",\"t\":[\"最新推荐文章于 2024-06-30 17:39:23 发布\",\"TieWay59 最新推荐文章于 2024-06-30 17:39:23 发布\",\"版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。\"]},\"31\":{\"h\":\"docker wsl2 踩坑记录\"},\"32\":{\"h\":\"docker-desktop 是什么\",\"t\":[\"Docker Desktop WSL 2 backend\",\"What is the docker-desktop-data distro\",\"简单地说，使用 docker-desktop-wsl 方式使用 docker，会给你创建两个 wsl distro。一个包含 docker/docker-desktop 服务本体，一个用于存储附属的数据（比如 images 等）。\",\"这中间就会导致 docker 文件的实际位置很奇怪，我还没有研究透。\",\"官方推荐的 win10 下的实践是：你的用 docker-desktop 设置把你主机 docker 集成到某个 distro(wsl 可以使用的 linux 发行版，我的是 Ubuntu)。然后在 win10 的开发环境去 remote 连接你的 Ubuntu。\",\"这样你就能用 win10 的图形界面，在 linux 的环境下，进行包含 docker 的开发过程了。\"]},\"33\":{\"h\":\"wsl 里的 docker 到底在哪里\",\"t\":[\"Docker volumes on Windows WSL2\",\"Locating data volumes in Docker Desktop (Windows)\",\"More generally /var/lib/docker/ maps to \\\\\\\\wsl$\\\\docker-desktop-data\\\\version-pack-data\\\\community\\\\docker\\\\.\",\"简单地说，打开 win10 文件管理器，输入：\",\"\\\\\\\\wsl$\\\\docker-desktop-data\\\\version-pack-data\\\\community\\\\docker\\\\ \",\"去 inspect 得到的/var/lib/docker/...都是在这个路径下的。\",\"https://www.cnblogs.com/kingsonfu/p/11578073.html\",\"文件目录：\\\\\\\\wsl$\\\\docker-desktop-data\\\\data\\\\docker\\\\containers\"]},\"34\":{\"h\":\"github 工作流程\",\"t\":[\"十分钟学会正确的github工作流，和开源作者们使用同一套流程\",\"相关信息\",\"TODO\"]},\"35\":{\"h\":\"技术\",\"t\":[\"这里是所有与技术相关的文章，包括编程、工具使用、技术分享等内容。\"]},\"36\":{\"h\":\"「泛型与 OI」modint\",\"t\":[\"在 OI 中，有大量的题目要求对一些数字取模，这便是本文写作的背景。\"]},\"37\":{\"h\":\"背景介绍\",\"t\":[\"这些题目要么是因为答案太大，不方便输出结果，例如许多计数 dp；要么是因为答案是浮点数，出题人不愿意写一个确定精度的 Special Judge，例如很多期望概率题；要么是因为这道题目直接考察了模的性质和运用，比如大量的 998244353 类的多项式题目。\"]},\"38\":{\"h\":\"过去的做法\",\"t\":[\"在这种要求之下，取模运算就成为了编程中不可缺少的一部分。下面以式子 为例介绍几种写法。\"]},\"39\":{\"h\":\"第一种 直接取模\",\"t\":[\"这种方法是直接取模，简单直接，清晰明了。\",\"constexpr int p=998244353; int ans=1ll*(((x+y)%p+z)%p)*u%p; \",\"但是这种方法有着严重的缺陷，一是容易忘记大括号，二是容易中间运算时搞错运算顺序、忘记取模，三是式子太长、括号太多、不易检验。\",\"因此，不推荐运用这种方法。\"]},\"40\":{\"h\":\"第二种 函数取模\",\"t\":[\"这种方法有效地解决了直接取模的忘记取模的漏洞。\",\"constexpr int p=998244353; int add(int a,int b){ return a+b>=p?a+b-p:a+b; } int sub(int a,int b){ return a<b?a-b+p:a-b; } int mul(int a,int b){ return 1ll*a*b%p; } int ans=mul(add(add(x,y),z),u); \",\"但是，这种写法的式子依旧太长，不易检验，并且如果编译器没有任何优化（现在不存在这种情况了）的话，大量的函数调用将会耗费不少的时间。并且如果要对多个模数取模，则需要写多个函数，显得代码冗长。\"]},\"41\":{\"h\":\"泛型编程\",\"t\":[\"考虑到函数取模的优点，我们不妨通过类的运算符重载来进一步优化 add 等函数。\",\"同时为了解决多个模数的问题，我们考虑泛型编程，将模数直接包含在类型中。\",\"template<typename T,const T p> class modint{ private: T v; public: modint(){} modint(const T& x){assert(0<=x&&x<p);v=x;} modint operator+(const modint& a)const{ return v+a.v>=p?v+a.v-p:v+a.v; } modint operator-(const modint& a)const{ return v<a.v?v-a.v+p:v-a.v; } modint operator*(const modint& a)const{ return 1ll*v*a.v%p; } T operator()(void)const{ return v; } }; modint<int,998244353> x(),y(),z(),u(); modint<int,998244353> ans=(x+y+z)*u; \",\"这样使用的时候，一方面减少了心智负担，不用操心运算时忘记取模；另一方面采取了常数更小的加减法操作，运算更快。\",\"唯一的缺点就是类型名难写，但是模数个数少的时候可以缩写，即写成：\",\"typedef modint<int,998244353> modInt1; \",\"这样就解决了类型名长的缺点。\"]},\"42\":{\"c\":[\"OI\"]},\"43\":{\"c\":[\"MODInt\"]},\"44\":{\"h\":\"python requirements.txt\",\"t\":[\"Python 生成 requirements有两种方式\",\"pip list --format=freeze > requirements.txt (推荐做法)\",\"pip freeze > requirements.txt (不推荐，会带有本地路径)\"]},\"45\":{\"c\":[\"python\"]},\"46\":{\"c\":[\"踩坑记录\"]},\"47\":{\"h\":\"Game Plugin\",\"t\":[\"This is the content of the game plugin post.\",\"BepInEx\",\"AssetStudioAssetStudio\",\"dnSpy\",\"Harmony\",\"UnityExplorer\",\"相关信息\",\"TODO\"]},\"48\":{\"h\":\"风格统一\",\"t\":[\"如何实现风格统一？ 可以使用*.editorconfig*文件来实现风格统一。\",\"安装EditorConfig插件 (部分IDE默认直接支持)\",\"在项目根目录下创建.editorconfig文件，并添加以下内容：\",\"root = true [*] indent_style = space tab_width = 2 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true \"]},\"49\":{\"h\":\"vscode plugin\",\"t\":[\"// TODO https://code.visualstudio.com/api/get-started/your-first-extension\",\"若activate function执行时间过长，会导致Activating extension 'undefined_publisher.kcodetime' failed: AggregateError., 从而启动失败\",\"若deactivate function执行时间超过5s, 会被强行终止，导致插件无法正常退出。\",\"关闭vscode 不会触发onDidCloseTextDocument事件\"]},\"50\":{\"h\":\"「算术公理系统 1」自然数\",\"t\":[\"假设存在一个算数系统的模型满足 Peano 公理，即假定 Peano 公理相容，在此承认次假设的基础之上，我们即可建立如今最常用的算术公理系统。自然数的定义则是构建此算术公理系统的第一步。\"]},\"51\":{\"h\":\"自然数的定义\",\"t\":[\"先介绍 Peano 公理，共有五条：\",\" 是自然数；\",\"任何自然数的后继存在且唯一，下文用 表示 的后继；\",\" 不是任何自然数的后继；\",\"不同的自然数后继不同；\",\" 是关于自然数 的一个命题，且满足两个条件：\",\" 是真命题；\",\"由 为真命题可以推理出 为真命题。\",\"则有，对于任意自然数 ， 为真命题。\",\"这样就定义了自然数，自然数这个新的数学对象因我们的假设而确立。\"]},\"52\":{\"h\":\"自然数的加法运算\",\"t\":[\"自然数中最重要的运算当然是加法。\"]},\"53\":{\"h\":\"加法的定义\",\"t\":[\"定义加法的运算规则：\",\"若 是自然数，则 的运算结果为 ，即 ；\",\"若 都是自然数，则 。\",\"下面我们需要证明对于任意两个自然数，都可以进行加法运算，也就是说，我们需要证明加法结果的存在性和唯一性。\"]},\"54\":{\"h\":\"加法结果的存在性\",\"t\":[\" 是任意自然数，记 表示 是否是自然数，即 是否存在。\",\" 是自然数，由加法运算规则 Ⅰ 有 ，进而有 是自然数； 即 得证。\",\" 和 是自然数，由 Peano 公理 Ⅱ 有 和 是自然数； 根据加法运算规则 Ⅱ 有 ，进有 是自然数； 综上所述，若 是自然数，则 也是自然数； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 是自然数，再根据 的任意性，得出对于任意自然数 ， 都是自然数。\"]},\"55\":{\"h\":\"加法结果的唯一性\",\"t\":[\" 是任意自然数，记 表示 是否唯一，即 的结果是否唯一。\",\" 是自然数，由加法运算规则 Ⅰ 有 ，进而 是唯一的，就是 ； 即 得证。\",\" 是自然数， 是唯一的，由 Peano 公理 Ⅱ 有 是自然数且 唯一； 根据加法运算规则 Ⅱ 有 ，进有 唯一； 综上所述，若 唯一，则 也唯一； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 唯一，再根据 的任意性，得出对于任意自然数 ， 都是唯一的。\"]},\"56\":{\"h\":\"加法的性质\",\"t\":[\"在明确证明了自然数加法运算的良好性质，即任意两个自然数都可以进行加法运算，且加法运算的结果存在且唯一之后，我们终于可以对自然数加法的性质进行进一步的探索。\"]},\"57\":{\"h\":\"加法交换律\",\"t\":[\"下面证明加法交换律，即对于任意自然数 ，有 。\",\"直接证明比较困难，考虑从加法运算的定义下手，即先证明加法的两条运算规则符合交换律。\",\"试证 ，首先有\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 ，首先有\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，将其称为新的加法运算规则 Ⅱ。\",\"证明了加法运算规则的交换律之后，试证加法交换律 ，首先由加法运算规则 Ⅰ 有 ，进而当 是自然数且 时，有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即加法交换律成立。\"]},\"58\":{\"h\":\"加法结合律\",\"t\":[\"下面证明加法结合律，即对于任意自然数 ，有 。\",\"首先当 时，有\",\"进而当 为自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即加法结合律成立。\"]},\"59\":{\"h\":\"加法消去律\",\"t\":[\"下面证明加法消去律，即对于任意自然数 ，有 。\",\"试证 。\",\"首先当 时有\",\"进而当 为自然数且 时有\",\"即 ，根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 。\",\"首先当 时有\",\"进而当 为自然数且 时有\",\"即 ，根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"综上所述，加法消去律 ，对任意自然数 成立。\"]},\"60\":{\"h\":\"自然数的序\",\"t\":[\"自然数的序为两个自然数的关系。\"]},\"61\":{\"h\":\"序的定义\",\"t\":[\"定义自然数的序即定义 当且仅当存在自然数 满足 。定义 当且仅当 且 。\",\"自然数的序是全序关系，它应该具有反对称性、传递性和完全性。\"]},\"62\":{\"h\":\"正自然数\",\"t\":[\"在考察序的性质之前，我们预先准备以方便证明。\",\"定义正自然数为非 自然数。\"]},\"63\":{\"h\":\"正自然数的性质\",\"t\":[\"正自然数与自然数相加为正自然数，即对于正自然数 ，其与自然数 的和 为正自然数。\",\"首先，当 时， 为正自然数。\",\"进而当 为自然数且 为正自然数时有 ，根据 Peano 公理 Ⅲ， 为正自然数，进而 为正自然数。\",\"根据 Peano 公理 Ⅴ，正自然数与自然数相加为正自然数。\"]},\"64\":{\"h\":\"序的反对称性\",\"t\":[\"若 且 ，则 。\",\"由 有 ，由 有 。\",\"因此 ，由加法消去律得到 ，根据正自然数的性质得出 ，因此 。\"]},\"65\":{\"h\":\"序的传递性\",\"t\":[\"若 且 ，则 。\",\"由 有 ，由 有 。\",\"根据加法结果的存在性得到 是自然数，根据加法结合律得出 ，进而 。\"]},\"66\":{\"h\":\"序的完全性\",\"t\":[\"任意两个自然数 都有序关系。\",\"对于 两个自然数，当 时有 所以 。\",\"当 为自然数时。若 ，则 ，因此 ；若 ，则 ，因此 ；若 ，则 。\",\"由 Peano 公理 Ⅴ 有任意两个自然数 都有序关系。\"]},\"67\":{\"h\":\"加法保序性\",\"t\":[\"若 ，则 。\",\"由 有 ，进而 因此 。\"]},\"68\":{\"h\":\"自然数的乘法运算\",\"t\":[\"自然数的乘法也十分重要。\"]},\"69\":{\"h\":\"乘法的定义\",\"t\":[\"定义乘法的运算规则：\",\"若 是自然数，则 的运算结果为 ，即 ；\",\"若 都是自然数，则 。\",\"下面我们需要证明对于任意两个自然数，都可以进行乘法运算，也就是说，我们需要证明乘法结果的存在性和唯一性。\"]},\"70\":{\"h\":\"乘法结果的存在性\",\"t\":[\" 是任意自然数，记 表示 是否是自然数，即 是否存在。\",\" 是自然数，由乘法运算规则 Ⅰ 有 ，进而有 是自然数； 即 得证。\",\" 和 是自然数，由加法结果的存在性有 存在； 根据乘法运算规则 Ⅱ 有 ，进有 是自然数； 综上所述，若 是自然数，则 也是自然数； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 是自然数，再根据 的任意性，得出对于任意自然数 ， 都是自然数。\"]},\"71\":{\"h\":\"乘法结果的唯一性\",\"t\":[\" 是任意自然数，记 表示 是否唯一，即 的结果是否唯一。\",\" 是自然数，由乘法运算规则 Ⅰ 有 ，进而 是唯一的，就是 ； 即 得证。\",\" 是自然数， 是唯一的，由加法结果的唯一性有 唯一； 根据乘法运算规则 Ⅱ 有 ，进有 唯一； 综上所述，若 唯一，则 也唯一； 即由 为真命题可以推出 为真命题。\",\"由 的性质和 Peano 公理 Ⅴ 有，对于任意自然数 ， 成立，即 唯一，再根据 的任意性，得出对于任意自然数 ， 都是唯一的。\"]},\"72\":{\"h\":\"乘法的性质\",\"t\":[\"在明确证明了自然数乘法运算的良好性质，即任意两个自然数都可以进行乘法运算，且乘法运算的结果存在且唯一之后，我们终于可以对自然数乘法的性质进行进一步的探索。\"]},\"73\":{\"h\":\"乘法交换律\",\"t\":[\"下面证明乘法交换律，即对于任意自然数 ，有 。\",\"直接证明比较困难，考虑从乘法运算的定义下手，即先证明乘法的两条运算规则符合交换律。\",\"试证 。\",\"首先有 。\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 。\",\"首先 时有\",\"进而当 是自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，将其称为新的乘法运算规则 Ⅱ。\",\"证明了乘法运算规则的交换律之后，试证乘法交换律 ，首先当 时由乘法运算规则 Ⅰ 有 。\",\"进而当 是自然数且 时，有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即乘法交换律成立。\"]},\"74\":{\"h\":\"乘法分配律\",\"t\":[\"下面证明乘法分配律，即对于任意自然数 ，有 。\",\"首先当 时，，进而当 为自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即乘法分配律成立。\"]},\"75\":{\"h\":\"乘法结合律\",\"t\":[\"下面证明乘法结合律，即对于任意自然数 ，有 。\",\"首先当 时，有 。\",\"进而当 为自然数且 时有\",\"根据 Peano 公理 Ⅴ，得知 对任意自然数 成立，即乘法结合律成立。\"]},\"76\":{\"h\":\"乘法消去律\",\"t\":[\"下面证明乘法消去律，即对于任意自然数 和 ，有 。\",\"试证 。\",\"首先当 时有\",\"进而当 为自然数且 时有\",\"即 ，根据 Peano 公理 Ⅴ，得知 对任意自然数 成立。\",\"试证 ，采用反证法，假设 ，则由加法运算规则 Ⅱ 可知 或 ，其中 ，不妨设 。\",\"由 Peano 公理 Ⅲ 有 。\",\"由 Peano 公理 Ⅲ、Ⅳ 有，任意非零自然数 都有唯一的数 满足 ，不妨记作 。\",\"若有 ，则有\",\"上述等式表明 是 的后继，这违背了 Peano 公理 Ⅲ，由此知道假设不成立，即 。\",\"综上所述，乘法消去律 ，对任意自然数 成立。\"]},\"77\":{\"h\":\"Peano 公理的合理性\",\"t\":[\"通过上述步骤，我们成功地由 Peano 公理构建出了一个自然数代数系统。但 Peano 公理自身任有待研究。从上述步骤中我们看出 Peano 公理每一条公理都被使用过，少了任何一条都不足以构建出上述的自然数系统，这究竟是为什么呢？\",\"下面我将阐述为什么每条公理都是必须的，通过举反例的方式。研究 Peano 公理自然不能从 Peano 公理系统内出发，我们将借助另一个公理系统——图论。\"]},\"78\":{\"h\":\"乘法保序性\",\"t\":[\"若 ，则 。\",\"由 有 ，进而 因此 。\"]},\"79\":{\"h\":\"乘法消去保序性\",\"t\":[\"若 ，则 。\",\"采用反证法，假设 ，则存在正自然数 满足 ，有\",\"由此有 ，根据序的反对称性有 ，根据乘法消去律有 ，这与 的假设矛盾，因此假设不成立，即证明了乘法消去的保序性。\"]},\"80\":{\"h\":\"用图论阐述 Peano 系统\",\"t\":[\"自然数与有向图 同构，这个图满足如下性质：\",\"存在点 ，即 ；\",\"所有点的出度为 ，即 ；\",\"点 入度为 ，即 ；\",\"任意点的入度小于等于 ，即 ；\",\"存在从 到任意点的路径，即 。\",\"下面我们试着通过删除公理的方法来寻找反例。\"]},\"81\":{\"h\":\"Peano 公理 Ⅰ\",\"t\":[\"若去除，则允许不存在 ，可以构造出空集自然数系统。\"]},\"82\":{\"h\":\"Peano 公理 Ⅱ\",\"t\":[\"若去除，则对点的出度无规定，可以构造出菊花图自然数系统。\"]},\"83\":{\"h\":\"Peano 公理 Ⅲ\",\"t\":[\"若去除，则对 的入度无规定，可以构造出环状自然数系统。\"]},\"84\":{\"h\":\"Peano 公理 Ⅳ\",\"t\":[\"若去除，则对一个数可以是多个数的后继，可以构造出 状自然数系统。\"]},\"85\":{\"h\":\"Peano 公理 Ⅴ\",\"t\":[\"若去除，则对连通性无要求，可以构造出分段状自然数系统。\"]},\"86\":{\"c\":[\"数学\"]},\"87\":{\"c\":[\"公理系统\"]},\"88\":{\"h\":\"使用capacitor和ionic将vue项目迁移到mobile端\",\"t\":[\"当我们写完了vue项目后，想做一个一样的移动app，此时我们可以使用ionic无缝将其迁移到移动端。\"]},\"89\":{\"h\":\"安装\",\"t\":[\"Capacitor\",\"ionic\"]},\"90\":{\"h\":\"tips\",\"t\":[\"deploy\",\"每次执行更新你的 Web 目录的构建（例如 ionic build）时（默认：build)，你需要将这些更改复制到你的原生项目中：\",\"ionic cap copy\",\"注意：更新代码的原生部分（例如添加新插件）后，使用 sync 命令：\",\"ionic cap sync \",\"相关信息\",\"vscode中可以使用\\\"ionic\\\"插件\",\"默认不支持HTTP\",\"const config: CapacitorConfig = { plugins:{ CapacitorHttp:{ enabled:true, } }, android:{ allowMixedContent: true, } }; \"]},\"91\":{\"h\":\"bug 记录\",\"t\":[\"使用 vscode ionic打包后的相对路径不正确， 手动修改后可正常运行\",\"重要\",\"用Android Studio时不能打开360手机助手，会和ADB冲突\"]},\"92\":{\"c\":[\"mobile\"]},\"93\":{\"h\":\"并发异步编程之争：协程(asyncio)到底需不需要加锁？(线程/协程安全/挂起/主动切换)Python3\",\"t\":[\"原文转载自「刘悦的技术博客」https://v3u.cn/a_id_208\",\"协程与线程向来焦孟不离，但事实上是，线程更被我们所熟知，在Python编程领域，单核同时间内只能有一个线程运行，这并不是什么缺陷，这实际上是符合客观逻辑的，单核处理器本来就没法同时处理两件事情，要同时进行多件事情本来就需要正在运行的让出处理器，然后才能去处理另一件事情，左手画方右手画圆在现实中本来就不成立，只不过这个让出的过程是线程调度器主动抢占的。\"]},\"94\":{\"h\":\"线程安全\",\"t\":[\"系统的线程调度器是假设不同的线程是毫无关系的，所以它平均地分配时间片让处理器一视同仁，雨露均沾。但是Python受限于GIL全局解释器锁，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局解释器锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使多个线程跑在8核处理上，也只能用到1个核。\",\"但其实，这并不是事情的全貌，就算只能用单核处理任务，多个线程之前也并不是完全独立的，它们会操作同一个资源。于是，大家又发明了同步锁，使得一段时间内只有一个线程可以操作这个资源，其他线程只能等待：\",\"import threading balance = 0 def change_it_without_lock(n): global balance # 不加锁的话 最后的值不是0 # 线程共享数据危险在于 多个线程同时改同一个变量 # 如果每个线程按顺序执行，那么值会是0， 但是线程时系统调度，又不确定性，交替进行 # 没锁的话，同时修改变量 # 所以加锁是为了同时只有一个线程再修改，别的线程表一定不能改 for i in range(1000000): balance = balance + n balance = balance - n def change_it_with_lock(n): global balance if lock.acquire(): try: for i in range(1000000): balance = balance + n balance = balance - n # 这里的finally 防止中途出错了，也能释放锁 finally: lock.release() threads = [ threading.Thread(target=change_it_with_lock, args=(8, )), threading.Thread(target=change_it_with_lock, args=(10, )) ] lock = threading.Lock() [t.start() for t in threads] [t.join() for t in threads] print(balance) \",\"这种异步编程方式被广大开发者所认可，线程并不安全，线程操作共享资源需要加锁。然而人们很快发现，这种处理方式是在画蛇添足，处理器本来同一时间就只能有一个线程在运行。是线程调度器抢占划分时间片给其他线程跑，而现在，多了把锁，其他线程又说我拿不到锁，我得拿到锁才能操作。\",\"就像以前的公共电话亭，本来就只能一个人打电话，现在电话亭上加了把锁，还是只能一个人打电话，而有没有锁，有什么区别呢？所以，问题到底出在哪儿？\",\"事实上，在所有线程相互独立且不会操作同一资源的模式下，抢占式的线程调度器是非常不错的选择，因为它可以保证所有的线程都可以被分到时间片不被垃圾代码所拖累。而如果操作同一资源，抢占式的线程就不那么让人愉快了。\"]},\"95\":{\"h\":\"协程\",\"t\":[\"过了一段时间，人们发现经常需要异步操作共享资源的情况下，主动让出时间片的协程模式比线程抢占式分配的效率要好，也更简单。\",\"从实际开发角度看，与线程相比，这种主动让出型的调度方式更为高效。一方面，它让调用者自己来决定什么时候让出，比操作系统的抢占式调度所需要的时间代价要小很多。后者为了能恢复现场会在切换线程时保存相当多的状态，并且会非常频繁地进行切换。另一方面，协程本身可以做成用户态，每个协程的体积比线程要小得多，因此一个进程可以容纳数量相当可观的协程任务。\",\"import asyncio balance = 0 async def change_it_without_lock(n): global balance balance = balance + n balance = balance - n loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_without_lock(10), change_it_without_lock(8), change_it_without_lock(2), change_it_without_lock(7))) print(balance) \",\"从代码结构上看，协程保证了编写过程中的思维连贯性，使得函数（闭包）体本身就无缝保持了程序状态。逻辑紧凑，可读性高，不易写出错的代码，可调试性强。\",\"但归根结底，单核处理器还是同时间只能做一件事，所以同一时间点还是只能有一个协程任务运行，它和线程的最主要差别就是，协程是主动让出使用权，而线程是抢占使用权，即所谓的，协程是用户态，线程是系统态。\",\"img\",\"同时，如图所示，协程本身就是单线程的，即不会触发系统的全局解释器锁(GIL)，同时也不需要系统的线程调度器参与抢占式的调度，避免了多线程的上下文切换，所以它的性能要比多线程好。\"]},\"96\":{\"h\":\"协程安全\",\"t\":[\"回到并发竞争带来的安全问题上，既然同一时间只能有一个协程任务运行，并且协程切换并不是系统态抢占式，那么协程一定是安全的：\",\"import asyncio balance = 0 async def change_it_without_lock(n): global balance balance = balance + n balance = balance - n print(balance) loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_without_lock(10), change_it_without_lock(8), change_it_without_lock(2), change_it_without_lock(7))) print(balance) \",\"运行结果：\",\"0 0 0 0 0 liuyue:as-master liuyue$ \",\"看起来是这样的，无论是执行过程中，还是最后执行结果，都保证了其状态的一致性。\",\"于是，协程操作共享变量不需要加锁的结论开始在坊间流传。\",\"毫无疑问，谁主张，谁举证，上面的代码也充分说明了这个结论的正确性，然而我们都忽略了一个客观事实，那就是代码中没有“主动让出使用权”的操作，所谓主动让出使用权，即用户主动触发协程切换，那到底怎么主动让出使用权？使用 await 关键字。\",\"await 是 Python 3.5版本开始引入了新的关键字，即Python3.4版本的yield from，它能做什么？它可以在协程内部用await调用另一个协程实现异步操作，或者说的更简单一点，它可以挂起当前协程任务，去手动异步执行另一个协程，这就是主动让出“使用权”：\",\"async def hello(): print(\\\"Hello world!\\\") r = await asyncio.sleep(1) print(\\\"Hello again!\\\") \",\"当我们执行第一句代码print(\\\"Hello world!\\\")之后，使用await关键字让出使用权，也可以理解为把程序“暂时”挂起，此时使用权让出以后，别的协程就可以进行执行，随后当我们让出使用权1秒之后，当别的协程任务执行完毕，又或者别的协程任务也“主动”让出了使用权，协程又可以切回来，继续执行我们当前的任务，也就是第二行代码print(\\\"Hello again!\\\")。\",\"了解了协程如何主动切换，让我们继续之前的逻辑：\",\"import asyncio balance = 0 async def change_it_without_lock(n): global balance balance = balance + n await asyncio.sleep(1) balance = balance - n print(balance) loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_without_lock(10), change_it_without_lock(8), change_it_without_lock(2), change_it_without_lock(7))) print(balance) \",\"逻辑有了些许修改，当我对全局变量balance进行加法运算后，主动释放使用权，让别的协程运行，随后立刻切换回来，再进行减法运算，如此往复，同时开启四个协程任务，让我们来看一下代码运行结果：\",\"17 9 7 0 0 liuyue:mytornado liuyue$ \",\"可以看到，协程运行过程中，并没有保证“状态一致”，也就是一旦通过await关键字切换协程，变量的状态并不会进行同步，从而导致执行过程中变量状态的“混乱状态”，但是所有协程执行完毕后，变量balance的最终结果是0，意味着协程操作变量的最终一致性是可以保证的。\",\"为了对比，我们再用多线程试一下同样的逻辑：\",\"import threading import time balance = 0 def change_it_without_lock(n): global balance for i in range(1000000): balance = balance + n balance = balance - n print(balance) threads = [ threading.Thread(target=change_it_without_lock, args=(8, )), threading.Thread(target=change_it_without_lock, args=(10, )), threading.Thread(target=change_it_without_lock, args=(10, )), threading.Thread(target=change_it_without_lock, args=(8, )) ] [t.start() for t in threads] [t.join() for t in threads] print(balance) \",\"多线程逻辑执行结果：\",\"liuyue:mytornado liuyue$ python3 \\\"/Users/liuyue/wodfan/work/mytornado/test.py\\\" 28 18 10 0 8 \",\"可以看到，多线程在未加锁的情况下，连最终一致性也无法保证，因为线程是系统态切换，虽然同时只能有一个线程执行，但切换过程是争抢的，也就会导致写操作被原子性覆盖，而协程虽然在手动切换过程中也无法保证状态一致，但是可以保证最终一致性呢？因为协程是用户态，切换过程是协作的，所以写操作不会被争抢覆盖，会被顺序执行，所以肯定可以保证最终一致性。\",\"协程在工作状态中，主动切换了使用权，而我们又想在执行过程中保证共享数据的强一致性，该怎么办？毫无疑问，还是只能加锁：\",\"import asyncio balance = 0 async def change_it_with_lock(n): async with lock: global balance balance = balance + n await asyncio.sleep(1) balance = balance - n print(balance) lock = asyncio.Lock() loop = asyncio.get_event_loop() res = loop.run_until_complete( asyncio.gather(change_it_with_lock(10), change_it_with_lock(8), change_it_with_lock(2), change_it_with_lock(7))) print(balance) \",\"协程加锁执行后结果：\",\"liuyue:mytornado liuyue$ python3 \\\"/Users/liuyue/wodfan/work/mytornado/test.py\\\" 0 0 0 0 0 \",\"是的，无论是结果，还是过程中，都保持了其一致性，但是我们也付出了相应的代价，那就是任务又回到了线性同步执行，再也没有异步的加持了。话说回来，世界上的事情本来就是这样，本来就没有两全其美的解决方案，又要共享状态，又想多协程，还想变量安全，这可能吗？\"]},\"97\":{\"h\":\"协程是否需要加锁\",\"t\":[\"结论当然就是看使用场景，如果协程在操作共享变量的过程中，没有主动放弃执行权(await)，也就是没有切换挂起状态，那就不需要加锁，执行过程本身就是安全的；可是如果在执行事务逻辑块中主动放弃执行权了，会分两种情况，如果在逻辑执行过程中我们需要判断变量状态，或者执行过程中要根据变量状态进行一些下游操作，则必须加锁，如果我们不关注执行过程中的状态，只关注最终结果一致性，则不需要加锁。是的，抛开剂量谈毒性，是不客观的，给一个健康的人注射吗啡是犯罪，但是给一个垂死的人注射吗啡，那就是最大的道德，所以说，道德不是空泛的，脱离对象孤立存在的，同理，抛开场景谈逻辑，也是不客观的，协程也不是虚空的，脱离具体场景孤立存在的，我们应该养成具体问题具体分析的辩证唯物思想，只有掌握了辩证的矛盾思维才能更全面更灵活的看待问题，才能透过现象，把握本质。\",\"原文转载自「刘悦的技术博客」 https://v3u.cn/a_id_208\"]},\"98\":{\"h\":\"协程\",\"t\":[\"文档\",\"重要\",\"TODO\"]},\"99\":{\"h\":\"Slidev\",\"t\":[\"复杂演示推荐\"]},\"100\":{\"h\":\"缺点\",\"t\":[\"不支持导出pptx\",\"https://cn.sli.dev/guide\",\"简单PPT,且需要导出为pptx推荐\"]},\"101\":{\"h\":\"缺点\",\"t\":[\"不支持动画\",\"https://sspai.com/post/55718\",\"https://segmentfault.com/a/1190000040806239\",\"⚠️注意事项\\n如果你的 VS Code 安装了 Markdown 渲染插件 Markdown Preview Enhanced，需要先将这个插件「禁用」或是「卸载」，转而使用 VS Code 后来集成的 Markdown 预览功能，才能正常看到渲染后的 PPT 页面。\"]},\"102\":{\"h\":\"闭包实现类\",\"t\":[\"你是否曾经想过，不用类也能封装数据和方法？这篇文章将带你走进闭包的奇妙世界，展示如何用闭包来实现这一点。通过一个有趣的代码示例，你将看到闭包是如何捕获变量并提供类似类的功能的。准备好了吗？让我们开始这段有趣的旅程吧！\",\"alt text\"]},\"103\":{\"c\":[\"OI\"]},\"104\":{\"c\":[\"MODInt\"]},\"105\":{\"h\":\"教程\",\"t\":[\"这里是所有详细的教程和指南。\"]},\"106\":{\"h\":\"Typora激活教程\",\"t\":[\"Typora 是一款简洁高效的 Markdown 编辑器，支持实时预览和多种导出格式，适用于编写笔记、文档和博客等。\",\"Typora 官网\",\"Typora 中文官网\",\"工具下载：百度网盘，密码：dcqe\",\"一路点击“下一步”进行安装。将下载的工具解压后得到的两个 exe 文件（license-gen.exe 和 node_inject.exe）复制到 Typora 安装目录下（默认为 C:\\\\Program Files\\\\Typora\\\\）。\",\"以管理员身份在 Typora 安装路径打开 PowerShell。\",\"输入 node_inject.exe 并回车，等待提示 \\\"done!\\\"。\",\"输入 license-gen.exe 并回车，等待显示序列号。\",\"启动 Typora，输入任意邮箱和刚才生成的序列号到激活窗口，并点击激活。\",\"通过上述步骤，您可以免费安装并使用 Typora，但如有条件还请支持正版。\"]},\"107\":{\"h\":\"html 转 md 工具\",\"t\":[\"https://github.com/mixmark-io/turndown\",\"https://github.com/aaronsw/html2text\"]},\"108\":{\"h\":\"设计模式七大原则\",\"t\":[\"类的设计原则有七个，包括：开闭原则、里氏代换原则、迪米特原则（最少知道原则）、单一职责原则、接口分隔原则、依赖倒置原则、组合/聚合复用原则。\"]},\"109\":{\"h\":\"关系\",\"t\":[\"七大原则之间并不是相互孤立的，而是相互关联的。一个原则可以是另一个原则的加强或基础。违反其中一个原则，可能同时违反其他原则。\",\"开闭原则是面向对象可复用设计的基石，其他设计原则是实现开闭原则的手段和工具。\",\"通常，可以将这七个原则分为以下两部分：\",\"设计目标：开闭原则、里氏代换原则、迪米特原则\",\"设计方法：单一职责原则、接口分隔原则、依赖倒置原则、组合/聚合复用原则\"]},\"110\":{\"h\":\"开闭原则\",\"t\":[\"对扩展开放\",\"对修改关闭\",\"根据开闭原则，在设计一个系统模块的时候，应该可以在不修改原模块的基础上，扩展其功能。\"]},\"111\":{\"h\":\"实现方法\",\"t\":[\"使用抽象类和接口：通过定义抽象类和接口，可以在不修改现有代码的情况下，增加新的实现。\",\"使用设计模式：例如策略模式、装饰者模式等，可以在不改变原有代码的情况下，动态地扩展对象的行为。\",\"遵循单一职责原则：确保每个类只有一个职责，这样在扩展功能时，不会影响其他功能。\"]},\"112\":{\"h\":\"里氏代换原则\"},\"113\":{\"h\":\"里氏代换原则\",\"t\":[\"里氏代换原则规定子类不得重写父类的普通方法，只能重写父类的抽象方法；即子类可以扩展父类的功能，但是不能改变父类原有的功能。\",\"派生类应当可以替换基类并出现在基类能够出现的任何地方，或者说如果我们把代码中使用基类的地方用它的派生类所代替，代码还能正常工作。\"]},\"114\":{\"h\":\"实现方法\",\"t\":[\"使用抽象类和接口：确保子类实现父类的抽象方法，而不是重写父类的具体方法。\",\"遵循契约：子类的方法签名应与父类一致，返回类型应与父类相同或是其子类型。\",\"遵循行为一致性：子类应保持父类的行为，不应引入违反父类预期的新行为。\"]},\"115\":{\"h\":\"示例\"},\"116\":{\"h\":\"迪米特原则\"},\"117\":{\"h\":\"迪米特原则\",\"t\":[\"一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立；降低类之间的耦合度，提高模块的相对独立性。\"]},\"118\":{\"h\":\"实现方法\",\"t\":[\"引入中介者模式：通过中介者对象来管理对象之间的交互，减少对象之间的直接依赖。\",\"使用门面模式：通过门面对象提供统一的接口，隐藏系统的复杂性，减少对象之间的直接交互。\",\"限制公开方法：尽量减少类的公开方法，避免不必要的外部依赖。\"]},\"119\":{\"h\":\"单一职责原则\",\"t\":[\"一个类只对应一个职责，其职责是引起该类变化的原因。\",\"如果一个类需要改变，改变它的理由永远只有一个。如果存在多个改变它的理由，就需要重新设计该类。\"]},\"120\":{\"h\":\"实现方法\",\"t\":[\"职责分离：将不同的职责分离到不同的类中，每个类只负责一个职责。\",\"模块化设计：通过模块化设计，将不同的功能模块分开，确保每个模块只负责一个功能。\",\"重构：在发现类有多个职责时，及时进行重构，将不同的职责分离到不同的类中。\"]},\"121\":{\"h\":\"示例\",\"t\":[\"// 不符合单一职责原则的类 class User { login() { // 登录逻辑 } register() { // 注册逻辑 } displayProfile() { // 显示用户信息逻辑 } } // 符合单一职责原则的类 class AuthService { login() { // 登录逻辑 } register() { // 注册逻辑 } } class UserProfile { displayProfile() { // 显示用户信息逻辑 } } \"]},\"122\":{\"h\":\"接口隔离原则\",\"t\":[\"不应强迫用户依赖他们不使用的接口。\",\"一个类对另一个类的依赖应该建立在最小的接口上。\",\"简单来说，使用多个专门的接口比使用单个通用接口要好得多。\"]},\"123\":{\"h\":\"依赖倒置原则\",\"t\":[\"高层模块不应该依赖低层模块，二者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。核心思想是：面向接口编程，而不是面向实现编程。\"]},\"124\":{\"h\":\"实现方法\",\"t\":[\"使用接口和抽象类：定义接口或抽象类，让高层模块依赖这些抽象，而不是具体实现。\",\"依赖注入：通过构造函数注入、属性注入或方法注入，将具体实现传递给高层模块。\",\"工厂模式：使用工厂模式创建对象，避免高层模块直接依赖具体类。\"]},\"125\":{\"h\":\"示例\",\"t\":[\"// 定义抽象接口 interface IWorker { work(): void; } // 具体实现 class Worker implements IWorker { work() { console.log(\\\"Working...\\\"); } } // 高层模块依赖抽象接口 class Manager { private worker: IWorker; constructor(worker: IWorker) { this.worker = worker; } manage() { this.worker.work(); } } // 使用依赖注入 const worker = new Worker(); const manager = new Manager(worker); manager.manage(); \"]},\"126\":{\"h\":\"组合/聚合复用原则\",\"t\":[\"尽量使用组合/聚合，不要使用类继承。\",\"如果使用继承，会导致父类的任何变换都可能影响到子类的行为，所以优先使用组合的方式代替继承的方式。\"]},\"127\":{\"h\":\"实现方法\",\"t\":[\"使用组合：通过在类中包含其他类的实例来实现功能，而不是通过继承。\",\"使用聚合：通过在类中引用其他类的实例来实现功能，而不是通过继承。\",\"接口和抽象类：通过接口和抽象类定义行为，然后在具体类中实现这些行为。\"]},\"128\":{\"h\":\"示例\",\"t\":[\"// 使用继承的方式 class Engine { start() { console.log(\\\"Engine started\\\"); } } class Car extends Engine { drive() { this.start(); console.log(\\\"Car is driving\\\"); } } // 使用组合的方式 class Engine { start() { console.log(\\\"Engine started\\\"); } } class Car { private engine: Engine; constructor(engine: Engine) { this.engine = engine; } drive() { this.engine.start(); console.log(\\\"Car is driving\\\"); } } const engine = new Engine(); const car = new Car(engine); car.drive(); \"]},\"129\":{\"h\":\"总结\",\"t\":[\"开闭原则：对扩展开放，对修改关闭。\",\"里氏代换原则：子类可以替换父类，且程序行为不变。\",\"迪米特原则：尽量减少类之间的耦合。\",\"单一职责原则：一个类只负责一个职责。\",\"接口隔离原则：使用多个专门的接口，而不是一个通用接口。\",\"依赖倒置原则：高层模块不依赖低层模块，二者都依赖抽象。\",\"组合/聚合复用原则：优先使用组合/聚合，而不是继承。\"]},\"130\":{\"c\":[\"设计模式\"]},\"131\":{\"c\":[\"设计模式\",\"typescript\"]},\"132\":{\"h\":\"抽象工厂模式\"},\"133\":{\"h\":\"为什么要使用抽象工厂模式\",\"t\":[\"抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而无需明确指定具体类。它通过定义一个创建对象的接口来实现，这样子类可以决定实例化哪个类。抽象工厂模式使得一个类的实例化延迟到其子类。\",\"解耦：抽象工厂模式通过将对象的创建过程抽象化，减少了客户端代码与具体类之间的耦合。\",\"一致性：确保同一工厂创建的一系列对象具有一致的接口和行为。\",\"扩展性：可以方便地增加新的产品族而不影响现有代码。\"]},\"134\":{\"h\":\"示例代码\",\"t\":[\"// factory.ts // 抽象工厂 import { Link } from './link'; import { Tray } from './tray'; import { Page } from './page'; export abstract class Factory { abstract createLink(caption: string, url: string): Link; abstract createTray(caption: string): Tray; abstract createPage(title: string, author: string): Page; } // item.ts // 抽象零件 export abstract class Item { protected caption: string; constructor(caption: string) { this.caption = caption; } abstract makeHTML(): string; } // link.ts // 抽象超链接 import { Item } from './item'; export abstract class Link extends Item { protected url: string; constructor(caption: string, url: string) { super(caption); this.url = url; } } // listFactory.ts import { Factory } from './factory'; import { ListLink } from './listLink'; import { ListTray } from './listTray'; import { ListPage } from './listPage'; export class ListFactory extends Factory { createLink(caption: string, url: string) { return new ListLink(caption, url); } createTray(caption: string) { return new ListTray(caption); } createPage(title: string, author: string) { return new ListPage(title, author); } } // listLink.ts import { Link } from './link'; export class ListLink extends Link { constructor(caption: string, url: string) { super(caption, url); } makeHTML() { return `<li><a href=\\\"${this.url}\\\">${this.caption}</a></li>\\\\n`; } } // listPage.ts import { Page } from './page'; export class ListPage extends Page { makeHTML() { let buffer = []; buffer.push(`<html><head><title>${this.title}</title></head>`); buffer.push(`<body>`); buffer.push(`<h1>${this.title}</h1>`); buffer.push(`<ul>`); this.content.forEach(item => { buffer.push(item.makeHTML()); }); buffer.push(`</ul>`); buffer.push(`<hr><address>${this.author}</address>`); buffer.push(`</body></html>`); return buffer.join('\\\\n'); } } // listTray.ts import { Tray } from \\\"./tray\\\"; export class ListTray extends Tray { constructor(caption: string) { super(caption); } makeHTML() { let buffer = []; buffer.push(\\\"<li>\\\\n\\\"); buffer.push(this.caption + \\\"\\\\n\\\"); buffer.push(\\\"<ul>\\\\n\\\"); this.tray.forEach(item => { buffer.push(item.makeHTML()); }); buffer.push(\\\"</ul>\\\\n\\\"); buffer.push(\\\"</li>\\\\n\\\"); return buffer.join(\\\"\\\"); } } // main.ts import { Factory } from \\\"./factory\\\"; import { ListFactory } from \\\"./listFactory\\\"; function getProduct(factory: Factory) { let people = factory.createLink(\\\"people\\\", \\\"http://www.people.com\\\"); let gmw = factory.createLink(\\\"gmw\\\", \\\"http://www.gmw.com\\\"); let us_yahoo = factory.createLink(\\\"us_yahoo\\\", \\\"http://www.us.yahoo.com\\\"); let jp_yahoo = factory.createLink(\\\"jp_yahoo\\\", \\\"http://www.jp.yahoo.com\\\"); let excite = factory.createLink(\\\"excite\\\", \\\"http://www.excite.com\\\"); let google = factory.createLink(\\\"google\\\", \\\"http://www.google.com\\\"); let traynews = factory.createTray(\\\"news\\\"); traynews.add(people); traynews.add(gmw); let trayyahoo = factory.createTray(\\\"yahoo\\\"); trayyahoo.add(us_yahoo); trayyahoo.add(jp_yahoo); let traysearch = factory.createTray(\\\"search\\\"); traysearch.add(trayyahoo); traysearch.add(excite); let page = factory.createPage(\\\"LinkPage\\\", \\\"gmw\\\"); page.add(traynews); page.add(traysearch); page.output(); } let factory = new ListFactory(); getProduct(factory); // page.ts // 抽象html页面 import { Item } from './item'; export abstract class Page { title: string; author: string; content: Array<Item>; buffer: string; constructor(title: string, author: string) { this.title = title; this.author = author; this.content = []; } add(item: Item): void { this.content.push(item); } output(): void { try { this.buffer = this.makeHTML(); console.log(this.buffer); } catch (error) { console.log(error); } } abstract makeHTML(): string; } // tray.ts // 抽象容器 import { Item } from './item'; export abstract class Tray extends Item { protected tray: Item[] = []; constructor(caption: string) { super(caption); } public add(item: Item): void { this.tray.push(item); } } \",\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\abstractFactory\\\\main.ts\\\" <html><head><title>LinkPage</title></head> <body> <h1>LinkPage</h1> <ul> <li> news <ul> <li><a href=\\\"http://www.people.com\\\">people</a></li> <li><a href=\\\"http://www.gmw.com\\\">gmw</a></li> </ul> </li> <li> search <ul> <li> yahoo <ul> <li><a href=\\\"http://www.us.yahoo.com\\\">us_yahoo</a></li> <li><a href=\\\"http://www.jp.yahoo.com\\\">jp_yahoo</a></li> </ul> </li> <li><a href=\\\"http://www.excite.com\\\">excite</a></li> </ul> </li> </ul> <hr><address>gmw</address> </body></html> \"]},\"135\":{\"h\":\"增加其它工厂\",\"t\":[\"如果只是为了编写包含 HTML 超链接集合的文件，这样的设计可能显得有些过于复杂。当只有一个具体工厂时，划分“抽象类”和“具体类”是没有必要的。然而，使用抽象工厂模式，我们可以轻松地添加其他具体工厂，例如TableFactory。\"]},\"136\":{\"h\":\"拓展思路的要点\"},\"137\":{\"h\":\"易于增加具体工厂\",\"t\":[\"在 Abstract Factory 模式中增加具体的工厂是非常容易的。这里说的“容易”指的是需要编写哪些类和需要实现哪些方法都非常清楚。\",\"假设现在我们要在示例程序中增加新的具体工厂，那么需要做的就是编写 Factory、Link、Tray、Page 这 4 个类的子类，并实现它们定义的抽象方法。也就是说将 factory 包中的抽象部分全部具体化即可。\",\"这样一来，无论要增加多少个具体工厂（或是要修改具体工厂的 Bug），都无需修改抽象工厂和 Main 部分。\"]},\"138\":{\"h\":\"难以增加新的零件\",\"t\":[\"请试想一下要在 Abstract Factory 模式中增加新的零件时应当如何做。例如，我们要在 factory 包中增加一个表示图像的 Picture 零件。这时，我们必须要对所有的具体工厂进行相应的修改才行。例如，在 listfactory 包中，我们必须要做以下修改：\",\"在 ListFactory 中增加 createPicture 方法，\",\"新增 ListPicture 类。\",\"已经编写完成的具体工厂越多，修改的工作量就会越大。\"]},\"139\":{\"h\":\"相关的设计模式\",\"t\":[\"Builder 模式\",\"Factory Method 模式\",\"Composite 模式\",\"Singleton 模式\"]},\"140\":{\"c\":[\"设计模式\"]},\"141\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"142\":{\"h\":\"适配器模式\"},\"143\":{\"h\":\"适配器模式\",\"t\":[\"适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\"]},\"144\":{\"h\":\"为什么要用适配器模式\",\"t\":[\"在软件开发中，经常会遇到需要使用一些现有的类，但它们的接口并不符合当前系统的需求。适配器模式通过创建一个适配器类，将现有类的接口转换为所需的接口，从而使得现有类可以在新的环境中使用。\"]},\"145\":{\"h\":\"类比\"},\"146\":{\"h\":\"类比\",\"t\":[\"比喻\",\"示例程序\",\"实际需求\",\"交流100V\",\"Banner\",\"变换装置\",\"适配器\",\"PrintBanner\",\"需求\",\"直流12V\",\"Print\"]},\"147\":{\"h\":\"示例程序\",\"t\":[\"Adapter 有两种方式实现\",\"// banner.ts export class Banner { private string: string; constructor(string: string) { this.string = string; } showWithParen(): void { console.log(`(${this.string})`); } showWithAster(): void { console.log(`*${this.string}*`); } } // print_inheritance.ts export interface Print { printWeak(): void; printStrong(): void; } // printBanner_inheritance.ts import { Banner } from './banner'; import { Print } from './print_inheritance'; export class PrintBanner extends Banner implements Print { constructor(string: string) { super(string); } printWeak(): void { this.showWithParen(); } printStrong(): void { this.showWithAster(); } } // print_delegation.ts export abstract class Print { abstract printWeak(): void; abstract printStrong(): void; } // printBanner_delegation.ts import { Print } from \\\"./print_delegation\\\"; import { Banner } from \\\"./banner\\\"; export class PrintBanner extends Print { private banner: Banner; constructor(string: string) { super(); this.banner = new Banner(string); } printWeak(): void { this.banner.showWithParen(); } printStrong(): void { this.banner.showWithAster(); } } // main.ts import { PrintBanner as pbi } from './printBanner_inheritance'; import { PrintBanner as pbd } from './printBanner_delegation'; // 使用继承 const printBanner = new pbi('Hello'); printBanner.printWeak(); printBanner.printStrong(); // 使用委托 const printBanner2 = new pbd('Hello'); printBanner2.printWeak(); printBanner2.printStrong(); \"]},\"148\":{\"h\":\"运行结果\",\"t\":[\"ts-node \\\"d:\\\\code\\\\design_pattern\\\\src\\\\adapter\\\\main.ts\\\" (Hello) *Hello* (Hello) *Hello* \"]},\"149\":{\"h\":\"相关的设计模式\",\"t\":[\"Bridge\",\"Decorator\"]},\"150\":{\"c\":[\"设计模式\"]},\"151\":{\"c\":[\"设计模式\",\"typescript\"]},\"152\":{\"h\":\"Bridge 模式\",\"t\":[\"Bridge 模式在“类的功能层次结构”和“类的实现层次结构”之间搭建桥梁。\"]},\"153\":{\"h\":\"使用此设计模式的理由\",\"t\":[\"Bridge 模式的主要目的是将抽象部分与实现部分分离，使它们可以独立变化。这种模式通过组合而不是继承来实现功能的扩展，减少了类之间的耦合度，提高了系统的可扩展性和可维护性。\"]},\"154\":{\"h\":\"类的层次结构的两个作用\"},\"155\":{\"h\":\"增加新功能时\",\"t\":[\"假设现在有一个类 Something，当我们想在 Something 中增加新功能时（例如增加一个具体方法），会编写一个 Something 类的子类（派生类），即 SomethingGood 类。这样就构成了一个小小的类层次结构。这就是为了增加新功能而产生的层次结构。\",\"SomeThing\",\"----\\\\ SomeThingGood\"]},\"156\":{\"h\":\"增加新的实现时\",\"t\":[\"在 Template Method 模式（第 3 章）中，我们学习了抽象类的作用。抽象类声明了一些抽象方法，定义了接口 (API)，然后子类负责实现这些抽象方法。父类的任务是通过声明抽象方法的方式定义接口 (API)，而子类的任务是实现抽象方法。正是由于父类和子类的这种任务分担，我们才可以编写出具有高可替换性的类。\",\"这里其实也存在层次结构。例如，当子类实现了父类 AbstractClass 类的抽象方法时，它们之间就构成了一个小小的层次结构。\",\"AbstractClass\",\"----\\\\ ConcreteClass\",\"但是，这里的类的层次结构并非用于增加功能，也就是说，这种层次结构并非用于方便我们增加新的方法。它的真正作用是帮助我们实现任务分担。\"]},\"157\":{\"h\":\"类的层次结构的混杂和分离\",\"t\":[\"当我们想要编写子类时，就需要先确认自己的意图：“我是要增加功能呢？还是要增加实现呢？”\",\"当类的层次结构只有一层时，功能层次结构与实现层次结构是混杂在一个层次结构中的。这样很容易使类的层次结构变得复杂，也难以透彻地理解类的层次结构。因为自己难以确定究竟应该在类的哪一个层次结构中去增加子类。\",\"因此，我们需要将“类的功能层次结构\\\"与“类的实现层次结构\\\"分离为两个独立的类层次结构。当然，如果只是简单地将它们分开，两者之间必然会缺少联系。所以我们还需要在它们之间搭建一座桥梁。本章中要学习的 Bridge 模式的作用就是搭建这座桥梁。\"]},\"158\":{\"h\":\"示例代码\"},\"159\":{\"h\":\"类的一览表\",\"t\":[\"在桥的哪一侧\",\"名字\",\"说明\",\"类的功能层次结构\",\"Display\",\"负责“显示”的类\",\"类的功能层次结构\",\"CountDisplay\",\"增加了“只显示规定次数”这一功能的类\",\"类的实现层次结构\",\"DisplayImpl\",\"负责“显示”的类\",\"类的实现层次结构\",\"StringDisplayImpl\",\"“用字符串显示”的类\",\"主程序\",\"Main\",\"试程序行为的类\",\"Display 类（代码清单 9 · 1 ）的功能是抽象的，负责“显示一些东西\\\"。该类位于“类的功能层次结构\\\"的最上层。在 impl 字段中保存的是实现了 Display 类的具体功能的实例（ impl 是 implementation （实现）的缩写）。该实例通过 Display 类的构造函数被传递给 Display 类，然后保存在字段中，以供后面的处理使用（ impl 字段即是类的两个层次结构的“桥梁\\\"）。\",\"CountDisplay 类继承了 Display 类的 open、print、close 方法，并使用它们来增加这个新功能。这就是“类的功能层次结构\\\"。\"]},\"160\":{\"h\":\"countDisplay.ts\",\"t\":[\"import { Display } from './display'; import { DisplayImpl } from './displayImpl'; export class CountDisplay extends Display { constructor(impl: DisplayImpl) { super(impl); } multiDisplay(times: number) { this.open(); for (let i = 0; i < times; i++) { this.print(); } this.close(); } } \"]},\"161\":{\"h\":\"display.ts\",\"t\":[\"import { DisplayImpl } from './displayImpl'; export class Display { private impl: DisplayImpl; constructor(impl: DisplayImpl) { this.impl = impl; } open() { this.impl.rawOpen(); } print() { this.impl.rawPrint(); } close() { this.impl.rawClose(); } display() { this.open(); this.print(); this.close(); } } \"]},\"162\":{\"h\":\"displayImpl.ts\",\"t\":[\"export abstract class DisplayImpl { abstract rawOpen(): void; abstract rawPrint(): void; abstract rawClose(): void; } \"]},\"163\":{\"h\":\"main.ts\",\"t\":[\"import { Display } from './display'; import { CountDisplay } from './countDisplay'; import { StringDisplayImpl } from './stringDisplayImpl'; const d1 = new Display(new StringDisplayImpl('Hello, China.')); const d2 = new CountDisplay(new StringDisplayImpl('Hello, World.')); const d3 = new CountDisplay(new StringDisplayImpl('Hello, Universe.')); d1.display(); d2.display(); d3.multiDisplay(5); \"]},\"164\":{\"h\":\"stringDisplayImpl.ts\",\"t\":[\"import { DisplayImpl } from './displayImpl'; export class StringDisplayImpl extends DisplayImpl { private str: string; private width: number; constructor(str: string) { super(); this.str = str; this.width = str.length; } rawOpen() { this.printLine(); } rawPrint() { console.log(`|${this.str}|`); } rawClose() { this.printLine(); } private printLine() { let buffer = '+'; for (let i = 0; i < this.width; i++) { buffer += '-'; } buffer += '+'; console.log(buffer); } } \"]},\"165\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\bridge\\\\main.ts\\\" +-------------+ |Hello, China.| +-------------+ +-------------+ |Hello, World.| +-------------+ +----------------+ |Hello, Universe.| |Hello, Universe.| |Hello, Universe.| |Hello, Universe.| |Hello, Universe.| +----------------+ \"]},\"166\":{\"h\":\"拓展思路的要点\"},\"167\":{\"h\":\"分开后更容易扩展\",\"t\":[\"Bridge 模式的特征是将“类的功能层次结构\\\"与“类的实现层次结构\\\"分离开了。将类的这两个层次结构分离开有利于独立地对它们进行扩展。当想要增加功能时，只需要在“类的功能层次结构\\\"一侧增加类即可，不必对“类的实现层次结构\\\"做任何修改。而且，增加后的功能可以被“所有的实现”使用。\",\"例如，我们可以将“类的功能层次结构\\\"应用于软件所运行的操作系统上。如果我们将某个程序中依赖于操作系统的部分划分为 Windows 版、Macintosh 版、Unix 版，那么我们就可以用 Bridge 模式中的“类的实现层次结构\\\"来表现这些依赖于操作系统的部分。也就是说，我们需要编写一个定义这些操作系统的共同接口（API）的 Implementor 角色，然后编写 Windows 版、Macintosh 版、Unix 版的 3 个 ConcreteImplementor 角色。这样一来，无论在“类的功能层次结构\\\"中增加多少个功能，它们都可以工作于这 3 个操作系统上。\"]},\"168\":{\"h\":\"继承是强关联，委托是弱关联\",\"t\":[\"继承是强关联关系，但委托是弱关联关系。这是因为只有 Display 类的实例生成时，才与作为参数被传入的类构成关联。例如，在示例程序中，当 Main 类生成 Display 类和 CountDisplay 类的实例时，才将 StringDisplayImpl 的实例作为参数传递给 Display 类和 CountDisplay 类。如果我们不传递 StringDisplayImpl 类的实例，而是将其他 ConcreteImplementor 角色的实例传递给 Display 类和 CountDisplay 类，就能很容易地改变实现。这时，发生变化的代码只有 Main 类，Display 类和 DisplayImpl 类则不需要做任何修改。\"]},\"169\":{\"h\":\"相关的设计模式\",\"t\":[\"Template Method 模式\",\"Abstract Factory 模式\",\"Adapter 模式\"]},\"170\":{\"c\":[\"设计模式\"]},\"171\":{\"c\":[\"设计模式\",\"TypeScript\",\"分开考虑\"]},\"172\":{\"h\":\"builder 模式\"},\"173\":{\"h\":\"为什么要使用 Builder 模式\",\"t\":[\"Builder 模式通过将对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。它主要用于以下情况：\",\"复杂对象的创建：当一个对象的构建过程非常复杂时，Builder 模式可以将构建过程分解为多个步骤，使代码更易于维护和理解。\",\"不同的表示：当需要创建不同表示的对象时，Builder 模式允许使用相同的构建过程来生成不同的对象表示。\",\"代码复用：通过将构建过程封装在 Director 类中，可以在不同的上下文中重用相同的构建逻辑。\"]},\"174\":{\"h\":\"代码示例\",\"t\":[\"// builder.ts export abstract class Builder { public abstract makeTitle(title: string): void; public abstract makeString(str: string): void; public abstract makeItems(items: string[]): void; public abstract close(): void; } // director.ts import { Builder } from './builder'; export class Director { private builder: Builder; constructor(builder: Builder) { this.builder = builder; } public construct(): void { this.builder.makeTitle('问候'); this.builder.makeString('从早上到下午'); this.builder.makeItems(['早上好。', '下午好。']); this.builder.makeString('晚上'); this.builder.makeItems(['晚上好。', '晚安。', '再见。']); this.builder.close(); } } // htmlBuilder.ts import { Builder } from './builder'; export class HTMLBuilder extends Builder { private filename: string = ''; private buffer: string = ''; public makeTitle(title: string): void { this.filename = `${title}.html`; this.buffer += `<html><head><title>${title}</title></head><body>`; this.buffer += `<h1>${title}</h1>`; } public makeString(str: string): void { this.buffer += `<p>${str}</p>`; } public makeItems(items: string[]): void { this.buffer += '<ul>'; items.forEach((item) => { this.buffer += `<li>${item}</li>`; }); this.buffer += '</ul>'; } public close(): void { this.buffer += '</body></html>'; } public getResult(): string { return this.buffer; } } // textBuilder.ts import { Builder } from './builder'; export class TextBuilder extends Builder { private buffer: string = ''; public makeTitle(title: string): void { this.buffer += '==============================\\\\n'; this.buffer += `『${title}』\\\\n`; this.buffer += '\\\\n'; } public makeString(str: string): void { this.buffer += `■${str}\\\\n`; this.buffer += '\\\\n'; } public makeItems(items: string[]): void { items.forEach((item) => { this.buffer += ` ・${item}\\\\n`; }); this.buffer += '\\\\n'; } public close(): void { this.buffer += '==============================\\\\n'; } public getResult(): string { return this.buffer; } } // main.ts import { Builder } from './builder'; import { Director } from './director'; import { HTMLBuilder } from './htmlBuilder'; import { TextBuilder } from './textBuilder'; // TextBuilder console.log(\\\"Creating a text file...\\\"); const textBuilder = new TextBuilder(); const director = new Director(textBuilder); director.construct(); const result = textBuilder.getResult(); console.log(result); // HTMLBuilder console.log(\\\"Creating an HTML file...\\\"); const htmlBuilder = new HTMLBuilder(); const director2 = new Director(htmlBuilder); director2.construct(); const filename = htmlBuilder.getResult(); console.log(`${filename}が作成されました。`); \"]},\"175\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\builder\\\\main.ts\\\" Creating a text file... ============================== 『问候』 ■从早上到下午 ・早上好。 ・下午好。 ■晚上 ・晚上好。 ・晚安。 ・再见。 ============================== Creating an HTML file... <html><head><title>问候</title></head><body><h1>问候</h1><p>从早上到下午</p><ul><li>早上好。</li><li>下午好。</li></ul><p>晚上</p><ul><li>晚上好。</li><li>晚安。</li><li>再见。</li></ul></body></html>が作成されました。 \"]},\"176\":{\"h\":\"相关设计模式\",\"t\":[\"Template Method 模式\",\"Composite 模式\",\"Abstract Factory 模式\",\"Facade 模式\"]},\"177\":{\"h\":\"拓展思路的要点\"},\"178\":{\"h\":\"谁知道什么\",\"t\":[\"在面向对象编程中，“谁知道什么”是非常重要的。Builder 模式通过将对象的构建过程与其表示分离，明确了各个类的职责分工。Director 类知道如何构建复杂对象，但不知道对象的具体表示；Builder 类知道如何生成对象的具体表示，但不知道构建的具体步骤。这种职责分离使得代码更加清晰、易于维护和扩展。\",\"正是因为不知道才能够替换，正是因为可以替换，组件才具有高价。作为设计人员，我们必须时刻关汴这种“可替換性”\"]},\"179\":{\"h\":\"设计时能够决定的事情和不能决定的事情\",\"t\":[\"在设计软件时，有些事情是可以在设计阶段决定的，而有些事情则需要在运行时决定。Builder 模式通过将构建过程与表示分离，使得在设计时可以决定构建的步骤和逻辑，而具体的表示则可以在运行时灵活选择。这种设计方式提高了系统的灵活性和可扩展性。\"]},\"180\":{\"h\":\"代码的阅读方法和修改方法\",\"t\":[\"在编程时，虽然有时需要从零开始编写代码，但更多时候我们都是在现有代码的基础上进行增加和修改。\",\"这时，我们需要先阅读现有代码。不过，只是阅读抽象类的代码是无法获取很多信息的（虽然可以从方法名中获得线索）。\",\"让我们再回顾一下示例程序。即使理解了 Builder 抽象类，也无法理解程序整体。至少必须在阅读了 Director 的代码后才能理解 Builder 类的使用方法（Builder 类的方法的调用方法）。然后再去看看 TextBuilder 类和 HTMLBuilder 类的代码，就可以明白调用 Builder 类的方法后具体会进行什么样的处理。\",\"如果没有理解各个类的角色就动手增加和修改代码，在判断到底应该修改哪个类时，就会很容易出错。例如，如果修改 Builder 类，那么就会对类中调用 Builder 类方法的地方和 Builder 类的子类产生影响。或是如果不小心修改了 Director 类，在其内部调用了类的特有的方法，则会导致其失去作为可复用组件的独立性，而且当将子类替换为 HTMLBuilder 时，程序可能会无法正常工作。\"]},\"181\":{\"c\":[\"设计模式\"]},\"182\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"183\":{\"h\":\"chainOfResponsibility 模式\",\"t\":[\"“推卸责任\\\"听起来有些贬义的意思，但是有时候也确实存在需要“推卸责任\\\"的情况。例如，当外部请求程序进行某个处理，但程序暂时无法直接决定由哪个对象负责处理时，就需要推卸责任。这种情况下，我们可以考虑将多个对象组成一条职责链，然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理。\",\"当一个人被要求做什么事情时，如果他可以做就自己做，如果不能做就将“要求\\\"转给另外一个人。下一个人如果可以自己处理，就自己做；如果也不能自己处理，就再转给另外一个人““这就是 Chain Of Responsibility 模式。\"]},\"184\":{\"h\":\"为什么使用此类\",\"t\":[\"使用 Chain of Responsibility 模式有以下几个优点：\",\"解耦请求发送者和接收者：发送者无需知道哪个对象会处理请求。\",\"动态组合职责链：可以在运行时动态地改变职责链的结构。\",\"增加灵活性：可以很容易地添加新的处理者而不影响现有代码。\"]},\"185\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们使用了 Chain of Responsibility 模式来处理一系列的请求。每个请求都会沿着职责链传递，直到有一个对象能够处理它。这样做的好处是请求的发送者和接收者解耦，发送者无需知道哪个对象会处理请求。\",\"// limitSupport.ts import { Support } from './support'; import { Trouble } from './trouble'; export class LimitSupport extends Support { private limit: number; constructor(name: string, limit: number) { super(name); this.limit = limit; } protected resolve(trouble: Trouble): boolean { if (trouble.getNumber() < this.limit) { return true; } return false; } } // main.ts import { NoSupport } from \\\"./NoSupport\\\"; import { LimitSupport } from \\\"./LimitSupport\\\"; import { OddSupport } from \\\"./OddSupport\\\"; import { SpecialSupport } from \\\"./specialSupport\\\"; import { Support } from \\\"./support\\\"; import { Trouble } from \\\"./trouble\\\"; let alice: Support = new NoSupport(\\\"Alice\\\"); let bob: Support = new LimitSupport(\\\"Bob\\\", 100); let charlie: Support = new SpecialSupport(\\\"Charlie\\\", 429); let diana: Support = new LimitSupport(\\\"Diana\\\", 200); let elmo: Support = new OddSupport(\\\"Elmo\\\"); let fred: Support = new LimitSupport(\\\"Fred\\\", 300); alice.setNext(bob).setNext(charlie).setNext(diana).setNext(elmo).setNext(fred); for (let i = 0; i < 500; i += 33) { alice.support(new Trouble(i)); } // NoSupport.ts import { Support } from './support'; import { Trouble } from './trouble'; export class NoSupport extends Support { constructor(name: string) { super(name); } resolve(trouble: Trouble): boolean { return false; } } // OddSupport.ts import { Support } from './support'; export class OddSupport extends Support { resolve(trouble) { if (trouble.getNumber() % 2 === 1) { return true; } else { return false; } } } // specialSupport.ts import { Support } from './support'; import { Trouble } from './trouble'; export class SpecialSupport extends Support { private number: number; constructor(name: string, number: number) { super(name); this.number = number; } protected resolve(trouble: Trouble): boolean { if (trouble.getNumber() === this.number) { return true; } return false; } } // support.ts import { Trouble } from './trouble'; export abstract class Support { private next: Support; constructor(private name: string) { this.name = name; } setNext(next: Support): Support { this.next = next; return next; } support(trouble: Trouble): void { if (this.resolve(trouble)) { this.done(trouble); } else if (this.next != undefined && this.next !== null) { this.next.support(trouble); } else { this.fail(trouble); } } toString(): string { return `[${this.name}]`; } protected abstract resolve(trouble: Trouble): boolean; protected done(trouble: Trouble): void { console.log(`${trouble} is resolved by ${this}.`); } protected fail(trouble: Trouble): void { console.log(`${trouble} cannot be resolved.`); } } // trouble.ts export class Trouble { private number: number; constructor(number: number) { this.number = number; } getNumber(): number { return this.number; } toString(): string { return `[Trouble ${this.number}]`; } } \"]},\"186\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\chainOfResponsibility\\\\main.ts\\\" [Trouble 0] is resolved by [Bob]. [Trouble 33] is resolved by [Bob]. [Trouble 66] is resolved by [Bob]. [Trouble 99] is resolved by [Bob]. [Trouble 132] is resolved by [Diana]. [Trouble 165] is resolved by [Diana]. [Trouble 198] is resolved by [Diana]. [Trouble 231] is resolved by [Elmo]. [Trouble 264] is resolved by [Fred]. [Trouble 297] is resolved by [Elmo]. [Trouble 330] cannot be resolved. [Trouble 363] is resolved by [Elmo]. [Trouble 396] cannot be resolved. [Trouble 429] is resolved by [Charlie]. [Trouble 462] cannot be resolved. [Trouble 495] is resolved by [Elmo]. \"]},\"187\":{\"h\":\"相关的设计模式\",\"t\":[\"Composite 模式\",\"Command 模式\"]},\"188\":{\"c\":[\"设计模式\"]},\"189\":{\"c\":[\"设计模式\",\"TypeScript\",\"推卸责任\"]},\"190\":{\"h\":\"Command 模式\"},\"191\":{\"h\":\"为什么使用此模式\",\"t\":[\"Command 模式将请求封装成对象，使得可以用不同的请求、队列或者日志来参数化其他对象。Command 模式也支持可撤销的操作。\"]},\"192\":{\"h\":\"示例代码\",\"t\":[\"// command.ts export interface Command { execute(): void; } // drawable.ts export interface Drawable { draw(x:number,y:number): void; } // drawCanvas.ts import { Drawable } from './drawable'; import { MacroCommand } from './macroCommand'; export class DrawCanvas implements Drawable { private history: MacroCommand; constructor(history: MacroCommand) { this.history = history; } paint(): void { this.history.execute(); } draw(x: number, y: number): void { console.log(`Drawing at (${x}, ${y})`); } } // drawCommand.ts import { Command } from './command'; import { DrawCanvas } from './drawCanvas'; export class DrawCommand implements Command { private x: number; private y: number; constructor(private canv: DrawCanvas,x: number, y: number) { this.x = x; this.y = y; } execute(): void { this.canv.draw(this.x, this.y) } } // macroCommand.ts import { Command } from './command'; export class MacroCommand implements Command { private commands: Command[] = []; push(command: Command): void { this.commands.push(command); } undo(): void { this.commands.pop(); } clear(): void { this.commands = []; } execute(): void { this.commands.forEach((command) => { command.execute(); }); } } // main.ts import { DrawCanvas } from './drawCanvas'; import { MacroCommand } from './macroCommand'; import { DrawCommand } from './drawCommand'; const history = new MacroCommand(); const canvas = new DrawCanvas(history); for (let i = 0; i < 10; i++) { const cmd = new DrawCommand(canvas, i, i); history.push(cmd); } canvas.paint(); \"]},\"193\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\command\\\\main.ts\\\" Drawing at (0, 0) Drawing at (1, 1) Drawing at (2, 2) Drawing at (3, 3) Drawing at (4, 4) Drawing at (5, 5) Drawing at (6, 6) Drawing at (7, 7) Drawing at (8, 8) Drawing at (9, 9) \"]},\"194\":{\"h\":\"拓展思路的要点\"},\"195\":{\"h\":\"命令中应该包含哪些信息\",\"t\":[\"在命令模式中，命令对象通常包含以下信息：\",\"接收者（Receiver）：执行命令的对象。接收者包含了执行具体操作的逻辑。\",\"动作（Action）：要执行的具体操作。命令对象将动作封装为一个方法调用。\",\"参数（Parameters）：执行操作所需的参数。命令对象可以包含执行操作所需的所有参数。\",\"状态（State）：命令执行前后的状态信息。命令对象可以保存执行前的状态，以便在需要时进行撤销操作。\",\"通过将这些信息封装在命令对象中，可以实现命令的参数化和可撤销性，从而提高系统的灵活性和可维护性。\"]},\"196\":{\"h\":\"保存历史记录\",\"t\":[\"命令模式的一个重要应用是保存历史记录，以支持撤销和重做操作。通过将每个执行的命令对象保存到一个历史记录列表中，可以在需要时回滚到之前的状态。以下是实现保存历史记录的一些常见方法：\",\"命令栈（Command Stack）：使用栈数据结构保存执行的命令对象。每次执行命令时，将命令对象压入栈中；每次撤销操作时，从栈中弹出命令对象并执行撤销操作。\",\"命令队列（Command Queue）：使用队列数据结构保存执行的命令对象。适用于需要按顺序执行和撤销命令的场景。\",\"快照（Snapshot）：在执行命令前保存对象的快照，以便在需要时恢复到之前的状态。适用于需要保存复杂对象状态的场景。\"]},\"197\":{\"h\":\"相关的设计模式\",\"t\":[\"Composite 模式\",\"Memento 模式\",\"Prototype 模式\"]},\"198\":{\"c\":[\"设计模式\"]},\"199\":{\"c\":[\"设计模式\",\"TypeScript\",\"用类实现\"]},\"200\":{\"h\":\"Composite 模式\"},\"201\":{\"h\":\"使用此设计模式的理由\",\"t\":[\"Composite 模式允许你将对象组合成递归结构来表示“部分-整体”的层次结构。使用 Composite 模式，用户可以统一地对待单个对象和组合对象。例如，在文件系统中，目录和文件都可以被视为条目（Entry），目录可以包含其他目录和文件，而文件则是叶子节点。\"]},\"202\":{\"h\":\"示例代码\"},\"203\":{\"h\":\"目录类 (directory.ts)\",\"t\":[\"import { Entry } from './entry'; export class Directory extends Entry { private directory: Entry[] = []; constructor(private name: string) { super(); } getName(): string { return this.name; } getSize(): number { return this.directory.reduce((acc, entry) => acc + entry.getSize(), 0); } add(entry: Entry): Entry { this.directory.push(entry); return this; } protected printListWithPrefix(prefix: string): void { console.log(`${prefix}/${this}`); this.directory.forEach(entry => (entry as Directory).printListWithPrefix(`${prefix}/${this.name}`)); } } \"]},\"204\":{\"h\":\"抽象条目类 (entry.ts)\",\"t\":[\"export abstract class Entry { abstract getName(): string; abstract getSize(): number; add(entry: Entry): Entry { throw new Error(\\\"FileTreatmentException\\\"); } printList(): void { this.printListWithPrefix(\\\"\\\"); } protected abstract printListWithPrefix(prefix: string): void; toString(): string { return `${this.getName()} (${this.getSize()})`; } } \"]},\"205\":{\"h\":\"文件类 (file.ts)\",\"t\":[\"import { Entry } from './entry'; export class File extends Entry { constructor(private name: string, private size: number) { super(); } getName(): string { return this.name; } getSize(): number { return this.size; } protected printListWithPrefix(prefix: string): void { console.log(`${prefix}/${this}`); } } \"]},\"206\":{\"h\":\"主程序 (main.ts)\",\"t\":[\"import { Entry } from './entry'; import { Directory } from './directory'; import { File } from './file'; console.log('Making root entries...'); let rootdir: Directory = new Directory('root'); let bindir: Directory = new Directory('bin'); let tmpdir: Directory = new Directory('tmp'); let usrdir: Directory = new Directory('usr'); rootdir.add(bindir); rootdir.add(tmpdir); rootdir.add(usrdir); bindir.add(new File('vi', 10000)); bindir.add(new File('latex', 20000)); rootdir.printList(); console.log(\\\"Making user entries...\\\"); let yuki: Directory = new Directory('yuki'); let hanako: Directory = new Directory('hanako'); let tomura: Directory = new Directory('tomura'); usrdir.add(yuki); usrdir.add(hanako); usrdir.add(tomura); yuki.add(new File('diary.html', 100)); yuki.add(new File('Composite.java', 200)); hanako.add(new File('memo.tex', 300)); tomura.add(new File('game.doc', 400)); tomura.add(new File('junk.mail', 500)); rootdir.printList(); \"]},\"207\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\composite\\\\main.ts\\\" Making root entries... /root (30000) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (0) Making user entries... /root (31500) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (1500) /root/usr/yuki (300) /root/usr/yuki/diary.html (100) /root/usr/yuki/Composite.java (200) /root/usr/hanako (300) /root/usr/hanako/memo.tex (300) /root/usr/tomura (900) /root/usr/tomura/game.doc (400) /root/usr/tomura/junk.mail (500) \"]},\"208\":{\"h\":\"相关的设计模式\",\"t\":[\"Command 模式\",\"Visitor 模式\",\"Decorator 模式\"]},\"209\":{\"c\":[\"设计模式\"]},\"210\":{\"c\":[\"设计模式\",\"TypeScript\",\"容器与内容的一致性\"]},\"211\":{\"h\":\"Decorator 模式\",\"t\":[\"在这个示例中，我们使用装饰器模式来动态地给对象添加职责。装饰器模式允许我们通过将对象放入包含行为的特殊封装对象中来扩展对象的功能，而无需修改原始类的代码。\"]},\"212\":{\"h\":\"为什么使用装饰器模式？\",\"t\":[\"职责扩展：装饰器模式允许我们在不修改现有代码的情况下扩展对象的功能。\",\"灵活性：可以根据需要动态地添加或删除职责。\",\"遵循开闭原则：通过使用装饰器模式，我们可以在不修改现有类的情况下添加新功能，从而遵循开闭原则。\"]},\"213\":{\"h\":\"代码示例\",\"t\":[\"// border.ts import { Display } from \\\"./display\\\"; export abstract class Border extends Display { protected display: Display; constructor(display: Display) { super(); this.display = display; } } // display.ts export abstract class Display { abstract getColumns(): number; abstract getRows(): number; abstract getRowText(row: number): string; show(): void { for (let i = 0; i < this.getRows(); i++) { console.log(this.getRowText(i)); } } } // fullBorder.ts import { Border } from \\\"./border\\\"; export class FullBorder extends Border { constructor(display) { super(display); } getColumns() { return 1 + this.display.getColumns() + 1; } getRows() { return 1 + this.display.getRows() + 1; } getRowText(row) { if (row === 0) { return \\\"+\\\" + this.makeLine(\\\"-\\\", this.display.getColumns()) + \\\"+\\\"; } else if (row === this.display.getRows() + 1) { return \\\"+\\\" + this.makeLine(\\\"-\\\", this.display.getColumns()) + \\\"+\\\"; } else { return \\\"|\\\" + this.display.getRowText(row - 1) + \\\"|\\\"; } } private makeLine(ch, count) { let buf = \\\"\\\"; for (let i = 0; i < count; i++) { buf += ch; } return buf; } } // main.ts import { Display } from \\\"./display\\\"; import { StringDisplay } from \\\"./stringDisplay\\\"; import { SideBorder } from \\\"./sideBorder\\\"; import { FullBorder } from \\\"./fullBorder\\\"; let b1: Display = new StringDisplay(\\\"Hello, world.\\\"); let b2: Display = new SideBorder(b1, \\\"#\\\"); let b3: Display = new FullBorder(b2); b1.show(); b2.show(); b3.show(); let b4: Display = new SideBorder( new FullBorder( new FullBorder( new SideBorder( new FullBorder( new StringDisplay(\\\"Hello\\\") ), \\\"*\\\" ) ) ), \\\"/\\\" ); b4.show(); // sideBorder.ts import { Border } from \\\"./border\\\"; import { Display } from \\\"./display\\\"; export class SideBorder extends Border { private borderChar: string; constructor(display: Display, ch: string) { super(display); this.borderChar = ch; } getColumns(): number { return 1 + this.display.getColumns() + 1; } getRows(): number { return this.display.getRows(); } getRowText(row: number): string { return this.borderChar + this.display.getRowText(row) + this.borderChar; } } // stringDisplay.ts import { Display } from './display'; export class StringDisplay extends Display { private string: string; constructor(string: string) { super(); this.string = string; } getColumns(): number { return this.string.length; } getRows(): number { return 1; } getRowText(row: number): string { if (row === 0) { return this.string; } else { return ''; } } } \"]},\"214\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\decorator\\\\main.ts\\\" Hello, world. #Hello, world.# +---------------+ |#Hello, world.#| +---------------+ /+-----------+/ /|+---------+|/ /||*+-----+*||/ /||*|Hello|*||/ /||*+-----+*||/ /|+---------+|/ /+-----------+/ \"]},\"215\":{\"h\":\"拓展思路的要点\"},\"216\":{\"h\":\"API 的透明性\",\"t\":[\"在 Decorator 模式中，装饰边框与被装饰物具有一致性。具体而言，在示例程序中，表示装饰边框的 Border 类是表示被装饰物的 Display 类的子类，这就体现了它们之间的一致性。也就是说， Border 类（以及它的子类）与表示被装饰物的 Display 类具有相同的接口（API）。这样，即使被装饰物被边框装饰起来了，接口（API）也不会被隐藏起来。其他类依然可以调用 getColumns、getRows、getRowText 以及 show 方法。这就是接口（API）的“透明性”。在示例程序中，实例 b4 被装饰了多次，但是接口（API）却没有发生任何变化。得益于接口（API）的透明性，模式中也形成了类似于 Composite 模式中的递归结构。也就是说，装饰边框里面的“被装饰物”实际上又是别的物体的“装饰边框”。就像是剥洋葱时以为洋葱心要出来了，结果却发现还是皮。不过， Decorator 模式虽然与 Composite 模式一样，都具有递归结构，但是它们的使用目的不同。Decorator 模式的主要目的是通过添加装饰物来增加对象的功能。\"]},\"217\":{\"h\":\"在不改变被装饰物的前提下增加功能\",\"t\":[\"在 Decorator 模式中，装饰边框与被装饰物具有相同的接口（API）。虽然接口是相同的，但是越装饰，功能则越多。例如，用 SideBorder 装饰 Display 后，就可以在字符串的左右两侧加上装饰字符。如果再用 FullBorder 装饰，那么就可以在字符串的四周加上边框。此时，我们完全不需要对被装饰的类做任何修改。这样，我们就实现了不修改被装饰的类即可增加功能。Decorator 模式使用了委托。对“装饰边框”提出的要求（调用装饰边框的方法）会被转交（委托）给“被装饰物”去处理。以示例程序来说，就是 SideBorder 类的 getColumns 方法调用了 display.getColumns。此外，getRows 方法也调用了 display.getRows。\"]},\"218\":{\"h\":\"可以动态地增加功能\",\"t\":[\"Decorator 模式中用到了委托，它使类之间形成了弱关联关系。因此，不用改变框架代码，就可以生成一个与其他对象具有不同关系的新对象。\"]},\"219\":{\"h\":\"只需要一些装饰物即可添加许多功能\",\"t\":[\"使用 Decorator 模式可以为程序添加许多功能。只要准备一些装饰边框（ConcreteDecorator 角色），即使这些装饰边框都只具有非常简单的功能，也可以将它们自由组合成为新的对象。这就像我们可以自由选择香草味冰激凌、巧克力冰激凌、草莓冰激凌、猕猴桃冰激凌等各种口味的冰激凌一样。如果冰激凌店要为顾客准备所有的冰激凌成品那真是太麻烦了。因此，冰激凌店只会准备各种香料，当顾客下单后只需要在冰激凌上加上各种香料就可以了。不管是香草味，还是咖啡朗姆和开心果的混合口味，亦或是香草味、草莓味和猕猴桃三重口味，顾客想吃什么口味都可以。Decorator 模式就是可以应对这种多功能对象的需求的一种模式。\"]},\"220\":{\"h\":\"导致增加许多很小的类\",\"t\":[\"Decorator 模式的一个缺点是会导致程序中增加许多功能类似的很小的类。\"]},\"221\":{\"h\":\"相关的设计模式\",\"t\":[\"Adapter 模式\",\"Strategy 模式\"]},\"222\":{\"h\":\"继承和委托中的一致性\"},\"223\":{\"h\":\"父类和子类的一致性\",\"t\":[\"在面向对象编程中，父类和子类之间的一致性是指子类应当继承父类的行为和属性，并且可以扩展或重写这些行为和属性。子类应当能够替代父类的实例而不影响程序的正确性，这就是所谓的里氏替换原则（Liskov Substitution Principle）。\"]},\"224\":{\"h\":\"自己和被委托对象的一致性\",\"t\":[\"在委托模式中，一致性是指委托对象应当具有与委托者相同的接口或行为。委托者将某些任务委托给委托对象来执行，而委托对象应当能够无缝地完成这些任务，就像委托者自己完成一样。这种一致性确保了委托模式的灵活性和可维护性。\"]},\"225\":{\"c\":[\"设计模式\"]},\"226\":{\"c\":[\"设计模式\",\"TypeScript\",\"容器与内容的一致性\"]},\"227\":{\"h\":\"结语\",\"t\":[\"教程源码示例\",\"使用设计模式的目的是重用代码，并在增加需求时尽量不修改已有的类。我们不应死记硬背这些设计模式，而应理解其背后的核心思想。设计模式的使用不是最终目的，而是为了更好地解决问题和优化代码结构。同时，我们也要避免过早地进行“工程化”，应根据实际需求灵活应用设计模式。\",\"设计模式提供了一种通用的解决方案，可以帮助我们应对软件开发中的常见问题。通过学习和应用设计模式，我们可以提高代码的可读性、可维护性和可扩展性。然而，设计模式并不是万能的，它们也有其局限性和适用范围。在实际开发中，我们需要根据具体情况选择合适的设计模式，而不是盲目地套用。\",\"此外，设计模式的学习和应用需要不断的实践和积累。只有在实际项目中多次使用，才能真正理解和掌握这些模式。我们还应关注设计模式的演变和新模式的出现，以保持我们的知识体系与时俱进。\",\"总之，设计模式是软件开发中的一把利器，但它需要我们在理解其核心思想的基础上，灵活应用于实际项目中。希望通过本章的学习，您能够掌握这些设计模式，并在实际项目中灵活运用它们，编写出更加健壮和优雅的代码。\"]},\"228\":{\"c\":[\"设计模式\"]},\"229\":{\"c\":[\"设计模式\",\"TypeScript\"]},\"230\":{\"h\":\"facade 模式\",\"t\":[\"当某个程序员得意地说出\\\"啊，在调用那个类之前需要先调用这个类。在调用那个方法之前需要先在这个类中注册一下\\\"的时候，就意味着我们需要引人Facade了。\",\"对于那些能够明确地用语言描述出来的知识，我们不应该将它们隐藏在自己脑袋中，而是应该用代码将它们表现出来。\",\"—————《图解设计模式》 ## 为什么使用外观模式？ \",\"简化接口：外观模式为复杂的子系统提供了一个简单的接口，使得客户端代码不需要了解子系统的内部细节。\",\"松散耦合：通过引入外观类，客户端代码与子系统之间的耦合度降低，增强了代码的可维护性和可扩展性。\",\"更好的分层：外观模式有助于分层设计，使得每一层只关注自己的职责，层与层之间通过外观类进行交互。\"]},\"231\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们使用了外观模式（Facade Pattern）来简化与复杂子系统的交互。外观模式通过提供一个统一的接口来隐藏子系统的复杂性，使得客户端代码可以更容易地使用子系统的功能。\"]},\"232\":{\"h\":\"代码实现\",\"t\":[\"// dataBase.ts export class DataBase { static mailData: { [key: string]: string } = { 'hyuki@hyuki.com': 'Hiroshi Yuki', 'hanako@hyuki.com': 'Hanako Sato', 'tomura@hyuki.com': 'Tomura', 'mamoru@hyuki.com': 'Mamoru Takahashi', }; private constructor() {} static getProperties(databaseName: string) { return DataBase.mailData; } } // htmlWriter.ts export class HtmlWriter { constructor(private writer: string = '') { } title(title: string): void { this.writer += `<html><head><title>${title}</title></head><body>\\\\n<h1>${title}</h1>\\\\n`; } paragraph(message: string): void { this.writer += `<p>${message}</p>\\\\n`; } link(href: string, caption: string): void { this.writer += `<a href=\\\"${href}\\\">${caption}</a>\\\\n`; } mailto(mailaddr: string, username: string): void { this.link(`mailto:${mailaddr}`, username); } close(): void { this.writer += '</body></html>\\\\n'; } getHtml(): string { return this.writer; } } // main.ts import { PageMaker } from \\\"./pageMaker\\\"; PageMaker.makeWelcomePage('hyuki@hyuki.com', \\\"welcome.html\\\"); // pageMaker.ts import { DataBase } from './dataBase'; import { HtmlWriter } from './htmlWriter'; export class PageMaker { private constructor() {} static makeWelcomePage(mailAddress: string, fileName: string): void { console.log(`Making ${fileName} for ${mailAddress}`); let mailprop = DataBase.getProperties('maildata'); let username = mailprop[mailAddress]; let writer = new HtmlWriter(fileName); writer.title('Welcome to ' + username + \\\"'s page!\\\"); writer.paragraph(username + 'のページへようこそ。'); writer.paragraph('メール待っていますね。'); writer.mailto(mailAddress, username); writer.close(); console.log(writer.getHtml()); } } \"]},\"233\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\facade\\\\main.ts\\\" Making welcome.html for hyuki@hyuki.com welcome.html<html><head><title>Welcome to Hiroshi Yuki's page!</title></head><body> <h1>Welcome to Hiroshi Yuki's page!</h1> <p>Hiroshi Yukiのページへようこそ。</p> <p>メール待っていますね。</p> <a href=\\\"mailto:hyuki@hyuki.com\\\">Hiroshi Yuki</a> </body></html> \"]},\"234\":{\"h\":\"相关设计模式\",\"t\":[\"Abstract Factory 模式\",\"Singleton 模式\",\"Mediator 模式\"]},\"235\":{\"c\":[\"设计模式\"]},\"236\":{\"c\":[\"设计模式\",\"TypeScript\",\"简单化\"]},\"237\":{\"h\":\"Factory Method 模式\",\"t\":[\"在 Factory Method 模式中，我们定义一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。Factory Method 使一个类的实例化延迟到其子类。\"]},\"238\":{\"h\":\"为什么要使用 Factory Method\",\"t\":[\"使用 Factory Method 模式有以下几个好处：\",\"解耦创建和使用：客户端代码不需要知道具体的产品类，只需要依赖抽象产品接口，降低了耦合性。\",\"扩展性强：增加新的产品类时，只需添加新的子类工厂，不需要修改现有代码，符合开闭原则。\",\"灵活性高：可以通过子类来定制产品的创建过程，满足不同的需求。\",\"通过使用 Factory Method 模式，我们可以更灵活地管理对象的创建过程，提高代码的可维护性和可扩展性。\"]},\"239\":{\"h\":\"示例代码\",\"t\":[\"@enduml\",\"// product.ts export interface Product { use(): void; } // factory.ts import { Product } from './product'; export abstract class Factory { create(owner: string): Product { const p = this.createProduct(owner); this.registerProduct(p); return p; } protected abstract createProduct(owner: string): Product; protected abstract registerProduct(product: Product): void; } // idCard.ts import { Product } from './product'; export class IDCard implements Product { private owner: string; constructor(owner: string) { this.owner = owner; } use(): void { console.log(`${this.owner}使用了ID卡`); } getOwner(): string { return this.owner; } } // idCardFactory.ts import { IDCard } from \\\"./idCard\\\"; import { Factory } from \\\"./factory\\\"; export class IDCardFactory extends Factory { private owners: string[] = []; createProduct(owner: string): IDCard { return new IDCard(owner); } registerProduct(product: IDCard): void { this.owners.push(product.getOwner()); } getOwners(): string[] { return this.owners; } } // main.ts import { Factory } from \\\"./factory\\\"; import { IDCardFactory } from \\\"./idCardFactory\\\"; const factory: Factory = new IDCardFactory(); const card1 = factory.create(\\\"Alice\\\"); const card2 = factory.create(\\\"Bob\\\"); const card3 = factory.create(\\\"Charlie\\\"); card1.use(); card2.use(); card3.use(); \"]},\"240\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\factory_method\\\\main.ts\\\" Alice使用了ID卡 Bob使用了ID卡 Charlie使用了ID卡 \",\"Template Method\",\"Singleton\",\"Composite\",\"Iterator\"]},\"241\":{\"c\":[\"设计模式\"]},\"242\":{\"c\":[\"设计模式\",\"typescript\",\"工厂方法\",\"交给子类\"]},\"243\":{\"h\":\"Flyweight 模式\"},\"244\":{\"h\":\"为什么使用 Flyweight 模式\",\"t\":[\"Flyweight 模式是一种结构型设计模式，它通过共享尽可能多的相同对象来减少内存使用，从而提高性能。在需要生成大量细粒度对象的场景中，Flyweight 模式非常有用。通过共享对象，Flyweight 模式可以显著减少内存消耗，并提高应用程序的效率。\"]},\"245\":{\"h\":\"实例代码\",\"t\":[\"// bigChar.ts export class BigChar { charname: string; fontdata: string; static fontdatas: { [key: string]: string } = { \\\"0\\\": \\\".....######.....\\\\n\\\" + \\\"....##....##....\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"....##....##....\\\\n\\\" + \\\".....######.....\\\\n\\\", \\\"1\\\": \\\".......##.......\\\\n\\\" + \\\".....####.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\".....######.....\\\\n\\\" + \\\"................\\\\n\\\", \\\"2\\\": \\\".....######.....\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..........##....\\\\n\\\" + \\\".........##.....\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\"......##........\\\\n\\\" + \\\".....##.........\\\\n\\\" + \\\"...##...........\\\\n\\\" + \\\"....##########..\\\\n\\\" + \\\"................\\\\n\\\", \\\"3\\\": \\\".....######.....\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..........##....\\\\n\\\" + \\\".........##.....\\\\n\\\" + \\\"......####......\\\\n\\\" + \\\".........##.....\\\\n\\\" + \\\"..........##....\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\".....######.....\\\\n\\\", \\\"4\\\": \\\"........###.....\\\\n\\\" + \\\".......####.....\\\\n\\\" + \\\"......##.##.....\\\\n\\\" + \\\".....##..##.....\\\\n\\\" + \\\"....##...##.....\\\\n\\\" + \\\"...##....##.....\\\\n\\\" + \\\"..##########....\\\\n.\\\" + \\\"........##......\\\\n\\\" + \\\"........##......\\\\n\\\" + \\\".......######...\\\\n\\\", \\\"5\\\": \\\"....########....\\\\n\\\" + \\\"....########....\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....######......\\\\n\\\" + \\\"....######......\\\\n\\\" + \\\"..........##....\\\\n\\\" + \\\"..........##....\\\\n\\\" + \\\"...........##...\\\\n\\\" + \\\"...........##...\\\\n\\\" + \\\"...........##...\\\\n\\\" + \\\"...........##...\\\\n\\\" + \\\"..##.......##...\\\\n\\\" + \\\"..##.......##...\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\".....######.....\\\\n\\\", \\\"6\\\": \\\".......####.....\\\\n\\\" + \\\"......##........\\\\n\\\" + \\\".....##.........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"...##...........\\\\n\\\" + \\\"..######........\\\\n\\\" + \\\"..##...##.......\\\\n\\\" + \\\"..##....##......\\\\n\\\" + \\\"..##.....##.....\\\\n\\\" + \\\"...##....##.....\\\\n\\\" + \\\"....####........\\\\n\\\", \\\"7\\\": \\\"..##########....\\\\n\\\" + \\\"..##......##....\\\\n\\\" + \\\"........##......\\\\n\\\" + \\\".......##.......\\\\n\\\" + \\\"......##........\\\\n\\\" + \\\"......##........\\\\n\\\" + \\\".....##.........\\\\n\\\" + \\\".....##.........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\" + \\\"....##..........\\\\n\\\", \\\"8\\\": \\\".....######.....\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"....######......\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\".....######.....\\\\n\\\", \\\"9\\\": \\\".....######.....\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"..##........##..\\\\n\\\" + \\\"...##......##...\\\\n\\\" + \\\"....#######.....\\\\n\\\" + \\\"..........##....\\\\n\\\" + \\\".........##.....\\\\n\\\" + \\\"........##......\\\\n\\\" + \\\"......###.......\\\\n\\\" + \\\".....##.........\\\\n\\\", }; constructor(charname: string) { this.charname = charname; this.fontdata = BigChar.fontdatas[charname]; this.fontdata = this.fontdata.replace(/#/g, charname); } print(): void { console.log(this.fontdata); } } // bigCharFactory.ts import { BigChar } from './bigChar'; export class BigCharFactory { private pool: Map<string, BigChar> = new Map(); private static singleton: BigCharFactory = new BigCharFactory(); private constructor() { } public static getInstance(): BigCharFactory { return BigCharFactory.singleton; } public getBigChar(charname: string): BigChar { let bc: BigChar = this.pool.get(charname); // ts 是单线程的，所以不需要考虑多线程问题， 若为多线程则需要加锁 if (bc == null) { bc = new BigChar(charname); this.pool.set(charname, bc); } return bc; } } // bigString.ts import { Factory } from '../abstractFactory/factory'; import { BigChar } from './bigChar'; import { BigCharFactory } from './bigCharFactory'; export class BigString { bigchars: BigChar[] = []; constructor(public str: string) { let factory = BigCharFactory.getInstance(); str.split('').forEach((char) => { this.bigchars.push(factory.getBigChar(char)); }); } print() { this.bigchars.forEach((bigchar) => { bigchar.print(); }); } } // main.ts import { BigString } from './bigString'; let bs: BigString = new BigString('123'); bs.print(); \"]},\"246\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\flyweight\\\\main.ts\\\" .......11....... .....1111....... .......11....... .......11....... .......11....... .......11....... .......11....... .......11....... .......11....... .....111111..... ................ .....222222..... ...22......22... ..22........22.. ..........22.... .........22..... .......22....... ......22........ .....22......... ...22........... ....2222222222.. ................ .....333333..... ...33......33... ..33........33.. ..........33.... .........33..... ......3333...... .........33..... ..........33.... ..33........33.. ...33......33... .....333333..... \"]},\"247\":{\"h\":\"拓展思路的要点\"},\"248\":{\"h\":\"对多个地方产生影响\",\"t\":[\"Flyweight 模式的主题是“共享”。那么，在共享实例时应当注意什么呢？首先要想到的是“如果要改变被共享的对象，就会对多个地方产生影响”。也就是说，一个实例的改变会同时反映到所有使用该实例的地方。例如，假设我们改变了示例程序中 BigChar 类的 '3' 所对应的字体数据，那么 BigString 类中使用的所有 '3' 字符的字体（形状）都会发生改变。在编程时，像这样改一个地方会对多个地方产生影响并非总是不好。有些情况下这是好事，有些情况下这是坏事。不管怎样，“修改一个地方会对多个地方产生影响”，这就是共享的特点。\",\"因此，在决定 Flyweight 角色中的字段时，需要精挑细选。只将那些真正应该在多个地方共享的字段定义在 Flyweight 角色中即可。关于这一点，让我们简单地举个例子。假设我们要在示例程序中增加一个功能，实现显示“带颜色的大型文字”。那么此时，颜色信息应当放在哪个类中呢？首先，假设我们将颜色信息放在 BigChar 类中。由于 BigChar 类的实例是被共享的，因此颜色信息也被共享了。也就是说，BigString 类中用到的所有 BigChar 类的实例都带有相同的颜色。如果我们不把颜色信息放在 BigChar 类中，而是将它放在 BigString 类中。那么 BigString 类会负责管理“第三个字符的颜色是红色的”这样的颜色信息。这样一来，我们就可以实现以不同的颜色显示同一个 BigChar 类的实例。\",\"那么两种解决方案到底哪个是正确的呢？关于这个问题，其实并没有绝对的答案。哪些信息应当共享，哪些信息不应当共享，这取决于类的使用目的。设计者在使用 Flyweight 模式共享信息时必须仔细思考应当共享哪些信息。\"]},\"249\":{\"h\":\"Intrinsic 与 Extrinsic\",\"t\":[\"前面讲到的“应当共享的信息和不应当共享的信息”是有专有名词的。应当共享的信息被称作 Intrinsic 信息。Intrinsic 的意思是“本质的”“固有的”。换言之，它指的是不论实例在哪里、不论在什么情况下都不会改变的信息，或是不依赖于实例状态的信息。\",\"在示例程序中，BigChar 的字体数据不论在 BigString 中的哪个地方都不会改变。因此，BigChar 的字体数据属于 Intrinsic 信息。另一方面，不应当共享的信息被称作 Extrinsic 信息。Extrinsic 的意思是“外在的”“非本质的”。也就是说，它是当实例的位置、状况发生改变时会变化的信息，或是依赖于实例状态的信息。在示例程序中，BigChar 的实例在 BigString 中是第几个字符这种信息会根据 BigChar 在 BigString 中的位置变化而发生变化，因此，不应当在 BigChar 中保存这个信息，它属于 Extrinsic 信息。因此，前面提到的是否共享“颜色”信息这个问题，我们也可以换种说法，即应当将“颜色”看作是 Intrinsic 信息还是 Extrinsic 信息。\"]},\"250\":{\"h\":\"不要让被共享的实例被垃圾回收器回收了\",\"t\":[\"在有垃圾回收的语言中要注意共享内存未被使用时被 GC 的问题。在使用 Flyweight 模式时，我们通常会将共享对象存储在某种集合（如 HashMap 或 List）中，以便重复使用这些对象。然而，如果这些集合中的对象没有被其他任何地方引用，垃圾回收器可能会认为这些对象是垃圾，从而将其回收掉。这会导致共享对象在需要时无法被找到，从而引发程序错误。\",\"为了避免这种情况，我们需要确保共享对象在整个程序生命周期内都被引用。以下是一些常见的解决方案：\",\"强引用：将共享对象存储在一个全局的集合中，并确保这个集合在程序的整个生命周期内都存在。这种方法简单直接，但可能会导致内存泄漏，因为共享对象永远不会被回收。\",\"弱引用：使用弱引用（WeakReference）来存储共享对象。弱引用允许垃圾回收器在没有其他强引用时回收对象，从而避免内存泄漏。Java 提供了 WeakHashMap 类，可以用来存储弱引用的键值对。\",\"引用计数：通过引用计数来管理共享对象的生命周期。每当一个对象被引用时，增加计数；每当一个引用被释放时，减少计数。当计数为零时，表示该对象不再被使用，可以安全地回收。\",\"定期清理：定期检查集合中的对象，移除那些不再被使用的对象。这种方法需要额外的逻辑来判断对象是否仍然被使用，但可以有效地管理内存。\"]},\"251\":{\"h\":\"内存之外的其它资源\",\"t\":[\"在示例程序中，我们了解到共享实例可以减少内存使用量。一般来说，共享实例可以减少所需资源的使用量。这里的资源指的是计算机中的资源，而内存是资源中的一种。时间也是一种资源。使用 new 关键字生成实例会花费时间。通过 Flyweight 模式共享实例可以减少使用 new 关键字生成实例的次数。这样，就可以提高程序运行速度。文件句柄（文件描述符）和窗口句柄等也都是一种资源。在操作系统中，可以同时使用的文件句柄和窗口句柄是有限制的。因此，如果不共享实例，应用程序在运行时很容易就会达到资源极限而导致崩溃。\"]},\"252\":{\"h\":\"相关的设计模式\",\"t\":[\"Proxy 模式\",\"Composite 模式\",\"Singleton 模式\"]},\"253\":{\"c\":[\"设计模式\"]},\"254\":{\"c\":[\"设计模式\",\"TypeScript\",\"避免浪费\"]},\"255\":{\"h\":\"设计模式\",\"t\":[\"面向对象三大特性：封装、继承、多态。 设计模式需遵循面向对象的设计原则，由于笔者不太喜欢java, 并嫌弃cpp中没有interface, 遂使用ts作为实现语言(我才不用rust呢 😃 )\",\"本专栏源码大部分参考自参考资料[1]\",\"教程源码示例\",\"[1] 结城浩. 图解设计模式. 杨文轩译. 北京: 人民邮电出版社, 2017.\"]},\"256\":{\"c\":[\"设计模式\"]},\"257\":{\"c\":[\"设计模式\",\"typescript\"]},\"258\":{\"h\":\"Interpreter 模式\"},\"259\":{\"h\":\"为什么使用此模式\",\"t\":[\"解释器模式（Interpreter Pattern）是一种行为设计模式，它定义了一种语言的文法表示，并定义一个解释器来解释该语言中的句子。使用解释器模式的原因包括：\",\"简化语法解析：通过定义文法规则，可以轻松解析和执行特定的语言或指令集。\",\"可扩展性：可以轻松添加新的语法规则或指令，而无需修改现有代码。\",\"代码复用：通过将不同的语法规则封装在不同的类中，可以提高代码的复用性和可维护性。\"]},\"260\":{\"h\":\"示例代码\",\"t\":[\"本实例是一个控制小车的脚本语言解释器demo,文法如下， 分析方法为递归下降\",\"<program> ::= program <command list> <command list> ::= <command>* end <command> ::= <repeat command> | <primitive command> <repeat command> ::= repeat <number> <command list> <primitive command> ::= go | right | left \",\"// commandListNode.ts import { Node } from \\\"./node\\\"; import { Context } from \\\"./context\\\"; import { CommandNode } from \\\"./commandNode\\\"; // <command list> ::= <command>* end export class CommandListNode extends Node { list: Node[] = []; parse(context: Context): void { while (true) { if (context.getCurrentToken() === null) { throw new Error(\\\"Missing 'end'\\\"); } else if (context.getCurrentToken() === \\\"end\\\") { context.skipToken(\\\"end\\\"); break; } else { const commandNode = new CommandNode(); commandNode.parse(context); this.list.push(commandNode); } } } toString(): string { return this.list.join(\\\"\\\"); } } // commandNode.ts import { Context } from \\\"./context\\\"; import { Node } from \\\"./node\\\"; import { RepeatCommandNode } from \\\"./repeatCommandNode\\\"; import { PrimitiveCommandNode } from \\\"./primitiveCommandNode\\\"; // <command> ::= <repeat command> | <primitive command> export class CommandNode extends Node { node: Node; parse(context: Context): void { if (context.getCurrentToken() === \\\"repeat\\\") { this.node = new RepeatCommandNode(); this.node.parse(context); } else { this.node = new PrimitiveCommandNode(); this.node.parse(context); } } toString(): string { return this.node.toString(); } } // context.ts import { StringTokenizer } from './stringTokenizer'; export class Context { private stringTokenizer: StringTokenizer; private currentToken: string; constructor(text: string) { this.stringTokenizer = new StringTokenizer(text); this.nextToken(); } nextToken(): string { if (this.stringTokenizer.hasMoreTokens()) { this.currentToken = this.stringTokenizer.nextToken(); } else { this.currentToken = null; } return this.currentToken; } getCurrentToken(): string { return this.currentToken; } skipToken(token: string): void { if (token != this.currentToken) { throw new Error(`Warning: ${token} is expected, but ${this.currentToken} is found.`); } this.nextToken(); } getCurrentNumber(): number { let number: number; try { number = Number(this.currentToken); } catch (e) { throw new Error(`Warning: ${e}`); } return number; } } // main.ts import { Context } from \\\"./context\\\"; import { ProgramNode } from \\\"./programNode\\\"; // <program> ::= program <command list> // <command list> ::= <command>* end // <command> ::= <repeat command> | <primitive command> // <repeat command> ::= repeat <number> <command list> // <primitive command> ::= go | right | left let programs = \\\"program end\\\\n\\\"+ \\\"program go end\\\\n\\\"+ \\\"program go right go right go right end\\\\n\\\"+ \\\"program repeat 4 go right end end\\\\n\\\"+ \\\"program repeat 4 repeat 3 go right go left end right end end\\\\n\\\"; programs.split(\\\"\\\\n\\\").forEach((text:string)=>{ if (text.length == 0) return; console.log(`current:\\\\n ${text}\\\\n`) let node = new ProgramNode() node.parse(new Context(text)) console.log(`node = ${node}`) }) // node.ts import {Context} from \\\"./context\\\"; export abstract class Node { abstract parse(ctx:Context): void; } // primitiveCommandNode.ts import { Node } from \\\"./node\\\"; import { Context } from \\\"./context\\\"; // <primitive command> ::= <go> | <right> | <left> export class PrimitiveCommandNode extends Node { private name: string; parse(context: Context): void { this.name = context.getCurrentToken(); context.skipToken(this.name); if (this.name !== \\\"go\\\" && this.name !== \\\"right\\\" && this.name !== \\\"left\\\") { throw new Error(`${this.name} is undefined`); } } toString(): string { return this.name+\\\" \\\"; } } // programNode.ts import { Node } from \\\"./node\\\"; import { CommandListNode } from \\\"./commandListNode\\\"; import {Context} from \\\"./context\\\"; // <program> ::= program <command list> export class ProgramNode extends Node { commandListNode: Node; parse(context:Context): void { context.skipToken(\\\"program\\\"); this.commandListNode = new CommandListNode(); this.commandListNode.parse(context); } toString(): string { return \\\"[program \\\" + this.commandListNode + \\\"]\\\"; } } // repeatCommandNode.ts import { Node } from \\\"./node\\\"; import { Context } from \\\"./context\\\"; import { CommandListNode } from \\\"./commandListNode\\\"; // <repeat command> ::= \\\"repeat\\\" <number> \\\"end\\\" export class RepeatCommandNode extends Node { number: number; commandListNode: CommandListNode; parse(context: Context): void { context.skipToken(\\\"repeat\\\"); this.number = context.getCurrentNumber(); context.nextToken(); this.commandListNode = new CommandListNode(); this.commandListNode.parse(context); } toString(): string { return `[repeat [${this.number} ${this.commandListNode.toString()}]]`; } } // StringTokenizer.ts export class StringTokenizer{ private text: string; private tokens: string[]; private index: number; constructor(text: string) { this.text = text; this.tokens = text.split(\\\" \\\"); this.index = 0; } nextToken(): string { return this.tokens[this.index++]; } hasMoreTokens(): boolean { return this.index < this.tokens.length; } } \"]},\"261\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\interperter\\\\main.ts\\\" current: program end node = [program ] current: program go end node = [program go ] current: program go right go right go right end node = [program go right go right go right ] current: program repeat 4 go right end end node = [program [repeat [4 go right ]]] current: program repeat 4 repeat 3 go right go left end right end end node = [program [repeat [4 [repeat [3 go right go left ]]right ]]] \"]},\"262\":{\"c\":[\"设计模式\"]},\"263\":{\"c\":[\"设计模式\",\"TypeScript\",\"用类实现\"]},\"264\":{\"h\":\"迭代器模式\"},\"265\":{\"h\":\"为什么要使用迭代器模式\",\"t\":[\"迭代器模式提供了一种方法来顺序访问集合中的元素，而无需暴露其底层表示。使用迭代器模式有以下几个优点：\",\"简化代码：迭代器模式将遍历逻辑封装在迭代器对象中，使得客户端代码更加简洁和易读。\",\"解耦集合和遍历：集合对象和遍历算法分离，增加了代码的灵活性和可维护性。可以在不修改集合对象的情况下，改变遍历算法。\",\"统一接口：通过实现统一的迭代器接口，不同类型的集合可以使用相同的遍历方式，增强了代码的可扩展性。\",\"支持多种遍历方式：可以根据需要实现不同的迭代器，以支持多种遍历方式，如正向遍历、反向遍历、过滤遍历等。\",\"通过使用迭代器模式，我们可以更好地管理和操作集合数据，提高代码的可读性和可维护性。\"]},\"266\":{\"h\":\"TypeScript 实现迭代器模式\",\"t\":[\"在本节中，我们将展示如何使用 TypeScript 实现迭代器模式。迭代器模式是一种行为设计模式，它允许顺序访问集合中的元素，而无需暴露其底层表示。\"]},\"267\":{\"h\":\"代码示例\",\"t\":[\"以下是实现迭代器模式的 TypeScript 代码示例：\",\"// aggregate.ts import { Iterator } from './iterator'; export interface Aggregate { iterator(): Iterator; } // book.ts export class Book { private name: string; constructor(name: string) { this.name = name; } getName(): string { return this.name; } } // bookShelf.ts import { Book } from './book'; import { Iterator } from './iterator'; import { BookShelfIterator } from './bookShelfIterator'; import { Aggregate } from './aggregate'; export class BookShelf implements Aggregate { private books: Book[]; private last: number = 0; constructor() { this.books = []; } getBookAt(index: number): Book { return this.books[index]; } appendBook(book: Book): void { this.books[this.last] = book; this.last++; } getLength(): number { return this.last; } iterator(): Iterator { return new BookShelfIterator(this); } } // bookShelfIterator.ts import { BookShelf } from './bookShelf'; import { Iterator } from './iterator'; export class BookShelfIterator implements Iterator { private bookShelf: BookShelf; private index: number; constructor(bookShelf: BookShelf) { this.bookShelf = bookShelf; this.index = 0; } hasNext(): boolean { return this.index < this.bookShelf.getLength(); } next(): any { const book = this.bookShelf.getBookAt(this.index); this.index++; return book; } } // iterator.ts export interface Iterator { hasNext(): boolean; next(): any; } // main.ts import { BookShelf } from \\\"../bookShelf\\\"; import { Book } from \\\"../book\\\"; const bookShelf = new BookShelf(); bookShelf.appendBook(new Book(\\\"Around the World in 80 Days\\\")); bookShelf.appendBook(new Book(\\\"Bible\\\")); bookShelf.appendBook(new Book(\\\"Cinderella\\\")); bookShelf.appendBook(new Book(\\\"Daddy-Long-Legs\\\")); const it = bookShelf.iterator(); while (it.hasNext()) { const book = it.next(); console.log(book.getName()); } \"]},\"268\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\iterator\\\\main.ts\\\" Around the World in 80 Days Bible Cinderella Daddy-Long-Legs \",\"在上面的代码中，我们定义了几个类和接口来实现迭代器模式：\",\"Iterator 接口定义了 hasNext 和 next 方法。\",\"Aggregate 接口定义了 iterator 方法。\",\"Book 类表示一个书籍对象。\",\"BookShelf 类表示一个书架，它实现了 Aggregate 接口。\",\"BookShelfIterator 类实现了 Iterator 接口，用于遍历 BookShelf 中的书籍。\",\"通过这些类和接口，我们可以轻松地遍历 BookShelf 中的书籍，而无需了解其内部实现细节。\"]},\"269\":{\"h\":\"多个迭代器\",\"t\":[\"在某些情况下，我们可能需要为同一个集合编写多个具体迭代器（ConcreteIterator）。例如，我们可以为 BookShelf 编写一个反向迭代器，以便从后向前遍历书籍。\"]},\"270\":{\"h\":\"相关的设计模式\",\"t\":[\"Visitor 模式\",\"Composite 模式\",\"Factory Method 模式\"]},\"271\":{\"c\":[\"设计模式\"]},\"272\":{\"c\":[\"设计模式\",\"typescript\"]},\"273\":{\"h\":\"Mediator 模式\"},\"274\":{\"h\":\"为什么使用此类\",\"t\":[\"请大家想象一下一个乱糟糟的开发小组的工作状态。小组中的 10 个成员虽然一起协同工作，但是意见难以统一，总是互相指挥，导致工作进度始终滞后。不仅如此，他们还十分在意编码细节，经常为此争执不下。\",\"这时，我们就需要一个中立的仲裁者站出来说：“各位，请大家将情况报告给我，我来负责仲裁。我会从团队整体出发进行考虑，然后下达指示，但我不会评价大家的工作细节。”这样，当出现争执时大家就会找仲裁者进行商量，仲裁者会负责统一大家的意见。\",\"最后，整个团队的交流过程就变为了组员向仲裁者报告，仲裁者向组员下达指示。组员之间不再相互询问和相互指示。\"]},\"275\":{\"h\":\"示例代码\",\"t\":[\"源地址\",\"/** * EN: Real World Example for the Mediator design pattern * * Need: To have a messaging application to notify groups of people. Users * should not know about each other. * * Solution: Create a mediator to manage subscriptions and messages */ /** * EN: Extending the Mediator interface to have a payload to include messages */ interface Mediator { notify(sender: object, event: string, payload?: string): void; } /** * EN: The user plays the role of the independent component. It has an * instance of the mediator. */ class User { constructor(public name: string, private mediator: Mediator) { this.mediator.notify(this, 'subscribe'); } receiveMessage(message: string) { console.log(`Message received by ${this.name}: ${message}`); } publishMessage(message: string) { this.mediator.notify(this, 'publish', message); } } /** * EN: The app is the concrete Mediator and implements all the events that * collaborators can notify: subscribe and publish */ class ChatAppMediator implements Mediator { private users: User[] = []; public notify(sender: object, event: string, payload?: string): void { if (event === 'subscribe') { const user = sender as User; console.log(`Subscribing ${user.name}`); this.users.push(user); } if (event === 'publish') { console.log(`Publishing message \\\"${payload}\\\" to the group`); const usersExcludingSender = this.users.filter(u => u !== sender); for (const user of usersExcludingSender) { user.receiveMessage(payload); } } } } /** * EN: The client code. Creating a user automatically subscribes them to the * group. */ const chatAppMediator = new ChatAppMediator(); const user1 = new User('Lightning', chatAppMediator); const user2 = new User('Doc', chatAppMediator); const user3 = new User('Mater', chatAppMediator); user1.publishMessage('Catchaw'); user2.publishMessage('Ey kid'); user3.publishMessage('Tomato'); \"]},\"276\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\mediator\\\\main.ts\\\" Subscribing Lightning Subscribing Doc Subscribing Mater Publishing message \\\"Catchaw\\\" to the group Message received by Doc: Catchaw Message received by Mater: Catchaw Publishing message \\\"Ey kid\\\" to the group Message received by Lightning: Ey kid Message received by Mater: Ey kid Publishing message \\\"Tomato\\\" to the group Message received by Lightning: Tomato Message received by Doc: Tomato \"]},\"277\":{\"h\":\"拓展思路的要点\"},\"278\":{\"h\":\"当发生分散灾难时\",\"t\":[\"示例程序中的 ChatAppMediator 类的 notify 方法稍微有些复杂。如果发生需求变更，该方法中很容易发生 Bug。不过这并不是什么问题。因为即使 notify 方法中发生了 Bug，由于其他地方并没有控制消息发布和订阅的逻辑处理，因此只要调试该方法就能很容易地找出 Bug 的原因。请试想一下，如果这段逻辑分散在 User 类中，那么无论是编写代码还是调试代码和修改代码，都会非常困难。通常情况下，面向对象编程可以帮助我们分散处理，避免处理过于集中，也就是说可以“分而治之”。但是在本章中的示例程序中，把处理分散在各个类中是不明智的。如果只是将应当分散的处理分散在各个类中，但是没有将应当集中的处理集中起来，那么这些分散的类最终只会导致灾难。\",\"在这个示例程序中，ChatAppMediator 类作为中介者（Mediator），负责管理和协调各个用户（User）的交互。notify 方法集中处理了所有消息的发布和订阅逻辑，这样可以确保逻辑的一致性和可维护性。如果将这些逻辑分散到各个用户类中，不仅会增加代码的复杂性，还会使得调试和维护变得更加困难。因此，将这些逻辑集中在中介者类中是更明智的选择。\"]},\"279\":{\"h\":\"通信线路的增加\",\"t\":[\"假设现在有 A 和 B 这 2 个实例，它们之间互相通信（相互调用方法），那么通信线路有两条，即 A-B 和 A-B。如果是有 A、B 和 C 这 3 个实例，那么就会有 6 条通信线路，即 A-B、A-C、B-C、B-A 和 C-A。如果有 4 个实例，会有 12 条通信线路；5 个实例就会有 20 条通信线路，而 6 个实例则会有 30 条通信线路。如果存在很多这样的互相通信的实例，那么程序结构会变得非常复杂。可能会有读者认为，如果实例很少就不需要 Mediator 模式了。但是需要考虑到的是，即使最初实例很少，很可能随着需求变更实例数量会慢慢变多，迟早会暴露出问题。\"]},\"280\":{\"h\":\"哪些角色可以复用\",\"t\":[\"ConcreteColleague 角色可以复用，但 ConcreteMediator 角色很难复用。例如，假设我们现在需要制作另外一个对话框。这时，我们可将扮演 ConcreteColleague 角色的 colleagueButton 类、 colleagueTextField 类和 colleagueCheckbox 类用于新的对话框中。这是因为在 ConcreteColleague 角色中并没有任何依赖于特定对话框的代码。在示例程序中，依赖于特定应用程序的部分都被封装在扮演 ConcreteMediator 角色的 LoginFrame 类中，依赖于特定应用程序就意味着难以复用。因此， LoginFrame 类很难在其他对话框中被复用。\"]},\"281\":{\"h\":\"相关的设计模式\",\"t\":[\"Facade 模式\",\"Observer 模式\"]},\"282\":{\"c\":[\"设计模式\"]},\"283\":{\"c\":[\"设计模式\",\"TypeScript\",\"简单化\"]},\"284\":{\"h\":\"Memento 模式\"},\"285\":{\"h\":\"为什么使用 Memento 模式\",\"t\":[\"Memento 模式的主要目的是在不破坏封装性的前提下，捕获和恢复对象的内部状态。它在以下情况下特别有用：\",\"需要保存和恢复对象的多个状态。\",\"需要在对象状态变化时进行撤销操作。\",\"需要在不暴露对象实现细节的情况下保存对象状态。\"]},\"286\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们使用了 Memento 模式来管理 Gamer 对象的状态。Memento 模式允许我们在不暴露对象实现细节的情况下保存和恢复对象的状态。以下是示例代码：\",\"// gamer.ts import { Memento } from './memento'; export class Gamer { private money: number; private fruits: string[]; private static fruitsName: string[] = ['apple', 'grape', 'banana', 'orange']; constructor(money: number) { this.money = money; this.fruits = []; } getMoney(): number { return this.money; } bet(): void { const dice = Math.floor(Math.random() * 6) + 1; if (dice === 1) { this.money += 100; console.log('Money increased'); } else if (dice === 2) { this.money /= 2; console.log('Money halved'); } else if (dice === 6) { const f = this.getFruit(); console.log(`Got fruit: ${f}`); this.fruits.push(f); } else { console.log('Nothing happened'); } } createMemento(): Memento { const m = new Memento(this.money); this.fruits.forEach(f => { if (f.startsWith('delicious')) { m.addFruit(f); } }); return m; } restoreMemento(memento: Memento): void { this.money = memento.money; this.fruits = memento.fruits; } toString(): string { return `[money = ${this.money}, fruits = ${this.fruits.join(', ')}]`; } private getFruit(): string { const prefix = Math.random() > 0.5 ? 'delicious ' : ''; return prefix + Gamer.fruitsName[Math.floor(Math.random() * Gamer.fruitsName.length)]; } } // main.ts import { Gamer } from './gamer'; let gamer = new Gamer(100); let memento = gamer.createMemento(); for (let i = 0; i < 100; i++) { console.log(`==== ${i}`); console.log(`Current: ${gamer.toString()}`); gamer.bet(); console.log(`Money now: ${gamer.getMoney()}`); if (gamer.getMoney() > memento.getMoney()) { console.log('Money increased, saving current state'); memento = gamer.createMemento(); } else if (gamer.getMoney() < memento.getMoney() / 2) { console.log('Money halved, restoring to previous state'); gamer.restoreMemento(memento); } console.log(''); } // memento.ts export class Memento { money: number; fruits: string[]; constructor(money: number) { this.money = money; this.fruits = []; } public getMoney(): number { return this.money; } public addFruit(fruit: string): void { this.fruits.push(fruit); } public getFruits(): string[] { return [...this.fruits]; } } \"]},\"287\":{\"h\":\"运行结果\",\"t\":[\"...(省略) ==== 97 Current: [money = 462.5, fruits = delicious grape, delicious apple, delicious apple, delicious orange, delicious banana, delicious apple, delicious apple, delicious grape, delicious grape, banana, grape, delicious banana] Money halved Money now: 231.25 Money halved, restoring to previous state ==== 98 Current: [money = 925, fruits = delicious grape, delicious apple, delicious apple, delicious orange, delicious banana, delicious apple, delicious apple, delicious grape, delicious grape, banana, grape, delicious banana] Nothing happened Money now: 925 ==== 99 Current: [money = 925, fruits = delicious grape, delicious apple, delicious apple, delicious orange, delicious banana, delicious apple, delicious apple, delicious grape, delicious grape, banana, grape, delicious banana] Nothing happened Money now: 925 \"]},\"288\":{\"h\":\"拓展思路的要点\"},\"289\":{\"h\":\"两种接口和可见性\",\"t\":[\"在 Memento 模式中，通常会有两种接口：宽接口（wide interface）和窄接口（narrow interface）。宽接口提供了对 Memento 对象的所有操作权限，而窄接口则只提供了有限的操作权限。Originator 类使用宽接口来创建和恢复 Memento，而 Caretaker 类则使用窄接口来保存和传递 Memento。通过这种方式，可以确保 Memento 的内部状态不会被外部直接修改，从而保持封装性。\"]},\"290\":{\"h\":\"需要多少个 Memento\",\"t\":[\"在实际应用中，需要根据具体需求来决定需要保存多少个 Memento。对于一些简单的应用，可能只需要保存一个 Memento 来支持一次撤销操作。而对于一些复杂的应用，可能需要保存多个 Memento 以支持多次撤销操作。需要注意的是，保存过多的 Memento 会占用大量的内存资源，因此需要在性能和功能之间找到一个平衡点。\"]},\"291\":{\"h\":\"Memento 的有效期限是多久\",\"t\":[\"Memento 的有效期限取决于具体的应用场景。在某些情况下，Memento 可能只需要在短时间内有效，例如在用户进行撤销操作之前。而在其他情况下，Memento 可能需要长期保存，例如在应用程序关闭后重新打开时恢复状态。需要根据具体需求来决定 Memento 的有效期限，并在适当的时候清理过期的 Memento 以释放资源。\"]},\"292\":{\"h\":\"划分 Caretaker 和 Originator 角色的意义\",\"t\":[\"在 Memento 模式中，Caretaker 和 Originator 角色的划分具有重要意义。Caretaker 负责保存和管理 Memento，而 Originator 负责创建和恢复 Memento。通过这种划分，可以将状态保存和恢复的逻辑与业务逻辑分离，从而提高系统的可维护性和可扩展性。\",\"变更为可以多次撤销 通过保存多个 Memento，可以实现多次撤销操作。Caretaker 可以维护一个 Memento 的栈，每次撤销操作时从栈中弹出一个 Memento 并恢复状态。这样可以支持用户进行多次撤销和重做操作。\",\"变更为不仅可以撤销，还可以将现在的状态保存在文件中 通过将 Memento 保存到文件中，可以实现持久化存储。这样即使应用程序关闭后重新打开，也可以恢复到之前的状态。Caretaker 可以负责将 Memento 序列化并保存到文件中，以及从文件中读取并反序列化 Memento。\"]},\"293\":{\"h\":\"相关的设计模式\",\"t\":[\"Command 模式\",\"Prototype 模式\",\"State 模式\"]},\"294\":{\"c\":[\"设计模式\"]},\"295\":{\"c\":[\"设计模式\",\"TypeScript\",\"管理状态\"]},\"296\":{\"h\":\"Observer 模式\"},\"297\":{\"h\":\"为什么使用观察者模式\",\"t\":[\"观察者模式非常适合用于需要自动更新的场景。例如，在图形用户界面（GUI）应用程序中，当数据模型发生变化时，所有显示该数据的视图都需要自动更新。通过使用观察者模式，我们可以将这些视图注册为观察者，当数据模型发生变化时，它们会自动收到通知并更新显示。\"]},\"298\":{\"h\":\"示例代码\",\"t\":[\"在这个示例中，我们展示了如何使用观察者模式来管理状态变化。观察者模式定义了一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。以下是 TypeScript 实现的代码示例：\",\"// DigitObserver.ts import { NumberGenerator } from './numberGenerator'; import { Observer } from './observer'; export class DigitObserver implements Observer { update(number: NumberGenerator): void { console.log(`DigitObserver: ${number.getNumber()}`); } } // graphObserver.ts import { Observer } from './observer'; import { NumberGenerator } from './numberGenerator'; export class GraphObserver implements Observer { update(generator: NumberGenerator): void { const count = generator.getNumber(); let graph = ''; for (let i = 0; i < count; i++) { graph += '*'; } console.log(`GraphObserver: \\\\n${graph}\\\\n ${generator.getNumber()}\\\\n${graph} `); } } // main.ts import { NumberGenerator } from './numberGenerator'; import { Observer } from './observer'; import { RandomNumberGenerator } from './randomNumberGenerator'; import { DigitObserver } from './DigitObserver'; import { GraphObserver } from './graphObserver'; const generator: NumberGenerator = new RandomNumberGenerator(); const observer1 = new DigitObserver(); const observer2 = new GraphObserver(); generator.addObserver(observer1); generator.addObserver(observer2); generator.execute(); // numberGenerator.ts import { Observer } from './observer'; export abstract class NumberGenerator { private observers: Observer[] = []; public addObserver(observer: Observer): void { this.observers.push(observer); } public deleteObserver(observer: Observer): void { this.observers = this.observers.filter((o) => o !== observer); } public notifyObservers(): void { this.observers.forEach((o) => o.update(this)); } public abstract getNumber(): number; public abstract execute(): void; } // observer.ts import {NumberGenerator} from './numberGenerator'; export interface Observer { update(generator: NumberGenerator): void; } // randomNumberGenerator.ts import {NumberGenerator} from './numberGenerator'; export class RandomNumberGenerator extends NumberGenerator { private number: number; constructor() { super(); this.number = 0; } getNumber(): number { return this.number; } execute(): void { for (let i = 0; i < 20; i++) { this.number = Math.floor(Math.random() * 50); this.notifyObservers(); } } } \"]},\"299\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\observer\\\\main.ts\\\" DigitObserver: 13 GraphObserver: ************* 13 ************* DigitObserver: 43 GraphObserver: ******************************************* 43 ******************************************* DigitObserver: 46 GraphObserver: ********************************************** 46 ********************************************** DigitObserver: 18 GraphObserver: ****************** 18 ****************** DigitObserver: 20 GraphObserver: ******************** 20 ******************** DigitObserver: 49 GraphObserver: ************************************************* 49 ************************************************* DigitObserver: 25 GraphObserver: ************************* 25 ************************* DigitObserver: 26 GraphObserver: ************************** 26 ************************** DigitObserver: 37 GraphObserver: ************************************* 37 ************************************* DigitObserver: 2 GraphObserver: ** 2 ** DigitObserver: 10 GraphObserver: ********** 10 ********** DigitObserver: 0 GraphObserver: 0 DigitObserver: 11 GraphObserver: *********** 11 *********** DigitObserver: 13 GraphObserver: ************* 13 ************* DigitObserver: 16 GraphObserver: **************** 16 **************** DigitObserver: 28 GraphObserver: **************************** 28 **************************** DigitObserver: 22 GraphObserver: ********************** 22 ********************** DigitObserver: 30 GraphObserver: ****************************** 30 ****************************** DigitObserver: 44 GraphObserver: ******************************************** 44 ******************************************** DigitObserver: 3 GraphObserver: *** 3 *** \"]},\"300\":{\"h\":\"拓展思路的要点\"},\"301\":{\"h\":\"这里也出现了可替换性\",\"t\":[\"在设计模式中，可替换性是指一个对象可以被另一个具有相同接口的对象替换，而不影响系统的功能。在观察者模式中，观察者（Observer）和被观察者（Subject）之间的关系是松耦合的，这意味着我们可以轻松地替换观察者或被观察者，而不会影响系统的其他部分。\"]},\"302\":{\"h\":\"Observer 的顺序\",\"t\":[\"Subject 角色（被观察对象）中注册有多个 Observer 角色。在示例程序的 notifyObservers 方法中，先注册的 Observer 的 update 方法会先被调用。通常，在设计 ConcreteObserver 角色的类时，需要注意这些 Observer 的 update 方法的调用顺序，不能因为方法的调用顺序发生改变而产生问题。例如，在示例程序中，绝不能因为先调用 DigitObserver 的 update 方法后调用 GraphObserver 的 update 方法而导致应用程序不能正常工作。当然，通常，只要保持各个类的独立性，就不会发生上面这种类的依赖关系混乱的问题。不过，我们还需要注意下面将要提到的情况。\"]},\"303\":{\"h\":\"当 Observer 的行为会对被观察对象产生影响时\",\"t\":[\"当观察者的行为会对被观察对象产生影响时，我们需要特别小心，以避免循环依赖和无限递归。例如，一个观察者在接收到通知后修改了被观察对象的状态，这可能会导致被观察对象再次通知所有观察者，从而引发无限循环。为了解决这个问题，我们可以引入一个标志位来跟踪通知状态，或者使用更复杂的事件处理机制。\"]},\"304\":{\"h\":\"传递更新信息的方式\",\"t\":[\"在观察者模式中，传递更新信息的方式有多种选择。最简单的方法是直接调用观察者的更新方法，并将被观察对象自身作为参数传递。另一种方法是传递具体的更新信息，例如事件对象或数据包。这种方法可以减少观察者对被观察对象的依赖，从而提高系统的灵活性和可维护性。\"]},\"305\":{\"h\":\"从观察变为通知\",\"t\":[\"在某些情况下，我们可能需要从观察模式转变为通知模式。例如，当系统中有大量的观察者时，逐个通知每个观察者可能会导致性能问题。此时，我们可以考虑使用事件总线或消息队列来集中处理通知，从而提高系统的性能和可扩展性。\"]},\"306\":{\"h\":\"MVC (Model/View/Controller)\",\"t\":[\"观察者模式在 MVC 架构中得到了广泛应用。模型（Model）作为被观察对象，视图（View）作为观察者，当模型的状态发生变化时，视图会自动更新。控制器（Controller）负责协调模型和视图之间的交互。通过使用观察者模式，MVC 架构实现了视图和模型的松耦合，从而提高了系统的可维护性和可扩展性。\"]},\"307\":{\"h\":\"相关的设计模式\",\"t\":[\"Mediator 模式\"]},\"308\":{\"c\":[\"设计模式\"]},\"309\":{\"c\":[\"设计模式\",\"TypeScript\",\"管理状态\"]},\"310\":{\"h\":\"Prototype 模式\"},\"311\":{\"h\":\"为什么要使用 Prototype 模式\",\"t\":[\"Prototype 模式是一种创建型设计模式，它允许你复制现有对象而无需使代码依赖它们所属的类。使用 Prototype 模式可以：\",\"避免重复初始化对象的复杂过程。\",\"提高性能，特别是在创建对象代价较高时。\",\"简化代码，使得对象的创建更加灵活。\",\"对象种类繁多，无法将它们整合到一个类中\",\"难以根据类生成实例\",\"解耦框架与生成的实例\"]},\"312\":{\"h\":\"示例代码\",\"t\":[\"// main.ts import { Manager } from './manager'; import { UnderlinePen } from './underlinePen'; import { MessageBox } from './messageBox'; let manager = new Manager(); let upen = new UnderlinePen('~'); let mbox = new MessageBox('*'); let sbox = new MessageBox('/'); manager.register('strong message', upen); manager.register('warning box', mbox); manager.register('slash box', sbox); let p1 = manager.create('strong message'); p1.use('Hello, world.'); let p2 = manager.create('warning box'); p2.use('Hello, world.'); let p3 = manager.create('slash box'); p3.use('Hello, world.'); // manager.ts export class Manager { private showcase: { [key: string]: any } = {}; register(name: string, proto: any) { this.showcase[name] = proto; } create(name: string): any { const p = this.showcase[name]; return p.createClone(); } } // messageBox.ts import { Product } from \\\"./product\\\"; export class MessageBox implements Product { private decochar: string; constructor(decochar: string) { this.decochar = decochar; } use(s: string): void { const length = s.length; console.log(this.decochar.repeat(length + 4)); console.log(`${this.decochar} ${s} ${this.decochar}`); console.log(this.decochar.repeat(length + 4)); } createClone(): Product { let p: Product = null; try { p = <Product>Object.create(this); } catch (e) { console.error(e); } return p; } } // product.ts export interface Product { use(s:String): void; createClone(): Product; } // underlinePen.ts import { Product } from './product'; export class UnderlinePen implements Product { private ulchar: string; constructor(ulchar: string) { this.ulchar = ulchar; } use(s: string): void { const length = s.length; console.log(`\\\"${s}\\\"`); console.log(' '); console.log(` ${this.ulchar.repeat(length)}`); console.log(' '); } createClone(): Product { let p: Product = null; try { p = Object.create(this); } catch (e) { console.log(e); } return p; } } \"]},\"313\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\prototype\\\\main.ts\\\" \\\"Hello, world.\\\" ~~~~~~~~~~~~~ ***************** * Hello, world. * ***************** ///////////////// / Hello, world. / ///////////////// \"]},\"314\":{\"h\":\"相关设计模式\",\"t\":[\"Flyweight 模式\",\"Memento 模式\",\"Composite 模式\",\"Decorator 模式\",\"Command 模式\"]},\"315\":{\"c\":[\"设计模式\"]},\"316\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"317\":{\"h\":\"Proxy 模式\"},\"318\":{\"h\":\"为什么使用代理模式\",\"t\":[\"在面向对象编程中，“本人”和“代理人”都是对象。如果“本人”对象太忙了．有些工作无法自己亲自完成，就将其交给“代理人\\\"对象负责。\",\"Proxy 模式用于为某对象提供一个代理，以控制对该对象的访问。主要有以下几个优点：\",\"延迟实例化：代理对象可以在需要时才创建实际对象，节省资源。\",\"控制访问：可以在代理中加入额外的逻辑来控制对实际对象的访问。\",\"远程代理：可以用于访问远程对象。\"]},\"319\":{\"h\":\"实例代码\",\"t\":[\"为了让 PrinterProxy 类与 Printer 类具有一致性，我们定义了 Printable 接口。示例程序的前提是\\\"生成 Printer 类的实例\\\"这一处理需要花费很多时间。为了在程序中体现这一点，我们在 Printer 类的构造了数中调用了 heavyJob 方法，让它干一些“重活”（虽说是重活，也不过是让程序睡眠 5 秒钟）。\",\"// main.ts import { Printable } from './printable'; import { PrinterProxy } from './printerProxy'; let p: Printable = new PrinterProxy('Alice'); console.log('名字现在是' + p.getPrinterName() + '。'); p.setPrinterName('Bob'); console.log('名字现在是' + p.getPrinterName() + '。'); p.print('你好，世界。'); // printable.ts export interface Printable { setPrinterName(name: string): void; getPrinterName(): string; print(str:string): void; } // printer.ts import { Printable } from \\\"./printable\\\"; export class Printer implements Printable { private name: string; constructor(name: string) { this.name = name; this.heavyJob(`正在生成Printer的实例(${this.name})`); } setPrinterName(name: string): void { this.name = name; } getPrinterName(): string { return this.name; } print(str:string): void { console.log(`=== ${this.name} ===`); console.log(str); } private heavyJob(msg: string): void { console.log(msg); for (let i = 0; i < 5; i++) { try { console.log(\\\".\\\"); setTimeout(() => { console.log(\\\".\\\"); }, 1000); } catch (e) { console.log(e); } } console.log(\\\"完了。\\\"); } } // printerProxy.ts import { Printable } from './printable'; import { Printer } from './printer'; export class PrinterProxy implements Printable { private name: string; private real: Printer; constructor(name: string) { this.name = name; } setPrinterName(name: string): void { if (this.real !== undefined) { this.real.setPrinterName(name); } this.name = name; } getPrinterName(): string { return this.name; } print(str: string): void { this.realize(); this.real.print(str); } private realize(): void { if (this.real === undefined) { this.real = new Printer(this.name); } } } \"]},\"320\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\proxy\\\\main.ts\\\" 名字现在是Alice。 名字现在是Bob。 正在生成Printer的实例(Bob) . . . . . 完了。 === Bob === 你好，世界。 . . . . . \"]},\"321\":{\"h\":\"拓展思路的要点\"},\"322\":{\"h\":\"使用代理人来提升处理速度\",\"t\":[\"在某些情况下，使用代理可以显著提升处理速度。例如，虚拟代理（Virtual Proxy）可以在实际对象创建之前进行一些轻量级的操作，从而减少系统的开销。通过代理对象来延迟实际对象的创建，可以提高系统的响应速度和资源利用率。\"]},\"323\":{\"h\":\"有必要划分代理人和本人吗\",\"t\":[\"在设计模式中，代理人和本人的划分是为了实现职责分离和提高系统的灵活性。代理模式通过引入代理对象来控制对实际对象的访问，可以在不修改实际对象的情况下添加额外的功能。例如，远程代理（Remote Proxy）可以在客户端和远程服务器之间进行通信，而不需要客户端了解远程服务器的具体实现。\"]},\"324\":{\"h\":\"代理与委托\",\"t\":[\"代理模式和委托模式虽然在某些方面有相似之处，但它们的目的和实现方式有所不同。代理模式主要用于控制对对象的访问，而委托模式则用于将任务分配给其他对象来执行。代理模式通过代理对象来控制对实际对象的访问，而委托模式通过委托对象来执行具体的任务。\"]},\"325\":{\"h\":\"透明性\",\"t\":[\"代理模式的一个重要特点是透明性。代理对象和实际对象实现相同的接口，客户端可以像使用实际对象一样使用代理对象，而不需要关心代理对象的内部实现。这种透明性使得代理模式在不改变客户端代码的情况下添加额外的功能成为可能。\"]},\"326\":{\"h\":\"HTTP 代理\",\"t\":[\"HTTP 代理是一种常见的代理模式应用。HTTP 代理服务器位于客户端和目标服务器之间，负责转发客户端的请求和目标服务器的响应。HTTP 代理可以用于缓存、负载均衡、安全控制等功能，从而提高网络通信的效率和安全性。\"]},\"327\":{\"h\":\"各种 Proxy 模式\",\"t\":[\"Virtual Proxy：虚拟代理用于控制对资源密集型对象的访问。它在实际对象创建之前进行一些轻量级的操作，从而延迟实际对象的创建。例如，图像加载时可以使用虚拟代理来显示占位符图像，直到实际图像加载完成。\",\"Remote Proxy：远程代理用于控制对远程对象的访问。它在客户端和远程服务器之间进行通信，使得客户端可以像使用本地对象一样使用远程对象。例如，RMI（远程方法调用）就是一种远程代理的实现。\",\"Access Proxy：访问代理用于控制对实际对象的访问权限。它可以在访问实际对象之前进行权限检查，从而确保只有授权的客户端才能访问实际对象。例如，防火墙代理可以用于控制对内部网络资源的访问。\",\"通过这些不同类型的代理模式，我们可以在不同的应用场景中灵活地控制对对象的访问，提高系统的安全性、性能和可维护性。\"]},\"328\":{\"h\":\"相关的设计模式\",\"t\":[\"Adapter 模式\",\"Decorator 模式\"]},\"329\":{\"c\":[\"设计模式\"]},\"330\":{\"c\":[\"设计模式\",\"TypeScript\",\"避免浪费\"]},\"331\":{\"h\":\"Singleton 模式\"},\"332\":{\"h\":\"为什么要使用 Singleton 模式\",\"t\":[\"Singleton 模式确保一个类只有一个实例，并提供一个全局访问点。它常用于需要控制资源访问的场景，例如数据库连接、日志记录器等。通过 Singleton 模式，可以避免创建多个实例带来的资源浪费和不一致性问题。\"]},\"333\":{\"h\":\"总结:\",\"t\":[\"想确保任何情况下都绝对只有 1 个实例\",\"想在程序上表现出“只存在一个实例”\"]},\"334\":{\"h\":\"示例代码\",\"t\":[\"// main.ts import { Singleton } from './singleton'; const singleton1 = Singleton.getInstance(); const singleton2 = Singleton.getInstance(); console.log(singleton1 === singleton2); // true // singleton.ts export class Singleton { private static instance: Singleton | null = null; private static generatedId: number = 0; private constructor() { Singleton.generatedId++; console.log(`Singleton instance created with id: ${Singleton.generatedId}`); } public static getInstance(): Singleton { if (this.instance === null) { this.instance = new Singleton(); } return this.instance; } } \"]},\"335\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\singleton\\\\main.ts\\\" Singleton instance created with id: 1 true \"]},\"336\":{\"h\":\"相关设计模式\",\"t\":[\"abstractFactory 模式\",\"Builder 模式\",\"Facade 模式\",\"Prototype 模式\"]},\"337\":{\"h\":\"多线程下\",\"t\":[\"在多线程环境中，Singleton 模式的实现需要特别注意线程安全问题。如果多个线程同时访问 getInstance 方法，可能会导致创建多个实例。为了解决这个问题，可以使用双重检查锁定（Double-Checked Locking）或其他线程同步机制。\"]},\"338\":{\"h\":\"双重检查锁定示例代码\",\"t\":[\"export class Singleton { private static instance: Singleton | null = null; private static generatedId: number = 0; private static lock: any = {}; private constructor() { Singleton.generatedId++; console.log(`Singleton instance created with id: ${Singleton.generatedId}`); } public static getInstance(): Singleton { if (this.instance === null) { synchronized(this.lock, () => { if (this.instance === null) { this.instance = new Singleton(); } }); } return this.instance; } } function synchronized(lock: any, fn: () => void) { // Simulate a lock mechanism fn(); } \",\"在上面的代码中，synchronized 函数模拟了一个锁机制，以确保在多线程环境下 getInstance 方法的线程安全性。\"]},\"339\":{\"c\":[\"设计模式\"]},\"340\":{\"c\":[\"设计模式\",\"typescript\",\"生成实例\"]},\"341\":{\"h\":\"State 模式\"},\"342\":{\"h\":\"为什么使用 State 模式\",\"t\":[\"State 模式允许对象在其内部状态改变时改变其行为。它将与状态相关的行为封装在独立的类中，使得状态转换变得清晰且易于管理。使用 State 模式可以避免大量的条件语句，使代码更加简洁和可维护。\"]},\"343\":{\"h\":\"示例代码\",\"t\":[\"// context.ts import { State } from './state'; export interface Context { setClock(hour: number): void; changeState(state: State): void; callSecurityCenter(msg: string): void; recordLog(msg: string): void; } // dayState.ts import { State } from './state'; import { Context } from './context'; import { NightState } from './nightState'; export class DayState implements State { private static singleton: DayState = new DayState(); private constructor() {} public static getInstance(): State { return this.singleton; } public doClock(context: Context, hour: number): void { if (hour < 9 || 17 <= hour) { context.changeState(NightState.getInstance()); } } public doUse(context: Context): void { context.recordLog('金库使用(白天)'); } public doAlarm(context: Context): void { context.callSecurityCenter('紧急铃(白天)'); } public doPhone(context: Context): void { context.callSecurityCenter('正常通话(白天)'); } public toString(): string { return '[白天]'; } } // main.ts import { SafeFrame } from './safeFrame'; const safeFrame: SafeFrame = new SafeFrame(); for (let hour: number = 0; hour < 24; hour++) { safeFrame.setClock(hour); safeFrame.doUse(); safeFrame.doAlarm(); safeFrame.doPhone(); } // nightState.ts import { State } from './state'; import { Context } from './context'; import { DayState } from './dayState'; export class NightState implements State { private static singleton: NightState = new NightState(); private constructor() {} public static getInstance(): State { return this.singleton; } public doClock(context: Context, hour: number): void { if (9 <= hour && hour < 17) { context.changeState(DayState.getInstance()); } } public doUse(context: Context): void { context.callSecurityCenter('紧急：夜间使用金库！'); } public doAlarm(context: Context): void { context.callSecurityCenter('紧急铃(夜间)'); } public doPhone(context: Context): void { context.recordLog('夜间通话录音'); } public toString(): string { return '[夜间]'; } } // safeFrame.ts import { Context } from './context'; import { State } from './state'; import { DayState } from './dayState'; export class SafeFrame implements Context { private state: State = DayState.getInstance(); public setClock(hour: number): void { let clockString: string = '現在時刻は'; if (hour < 10) { clockString += `0${hour}:00`; } else { clockString += `${hour}:00`; } console.log(clockString); this.state.doClock(this, hour); } public changeState(state: State): void { console.log(`${this.state.toString()}から${state.toString()}へ状態が変化しました。`); this.state = state; } public callSecurityCenter(msg: string): void { console.log(`call! ${msg}`); } public recordLog(msg: string): void { console.log(`record ... ${msg}`); } public doUse(): void { this.state.doUse(this); } public doAlarm(): void { this.state.doAlarm(this); } public doPhone(): void { this.state.doPhone(this); } } // state.ts import { Context } from './context'; export interface State { doClock(context: Context, hour: number): void; doUse(context: Context): void; doAlarm(context: Context): void; doPhone(context: Context): void; } \"]},\"344\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\state\\\\main.ts\\\" 現在時刻は00:00 [白天]から[夜间]へ状態が変化しました。 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は01:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は02:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は03:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は04:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は05:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は06:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は07:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は08:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は09:00 [夜间]から[白天]へ状態が変化しました。 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は10:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は11:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は12:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は13:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は14:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は15:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は16:00 record ... 金库使用(白天) call! 紧急铃(白天) call! 正常通话(白天) 現在時刻は17:00 [白天]から[夜间]へ状態が変化しました。 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は18:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は19:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は20:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は21:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は22:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 現在時刻は23:00 call! 紧急：夜间使用金库！ call! 紧急铃(夜间) record ... 夜间通话录音 \"]},\"345\":{\"h\":\"拓展思路的要点\"},\"346\":{\"h\":\"分而治之\",\"t\":[\"在编程时，我们经常会使用分而治之的方针。它非常适用于大规模的复杂处理。当遇到庞大且复杂的问题、不能用一般的方法解决时，我们会先将该问题分解为多个小问题。如果还是不能解决这些小问题，我们会将它们继续划分为更小的问题，直至可以解决它们为止。\",\"分而治之，简单而言就是将一个复杂的大问题分解为多个小问题然后逐个解决。在 State 模式中，我们用类来表示状态，并为每一种具体的状态都定义一个相应的类。这样，问题就被分解了。开发人员可以在编写一个 ConcreteState 角色的代码的同时，在头脑中（一定程度上）考虑其他的类。\",\"在本章的警报系统的示例程序中，只有“白天”和“晚上”两个状态，可能大家对此感受不深，但是当状态非常多的时候，State 模式的优势就会非常明显了。在不使用 State 模式时，我们需要使用条件分支语句判断当前的状态，然后进行相应的处理。状态越多，条件分支就会越多，而且我们必须在所有的事件处理方法中都编写这些条件分支语句。State 模式用类表示系统的“状态”，并以此将复杂的程序分解开来。\"]},\"347\":{\"h\":\"依赖于状态的处理\",\"t\":[\"我们来思考一下 SafeFrame 类的 setClock 方法和 State 接口的 doClock 方法之间的关系。Main 类会调用 SafeFrame 类的 setClock 方法，告诉 setClock 方法“请设置时间”。在 setClock 方法中，会像下面这样将处理委托给 State 类：state.doClock(this, hour);。也就是说，我们将设置时间的处理看作是“依赖于状态的处理”。当然，不只是 doClock 方法。在 State 接口中声明的所有方法都是“依赖于状态的处理”，都是“状态不同处理也不同”。这虽然看似理所当然，不过却需要我们特别注意。在 State 模式中，我们应该如何编程，以实现“依赖于状态的处理”呢？总结起来有如下两点：\",\"定义接口，声明抽象方法\",\"定义多个类，实现具体方法\",\"这就是 State 模式中的“依赖于状态的处理”的实现方法。这里故意将上面两点说得很笼统，但是，如果大家在读完这两点之后会点头表示赞同，那就意味着大家完全理解了 State 模式以及接口与类之间的关系。\"]},\"348\":{\"h\":\"应当是谁来管理状态的迁移\",\"t\":[\"用类来表示状态，将依赖于状态的处理分散在每个 ConcreteState 角色中，这是一种非常好的解决办法。不过，在使用模式时需要注意应当是谁来管理状态迁移。在示例程序中，扮演 Context 角色的 SafeFrame 类实现了实际进行状态迁移的 changeState 方法。但是，实际调用该方法的却是扮演 ConcreteState 角色的 DayState 类和 NightState 类。\",\"也就是说，在示例程序中，我们将“状态迁移”看作是“依赖于状态的处理”。这种处理方式既有优点也有缺点。优点是这种处理方式将“什么时候从一个状态迁移到其他状态”的信息集中在了一个类中。也就是说，当我们想知道“什么时候会从 DayState 类变化为其他状态”时，只需要阅读 DayState 类的代码就可以了。缺点是“每个 ConcreteState 角色都需要知道其他 ConcreteState 角色”。\",\"例如，DayState 类的 doClock 方法就使用了 NightState 类。这样，如果以后发生需求变更，需要删除 NightState 类时，就必须要相应地修改 DayState 类的代码。将状态迁移交给 ConcreteState 角色后，每个 ConcreteState 角色都需要或多或少地知道其他角色。也就是说，将状态迁移交给 ConcreteState 角色后，各个类之间的依赖关系就会加强。我们也可以不使用示例程序中的做法，而是将所有的状态迁移交给扮演 Context 角色的 SafeFrame 类来负责。\",\"有时，使用这种解决方法可以提高 ConcreteState 角色的独立性，程序的整体结构也会更加清晰。不过这样做的话，Context 角色就必须要知道“所有的 ConcreteState 角色”。在这种情况下，我们可以使用 Mediator 模式（第 16 章）。当然，还可以不用 State 模式，而是用状态迁移表来设计程序。所谓状态迁移表是可以根据“输入和内部状态”得到“输出和下一个状态”的一览表（这超出了本书的范围，我们暂且不深入学习该方法）。当状态迁移遵循一定的规则时，使用状态迁移表非常有效。此外，当状态数过多时，可以用程序来生成代码而不是手写代码。\"]},\"349\":{\"h\":\"不会自相矛盾\",\"t\":[\"如果不使用 State 模式，我们需要使用多个变量的值的集合来表示系统的状态。这时，必须十分小心，注意不要让变量的值之间互相矛盾。而在 State 模式中，是用类来表示状态的。这样，我们就只需要一个表示系统状态的变量即可。在示例程序中，SafeFrame 类的 state 字段就是这个变量，它决定了系统的状态。因此，不会存在自相矛盾的状态。\"]},\"350\":{\"h\":\"易于增加新的状态\",\"t\":[\"在 State 模式中增加新的状态是非常简单的。以示例程序来说，编写一个 XXXState 类，让它实现 State 接口，然后实现一些所需的方法就可以了。当然，在修改状态迁移部分的代码时，还是需要仔细一点的。因为状态迁移的部分正是与其他 ConcreteState 角色相关联的部分。\",\"但是，在 State 模式中增加其他“依赖于状态的处理”是很困难的。这是因为我们需要在 State 接口中增加新的方法，并在所有的 ConcreteState 角色中都实现这个方法。虽说很困难，但是好在我们绝对不会忘记实现这个方法。假设我们现在在 State 接口中增加了一个 doYYY 方法，而忘记了在 DayState 类和 NightState 类中实现这个方法，那么编译器在编译代码时就会报错，告诉我们存在还没有实现的方法。\",\"如果不使用 State 模式，那么增加新的状态时会怎样呢？这里，如果不使用 State 模式，就必须用条件分支语句判断状态。这样就很难在编译代码时检测出“忘记实现方法”这种错误了（在运行时检测出问题并不难。我们只要事先在每个方法内部都加上一段“当检测到没有考虑到的状态时就报错”的代码即可）。\"]},\"351\":{\"h\":\"实例的多面性\",\"t\":[\"请注意 SafeFrame 类中的以下两条语句（代码清单 19.7）：\",\"SafeFrame 类的构造函数中的 buttonUse.addActionListener(this);\",\"actionPerformed 方法中的 state.doUse(this);\",\"这两条语句中都有 this。那么这个 this 到底是什么呢？当然，它们都是 SafeFrame 类的实例。由于在示例程序中只生成了一个 SafeFrame 的实例，因此这两个 this 其实是同一个对象。不过，在 addActionListener 方法中和 doUse 方法中，对 this 的使用方式是不一样的。\",\"向 addActionListener 方法传递 this 时，该实例会被当作“实现了 ActionListener 接口的类的实例”来使用。这是因为 addActionListener 方法的参数类型是 ActionListener 类型。\",\"在 addActionListener 方法中会用到的方法也都是在 ActionListener 接口中定义了的方法。至于这个参数是否是 SafeFrame 类的实例并不重要。向 doUse 方法传递 this 时，该实例会被当作“实现了 Context 接口的类的实例”来使用。这是因为 doUse 方法的参数类型是 Context 类型。在 doUse 方法中会用到的方法也都是在 Context 接口中定义了的方法（大家只要再回顾一下 DayState 类和 NightState 类的 doUse 方法就会明白了）。请大家一定要透彻理解此处的实例的多面性。\"]},\"352\":{\"h\":\"相关的设计模式\",\"t\":[\"Singleton 模式\",\"Flyweight 模式\"]},\"353\":{\"c\":[\"设计模式\"]},\"354\":{\"c\":[\"设计模式\",\"TypeScript\",\"管理状态\"]},\"355\":{\"h\":\"Strategy 模式\"},\"356\":{\"h\":\"使用此设计模式的理由\",\"t\":[\"在这个示例程序中，我们使用了策略模式（Strategy Pattern）来实现不同的猜拳策略。策略模式的主要优点包括：\",\"易于扩展：可以很容易地添加新的策略，而不需要修改现有的代码。\",\"提高代码的可读性和可维护性：将不同的算法封装在独立的类中，使得代码更加清晰。\",\"减少重复代码：通过使用策略模式，可以避免在多个地方重复相同的算法逻辑。\"]},\"357\":{\"h\":\"示例程序\",\"t\":[\"下面我们来看一段使用了 strategy 模式的示例程序。这段示例程序的功能是让电脑玩“猜拳\\\"游戏。\",\"我们考虑了两种猜拳的策略。第一种策略是“如果这局猜拳获胜，那么下一局也出一样的手势\\\" (WinningStrategy), 这是一种稍微有些笨的策略；另外一种策略是“根据上一局的手势从概率上计算出下一局的手势\\\"（ ProbStrategy ）。\",\"// hand.ts export enum HandValue { GUU = 0, CHO = 1, PAA = 2, } export class Hand { //NOTE - 使用了单例模式 private static readonly hand: Hand[] = [ new Hand(HandValue.GUU), new Hand(HandValue.CHO), new Hand(HandValue.PAA), ]; private static readonly names: string[] = ['石头', '剪刀', '布']; private handValue: HandValue; private constructor(handValue: HandValue) { this.handValue = handValue; } static getHand(handValue: HandValue): Hand { return this.hand[handValue]; } isStrongerThan(h: Hand): boolean { return this.fight(h) === 1; } isWeakerThan(h: Hand): boolean { return this.fight(h) === -1; } private fight(h: Hand): number { if (this === h) { return 0; } else if ((this.handValue + 1) % 3 === h.handValue) { return 1; } else { return -1; } } toString(): string { return Hand.names[this.handValue]; } } // main.ts import { Player } from \\\"./player\\\"; import { WinningStrategy } from \\\"./winningStrategy\\\"; import { ProbStrategy } from \\\"./probStrategy\\\"; const player1 = new Player(\\\"Taro\\\", new WinningStrategy()); const player2 = new Player(\\\"Hana\\\", new ProbStrategy()); for (let i = 0; i < 10000; i++) { const nextHand1 = player1.nextHand(); const nextHand2 = player2.nextHand(); if (nextHand1.isStrongerThan(nextHand2)) { console.log(`Winner: ${player1.toString()}`); player1.win(); player2.lose(); } else if (nextHand2.isStrongerThan(nextHand1)) { console.log(`Winner: ${player2.toString()}`); player1.lose(); player2.win(); } else { console.log(\\\"Even...\\\"); player1.even(); player2.even(); } } console.log(\\\"Total result:\\\"); console.log(player1.toString()); console.log(player2.toString()); // Output // player.ts import { Hand } from './hand'; import { Strategy } from './strategy'; export class Player { private name: string; private strategy: Strategy; private wincount = 0; private losecount = 0; private gamecount = 0; constructor(name: string, strategy: Strategy) { this.name = name; this.strategy = strategy; } nextHand(): Hand { return this.strategy.nextHand(); } win(): void { this.strategy.study(true); this.wincount++; this.gamecount++; } lose(): void { this.strategy.study(false); this.losecount++; this.gamecount++; } even(): void { this.gamecount++; } toString(): string { return `[${this.name}:${this.gamecount} games, ${this.wincount} win, ${this.losecount} lose]`; } } // probStrategy.ts import { Hand } from './hand'; import { Strategy } from './strategy'; export class ProbStrategy implements Strategy { private prevHandValue = 0; private currentHandValue = 0; private history: number[][] = [ [1, 1, 1], [1, 1, 1], [1, 1, 1], ]; constructor() {} nextHand(): Hand { const bet = Math.floor(Math.random() * this.getSum(this.currentHandValue)); let handvalue = 0; if (bet < this.history[this.currentHandValue][0]) { handvalue = 0; } else if (bet < this.history[this.currentHandValue][0] + this.history[this.currentHandValue][1]) { handvalue = 1; } else { handvalue = 2; } this.prevHandValue = this.currentHandValue; this.currentHandValue = handvalue; return Hand.getHand(handvalue); } private getSum(hv: number): number { let sum = 0; for (let i = 0; i < 3; i++) { sum += this.history[hv][i]; } return sum; } study(win: boolean): void { if (win) { this.history[this.prevHandValue][this.currentHandValue]++; } else { this.history[this.prevHandValue][(this.currentHandValue + 1) % 3]++; this.history[this.prevHandValue][(this.currentHandValue + 2) % 3]++; } } } // strategy.ts import { Hand } from './hand'; export interface Strategy { nextHand(): Hand; study(win: boolean): void; } // winningStrategy.ts import { Hand } from './hand'; import { Strategy } from './strategy'; export class WinningStrategy implements Strategy { private won = false; private prevHand: Hand; constructor() {} nextHand(): Hand { if (!this.won) { this.prevHand = Hand.getHand(Math.floor(Math.random() * 3)); } return this.prevHand; } study(win: boolean): void { this.won = win; } } \"]},\"358\":{\"h\":\"运行结果\",\"t\":[\"...(省略) Winner: [Hana:9991 games, 3567 win, 3049 lose] Winner: [Hana:9992 games, 3568 win, 3049 lose] Even... Winner: [Hana:9994 games, 3569 win, 3049 lose] Even... Even... Winner: [Hana:9997 games, 3570 win, 3049 lose] Winner: [Hana:9998 games, 3571 win, 3049 lose] Winner: [Hana:9999 games, 3572 win, 3049 lose] Total result: [Taro:10000 games, 3049 win, 3573 lose] [Hana:10000 games, 3573 win, 3049 lose] \"]},\"359\":{\"h\":\"拓展思路的要点\"},\"360\":{\"h\":\"为什么要特意编写 Strategy\",\"t\":[\"通常在编程时算法会被写在具体方法中。Strategy 模式却特意将算法与其他部分分离开来，只是定义了与算法相关的接口（API），然后在程序中以委托的方式来使用算法。\",\"这样看起来程序好像变复杂了，其实不然。例如，当我们想要通过改善算法来提高算法的处理速度时，如果使用了 Strategy 模式，就不必修改 Strategy 角色的接口（API）了，仅仅修改 ConcreteStrategy 角色即可。而且，使用委托这种弱关联关系可以很方便地整体替换算法。例如，如果想比较原来的算法与改进后的算法的处理速度有多大区别，简单地替换下算法即可进行测试。\",\"使用 Strategy 模式编写象棋程序时，可以方便地根据棋手的选择切换 AI 例程的水平。\"]},\"361\":{\"h\":\"程序运行中也可以切换策略\",\"t\":[\"如果使用 Strategy 模式，在程序运行中也可以切换角色。例如，在内存容量少的运行环境中可以使用 SlowButLessMemoryStrategy（速度慢但省内存的策略），而在内存容量多的运行环境中则可以使用 FastButMoreMemoryStrategy（速度快但耗内存的策略）。\",\"此外，还可以用某种算法去“验算”另外一种算法。例如，假设要在某个表格计算软件的开发版本中进行复杂的计算。这时，我们可以准备两种算法，即“高速但计算上可能有 Bug 的算法”和“低速但计算准确的算法”，然后让后者去验算前者的计算结果。\"]},\"362\":{\"h\":\"相关的设计模式\",\"t\":[\"Flyweight 模式\",\"Abstract Factory 模式\",\"State 模式\"]},\"363\":{\"c\":[\"设计模式\"]},\"364\":{\"c\":[\"设计模式\",\"TypeScript\",\"分开考虑\",\"整体的替换算法\"]},\"365\":{\"h\":\"Template Method 模式\",\"t\":[\"在父类中定义处理流程的框架，在子类中实现具体处理。Template Method 模式的主要目的是为了定义一个算法的骨架，而将一些步骤的具体实现延迟到子类中。通过这种方式，子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。\"]},\"366\":{\"h\":\"为什么要使用 Template Method 模式？\",\"t\":[\"代码复用：将通用的算法结构放在父类中，避免重复代码。\",\"灵活性：允许子类实现具体的步骤，增加了灵活性。\",\"控制反转：父类控制算法的执行流程，子类只需关注具体步骤的实现。\"]},\"367\":{\"h\":\"示例代码\",\"t\":[\"// abstractDisplay.ts export abstract class AbstractDisplay { protected abstract open(): void; protected abstract print(): void; protected abstract close(): void; display(): void { this.open(); for (let i = 0; i < 5; i++) { this.print(); } this.close(); } } // charDisplay.ts import { AbstractDisplay } from './abstractDisplay'; export class CharDisplay extends AbstractDisplay { private ch: string; constructor(ch: string) { super(); this.ch = ch; } open() { console.log('<<'); } print() { console.log(this.ch); } close() { console.log('>>'); } } // stringDisplay.ts import { AbstractDisplay } from './abstractDisplay'; export class StringDisplay extends AbstractDisplay { private str: string; private width: number; constructor(str: string) { super(); this.str = str; this.width = str.length; } open() { this.printLine(); } print() { console.log(`|${this.str}|`); } close() { this.printLine(); } private printLine() { let line = '+'; for (let i = 0; i < this.width; i++) { line += '-'; } line += '+'; console.log(line); } } // main.ts import { CharDisplay } from './charDisplay'; import { StringDisplay } from './stringDisplay'; const d1 = new CharDisplay('H'); const d2 = new StringDisplay('Hello, world.'); const d3 = new StringDisplay('你好，世界。'); d1.display(); d2.display(); d3.display(); \"]},\"368\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\template_method\\\\main.ts\\\" << H H H H H >> +-------------+ |Hello, world.| |Hello, world.| |Hello, world.| |Hello, world.| |Hello, world.| +-------------+ +------+ |你好，世界。| |你好，世界。| |你好，世界。| |你好，世界。| |你好，世界。| +------+ \"]},\"369\":{\"h\":\"相关设计模式\",\"t\":[\"Factory Method 模式\",\"Strategy 模式\"]},\"370\":{\"h\":\"延申: 类的层次与抽象类\",\"t\":[\"我们在理解类的层次时，通常是站在子类的角度进行思考的。也就是说，很容易着眼于以下几点。\",\"在子类中可以使用父类中定义的方法\",\"可以通过在子类中增加方法以实现新的功能\",\"在子类中重写父类的方法可以改变程序的行为\",\"现在，让我们稍微改变一下立场，站在父类的角度进行思考。在父类中，我们声明了抽象方法，而将该方法的实现交给了子类。换言之，就程序而言，声明抽象方法是希望达到以下目的。\",\"期待子类去实现抽象方法\",\"要求子类去实现抽象方法\",\"也就是说，子类具有实现在父类中所声明的抽象方法的责任。因此，这种责任被称为“子类责任\\\"（ subclass responsibility ）。\"]},\"371\":{\"c\":[\"设计模式\"]},\"372\":{\"c\":[\"设计模式\",\"typescript\",\"交给子类\"]},\"373\":{\"h\":\"Visitor 模式\",\"t\":[\"在 Visitor 模式中，数据结构与处理被分离开来。我们编写一个表示“访问者”的类来访问数据结构中的元素，并把对各元素的处理交给访问者类。这样，当需要增加新的处理时，我们只需要编写新的访问者，然后让数据结构可以接受访问者的访问即可。\"]},\"374\":{\"h\":\"为什么使用 Visitor 模式？\",\"t\":[\"分离关注点：将数据结构与操作分离，使得代码更清晰、更易维护。\",\"增加新操作更容易：只需添加新的访问者类，而不需要修改现有的数据结构。\",\"符合开闭原则：对扩展开放，对修改关闭。\"]},\"375\":{\"h\":\"示例代码\",\"t\":[\"// directory.ts import { Entry } from './entry'; import { Visitor } from './visitor'; export class Directory extends Entry { private dir: Entry[] = []; constructor(private name: string) { super(); } getName() { return this.name; } getSize() { let size = 0; this.dir.forEach((entry) => { size += entry.getSize(); }); return size; } add(entry: Entry) { this.dir.push(entry); return this; } iterator() { return this.dir; } accept(visitor:Visitor) { visitor.visit(this); } } // element.ts import { Visitor } from './visitor'; export interface Element { accept(visitor: Visitor): void; } // entry.ts import { Element } from \\\"./element\\\"; import { Visitor } from \\\"./visitor\\\"; export abstract class Entry implements Element { abstract getName(): string; abstract getSize(): number; add(entry: Entry): Entry { throw new Error(\\\"Entry.add not implemented\\\"); } iterator(): Entry[] { throw new Error(\\\"Entry.iterator not implemented\\\"); } toString(): string { return `${this.getName()} (${this.getSize()})`; } abstract accept(visitor: Visitor): void; } // file.ts import { Visitor } from './visitor'; import { Entry } from './entry'; export class File extends Entry { constructor(private name: string, private size: number) { super(); } getName(): string { return this.name; } getSize(): number { return this.size; } accept(visitor: Visitor): void { visitor.visit(this); } } // listVisitor.ts import { Visitor } from \\\"./visitor\\\"; import { File } from \\\"./file\\\"; import { Directory } from \\\"./directory\\\"; import { Entry } from \\\"./entry\\\"; export class ListVisitor extends Visitor { private currentdir = \\\"\\\"; visit(entry:Entry) { if (entry instanceof File) { console.log(`${this.currentdir}/${entry}`); } else if (entry instanceof Directory) { console.log(`${this.currentdir}/${entry}`); const savedir = this.currentdir; this.currentdir = `${this.currentdir}/${entry.getName()}`; const it: Entry[] = entry.iterator(); for (let i = 0; i < it.length; i++) { it[i].accept(this); } this.currentdir = savedir; } } } // main.ts import { Directory } from \\\"./directory\\\"; import { File } from \\\"./file\\\"; import { ListVisitor } from \\\"./listVisitor\\\"; console.log(\\\"Making root entries...\\\"); let rootdir = new Directory(\\\"root\\\"); let bindir = new Directory(\\\"bin\\\"); let tmpdir = new Directory(\\\"tmp\\\"); let usrdir = new Directory(\\\"usr\\\"); rootdir.add(bindir); rootdir.add(tmpdir); rootdir.add(usrdir); bindir.add(new File(\\\"vi\\\", 10000)); bindir.add(new File(\\\"latex\\\", 20000)); rootdir.accept(new ListVisitor()); console.log(\\\"Making user entries...\\\"); let yuki = new Directory(\\\"yuki\\\"); let hanako = new Directory(\\\"hanako\\\"); let tomura = new Directory(\\\"tomura\\\"); usrdir.add(yuki); usrdir.add(hanako); usrdir.add(tomura); yuki.add(new File(\\\"diary.html\\\", 100)); yuki.add(new File(\\\"Composite.java\\\", 200)); hanako.add(new File(\\\"memo.tex\\\", 300)); tomura.add(new File(\\\"game.doc\\\", 400)); tomura.add(new File(\\\"junk.mail\\\", 500)); rootdir.accept(new ListVisitor()); // visitor.ts import { Entry } from './entry'; export abstract class Visitor { abstract visit(file:Entry); } \"]},\"376\":{\"h\":\"运行结果\",\"t\":[\"PS design_patern> ts-node \\\"d:\\\\code\\\\design_patern\\\\src\\\\visitor\\\\main.ts\\\" Making root entries... /root (30000) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (0) Making user entries... /root (31500) /root/bin (30000) /root/bin/vi (10000) /root/bin/latex (20000) /root/tmp (0) /root/usr (1500) /root/usr/yuki (300) /root/usr/yuki/diary.html (100) /root/usr/yuki/Composite.java (200) /root/usr/hanako (300) /root/usr/hanako/memo.tex (300) /root/usr/tomura (900) /root/usr/tomura/game.doc (400) /root/usr/tomura/junk.mail (500) \"]},\"377\":{\"h\":\"拓展思路的要点\"},\"378\":{\"h\":\"双重分发\",\"t\":[\"我们来整理一下 Visitor 模式中的方法调用关系。accept（接收）方法的调用方式如下：element.accept(visitor)；而 visit（访问）方法的调用方式如下：visitor.visit(element)。对比这两个方法会发现，它们呈现出一种相反的关系。element 接收 visitor，而 visitor 又访问 element。在 Visitor 模式中，ConcreteElement 和 ConcreteVisitor 这两个角色共同决定了实际进行的处理。这种消息分发的方式一般被称为双重分发（double dispatch）。\"]},\"379\":{\"h\":\"为什么要这么复杂\",\"t\":[\"Visitor 模式的目的是将处理逻辑从数据结构中分离出来。数据结构很重要，它能够将元素集合及其关联关系组织在一起。但是，需要注意的是，保存数据结构与基于数据结构进行处理是两种不同的概念。在示例程序中，我们创建了 ListVisitor 类作为显示文件夹内容的 ConcreteVisitor 角色。此外，在练习题中，我们还要编写进行其他处理的 ConcreteVisitor 角色。通常，ConcreteVisitor 角色的开发可以独立于 File 类和 Directory 类。也就是说，Visitor 模式提高了 File 类和 Directory 类作为组件的独立性。如果将处理逻辑的方法定义在 File 类和 Directory 类中，那么每次要扩展功能，增加新的“处理”时，就不得不去修改这些类。\"]},\"380\":{\"h\":\"开闭原则——对扩展开放，对修改关闭\",\"t\":[\"在设计类时，若无特殊理由，必须要考虑到将来可能会扩展类。绝不能毫无理由地禁止扩展类。这就是“对扩展是开放的”的意思。但是，如果在每次扩展类时都需要修改现有的类就太麻烦了。所以我们需要在不修改现有类的前提下能够扩展类，这就是“对修改是关闭的”的意思。我们提倡扩展，但如果需要修改现有代码，那就不行了。在不修改现有代码的前提下进行扩展，这就是开闭原则。至此，大家已经学习了多种设计模式。那么在看到这条设计原则后，大家应该都会点头表示赞同吧。功能需求总是在不断变化，而且这些功能需求大都是“希望扩展某个功能”。因此，如果不能比较容易地扩展类，开发过程将会变得非常困难。另一方面，如果要修改已经编写和测试完成的类，又可能会导致软件产品的质量降低。对扩展开放、对修改关闭的类具有高可复用性，可作为组件复用。设计模式和面向对象的目的正是为我们提供一种结构，可以帮助我们设计出这样的类。\"]},\"381\":{\"h\":\"易于增加 ConcreteVisitor 角色\",\"t\":[\"使用 Visitor 模式可以很容易地增加 ConcreteVisitor 角色。因为具体的处理被交给 ConcreteVisitor 角色负责，因此完全不用修改 ConcreteElement 角色。\"]},\"382\":{\"h\":\"难以增加 ConcreteElement 角色\",\"t\":[\"尽管使用 Visitor 模式可以很容易地增加 ConcreteVisitor 角色，但它却难以应对 ConcreteElement 角色的增加。例如，假设现在我们要在示例程序中增加一个 Device 类，它是 File 类和 Directory 类的兄弟类。这时，我们不得不在 Visitor 类中声明一个 visit(Device) 方法，并在所有的 Visitor 类的子类中都实现这个方法。\"]},\"383\":{\"h\":\"Visitor 工作所需的条件\",\"t\":[\"在 Visitor 模式中，对数据结构中的元素进行处理的任务被分离出来，交给 Visitor 类负责。这样，就实现了数据结构与处理的分离。这个主题，我们在本章的学习过程中已经提到过很多次了。但是要达到这个目的是有条件的，那就是 Element 角色必须向 Visitor 角色公开足够多的信息。例如，在示例程序中，visit(Directory) 方法需要调用每个目录条目的 accept 方法。为此，Directory 类必须提供用于获取每个目录条目的 iterator 方法。只有当访问者从数据结构中获取了足够多的信息后才能工作。如果无法获取到这些信息，它就无法工作。这样做的缺点是，如果公开了不应当被公开的信息，将来对数据结构的改良就会变得非常困难。\"]},\"384\":{\"h\":\"相关的设计模式\",\"t\":[\"Iterator 模式\",\"Composite 模式\",\"Interpreter 模式\"]},\"385\":{\"c\":[\"设计模式\"]},\"386\":{\"c\":[\"设计模式\",\"TypeScript\",\"访问数据结构并处理数据\"]},\"387\":{\"h\":\"手把手教你构建 C 语言编译器（0）- 前言\",\"t\":[\"本文转载自 手把手教你构建 C 语言编译器（0）- 前言，原作者 三点水，原文链接：原文链接，如有侵权，请联系删除。\",\"转载工具:devtool、helloworld\",\"“手把手教你构建 C 语言编译器” 这一系列教程将带你从头编写一个 C 语言的编译器。希望通过这个系列，我们能对编译器的构建有一定的了解，同时，我们也将构建出一个能用的 C 语言编译器，尽管有许多语法并不支持。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\",\"在开始进入正题之前，本篇是一些闲聊，谈谈这个系列的初衷。如果你急切地想进入正篇，请跳过本章。\"]},\"388\":{\"h\":\"为什么要学编译原理\",\"t\":[\"如果要我说计算机专业最重要的三门课，我会说是《数据结构》、《算法》和《编译原理》。在我看来，能不能理解“递归”像是程序员的第一道门槛，而会不会写编译器则是第二道。\",\"（当然，并不是说是没写过编译器就不是好程序员，只能说它是一个相当大的挑战吧）\",\"以前人们会说，学习了编译原理，你就能写出更加高效的代码，但随着计算机性能的提升，代码是否高效显得就不那么重要了。那么为什么要学习编译原理呢？\",\"原因只有一个：装B。\",\"好吧，也许现在还想学习编译原理的人只可能是因为兴趣了。一方面想了解它的工作原理；另一方面希望挑战一下自己，看看自己能走多远。\"]},\"389\":{\"h\":\"理论很复杂，实现也很复杂？\",\"t\":[\"我对编译器一直心存敬佩。所以当学校开《编译原理》的课程后，我是抱着满腔热情去上课的，但是两节课后我就放弃了。原因是太复杂了，听不懂。\",\"一般编译原理的课程会说一些：\",\"如何表示语法（BNF什么的）\",\"词法分析，用什么有穷自动机和无穷自动机\",\"语法分析，递归下降法，什么 LL(k)，LALR 分析。\",\"中间代码的表示\",\"代码的生成\",\"代码优化\",\"我相信绝大多数（98％）的学生顶多学到语法分析就结束了。并且最重要的是，学了这么多也没用！依旧帮助不了我们学习编译器！这其中最主要的原因是《编译原理》试图教会我们的是如何构造“编译器生成器”，即构造一个工具，根据文法来生成编译器（如 lex/yacc）等等。\",\"这些理论试图教会我们如何用通用的方法来自动解决问题，它们有很强的实际意义，只是对于一般的学生或程序员来说，它们过于强大，内容过于复杂。如果你尝试阅读 lex/yacc （或 flex/bison）的代码，就会发现太可怕了。\",\"然而如果你能跟我一样，真正来实现一个简单的编译器，那么你会发现，比起可怕的《编译原理》，这点复杂度还是不算什么的（因为好多理论根本用不上）。\"]},\"390\":{\"h\":\"项目的初衷\",\"t\":[\"有一次在 Github 上看到了一个项目（当时很火的），名叫 c4，号称用 4 个函数来实现了一个小的 C 语言编译器。它最让我震惊的是能够自举，即能自己编译自己。并且它用很少的代码就完成了一个功能相当完善的 C 语言编译器。\",\"一般的编译器相关的教程要么就十分简单（如实现四则运算），要么就是借助了自动生成的工具（如 flex/bison）。而 c4 的代码完全是手工实现的，不用外部工具。可惜的是它的代码初衷是代码最小化，所以写得很乱，很难懂。所以本项目的主要目的：\",\"实现一个功能完善的 C 语言编译器\",\"通过教程来说明这个过程。\",\"c4 大致500+行。重写的代码历时一周，总共代码加注释1400行。项目地址: Write a C Interpreter。\",\"声明：本项目中的代码逻辑绝大多数取自 c4 ，但确为自己重写。\"]},\"391\":{\"h\":\"做好心理准备\",\"t\":[\"在写编译器的时候会遇到两个主要问题：\",\"繁琐，会有许多相似的代码，写起来很无聊。\",\"难以调试，一方面没有很好的测试用例，另一方面需要对照生成的代码来调试（遇到的时候就知道了）。\",\"所以我希望你有足够的耐心和时间来学习，相信当你真正完成的时候会像我一样，十分有成就感。\",\"PS. 第一篇完全没有正题相关的内容也是希望你能有所心理准备再开始学习。\"]},\"392\":{\"h\":\"参考资料\",\"t\":[\"最后想介绍几个资料：\",\"Let’s Build a Compiler 很好的初学者教程，英文的。\",\"Lemon Parser Generator，一个语法分析器生成器，对照《编译原理》观看效果更佳。\",\"由于本人水平一般，文章、代码难免会有错误，敬请批评指正！\",\"最后祝你学得愉快。\",\"这篇博客并没有使用诸如 flex、bison 等工具来编写 token 和文法的定义，因而灵活性较差。相反，它通过定义自己的指令集并支持该指令集的虚拟机来模拟编译的部分过程，具有一定的参考价值。不过，我仍然认为通过定义 token 和文法并编写解析算法（如 regex、LL(k) 等）可能会更具普适性。\",\"相关信息\",\"不过据说c、cpp、java这些成熟的语言都是手动实现的？还没仔细了解过。\\nTODO\"]},\"393\":{\"c\":[\"编译原理\"]},\"394\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"395\":{\"h\":\"手把手教你构建 C 语言编译器（1）- 设计\",\"t\":[\"本文转自 https://lotabout.me/2015/write-a-C-interpreter-1/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 编译器的构建流程\",\"2. 编译器框架\",\"这是“手把手教你构建 C 语言编译器”系列的第二篇，我们要从整体上讲解如何设计我们的 C 语言编译器。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\",\"首先要说明的是，虽然标题是编译器，但实际上我们构建的是 C 语言的解释器，这意味着我们可以像运行脚本一样去运行 C 语言的源代码文件。这么做的理由有两点：\",\"解释器与编译器仅在代码生成阶段有区别，而其它方面如词法分析、语法分析是一样的。\",\"解释器需要我们实现自己的虚拟机与指令集，而这部分能帮助我们了解计算机的工作原理。\"]},\"396\":{\"h\":\"编译器的构建流程\",\"t\":[\"一般而言，编译器的编写分为 3 个步骤：\",\"词法分析器，用于将字符串转化成内部的表示结构。\",\"语法分析器，将词法分析得到的标记流（token）生成一棵语法树。\",\"目标代码的生成，将语法树转化成目标代码。\",\"已经有许多工具能帮助我们处理阶段1和2，如 flex 用于词法分析，bison 用于语法分析。只是它们的功能都过于强大，屏蔽了许多实现上的细节，对于学习构建编译器帮助不大。所以我们要完全手写这些功能。\",\"所以我们会依照以下步骤来构建我们的编译器：\",\"构建我们自己的虚拟机以及指令集。这后生成的目标代码便是我们的指令集。\",\"构建我们的词法分析器\",\"构建语法分析器\"]},\"397\":{\"h\":\"编译器框架\",\"t\":[\"我们的编译器主要包括 4 个函数：\",\"next() 用于词法分析，获取下一个标记，它将自动忽略空白字符。\",\"program() 语法分析的入口，分析整个 C 语言程序。\",\"expression(level) 用于解析一个表达式。\",\"eval() 虚拟机的入口，用于解释目标代码。\",\"这里有一个单独用于解析“表达式”的函数 expression 是因为表达式在语法分析中相对独立并且比较复杂，所以我们将它单独作为一个模块（函数）。下面是相应的源代码：\",\"#include <stdio.h>#include <stdlib.h>#include <memory.h>#include <string.h>int token; // current tokenchar *src, *old_src; // pointer to source code string;int poolsize; // default size of text/data/stackint line; // line numbervoid next() { token = *src++; return;}void expression(int level) { // do nothing}void program() { next(); // get next token while (token > 0) { printf(\\\"token is: %c\\\\n\\\", token); next(); }}int eval() { // do nothing yet return 0;}int main(int argc, char **argv){ int i, fd; argc--; argv++; poolsize = 256 * 1024; // arbitrary size line = 1; if ((fd = open(*argv, 0)) < 0) { printf(\\\"could not open(%s)\\\\n\\\", *argv); return -1; } if (!(src = old_src = malloc(poolsize))) { printf(\\\"could not malloc(%d) for source area\\\\n\\\", poolsize); return -1; } // read the source file if ((i = read(fd, src, poolsize-1)) <= 0) { printf(\\\"read() returned %d\\\\n\\\", i); return -1; } src[i] = 0; // add EOF character close(fd); program(); return eval();}\",\"上面的代码看上去挺复杂，但其实内容不多。它的流程为：读取一个文件（内容为 C 语言代码），逐个读取文件中的字符，并输出。这里需要的是注意每个函数的作用，后面的文章中，我们将逐个填充每个函数的功能，最终构建起我们的编译器。\",\"本节的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-0 https://github.com/lotabout/write-a-C-interpreter\",\"这样我们就有了一个最简单的编译器：什么都不干的编译器，下一章中，我们将实现其中的eval函数，即我们自己的虚拟机。\"]},\"398\":{\"h\":\"转载声明\",\"t\":[\"title: \\\"手把手教你构建 C 语言编译器（2）——虚拟机\\\" category:\",\"编译原理 tag:\",\"c\",\"编译器\",\"解释器\",\"本文转自 https://lotabout.me/2015/write-a-C-interpreter-2/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 计算机的内部工作原理\",\"1.1. 内存\",\"1.2. 寄存器\",\"2. 指令集\",\"2.1. MOV\",\"2.2. PUSH\",\"2.3. JMP\",\"2.4. JZ/JNZ\",\"2.5. 子函数调用\",\"2.6. ENT\",\"2.7. ADJ\",\"2.8. LEV\",\"2.9. LEA\",\"2.10. 运算符指令\",\"2.11. 内置函数\",\"3. 测试\",\"4. 小结\",\"这是“手把手教你构建 C 语言编译器”系列的第三篇，本章我们要构建一台虚拟的电脑，设计我们自己的指令集，运行我们的指令集，说得通俗一点就是自己实现一套汇编语言。它们将作为我们的编译器最终输出的目标代码。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"399\":{\"h\":\"计算机的内部工作原理\",\"t\":[\"计算机中有三个基本部件需要我们关注：CPU、寄存器及内存。代码（汇编指令）以二进制的形式保存在内存中；CPU 从中一条条地加载指令执行；程序运行的状态保存在寄存器中。\"]},\"400\":{\"h\":\"内存\",\"t\":[\"内存用于存储数据，这里的数据可以是代码，也可以是其它的数据。现代操作系统在操作内存时，并不是直接处理”物理内存“，而是操作”虚拟内存“。虚拟内存可以理解为一种映射，它的作用是屏蔽了物理的细节。例如 32 位的机器中，我们可以使用的内存地址为 2^32 = 4G，而电脑上的实际内存可能只有 256 M。操作系统将我们使用的虚拟地址映射到了到实际的内存上。\",\"当然，我们这里并不需要了解太多，但需要了解的是：进程的内存会被分成几个段：\",\"代码段（text）用于存放代码（指令）。\",\"数据段（data）用于存放初始化了的数据，如int i = 10;，就需要存放到数据段中。\",\"未初始化数据段（bss）用于存放未初始化的数据，如 int i[1000];，因为不关心其中的真正数值，所以单独存放可以节省空间，减少程序的体积。\",\"栈（stack）用于处理函数调用相关的数据，如调用帧（calling frame）或是函数的局部变量等。\",\"堆（heap）用于为程序动态分配内存。\",\"它们在内存中的位置类似于下图：\",\"+------------------+| stack | | high address| ... v || || || || || ... ^ || heap | |+------------------+| bss segment |+------------------+| data segment |+------------------+| text segment | low address+------------------+\",\"我们的虚拟机并不打算模拟完整的计算机，因此简单起见，我们只关心三个内容：代码段、数据段以及栈。其中的数据段我们只用来存放字符串，因为我们的编译器并不支持初始化变量，因此我们也不需要未初始化数据段。\",\"当用户的程序需要分配内存时，理论上我们的虚拟机需要维护一个堆用于内存分配，但实际实现上较为复杂且与编译无关，故我们引入一个指令MSET，使我们能直接使用编译器（解释器）中的内存。\",\"综上，我们需要首先在全局添加如下代码：\",\"int *text, // text segment *old_text, // for dump text segment *stack; // stackchar *data; // data segment\",\"注意这里的类型，虽然是int型，但理解起来应该作为无符号的整型，因为我们会在代码段（text）中存放如指针/内存地址的数据，它们就是无符号的。其中数据段（data）由于只存放字符串，所以是 char * 型的。\",\"接着，在main函数中加入初始化代码，真正为其分配内存：\",\"int main() { close(fd); ... // allocate memory for virtual machine if (!(text = old_text = malloc(poolsize))) { printf(\\\"could not malloc(%d) for text area\\\\n\\\", poolsize); return -1; } if (!(data = malloc(poolsize))) { printf(\\\"could not malloc(%d) for data area\\\\n\\\", poolsize); return -1; } if (!(stack = malloc(poolsize))) { printf(\\\"could not malloc(%d) for stack area\\\\n\\\", poolsize); return -1; } memset(text, 0, poolsize); memset(data, 0, poolsize); memset(stack, 0, poolsize); ... program();}\"]},\"401\":{\"h\":\"寄存器\",\"t\":[\"计算机中的寄存器用于存放计算机的运行状态，真正的计算机中有许多不同种类的寄存器，但我们的虚拟机中只使用 4 个寄存器，分别如下：\",\"PC 程序计数器，它存放的是一个内存地址，该地址中存放着 下一条 要执行的计算机指令。\",\"SP 指针寄存器，永远指向当前的栈顶。注意的是由于栈是位于高地址并向低地址增长的，所以入栈时 SP 的值减小。\",\"BP 基址指针。也是用于指向栈的某些位置，在调用函数时会使用到它。\",\"AX 通用寄存器，我们的虚拟机中，它用于存放一条指令执行后的结果。\",\"要理解这些寄存器的作用，需要去理解程序运行中会有哪些状态。而这些寄存器只是用于保存这些状态的。\",\"在全局中加入如下定义：\",\"int *pc, *bp, *sp, ax, cycle; // virtual machine registers\",\"在 main 函数中加入初始化代码，注意的是PC在初始应指向目标代码中的main函数，但我们还没有写任何编译相关的代码，因此先不处理。代码如下：\",\"memset(stack, 0, poolsize);...bp = sp = (int *)((int)stack + poolsize);ax = 0;...program();\",\"与 CPU 相关的是指令集，我们将专门作为一个小节。\"]},\"402\":{\"h\":\"指令集\",\"t\":[\"指令集是 CPU 能识别的命令的集合，也可以说是 CPU 能理解的语言。这里我们要为我们的虚拟机构建自己的指令集。它们基于 x86 的指令集，但更为简单。\",\"首先在全局变量中加入一个枚举类型，这是我们要支持的全部指令：\",\"// instructionsenum { LEA ,IMM ,JMP ,CALL,JZ ,JNZ ,ENT ,ADJ ,LEV ,LI ,LC ,SI ,SC ,PUSH, OR ,XOR ,AND ,EQ ,NE ,LT ,GT ,LE ,GE ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD , OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT };\",\"这些指令的顺序安排是有意的，稍后你会看到，带有参数的指令在前，没有参数的指令在后。这种顺序的唯一作用就是在打印调试信息时更加方便。但我们讲解的顺序并不依据它。\"]},\"403\":{\"h\":\"MOV\",\"t\":[\"MOV 是所有指令中最基础的一个，它用于将数据放进寄存器或内存地址，有点类似于 C 语言中的赋值语句。x86 的 MOV 指令有两个参数，分别是源地址和目标地址：MOV dest, source （Intel 风格），表示将 source 的内容放在 dest 中，它们可以是一个数、寄存器或是一个内存地址。\",\"一方面，我们的虚拟机只有一个寄存器，另一方面，识别这些参数的类型（是数据还是地址）是比较困难的，因此我们将 MOV 指令拆分成 5 个指令，这些指令只接受一个参数，如下：\",\"IMM <num> 将 <num> 放入寄存器 ax 中。\",\"LC 将对应地址中的字符载入 ax 中，要求 ax 中存放地址。\",\"LI 将对应地址中的整数载入 ax 中，要求 ax 中存放地址。\",\"SC 将 ax 中的数据作为字符存放入地址中，要求栈顶存放地址。\",\"SI 将 ax 中的数据作为整数存放入地址中，要求栈顶存放地址。\",\"你可能会觉得将一个指令变成了许多指令，整个系统就变得复杂了，但实际情况并非如此。首先是 x86 的 MOV 指令其实有许多变种，根据类型的不同有 MOVB, MOVW 等指令，我们这里的 LC/SC 和 LI/SI 就是对应字符型和整型的存取操作。\",\"但最为重要的是，通过将 MOV 指令拆分成这些指令，只有 IMM 需要有参数，且不需要判断类型，所以大大简化了实现的难度。\",\"在 eval() 函数中加入下列代码：\",\"void eval() { int op, *tmp; while (1) { if (op == IMM) {ax = *pc++;} // load immediate value to ax else if (op == LC) {ax = *(char *)ax;} // load character to ax, address in ax else if (op == LI) {ax = *(int *)ax;} // load integer to ax, address in ax else if (op == SC) {ax = *(char *)*sp++ = ax;} // save character to address, value in ax, address on stack else if (op == SI) {*(int *)*sp++ = ax;} // save integer to address, value in ax, address on stack } ... return 0;}\",\"其中的 *sp++ 的作用是退栈，相当于 POP 操作。\",\"这里要解释的一点是，为什么 SI/SC 指令中，地址存放在栈中，而 LI/LC 中，地址存放在 ax 中？原因是默认计算的结果是存放在 ax 中的，而地址通常是需要通过计算获得，所以执行 LI/LC 时直接从 ax 取值会更高效。另一点是我们的 PUSH 指令只能将 ax 的值放到栈上，而不能以值作为参数，详细见下文。\"]},\"404\":{\"h\":\"PUSH\",\"t\":[\"在 x86 中，PUSH 的作用是将值或寄存器，而在我们的虚拟机中，它的作用是将 ax 的值放入栈中。这样做的主要原因是为了简化虚拟机的实现，并且我们也只有一个寄存器 ax 。代码如下：\",\"else if (op == PUSH) {*--sp = ax;} // push the value of ax onto the stack\"]},\"405\":{\"h\":\"JMP\",\"t\":[\"JMP <addr> 是跳转指令，无条件地将当前的 PC 寄存器设置为指定的 <addr>，实现如下：\",\"else if (op == JMP) {pc = (int *)*pc;} // jump to the address\",\"需要注意的是，pc 寄存器指向的是 下一条 指令。所以此时它存放的是 JMP 指令的参数，即 <addr> 的值。\"]},\"406\":{\"h\":\"JZ/JNZ\",\"t\":[\"为了实现 if 语句，我们需要条件判断相关的指令。这里我们只实现两个最简单的条件判断，即结果（ax）为零或不为零情况下的跳转。\",\"实现如下：\",\"else if (op == JZ) {pc = ax ? pc + 1 : (int *)*pc;} // jump if ax is zeroelse if (op == JNZ) {pc = ax ? (int *)*pc : pc + 1;} // jump if ax is not zero\"]},\"407\":{\"h\":\"子函数调用\",\"t\":[\"这是汇编中最难理解的部分，所以合在一起说，要引入的命令有 CALL, ENT, ADJ 及 LEV。\",\"首先我们介绍 CALL <addr> 与 RET 指令，CALL 的作用是跳转到地址为 <addr> 的子函数，RET 则用于从子函数中返回。\",\"为什么不能直接使用 JMP 指令呢？原因是当我们从子函数中返回时，程序需要回到跳转之前的地方继续运行，这就需要事先将这个位置信息存储起来。反过来，子函数要返回时，就需要获取并恢复这个信息。因此实际中我们将 PC 保存在栈中。如下：\",\"else if (op == CALL) {*--sp = (int)(pc+1); pc = (int *)*pc;} // call subroutine//else if (op == RET) {pc = (int *)*sp++;} // return from subroutine;\",\"这里我们把 RET 相关的内容注释了，是因为之后我们将用 LEV 指令来代替它。\",\"在实际调用函数时，不仅要考虑函数的地址，还要考虑如何传递参数和如何返回结果。这里我们约定，如果子函数有返回结果，那么就在返回时保存在 ax 中，它可以是一个值，也可以是一个地址。那么参数的传递呢？\",\"各种编程语言关于如何调用子函数有不同的约定，例如 C 语言的调用标准是：\",\"由调用者将参数入栈。\",\"调用结束时，由调用者将参数出栈。\",\"参数逆序入栈。\",\"事先声明一下，我们的编译器参数是顺序入栈的，下面的例子（C 语言调用标准）取自 维基百科：\",\"int callee(int, int, int);int caller(void){ int i, ret; ret = callee(1, 2, 3); ret += 5; return ret;}\",\"会生成如下的 x86 汇编代码：\",\"caller: ; make new call frame push ebp mov ebp, esp sub 1, esp ; save stack for variable: i ; push call arguments push 3 push 2 push 1 ; call subroutine 'callee' call callee ; remove arguments from frame add esp, 12 ; use subroutine result add eax, 5 ; restore old call frame mov esp, ebp pop ebp ; return ret\",\"上面这段代码在我们自己的虚拟机里会有几个问题：\",\"push ebp，但我们的 PUSH 指令并无法指定寄存器。\",\"mov ebp, esp，我们的 MOV 指令同样功能不足。\",\"add esp, 12，也是一样的问题（尽管我们还没定义）。\",\"也就是说由于我们的指令过于简单（如只能操作ax寄存器），所以用上面提到的指令，我们连函数调用都无法实现。而我们又不希望扩充现有指令的功能，因为这样实现起来就会变得复杂，因此我们采用的方法是增加指令集。毕竟我们不是真正的计算机，增加指令会消耗许多资源（钱）。\"]},\"408\":{\"h\":\"ENT\",\"t\":[\"ENT <size> 指的是 enter，用于实现 ‘make new call frame’ 的功能，即保存当前的栈指针，同时在栈上保留一定的空间，用以存放局部变量。对应的汇编代码为：\",\"; make new call framepush ebpmov ebp, esp sub 1, esp ; save stack for variable: i\",\"实现如下：\",\"else if (op == ENT) {*--sp = (int)bp; bp = sp; sp = sp - *pc++;} // make new stack frame\"]},\"409\":{\"h\":\"ADJ\",\"t\":[\"ADJ <size> 用于实现 ‘remove arguments from frame’。在将调用子函数时压入栈中的数据清除，本质上是因为我们的 ADD 指令功能有限。对应的汇编代码为：\",\"; remove arguments from frameadd esp, 12\",\"实现如下：\",\"else if (op == ADJ) {sp = sp + *pc++;} // add esp, <size>\"]},\"410\":{\"h\":\"LEV\",\"t\":[\"本质上这个指令并不是必需的，只是我们的指令集中并没有 POP 指令。并且三条指令写来比较麻烦且浪费空间，所以用一个指令代替。对应的汇编指令为：\",\"; restore old call frame mov esp, ebppop ebp; returnret\",\"具体的实现如下：\",\"else if (op == LEV) {sp = bp; bp = (int *)*sp++; pc = (int *)*sp++;} // restore call frame and PC\",\"注意的是，LEV 已经把 RET 的功能包含了，所以我们不再需要 RET 指令。\"]},\"411\":{\"h\":\"LEA\",\"t\":[\"上面的一些指令解决了调用帧的问题，但还有一个问题是如何在子函数中获得传入的参数。这里我们首先要了解的是当参数调用时，栈中的调用帧是什么样的。我们依旧用上面的例子（只是现在用“顺序”调用参数）：\",\"sub_function(arg1, arg2, arg3);| .... | high address+---------------+| arg: 1 | new_bp + 4+---------------+| arg: 2 | new_bp + 3+---------------+| arg: 3 | new_bp + 2+---------------+|return address | new_bp + 1+---------------+| old BP | <- new BP+---------------+| local var 1 | new_bp - 1+---------------+| local var 2 | new_bp - 2+---------------+| .... | low address\",\"所以为了获取第一个参数，我们需要得到 new_bp + 4，但就如上面的说，我们的 ADD 指令无法操作除 ax 外的寄存器，所以我们提供了一个新的指令：LEA <offset>\",\"实现如下：\",\"else if (op == LEA) {ax = (int)(bp + *pc++);} // load address for arguments.\",\"以上就是我们为了实现函数调用需要的指令了。\"]},\"412\":{\"h\":\"运算符指令\",\"t\":[\"我们为 C 语言中支持的运算符都提供对应汇编指令。每个运算符都是二元的，即有两个参数，第一个参数放在栈顶，第二个参数放在 ax 中。这个顺序要特别注意。因为像 -，/ 之类的运算符是与参数顺序有关的。计算后会将栈顶的参数退栈，结果存放在寄存器 ax 中。因此计算结束后，两个参数都无法取得了（汇编的意义上，存在内存地址上就另当别论）。\",\"实现如下：\",\"else if (op == OR) ax = *sp++ | ax;else if (op == XOR) ax = *sp++ ^ ax;else if (op == AND) ax = *sp++ & ax;else if (op == EQ) ax = *sp++ == ax;else if (op == NE) ax = *sp++ != ax;else if (op == LT) ax = *sp++ < ax;else if (op == LE) ax = *sp++ <= ax;else if (op == GT) ax = *sp++ > ax;else if (op == GE) ax = *sp++ >= ax;else if (op == SHL) ax = *sp++ << ax;else if (op == SHR) ax = *sp++ >> ax;else if (op == ADD) ax = *sp++ + ax;else if (op == SUB) ax = *sp++ - ax;else if (op == MUL) ax = *sp++ * ax;else if (op == DIV) ax = *sp++ / ax;else if (op == MOD) ax = *sp++ % ax;\"]},\"413\":{\"h\":\"内置函数\",\"t\":[\"写的程序要”有用“，除了核心的逻辑外还需要输入输出，例如 C 语言中我们经常使用的 printf 函数就是用于输出。但是 printf 函数的实现本身就十分复杂，如果我们的编译器要达到自举，就势必要实现 printf 之类的函数，但它又与编译器没有太大的联系，因此我们继续实现新的指令，从虚拟机的角度予以支持。\",\"编译器中我们需要用到的函数有：exit, open, close, read, printf, malloc, memset 及 memcmp。代码如下：\",\"else if (op == EXIT) { printf(\\\"exit(%d)\\\", *sp); return *sp;}else if (op == OPEN) { ax = open((char *)sp[1], sp[0]); }else if (op == CLOS) { ax = close(*sp);}else if (op == READ) { ax = read(sp[2], (char *)sp[1], *sp); }else if (op == PRTF) { tmp = sp + pc[1]; ax = printf((char *)tmp[-1], tmp[-2], tmp[-3], tmp[-4], tmp[-5], tmp[-6]); }else if (op == MALC) { ax = (int)malloc(*sp);}else if (op == MSET) { ax = (int)memset((char *)sp[2], sp[1], *sp);}else if (op == MCMP) { ax = memcmp((char *)sp[2], (char *)sp[1], *sp);}\",\"这里的原理是，我们的电脑上已经有了这些函数的实现，因此编译编译器时，这些函数的二进制代码就被编译进了我们的编译器，因此在我们的编译器/虚拟机上运行我们提供的这些指令时，这些函数就是可用的。换句话说就是不需要我们自己去实现了。\",\"最后再加上一个错误判断：\",\"else { printf(\\\"unknown instruction:%d\\\\n\\\", op); return -1;}\"]},\"414\":{\"h\":\"测试\",\"t\":[\"下面我们用我们的汇编写一小段程序，来计算 10+20，在 main 函数中加入下列代码：\",\"int main(int argc, char *argv[]){ ax = 0; ... i = 0; text[i++] = IMM; text[i++] = 10; text[i++] = PUSH; text[i++] = IMM; text[i++] = 20; text[i++] = ADD; text[i++] = PUSH; text[i++] = EXIT; pc = text; ... program();}\",\"编译程序 gcc xc-tutor.c，运行程序：./a.out hello.c。输出\",\"exit(30)\",\"另外，我们的代码里有一些指针的强制转换，默认是 32 位的，因此在 64 位机器下，会出现 segmentation fault，解决方法（二选一）：\",\"编译时加上 -m32 参数：gcc -m32 xc-tutor.c\",\"在代码的开头，增加 #define int long long，long long 是 64 位的，不会出现强制转换后的问题。\",\"注意我们的之前的程序需要指令一个源文件，只是现在还用不着，但从结果可以看出，我们的虚拟机还是工作良好的。\"]},\"415\":{\"h\":\"小结\",\"t\":[\"本章中我们回顾了计算机的内部运行原理，并仿照 x86 汇编指令设计并实现了我们自己的指令集。希望通过本章的学习，你能对计算机程序的原理有一定的了解，同时能对汇编语言有一定的概念，因为汇编语言就是 C 编译器的输出。\",\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-1 https://github.com/lotabout/write-a-C-interpreter\",\"实际计算机中，添加一个新的指令需要设计许多新的电路，会增加许多的成本，但我们的虚拟机中，新的指令几乎不消耗资源，因此我们可以利用这一点，用更多的指令来完成更多的功能，从而简化具体的实现。\"]},\"416\":{\"h\":\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"t\":[\"本文转自 https://lotabout.me/2015/write-a-C-interpreter-3/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 什么是词法分析器\",\"2. 词法分析器与编译器\",\"3. 词法分析器的实现\",\"3.1. 支持的标记\",\"3.2. 词法分析器的框架\",\"3.3. 换行符\",\"3.4. 宏定义\",\"3.5. 标识符与符号表\",\"3.6. 数字\",\"3.7. 字符串\",\"3.8. 注释\",\"3.9. 其它\",\"3.10. 关键字与内置函数\",\"4. 代码\",\"5. 小结\",\"本章我们要讲解如何构建词法分析器。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"417\":{\"h\":\"什么是词法分析器\",\"t\":[\"简而言之，词法分析器用于对源码字符串做预处理，以减少语法分析器的复杂程度。\",\"词法分析器以源码字符串为输入，输出为标记流（token stream），即一连串的标记，每个标记通常包括： (token, token value) 即标记本身和标记的值。例如，源码中若包含一个数字 '998' ，词法分析器将输出 (Number, 998)，即（数字，998）。再例如：\",\"2 + 3 * (4 - 5)=>(Number, 2) Add (Number, 3) Multiply Left-Bracket (Number, 4) Subtract (Number, 5) Right-Bracket\",\"通过词法分析器的预处理，语法分析器的复杂度会大大降低，这点在后面的语法分析器我们就能体会。\"]},\"418\":{\"h\":\"词法分析器与编译器\",\"t\":[\"要是深入词法分析器，你就会发现，它的本质上也是编译器。我们的编译器是以标记流为输入，输出汇编代码，而词法分析器则是以源码字符串为输入，输出标记流。\",\" +-------+ +--------+-- source code --> | lexer | --> token stream --> | parser | --> assembly +-------+ +--------+\",\"在这个前提下，我们可以这样认为：直接从源代码编译成汇编代码是很困难的，因为输入的字符串比较难处理。所以我们先编写一个较为简单的编译器（词法分析器）来将字符串转换成标记流，而标记流对于语法分析器而言就容易处理得多了。\"]},\"419\":{\"h\":\"词法分析器的实现\",\"t\":[\"由于词法分析的工作很常见，但又枯燥且容易出错，所以人们已经开发出了许多工具来生成词法分析器，如 lex, flex。这些工具允许我们通过正则表达式来识别标记。\",\"这里注意的是，我们并不会一次性地将所有源码全部转换成标记流，原因有二：\",\"字符串转换成标记流有时是有状态的，即与代码的上下文是有关系的。\",\"保存所有的标记流没有意义且浪费空间。\",\"所以实际的处理方法是提供一个函数（即前几篇中提到的 next()），每次调用该函数则返回下一个标记。\"]},\"420\":{\"h\":\"支持的标记\",\"t\":[\"在全局中添加如下定义：\",\"// tokens and classes (operators last and in precedence order)enum { Num = 128, Fun, Sys, Glo, Loc, Id, Char, Else, Enum, If, Int, Return, Sizeof, While, Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak};\",\"这些就是我们要支持的标记符。例如，我们会将 = 解析为 Assign；将 == 解析为 Eq；将 != 解析为 Ne 等等。\",\"所以这里我们会有这样的印象，一个标记（token）可能包含多个字符，且多数情况下如此。而词法分析器能减小语法分析复杂度的原因，正是因为它相当于通过一定的编码（更多的标记）来压缩了源码字符串。\",\"当然，上面这些标记是有顺序的，跟它们在 C 语言中的优先级有关，如 *(Mul) 的优先级就要高于 +(Add)。它们的具体使用在后面的语法分析中会提到。\",\"最后要注意的是还有一些字符，它们自己就构成了标记，如右方括号 ] 或波浪号 ~ 等。我们不另外处理它们的原因是：\",\"它们是单字符的，即并不是多个字符共同构成标记（如 == 需要两个字符）；\",\"它们不涉及优先级关系。\"]},\"421\":{\"h\":\"词法分析器的框架\",\"t\":[\"即 next() 函数的主体：\",\"void next() { char *last_pos; int hash; while (token = *src) { ++src; // parse token here } return;}\",\"这里的一个问题是，为什么要用 while 循环呢？这就涉及到编译器（记得我们说过词法分析器也是某种意义上的编译器）的一个问题：如何处理错误？\",\"对词法分析器而言，若碰到了一个我们不认识的字符该怎么处理？一般处理的方法有两种：\",\"指出错误发生的位置，并退出整个程序\",\"指出错误发生的位置，跳过当前错误并继续编译\",\"这个 while 循环的作用就是跳过这些我们不识别的字符，我们同时还用它来处理空白字符。我们知道，C 语言中空格是用来作为分隔用的，并不作为语法的一部分。因此在实现中我们将它作为“不识别”的字符，这个 while 循环可以用来跳过它。\"]},\"422\":{\"h\":\"换行符\",\"t\":[\"换行符和空格类似，但有一点不同，每次遇到换行符，我们需要将当前的行号加一：\",\"// parse token here...if (token == '\\\\n') { ++line;}...\"]},\"423\":{\"h\":\"宏定义\",\"t\":[\"C 语言的宏定义以字符 # 开头，如 # include <stdio.h>。我们的编译器并不支持宏定义，所以直接跳过它们。\",\"else if (token == '#') { // skip macro, because we will not support it while (*src != 0 && *src != '\\\\n') { src++; }}\"]},\"424\":{\"h\":\"标识符与符号表\",\"t\":[\"标识符（identifier）可以理解为变量名。对于语法分析而言，我们并不关心一个变量具体叫什么名字，而只关心这个变量名代表的唯一标识。例如 int a; 定义了变量 a，而之后的语句 a = 10，我们需要知道这两个 a 指向的是同一个变量。\",\"基于这个理由，词法分析器会把扫描到的标识符全都保存到一张表中，遇到新的标识符就去查这张表，如果标识符已经存在，就返回它的唯一标识。\",\"那么我们怎么表示标识符呢？如下：\",\"struct identifier { int token; int hash; char * name; int class; int type; int value; int Bclass; int Btype; int Bvalue;}\",\"这里解释一下具体的含义：\",\"token：该标识符返回的标记，理论上所有的变量返回的标记都应该是 Id，但实际上由于我们还将在符号表中加入关键字如 if, while 等，它们都有对应的标记。\",\"hash：顾名思义，就是这个标识符的哈希值，用于标识符的快速比较。\",\"name：存放标识符本身的字符串。\",\"class：该标识符的类别，如数字，全局变量或局部变量等。\",\"type：标识符的类型，即如果它是个变量，变量是 int 型、char 型还是指针型。\",\"value：存放这个标识符的值，如标识符是函数，刚存放函数的地址。\",\"BXXXX：C 语言中标识符可以是全局的也可以是局部的，当局部标识符的名字与全局标识符相同时，用作保存全局标识符的信息。\",\"由上可以看出，我们实现的词法分析器与传统意义上的词法分析器不太相同。传统意义上的符号表只需要知道标识符的唯一标识即可，而我们还存放了一些只有语法分析器才会得到的信息，如 type 。\",\"由于我们的目标是能自举，而我们定义的语法不支持 struct，故而使用下列方式。\",\"Symbol table:----+-----+----+----+----+-----+-----+-----+------+------+---- .. |token|hash|name|type|class|value|btype|bclass|bvalue| ..----+-----+----+----+----+-----+-----+-----+------+------+---- |<--- one single identifier --->|\",\"即用一个整型数组来保存相关的ID信息。每个ID占用数组中的9个空间，分析标识符的相关代码如下：\",\"int token_val; // value of current token (mainly for number)int *current_id, // current parsed ID *symbols; // symbol table// fields of identifierenum {Token, Hash, Name, Type, Class, Value, BType, BClass, BValue, IdSize};void next() { ... else if ((token >= 'a' && token <= 'z') || (token >= 'A' && token <= 'Z') || (token == '_')) { // parse identifier last_pos = src - 1; hash = token; while ((*src >= 'a' && *src <= 'z') || (*src >= 'A' && *src <= 'Z') || (*src >= '0' && *src <= '9') || (*src == '_')) { hash = hash * 147 + *src; src++; } // look for existing identifier, linear search current_id = symbols; while (current_id[Token]) { if (current_id[Hash] == hash && !memcmp((char *)current_id[Name], last_pos, src - last_pos)) { //found one, return token = current_id[Token]; return; } current_id = current_id + IdSize; } // store new ID current_id[Name] = (int)last_pos; current_id[Hash] = hash; token = current_id[Token] = Id; return; } ...}\",\"查找已有标识符的方法是线性查找 symbols 表。\"]},\"425\":{\"h\":\"数字\",\"t\":[\"数字中较为复杂的一点是需要支持十进制、十六进制及八进制。逻辑也较为直接，可能唯一不好理解的是获取十六进制的值相关的代码。\",\"token_val = token_val * 16 + (token & 15) + (token >= 'A' ? 9 : 0);\",\"这里要注意的是在ASCII码中，字符a对应的十六进制值是 61, A是41，故通过 (token & 15) 可以得到个位数的值。其它就不多说了，这里这样写的目的是装B（其实是抄 c4 的源代码的）。\",\"void next() { ... else if (token >= '0' && token <= '9') { // parse number, three kinds: dec(123) hex(0x123) oct(017) token_val = token - '0'; if (token_val > 0) { // dec, starts with [1-9] while (*src >= '0' && *src <= '9') { token_val = token_val*10 + *src++ - '0'; } } else { // starts with number 0 if (*src == 'x' || *src == 'X') { //hex token = *++src; while ((token >= '0' && token <= '9') || (token >= 'a' && token <= 'f') || (token >= 'A' && token <= 'F')) { token_val = token_val * 16 + (token & 15) + (token >= 'A' ? 9 : 0); token = *++src; } } else { // oct while (*src >= '0' && *src <= '7') { token_val = token_val*8 + *src++ - '0'; } } } token = Num; return; } ...}\"]},\"426\":{\"h\":\"字符串\",\"t\":[\"在分析时，如果分析到字符串，我们需要将它存放到前一篇文章中说的 data 段中。然后返回它在 data 段中的地址。另一个特殊的地方是我们需要支持转义符。例如用 \\\\n 表示换行符。由于本编译器的目的是达到自己编译自己，所以代码中并没有支持除 \\\\n 的转义符，如 \\\\t, \\\\r 等，但仍支持 \\\\a 表示字符 a 的语法，如 \\\\\\\" 表示 \\\"。\",\"在分析时，我们将同时分析单个字符如 'a' 和字符串如 \\\"a string\\\"。若得到的是单个字符，我们以 Num 的形式返回。相关代码如下：\",\"void next() { ... else if (token == '\\\"' || token == '\\\\'') { // parse string literal, currently, the only supported escape // character is '\\\\n', store the string literal into data. last_pos = data; while (*src != 0 && *src != token) { token_val = *src++; if (token_val == '\\\\\\\\') { // escape character token_val = *src++; if (token_val == 'n') { token_val = '\\\\n'; } } if (token == '\\\"') { *data++ = token_val; } } src++; // if it is a single character, return Num token if (token == '\\\"') { token_val = (int)last_pos; } else { token = Num; } return; }}\"]},\"427\":{\"h\":\"注释\",\"t\":[\"在我们的 C 语言中，只支持 // 类型的注释，不支持 /* comments */ 的注释。\",\"void next() { ... else if (token == '/') { if (*src == '/') { // skip comments while (*src != 0 && *src != '\\\\n') { ++src; } } else { // divide operator token = Div; return; } } ...}\",\"这里我们要额外介绍 lookahead 的概念，即提前看多个字符。上述代码中我们看到，除了跳过注释，我们还可能返回除号 /(Div) 标记。\",\"提前看字符的原理是：有一个或多个标记是以同样的字符开头的（如本小节中的注释与除号），因此只凭当前的字符我们并无法确定具体应该解释成哪一个标记，所以只能再向前查看字符，如本例需向前查看一个字符，若是 / 则说明是注释，反之则是除号。\",\"我们之前说过，词法分析器本质上也是编译器，其实提前看字符的概念也存在于编译器，只是这时就是提前看k个“标记”而不是“字符”了。平时听到的 LL(k) 中的 k 就是需要向前看的标记的个数了。\",\"另外，我们用词法分析器将源码转换成标记流，能减小语法分析复杂度，原因之一就是减少了语法分析器需要“向前看”的字符个数。\"]},\"428\":{\"h\":\"其它\",\"t\":[\"其它的标记的解析就相对容易一些了，我们直接贴上代码：\",\"void next() { ... else if (token == '=') { // parse '==' and '=' if (*src == '=') { src ++; token = Eq; } else { token = Assign; } return; } else if (token == '+') { // parse '+' and '++' if (*src == '+') { src ++; token = Inc; } else { token = Add; } return; } else if (token == '-') { // parse '-' and '--' if (*src == '-') { src ++; token = Dec; } else { token = Sub; } return; } else if (token == '!') { // parse '!=' if (*src == '=') { src++; token = Ne; } return; } else if (token == '<') { // parse '<=', '<<' or '<' if (*src == '=') { src ++; token = Le; } else if (*src == '<') { src ++; token = Shl; } else { token = Lt; } return; } else if (token == '>') { // parse '>=', '>>' or '>' if (*src == '=') { src ++; token = Ge; } else if (*src == '>') { src ++; token = Shr; } else { token = Gt; } return; } else if (token == '|') { // parse '|' or '||' if (*src == '|') { src ++; token = Lor; } else { token = Or; } return; } else if (token == '&') { // parse '&' and '&&' if (*src == '&') { src ++; token = Lan; } else { token = And; } return; } else if (token == '^') { token = Xor; return; } else if (token == '%') { token = Mod; return; } else if (token == '*') { token = Mul; return; } else if (token == '[') { token = Brak; return; } else if (token == '?') { token = Cond; return; } else if (token == '~' || token == ';' || token == '{' || token == '}' || token == '(' || token == ')' || token == ']' || token == ',' || token == ':') { // directly return the character as token; return; } ...}\",\"代码较多，但主要逻辑就是向前看一个字符来确定真正的标记。\"]},\"429\":{\"h\":\"关键字与内置函数\",\"t\":[\"虽然上面写完了词法分析器，但还有一个问题需要考虑，那就是“关键字”，例如 if, while, return 等。它们不能被作为普通的标识符，因为有特殊的含义。\",\"一般有两种处理方法：\",\"词法分析器中直接解析这些关键字。\",\"在语法分析前将关键字提前加入符号表。\",\"这里我们就采用第二种方法，将它们加入符号表，并提前为它们赋予必要的信息（还记得前面说的标识符 Token 字段吗？）。这样当源代码中出现关键字时，它们会被解析成标识符，但由于符号表中已经有了相关的信息，我们就能知道它们是特殊的关键字。\",\"内置函数的行为也和关键字类似，不同的只是赋值的信息，在main函数中进行初始化如下：\",\"// types of variable/functionenum { CHAR, INT, PTR };int *idmain; // the `main` functionvoid main() { ... src = \\\"char else enum if int return sizeof while \\\" \\\"open read close printf malloc memset memcmp exit void main\\\"; // add keywords to symbol table i = Char; while (i <= While) { next(); current_id[Token] = i++; } // add library to symbol table i = OPEN; while (i <= EXIT) { next(); current_id[Class] = Sys; current_id[Type] = INT; current_id[Value] = i++; } next(); current_id[Token] = Char; // handle void type next(); idmain = current_id; // keep track of main ... program();}\"]},\"430\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-2 https://github.com/lotabout/write-a-C-interpreter\",\"上面的代码运行后会出现 ‘Segmentation Falt’，这是正常的，因为它会尝试运行我们上一章创建的虚拟机，但其中并没有任何汇编代码。\"]},\"431\":{\"h\":\"小结\",\"t\":[\"本章我们为我们的编译器构建了词法分析器，通过本章的学习，我认为有几个要点需要强调：\",\"词法分析器的作用是对源码字符串进行预处理，作用是减小语法分析器的复杂程度。\",\"词法分析器本身可以认为是一个编译器，输入是源码，输出是标记流。\",\"lookahead(k) 的概念，即向前看 k 个字符或标记。\",\"词法分析中如何处理标识符与符号表。\",\"下一章中，我们将介绍递归下降的语法分析器。我们下一章见。\"]},\"432\":{\"c\":[\"编译原理\"]},\"433\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"434\":{\"h\":\"手把手教你构建 C 语言编译器（4）——递归下降\",\"t\":[\"[]\",\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-4/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 什么是递归下降\",\"2. 终结符与非终结符\",\"3. 四则运算的递归下降\",\"4. 为什么选择递归下降\",\"5. 左递归\",\"6. 四则运算的实现\",\"7. 小结\",\"本章我们将讲解递归下降的方法，并用它完成一个基本的四则运算的语法分析器。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"435\":{\"h\":\"什么是递归下降\",\"t\":[\"传统上，编写语法分析器有两种方法，一种是自顶向下，一种是自底向上。自顶向下是从起始非终结符开始，不断地对非终结符进行分解，直到匹配输入的终结符；自底向上是不断地将终结符进行合并，直到合并成起始的非终结符。\",\"其中的自顶向下方法就是我们所说的递归下降。\"]},\"436\":{\"h\":\"终结符与非终结符\",\"t\":[\"没有学过编译原理的话可能并不知道什么是“终结符”，“非终结符”。这里我简单介绍一下。首先是 BNF 范式，就是一种用来描述语法的语言，例如，四则运算的规则可以表示如下：\",\"<expr> ::= <expr> + <term> | <expr> - <term> | <term><term> ::= <term> * <factor> | <term> / <factor> | <factor><factor> ::= ( <expr> ) | Num\",\"用尖括号 <> 括起来的就称作 非终结符 ，因为它们可以用 ::= 右侧的式子代替。| 表示选择，如 <expr> 可以是 <expr> + <term>、<expr> - <term>或 <term> 中的一种。而没有出现在::=左边的就称作 终结符 ，一般终结符对应于词法分析器输出的标记。\"]},\"437\":{\"h\":\"四则运算的递归下降\",\"t\":[\"例如，我们对 3 * (4 + 2) 进行语法分析。我们假设词法分析器已经正确地将其中的数字识别成了标记 Num。\",\"递归下降是从起始的非终结符开始（顶），本例中是 <expr>，实际中可以自己指定，不指定的话一般认为是第一个出现的非终结符。\",\"1. <expr> => <expr>2. => <term> * <factor>3. => <factor> |4. => Num (3) |5. => ( <expr> )6. => <expr> + <term>7. => <term> |8. => <factor> |9. => Num (4) |10. => <factor>11. => Num (2)\",\"可以看到，整个解析的过程是在不断对非终结符进行替换（向下），直到遇见了终结符（底）。而我们可以从解析的过程中看出，一些非终结符如<expr>被递归地使用了。\"]},\"438\":{\"h\":\"为什么选择递归下降\",\"t\":[\"从上小节对四则运算的递归下降解析可以看出，整个解析的过程和语法的 BNF 表示是十分接近的，更为重要的是，我们可以很容易地直接将 BNF 表示转换成实际的代码。方法是为每个产生式（即 非终结符 ::= ...）生成一个同名的函数。\",\"这里会有一个疑问，就是上例中，当一个终结符有多个选择时，如何确定具体选择哪一个？如为什么用 <expr> ::= <term> * <factor> 而不是 <expr> ::= <term> / <factor> ？这就用到了上一章中提到的“向前看 k 个标记”的概念了。我们向前看一个标记，发现是 *，而这个标记足够让我们确定用哪个表达式了。\",\"另外，递归下下降方法对 BNF 方法本身有一定的要求，否则会有一些问题，如经典的“左递归”问题。\"]},\"439\":{\"h\":\"左递归\",\"t\":[\"原则上我们是不讲这么深入，但我们上面的四则运算的文法就是左递归的，而左递归的语法是没法直接使用递归下降的方法实现的。因此我们要消除左递归，消除后的文法如下：\",\"<expr> ::= <term> <expr_tail><expr_tail> ::= + <term> <expr_tail> | - <term> <expr_tail> | <empty><term> ::= <factor> <term_tail><term_tail> ::= * <factor> <term_tail> | / <factor> <term_tail> | <empty><factor> ::= ( <expr> ) | Num\",\"消除左递归的相关方法，这里不再多说，请自行查阅相关的资料。\"]},\"440\":{\"h\":\"四则运算的实现\",\"t\":[\"本节中我们专注语法分析器部分的实现，具体实现很容易，我们直接贴上代码，就是上述的消除左递归后的文法直接转换而来的：\",\"int expr();int factor() { int value = 0; if (token == '(') { match('('); value = expr(); match(')'); } else { value = token_val; match(Num); } return value;}int term_tail(int lvalue) { if (token == '*') { match('*'); int value = lvalue * factor(); return term_tail(value); } else if (token == '/') { match('/'); int value = lvalue / factor(); return term_tail(value); } else { return lvalue; }}int term() { int lvalue = factor(); return term_tail(lvalue);}int expr_tail(int lvalue) { if (token == '+') { match('+'); int value = lvalue + term(); return expr_tail(value); } else if (token == '-') { match('-'); int value = lvalue - term(); return expr_tail(value); } else { return lvalue; }}int expr() { int lvalue = term(); return expr_tail(lvalue);}\",\"可以看到，有了BNF方法后，采用递归向下的方法来实现编译器是很直观的。\",\"我们把词法分析器的代码一并贴上：\",\"##include <stdio.h>##include <stdlib.h>enum {Num};int token;int token_val;char *line = NULL;char *src = NULL;void next() { // skip white space while (*src == ' ' || *src == '\\\\t') { src ++; } token = *src++; if (token >= '0' && token <= '9' ) { token_val = token - '0'; token = Num; while (*src >= '0' && *src <= '9') { token_val = token_val*10 + *src - '0'; src ++; } return; }}void match(int tk) { if (token != tk) { printf(\\\"expected token: %d(%c), got: %d(%c)\\\\n\\\", tk, tk, token, token); exit(-1); } next();}\",\"最后是main函数：\",\"int main(int argc, char *argv[]){ size_t linecap = 0; ssize_t linelen; while ((linelen = getline(&line, &linecap, stdin)) > 0) { src = line; next(); printf(\\\"%d\\\\n\\\", expr()); } return 0;}\"]},\"441\":{\"h\":\"小结\",\"t\":[\"本章中我们介绍了递归下降的方法，并用它来实现了四则运算的语法分析器。\",\"花这么大精力讲解递归下降方法，是因为几乎所有手工编写的语法分析器都或多或少地有它的影子。换句话说，掌握了递归下降的方法，就可以应付大多数的语法分析器编写。\",\"同时我们也用实例看到了理论（BNF 语法，左递归的消除）是如何帮助我们的工程实现的。尽管理论不是必需的，但如果能掌握它，对于提高我们的水平还是很有帮助的。\"]},\"442\":{\"c\":[\"编译原理\"]},\"443\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"444\":{\"h\":\"手把手教你构建 C 语言编译器（5）——变量定义\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-5/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. EBNF 表示\",\"2. 解析变量的定义\",\"2.1. program()\",\"2.2. global_declaration()\",\"2.3. enum_declaration()\",\"2.4. 其它\",\"3. 代码\",\"4. 小结\",\"本章中我们用 EBNF 来大致描述我们实现的 C 语言的文法，并实现其中解析变量定义部分。\",\"由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"445\":{\"h\":\"EBNF 表示\",\"t\":[\"EBNF 是对前一章提到的 BNF 的扩展，它的语法更容易理解，实现起来也更直观。但真正看起来还是很烦，如果不想看可以跳过。\",\"program ::= {global_declaration}+global_declaration ::= enum_decl | variable_decl | function_declenum_decl ::= 'enum' [id] '{' id ['=' 'num'] {',' id ['=' 'num'] '}'variable_decl ::= type {'*'} id { ',' {'*'} id } ';'function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}'parameter_decl ::= type {'*'} id {',' type {'*'} id}body_decl ::= {variable_decl}, {statement}statement ::= non_empty_statement | empty_statementnon_empty_statement ::= if_statement | while_statement | '{' statement '}' | 'return' expression | expression ';'if_statement ::= 'if' '(' expression ')' statement ['else' non_empty_statement]while_statement ::= 'while' '(' expression ')' non_empty_statement\",\"其中 expression 相关的内容我们放到后面解释，主要原因是我们的语言不支持跨函数递归，而为了实现自举，实际上我们也不能使用递归（亏我们说了一章的递归下降）。\",\"P.S. 我是先写程序再总结上面的文法，所以实际上它们间的对应关系并不是特别明显。\"]},\"446\":{\"h\":\"解析变量的定义\",\"t\":[\"本章要讲解的就是上节文法中的 enum_decl 和 variable_decl 部分。\"]},\"447\":{\"h\":\"program()\",\"t\":[\"首先是之前定义过的 program 函数，将它改成：\",\"void program() { // get next token next(); while (token > 0) { global_declaration(); }}\",\"我知道 global_declaration 函数还没有出现过，但没有关系，采用自顶向下的编写方法就是要不断地实现我们需要的内容。下面是 global_declaration 函数的内容：\"]},\"448\":{\"h\":\"global_declaration()\",\"t\":[\"即全局的定义语句，包括变量定义，类型定义（只支持枚举）及函数定义。代码如下：\",\"int basetype; // the type of a declaration, make it global for convenienceint expr_type; // the type of an expressionvoid global_declaration() { // global_declaration ::= enum_decl | variable_decl | function_decl // // enum_decl ::= 'enum' [id] '{' id ['=' 'num'] {',' id ['=' 'num'} '}' // // variable_decl ::= type {'*'} id { ',' {'*'} id } ';' // // function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}' int type; // tmp, actual type for variable int i; // tmp basetype = INT; // parse enum, this should be treated alone. if (token == Enum) { // enum [id] { a = 10, b = 20, ... } match(Enum); if (token != '{') { match(Id); // skip the [id] part } if (token == '{') { // parse the assign part match('{'); enum_declaration(); match('}'); } match(';'); return; } // parse type information if (token == Int) { match(Int); } else if (token == Char) { match(Char); basetype = CHAR; } // parse the comma seperated variable declaration. while (token != ';' && token != '}') { type = basetype; // parse pointer type, note that there may exist `int ****x;` while (token == Mul) { match(Mul); type = type + PTR; } if (token != Id) { // invalid declaration printf(\\\"%d: bad global declaration\\\\n\\\", line); exit(-1); } if (current_id[Class]) { // identifier exists printf(\\\"%d: duplicate global declaration\\\\n\\\", line); exit(-1); } match(Id); current_id[Type] = type; if (token == '(') { current_id[Class] = Fun; current_id[Value] = (int)(text + 1); // the memory address of function function_declaration(); } else { // variable declaration current_id[Class] = Glo; // global variable current_id[Value] = (int)data; // assign memory address data = data + sizeof(int); } if (token == ',') { match(','); } } next();}\",\"看了上面的代码，能大概理解吗？这里我们讲解其中的一些细节。\",\"向前看标记 ：其中的 if (token == xxx) 语句就是用来向前查看标记以确定使用哪一个产生式，例如只要遇到 enum 我们就知道是需要解析枚举类型。而如果只解析到类型，如 int identifier 时我们并不能确定 identifier 是一个普通的变量还是一个函数，所以还需要继续查看后续的标记，如果遇到 ( 则可以断定是函数了，反之则是变量。\",\"变量类型的表示 ：我们的编译器支持指针类型，那意味着也支持指针的指针，如 int **data;。那么我们如何表示指针类型呢？前文中我们定义了支持的类型：\",\"// types of variable/functionenum { CHAR, INT, PTR };\",\"所以一个类型首先有基本类型，如 CHAR 或 INT，当它是一个指向基本类型的指针时，如 int *data，我们就将它的类型加上 PTR 即代码中的：type = type + PTR;。同理，如果是指针的指针，则再加上 PTR。\"]},\"449\":{\"h\":\"enum_declaration()\",\"t\":[\"用于解析枚举类型的定义。主要的逻辑用于解析用逗号（,）分隔的变量，值得注意的是在编译器中如何保存枚举变量的信息。\",\"即我们将该变量的类别设置成了 Num，这样它就成了全局的常量了，而注意到上节中，正常的全局变量的类别则是 Glo，类别信息在后面章节中解析 expression 会使用到。\",\"void enum_declaration() { // parse enum [id] { a = 1, b = 3, ...} int i; i = 0; while (token != '}') { if (token != Id) { printf(\\\"%d: bad enum identifier %d\\\\n\\\", line, token); exit(-1); } next(); if (token == Assign) { // like {a=10} next(); if (token != Num) { printf(\\\"%d: bad enum initializer\\\\n\\\", line); exit(-1); } i = token_val; next(); } current_id[Class] = Num; current_id[Type] = INT; current_id[Value] = i++; if (token == ',') { next(); } }}\"]},\"450\":{\"h\":\"其它\",\"t\":[\"其中的 function_declaration 函数我们将放到下一章中讲解。match 函数是一个辅助函数：\",\"void match(int tk) { if (token == tk) { next(); } else { printf(\\\"%d: expected token: %d\\\\n\\\", line, tk); exit(-1); }}\",\"它将 next 函数包装起来，如果不是预期的标记则报错并退出。\"]},\"451\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-3 https://github.com/lotabout/write-a-C-interpreter\",\"本章的代码还无法正常运行，因为还有许多功能没有实现，但如果有兴趣的话，可以自己先试着去实现它。\"]},\"452\":{\"h\":\"小结\",\"t\":[\"本章的内容应该不难，除了开头的 EBNF 表达式可能相对不好理解一些，但如果你查看了 EBNF 的具体表示方法后就不难理解了。\",\"剩下的内容就是按部就班地将 EBNF 的产生式转换成函数的过程，如果你理解了上一章中的内容，相信这部分也不难理解。\",\"下一章中我们将介绍如何解析函数的定义，敬请期待。\"]},\"453\":{\"c\":[\"编译原理\"]},\"454\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"455\":{\"h\":\"手把手教你构建 C 语言编译器（6）——函数定义\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-6/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. EBNF 表示\",\"2. 解析函数的定义\",\"2.1. 函数参数与汇编代码\",\"2.2. 函数定义的解析\",\"2.3. 解析参数\",\"2.4. 函数体的解析\",\"3. 代码\",\"4. 小结\",\"由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。本章讲解函数定义相关的内容。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"456\":{\"h\":\"EBNF 表示\",\"t\":[\"这是上一章的 EBNF 方法中与函数定义相关的内容。\",\"variable_decl ::= type {'*'} id { ',' {'*'} id } ';'function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}'parameter_decl ::= type {'*'} id {',' type {'*'} id}body_decl ::= {variable_decl}, {statement}statement ::= non_empty_statement | empty_statementnon_empty_statement ::= if_statement | while_statement | '{' statement '}' | 'return' expression | expression ';'if_statement ::= 'if' '(' expression ')' statement ['else' non_empty_statement]while_statement ::= 'while' '(' expression ')' non_empty_statement\"]},\"457\":{\"h\":\"解析函数的定义\",\"t\":[\"上一章的代码中，我们已经知道了什么时候开始解析函数的定义，相关的代码如下：\",\"...if (token == '(') { current_id[Class] = Fun; current_id[Value] = (int)(text + 1); // the memory address of function function_declaration();} else {...\",\"即在这断代码之前，我们已经为当前的标识符（identifier）设置了正确的类型，上面这断代码为当前的标识符设置了正确的类别（Fun），以及该函数在代码段（text segment）中的位置。接下来开始解析函数定义相关的内容：parameter_decl 及 body_decl。\"]},\"458\":{\"h\":\"函数参数与汇编代码\",\"t\":[\"现在我们要回忆如何将“函数”转换成对应的汇编代码，因为这决定了在解析时我们需要哪些相关的信息。考虑下列函数：\",\"int demo(int param_a, int *param_b) { int local_1; char local_2; ...}\",\"那么它应该被转换成什么样的汇编代码呢？在思考这个问题之前，我们需要了解当 demo函数被调用时，计算机的栈的状态，如下（参照第三章讲解的虚拟机）：\",\"| .... | high address+---------------+| arg: param_a | new_bp + 3+---------------+| arg: param_b | new_bp + 2+---------------+|return address | new_bp + 1+---------------+| old BP | <- new BP+---------------+| local_1 | new_bp - 1+---------------+| local_2 | new_bp - 2+---------------+| .... | low address\",\"这里最为重要的一点是，无论是函数的参数（如 param_a）还是函数的局部变量（如 local_1）都是存放在计算机的 栈 上的。因此，与存放在 数据段 中的全局变量不同，在函数内访问它们是通过 new_bp 指针和对应的位移量进行的。因此，在解析的过程中，我们需要知道参数的个数，各个参数的位移量。\"]},\"459\":{\"h\":\"函数定义的解析\",\"t\":[\"这相当于是整个函数定义的语法解析的框架，代码如下：\",\"void function_declaration() { // type func_name (...) {...} // | this part match('('); function_parameter(); match(')'); match('{'); function_body(); //match('}'); // ① // ② // unwind local variable declarations for all local variables. current_id = symbols; while (current_id[Token]) { if (current_id[Class] == Loc) { current_id[Class] = current_id[BClass]; current_id[Type] = current_id[BType]; current_id[Value] = current_id[BValue]; } current_id = current_id + IdSize; }}\",\"其中①中我们没有消耗最后的}字符。这么做的原因是：variable_decl 与 function_decl 是放在一起解析的，而 variable_decl 是以字符 ; 结束的。而 function_decl 是以字符 } 结束的，若在此通过 match 消耗了 ‘;’ 字符，那么外层的 while 循环就没法准确地知道函数定义已经结束。所以我们将结束符的解析放在了外层的 while 循环中。\",\"而②中的代码是用于将符号表中的信息恢复成全局的信息。这是因为，局部变量是可以和全局变量同名的，一旦同名，在函数体内局部变量就会覆盖全局变量，出了函数体，全局变量就恢复了原先的作用。这段代码线性地遍历所有标识符，并将保存在 BXXX 中的信息还原。\"]},\"460\":{\"h\":\"解析参数\",\"t\":[\"parameter_decl ::= type {'*'} id {',' type {'*'} id}\",\"解析函数的参数就是解析以逗号分隔的一个个标识符，同时记录它们的位置与类型。\",\"int index_of_bp; // index of bp pointer on stackvoid function_parameter() { int type; int params; params = 0; while (token != ')') { // ① // int name, ... type = INT; if (token == Int) { match(Int); } else if (token == Char) { type = CHAR; match(Char); } // pointer type while (token == Mul) { match(Mul); type = type + PTR; } // parameter name if (token != Id) { printf(\\\"%d: bad parameter declaration\\\\n\\\", line); exit(-1); } if (current_id[Class] == Loc) { printf(\\\"%d: duplicate parameter declaration\\\\n\\\", line); exit(-1); } match(Id); //② // store the local variable current_id[BClass] = current_id[Class]; current_id[Class] = Loc; current_id[BType] = current_id[Type]; current_id[Type] = type; current_id[BValue] = current_id[Value]; current_id[Value] = params++; // index of current parameter if (token == ',') { match(','); } } // ③ index_of_bp = params+1;}\",\"其中①与全局变量定义的解析十分一样，用于解析该参数的类型。\",\"而②则与上节中提到的“局部变量覆盖全局变量”相关，先将全局变量的信息保存（无论是是否真的在全局中用到了这个变量）在 BXXX 中，再赋上局部变量相关的信息，如 Value 中存放的是参数的位置（是第几个参数）。\",\"③则与汇编代码的生成有关，index_of_bp 就是前文提到的 new_bp 的位置。\"]},\"461\":{\"h\":\"函数体的解析\",\"t\":[\"我们实现的 C 语言与现代的 C 语言不太一致，我们需要所有的变量定义出现在所有的语句之前。函数体的代码如下：\",\"void function_body() { // type func_name (...) {...} // -->| |<-- // ... { // 1. local declarations // 2. statements // } int pos_local; // position of local variables on the stack. int type; pos_local = index_of_bp; // ① while (token == Int || token == Char) { // local variable declaration, just like global ones. basetype = (token == Int) ? INT : CHAR; match(token); while (token != ';') { type = basetype; while (token == Mul) { match(Mul); type = type + PTR; } if (token != Id) { // invalid declaration printf(\\\"%d: bad local declaration\\\\n\\\", line); exit(-1); } if (current_id[Class] == Loc) { // identifier exists printf(\\\"%d: duplicate local declaration\\\\n\\\", line); exit(-1); } match(Id); // store the local variable current_id[BClass] = current_id[Class]; current_id[Class] = Loc; current_id[BType] = current_id[Type]; current_id[Type] = type; current_id[BValue] = current_id[Value]; current_id[Value] = ++pos_local; // index of current parameter if (token == ',') { match(','); } } match(';'); } // ② // save the stack size for local variables *++text = ENT; *++text = pos_local - index_of_bp; // statements while (token != '}') { statement(); } // emit code for leaving the sub function *++text = LEV;}\",\"其中①用于解析函数体内的局部变量的定义，代码与全局的变量定义几乎一样。\",\"而②则用于生成汇编代码，我们在第三章的虚拟机中提到过，我们需要在栈上为局部变量预留空间，这两行代码起的就是这个作用。\"]},\"462\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-4 https://github.com/lotabout/write-a-C-interpreter\",\"本章的代码依旧无法运行，还有两个重要函数没有完成：statement 及 expression，感兴趣的话可以尝试自己实现它们。\"]},\"463\":{\"h\":\"小结\",\"t\":[\"本章中我们用了不多的代码完成了函数定义的解析。大部分的代码依旧是用于解析变量：参数和局部变量，而它们的逻辑和全局变量的解析几乎一致，最大的区别就是保存的信息不同。\",\"当然，要理解函数定义的解析过程，最重要的是理解我们会为函数生成怎样的汇编代码，因为这决定了我们需要从解析中获取什么样的信息（例如参数的位置，个数等），而这些可能需要你重新回顾一下“虚拟机”这一章，或是重新学习学习汇编相关的知识。\",\"下一章中我们将讲解语句的解析，敬请期待。\"]},\"464\":{\"c\":[\"编译原理\"]},\"465\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"466\":{\"h\":\"手把手教你构建 C 语言编译器（7）——语句\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-7/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 语句\",\"1.1. IF 语句\",\"1.2. While 语句\",\"1.3. Return 语句\",\"1.4. 其它语句\",\"2. 代码\",\"3. 小结\",\"整个编译器还剩下最后两个部分：语句和表达式的解析。它们的内容比较多，主要涉及如何将语句和表达式编译成汇编代码。这章讲解语句的解析，相对于表达式来说它还是较为容易的。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"467\":{\"h\":\"语句\",\"t\":[\"C 语言区分“语句”（statement）和“表达式”（expression）两个概念。简单地说，可以认为语句就是表达式加上末尾的分号。\",\"在我们的编译器中共识别 6 种语句：\",\"if (...) <statement> [else <statement>]\",\"while (...) <statement>\",\"{ <statement> }\",\"return xxx;\",\"<empty statement>;\",\"expression; (expression end with semicolon)\",\"它们的语法分析都相对容易，重要的是去理解如何将这些语句编译成汇编代码，下面我们逐一解释。\"]},\"468\":{\"h\":\"IF 语句\",\"t\":[\"IF 语句的作用是跳转，跟据条件表达式决定跳转的位置。我们看看下面的伪代码：\",\"if (...) <statement> [else <statement>] if (<cond>) <cond> JZ a <true_statement> ===> <true_statement> else: JMP ba: a: <false_statement> <false_statement>b: b:\",\"对应的汇编代码流程为：\",\"执行条件表达式 <cond>。\",\"如果条件失败，则跳转到 a 的位置，执行 else 语句。这里 else 语句是可以省略的，此时 a 和 b 都指向 IF 语句后方的代码。\",\"因为汇编代码是顺序排列的，所以如果执行了 true_statement，为了防止因为顺序排列而执行了 false_statement，所以需要无条件跳转 JMP b。\",\"对应的 C 代码如下：\",\"if (token == If) { match(If); match('('); expression(Assign); // parse condition match(')'); *++text = JZ; b = ++text; statement(); // parse statement if (token == Else) { // parse else match(Else); // emit code for JMP B *b = (int)(text + 3); *++text = JMP; b = ++text; statement(); } *b = (int)(text + 1);}\"]},\"469\":{\"h\":\"While 语句\",\"t\":[\"While 语句比 If 语句简单，它对应的汇编代码如下：\",\"a: a: while (<cond>) <cond> JZ b <statement> <statement> JMP ab: b:\",\"没有什么值得说明的内容，它的 C 代码如下：\",\"else if (token == While) { match(While); a = text + 1; match('('); expression(Assign); match(')'); *++text = JZ; b = ++text; statement(); *++text = JMP; *++text = (int)a; *b = (int)(text + 1);}\"]},\"470\":{\"h\":\"Return 语句\",\"t\":[\"Return 唯一特殊的地方是：一旦遇到了 Return 语句，则意味着函数要退出了，所以需要生成汇编代码 LEV 来表示退出。\",\"else if (token == Return) { // return [expression]; match(Return); if (token != ';') { expression(Assign); } match(';'); // emit code for return *++text = LEV;}\"]},\"471\":{\"h\":\"其它语句\",\"t\":[\"其它语句并不直接生成汇编代码，所以不多做说明，代码如下：\",\"else if (token == '{') { // { <statement> ... } match('{'); while (token != '}') { statement(); } match('}');}else if (token == ';') { // empty statement match(';');}else { // a = b; or function_call(); expression(Assign); match(';');}\"]},\"472\":{\"h\":\"代码\",\"t\":[\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-5 https://github.com/lotabout/write-a-C-interpreter\",\"本章的代码依旧无法运行，还剩最后一部分没有完成：expression。\"]},\"473\":{\"h\":\"小结\",\"t\":[\"本章讲解了如何将语句编译成汇编代码，内容相对容易一些，关键就是去理解汇编代码的执行原理。\",\"同时值得一提的是，编译器的语法分析部分其实是很简单的，而真正的难点是如何在语法分析时收集足够多的信息，最终把源代码转换成目标代码（汇编）。我认为这也是初学者实现编译器的一大难点，往往比词法分析/语法分析更困难。\",\"所以建议如果没有学过汇编，可以学习学习，它本身不难，但对理解计算机的原理有很大帮助。\"]},\"474\":{\"c\":[\"编译原理\"]},\"475\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"476\":{\"h\":\"手把手教你构建 C 语言编译器（8）——表达式\",\"t\":[\"本文转自 https://blog.csdn.net/xzp740813/article/details/142961332?spm=1001.2014.3001.5501，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 运算符的优先级\",\"2. 一元运算符\",\"2.1. 常量\",\"2.2. sizeof\",\"2.3. 变量与函数调用\",\"2.4. 强制转换\",\"2.5. 指针取值\",\"2.6. 取址操作\",\"2.7. 逻辑取反\",\"2.8. 按位取反\",\"2.9. 正负号\",\"2.10. 自增自减\",\"3. 二元运算符\",\"3.1. 赋值操作\",\"3.2. 三目运算符\",\"3.3. 逻辑运算符\",\"3.4. 数学运算符\",\"3.5. 自增自减\",\"3.6. 数组取值操作\",\"4. 代码\",\"5. 小结\",\"这是整个编译器的最后一部分，解析表达式。什么是表达式？表达式是将各种语言要素的一个组合，用来求值。例如：函数调用、变量赋值、运算符运算等等。\",\"表达式的解析难点有二：一是运算符的优先级问题，二是如何将表达式编译成目标代码。我们就来逐一说明。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"477\":{\"h\":\"运算符的优先级\",\"t\":[\"运算符的优先级决定了表达式的运算顺序，如在普通的四则运算中，乘法 * 优先级高于加法 +，这就意味着表达式 2 + 3 * 4 的实际运行顺序是 2 + (3 * 4) 而不是 (2 + 3) * 4。\",\"C 语言定义了各种表达式的优先级，可以参考 C 语言运算符优先级。\",\"传统的编程书籍会用“逆波兰式”实现四则运算来讲解优先级问题。实际上，优先级关心的就是哪个运算符先计算，哪个运算符后计算（毕竟叫做“优先级”嘛）。而这就意味着我们需要决定先为哪个运算符生成目标代码（汇编），因为汇编代码是顺序排列的，我们必须先计算优先级高的运算符。\",\"那么如何确定运算符的优先级呢？答曰：栈（递归调用的实质也是栈的处理）。\",\"举一个例子：2 + 3 - 4 * 5，它的运算顺序是这样的：\",\"将 2 入栈\",\"遇到运算符 +，入栈，此时我们期待的是+的另一个参数\",\"遇到数字 3，原则上我们需要立即计算 2+3的值，但我们不确定数字 3 是否属于优先级更高的运算符，所以先将它入栈。\",\"遇到运算符 -，它的优先级和 + 相同，此时判断参数 3 属于这前的 +。将运算符 + 出栈，并将之前的 2 和 3 出栈，计算 2+3 的结果，得到 5 入栈。同时将运算符 - 入栈。\",\"遇到数字4，同样不能确定是否能立即计算，入栈\",\"遇到运算符 * 优先级大于 -，入栈\",\"遇到数字5，依旧不能确定是否立即计算，入栈\",\"表达式结束，运算符出栈，为 *，将参数出栈，计算 4*5 得到结果 20 入栈。\",\"运算符出栈，为 -，将参数出栈，计算 5-20，得到 -15 入栈。\",\"此时运算符栈为空，因此得到结果 -15。\",\"// after step 1, 2| |+------+| 3 | | |+------+ +------+| 2 | | + |+------+ +------+// after step 4| | | |+------+ +------+| 5 | | - |+------+ +------+// after step 7| |+------+| 5 |+------+ +------+| 4 | | * |+------+ +------+| 5 | | - |+------+ +------+\",\"综上，在计算一个运算符‘x’之前，必须先查看它的右方，找出并计算所有优先级大于‘x’的运算符，之后再计算运算符‘x’。\",\"最后注意的是优先通常只与多元运算符相关，单元运算符往往没有这个问题（因为只有一个参数）。也可以认为“优先级”的实质就是两个运算符在抢参数。\"]},\"478\":{\"h\":\"一元运算符\",\"t\":[\"上节中说到了运算符的优先级，也提到了优先级一般只与多元运算符有关，这也意味着一元运算符的优先级总是高于多元运算符。因为我们需要先对它们进行解析。\",\"当然，这部分也将同时解析参数本身（如变量、数字、字符串等等）。\",\"关于表达式的解析，与语法分析相关的部分就是上文所说的优先级问题了，而剩下的较难较烦的部分是与目标代码的生成有关的。因此对于需要讲解的运算符，我们主要从它的目标代码入手。\"]},\"479\":{\"h\":\"常量\",\"t\":[\"首先是数字，用 IMM 指令将它加载到 AX 中即可：\",\"if (token == Num) { match(Num); // emit code *++text = IMM; *++text = token_val; expr_type = INT;}\",\"接着是字符串常量。它比较特殊的一点是 C 语言的字符串常量支持如下风格：\",\"char *p;p = \\\"first line\\\" \\\"second line\\\";\",\"即跨行的字符串拼接，它相当于：\",\"char *p;p = \\\"first linesecond line\\\";\",\"所以解析的时候要注意这一点：\",\"else if (token == '\\\"') { // emit code *++text = IMM; *++text = token_val; match('\\\"'); // store the rest strings while (token == '\\\"') { match('\\\"'); } // append the end of string character '\\\\0', all the data are default // to 0, so just move data one position forward. data = (char *)(((int)data + sizeof(int)) & (-sizeof(int))); expr_type = PTR;}\"]},\"480\":{\"h\":\"sizeof\",\"t\":[\"sizeof 是一个一元运算符，我们需要知道后面参数的类型，类型的解析在前面的文章中我们已经很熟悉了。\",\"else if (token == Sizeof) { // sizeof is actually an unary operator // now only `sizeof(int)`, `sizeof(char)` and `sizeof(*...)` are // supported. match(Sizeof); match('('); expr_type = INT; if (token == Int) { match(Int); } else if (token == Char) { match(Char); expr_type = CHAR; } while (token == Mul) { match(Mul); expr_type = expr_type + PTR; } match(')'); // emit code *++text = IMM; *++text = (expr_type == CHAR) ? sizeof(char) : sizeof(int); expr_type = INT;}\",\"注意的是只支持 sizeof(int)，sizeof(char) 及 sizeof(pointer type...)。并且它的结果是 int 型。\"]},\"481\":{\"h\":\"变量与函数调用\",\"t\":[\"由于取变量的值与函数的调用都是以 Id 标记开头的，因此将它们放在一起处理。\",\"else if (token == Id) { // there are several type when occurs to Id // but this is unit, so it can only be // 1. function call // 2. Enum variable // 3. global/local variable match(Id); id = current_id; if (token == '(') { // function call match('('); // ① // pass in arguments tmp = 0; // number of arguments while (token != ')') { expression(Assign); *++text = PUSH; tmp ++; if (token == ',') { match(','); } } match(')'); // ② // emit code if (id[Class] == Sys) { // system functions *++text = id[Value]; } else if (id[Class] == Fun) { // function call *++text = CALL; *++text = id[Value]; } else { printf(\\\"%d: bad function call\\\\n\\\", line); exit(-1); } // ③ // clean the stack for arguments if (tmp > 0) { *++text = ADJ; *++text = tmp; } expr_type = id[Type]; } else if (id[Class] == Num) { // ④ // enum variable *++text = IMM; *++text = id[Value]; expr_type = INT; } else { // ⑤ // variable if (id[Class] == Loc) { *++text = LEA; *++text = index_of_bp - id[Value]; } else if (id[Class] == Glo) { *++text = IMM; *++text = id[Value]; } else { printf(\\\"%d: undefined variable\\\\n\\\", line); exit(-1); } //⑥ // emit code, default behaviour is to load the value of the // address which is stored in `ax` expr_type = id[Type]; *++text = (expr_type == Char) ? LC : LI; }}\",\"①中注意我们是顺序将参数入栈，这和第三章：虚拟机中讲解的指令是对应的。与之不同，标准 C 是逆序将参数入栈的。\",\"②中判断函数的类型，同样在第三章：“虚拟机”中我们介绍过内置函数的支持，如 printf, read, malloc 等等。内置函数有对应的汇编指令，而普通的函数则编译成 CALL <addr> 的形式。\",\"③用于清除入栈的参数。因为我们不在乎出栈的值，所以直接修改栈指针的大小即可。\",\"④：当该标识符是全局定义的枚举类型时，直接将对应的值用 IMM 指令存入 AX 即可。\",\"⑤则是用于加载变量的值，如果是局部变量则采用与 bp 指针相对位置的形式（参见第 7章函数定义）。而如果是全局变量则用 IMM 加载变量的地址。\",\"⑥：无论是全局还是局部变量，最终都根据它们的类型用 LC 或 LI 指令加载对应的值。\",\"关于变量，你可能有疑问，如果遇到标识符就用 LC/LI 载入相应的值，那诸如 a[10] 之类的表达式要如何实现呢？后面我们会看到，根据标识符后的运算符，我们可能会修改或删除现有的 LC/LI 指令。\"]},\"482\":{\"h\":\"强制转换\",\"t\":[\"虽然我们前面没有提到，但我们一直用 expr_type 来保存一个表达式的类型，强制转换的作用是获取转换的类型，并直接修改 expr_type 的值。\",\"else if (token == '(') { // cast or parenthesis match('('); if (token == Int || token == Char) { tmp = (token == Char) ? CHAR : INT; // cast type match(token); while (token == Mul) { match(Mul); tmp = tmp + PTR; } match(')'); expression(Inc); // cast has precedence as Inc(++) expr_type = tmp; } else { // normal parenthesis expression(Assign); match(')'); }}\"]},\"483\":{\"h\":\"指针取值\",\"t\":[\"诸如 *a 的指针取值，关键是判断 a 的类型，而就像上节中提到的，当一个表达式解析结束时，它的类型保存在变量 expr_type 中。\",\"else if (token == Mul) { // dereference *<addr> match(Mul); expression(Inc); // dereference has the same precedence as Inc(++) if (expr_type >= PTR) { expr_type = expr_type - PTR; } else { printf(\\\"%d: bad dereference\\\\n\\\", line); exit(-1); } *++text = (expr_type == CHAR) ? LC : LI;}\"]},\"484\":{\"h\":\"取址操作\",\"t\":[\"这里我们就能看到“变量与函数调用”一节中所说的修改或删除 LC/LI 指令了。前文中我们说到，对于变量，我们会先加载它的地址，并根据它们类型使用 LC/LI 指令加载实际内容，例如对变量 a：\",\"IMM <addr>LI\",\"那么对变量 a 取址，其实只要不执行 LC/LI 即可。因此我们删除相应的指令。\",\"else if (token == And) { // get the address of match(And); expression(Inc); // get the address of if (*text == LC || *text == LI) { text --; } else { printf(\\\"%d: bad address of\\\\n\\\", line); exit(-1); } expr_type = expr_type + PTR;}\"]},\"485\":{\"h\":\"逻辑取反\",\"t\":[\"我们没有直接的逻辑取反指令，因此我们判断它是否与数字 0 相等。而数字 0 代表了逻辑 “False”。\",\"else if (token == '!') { // not match('!'); expression(Inc); // emit code, use <expr> == 0 *++text = PUSH; *++text = IMM; *++text = 0; *++text = EQ; expr_type = INT;}\"]},\"486\":{\"h\":\"按位取反\",\"t\":[\"同样我们没有相应的指令，所以我们用异或来实现，即 ~a = a ^ 0xFFFF。\",\"else if (token == '~') { // bitwise not match('~'); expression(Inc); // emit code, use <expr> XOR -1 *++text = PUSH; *++text = IMM; *++text = -1; *++text = XOR; expr_type = INT;}\"]},\"487\":{\"h\":\"正负号\",\"t\":[\"注意这里并不是四则运算中的加减法，而是单个数字的取正取负操作。同样，我们没有取负的操作，用 0 - x 来实现 -x。\",\"else if (token == Add) { // +var, do nothing match(Add); expression(Inc); expr_type = INT;}else if (token == Sub) { // -var match(Sub); if (token == Num) { *++text = IMM; *++text = -token_val; match(Num); } else { *++text = IMM; *++text = -1; *++text = PUSH; expression(Inc); *++text = MUL; } expr_type = INT;}\"]},\"488\":{\"h\":\"自增自减\",\"t\":[\"注意的是自增自减操作的优先级是和它的位置有关的。如 ++p 的优先级高于 p++，这里我们解析的就是类似 ++p 的操作。\",\"else if (token == Inc || token == Dec) { tmp = token; match(token); expression(Inc); // ① if (*text == LC) { *text = PUSH; // to duplicate the address *++text = LC; } else if (*text == LI) { *text = PUSH; *++text = LI; } else { printf(\\\"%d: bad lvalue of pre-increment\\\\n\\\", line); exit(-1); } *++text = PUSH; *++text = IMM; // ② *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char); *++text = (tmp == Inc) ? ADD : SUB; *++text = (expr_type == CHAR) ? SC : SI;}\",\"对应的汇编代码也比较直观，只是在实现 ++p时，我们要使用变量 p 的地址两次，所以我们需要先 PUSH （①）。\",\"②则是因为自增自减操作还需要处理是指针的情形。\"]},\"489\":{\"h\":\"二元运算符\",\"t\":[\"这里，我们需要处理多运算符的优先级问题，就如前文的“优先级”一节提到的，我们需要不断地向右扫描，直到遇到优先级 小于 当前优先级的运算符。\",\"回想起我们之前定义过的各个标记，它们是以优先级从低到高排列的，即 Assign 的优先级最低，而 Brak（[） 的优先级最高。\",\"enum { Num = 128, Fun, Sys, Glo, Loc, Id, Char, Else, Enum, If, Int, Return, Sizeof, While, Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak};\",\"所以，当我们调用 expression(level) 进行解析的时候，我们其实通过了参数 level 指定了当前的优先级。在前文的一元运算符处理中也用到了这一点。\",\"所以，此时的二元运算符的解析的框架为：\",\"while (token >= level) { // parse token for binary operator and postfix operator}\",\"解决了优先级的问题，让我们继续讲解如何把运算符编译成汇编代码吧。\"]},\"490\":{\"h\":\"赋值操作\",\"t\":[\"赋值操作是优先级最低的运算符。考虑诸如 a = (expession) 的表达式，在解析 = 之前，我们已经为变量 a 生成了如下的汇编代码：\",\"IMM <addr>LC/LI\",\"当解析完=右边的表达式后，相应的值会存放在 ax 中，此时，为了实际将这个值保存起来，我们需要类似下面的汇编代码：\",\"IMM <addr>PUSHSC/SI\",\"明白了这点，也就能理解下面的源代码了：\",\"tmp = expr_type;if (token == Assign) { // var = expr; match(Assign); if (*text == LC || *text == LI) { *text = PUSH; // save the lvalue's pointer } else { printf(\\\"%d: bad lvalue in assignment\\\\n\\\", line); exit(-1); } expression(Assign); expr_type = tmp; *++text = (expr_type == CHAR) ? SC : SI;}\"]},\"491\":{\"h\":\"三目运算符\",\"t\":[\"这是 C 语言中唯一的一个三元运算符： ? :，它相当于一个小型的 If 语句，所以生成的代码也类似于 If 语句，这里就不多作解释。\",\"else if (token == Cond) { // expr ? a : b; match(Cond); *++text = JZ; addr = ++text; expression(Assign); if (token == ':') { match(':'); } else { printf(\\\"%d: missing colon in conditional\\\\n\\\", line); exit(-1); } *addr = (int)(text + 3); *++text = JMP; addr = ++text; expression(Cond); *addr = (int)(text + 1);}\"]},\"492\":{\"h\":\"逻辑运算符\",\"t\":[\"这包括 || 和 &&。它们对应的汇编代码如下：\",\"<expr1> || <expr2> <expr1> && <expr2> ...<expr1>... ...<expr1>... JNZ b JZ b ...<expr2>... ...<expr2>...b: b:\",\"所以源码如下：\",\"else if (token == Lor) { // logic or match(Lor); *++text = JNZ; addr = ++text; expression(Lan); *addr = (int)(text + 1); expr_type = INT;}else if (token == Lan) { // logic and match(Lan); *++text = JZ; addr = ++text; expression(Or); *addr = (int)(text + 1); expr_type = INT;}\"]},\"493\":{\"h\":\"数学运算符\",\"t\":[\"它们包括 |, ^, &, ==, !=<=, >=, <, >, <<, >>, +, -, *, /, %。它们的实现都很类似，我们以异或 ^ 为例：\",\"<expr1> ^ <expr2>...<expr1>... <- now the result is on axPUSH...<expr2>... <- now the value of <expr2> is on axXOR\",\"所以它对应的代码为：\",\"else if (token == Xor) { // bitwise xor match(Xor); *++text = PUSH; expression(And); *++text = XOR; expr_type = INT;}\",\"其它的我们便不再详述。但这当中还有一个问题，就是指针的加减。在 C 语言中，指针加上数值等于将指针移位，且根据不同的类型移动的位移不同。如 a + 1，如果 a 是 char * 型，则移动一字节，而如果 a 是 int * 型，则移动 4 个字节（32位系统）。\",\"另外，在作指针减法时，如果是两个指针相减（相同类型），则结果是两个指针间隔的元素个数。因此要有特殊的处理。\",\"下面以加法为例，对应的汇编代码为：\",\"<expr1> + <expr2>normal pointer<expr1> <expr1>PUSH PUSH<expr2> <expr2> |ADD PUSH | <expr2> * <unit> IMM <unit> | MUL | ADD\",\"即当 <expr1> 是指针时，要根据它的类型放大 <expr2> 的值，因此对应的源码如下：\",\"else if (token == Add) { // add match(Add); *++text = PUSH; expression(Mul); expr_type = tmp; if (expr_type > PTR) { // pointer type, and not `char *` *++text = PUSH; *++text = IMM; *++text = sizeof(int); *++text = MUL; } *++text = ADD;}\",\"相应的减法的代码就不贴了，可以自己实现看看，也可以看文末给出的链接。\"]},\"494\":{\"h\":\"自增自减\",\"t\":[\"这次是后缀形式的，即 p++ 或 p--。与前缀形式不同的是，在执行自增自减后， ax上需要保留原来的值。所以我们首先执行类似前缀自增自减的操作，再将 ax 中的值执行减/增的操作。\",\"// 前缀形式 生成汇编代码*++text = PUSH;*++text = IMM;*++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);*++text = (tmp == Inc) ? ADD : SUB;*++text = (expr_type == CHAR) ? SC : SI;// 后缀形式 生成汇编代码*++text = PUSH;*++text = IMM;*++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);*++text = (token == Inc) ? ADD : SUB;*++text = (expr_type == CHAR) ? SC : SI;*++text = PUSH; //*++text = IMM; // 执行相反的增/减操作*++text = (expr_type > PTR) ? sizeof(int) : sizeof(char); //*++text = (token == Inc) ? SUB : ADD; //\"]},\"495\":{\"h\":\"数组取值操作\",\"t\":[\"在学习 C 语言的时候你可能已经知道了，诸如 a[10] 的操作等价于 *(a + 10)。因此我们要做的就是生成类似的汇编代码：\",\"else if (token == Brak) { // array access var[xx] match(Brak); *++text = PUSH; expression(Assign); match(']'); if (tmp > PTR) { // pointer, `not char *` *++text = PUSH; *++text = IMM; *++text = sizeof(int); *++text = MUL; } else if (tmp < PTR) { printf(\\\"%d: pointer type expected\\\\n\\\", line); exit(-1); } expr_type = tmp - PTR; *++text = ADD; *++text = (expr_type == CHAR) ? LC : LI;}\"]},\"496\":{\"h\":\"代码\",\"t\":[\"除了上述对表达式的解析外，我们还需要初始化虚拟机的栈，我们可以正确调用 main 函数，且当 main 函数结束时退出进程。\",\"int *tmp;// setup stacksp = (int *)((int)stack + poolsize);*--sp = EXIT; // call exit if main returns*--sp = PUSH; tmp = sp;*--sp = argc;*--sp = (int)argv;*--sp = (int)tmp;\",\"当然，最后要注意的一点是：所有的变量定义必须放在语句之前。\",\"本章的代码可以在 Github 上下载，也可以直接 clone\",\"git clone -b step-6 https://github.com/lotabout/write-a-C-interpreter\",\"通过 gcc -o xc-tutor xc-tutor.c 进行编译。并执行 ./xc-tutor hello.c 查看结果。\",\"正如我们保证的那样，我们的代码是自举的，能自己编译自己，所以你可以执行 ./xc-tutor xc-tutor.c hello.c。可以看到和之前有同样的输出。\"]},\"497\":{\"h\":\"小结\",\"t\":[\"本章我们进行了最后的解析，解析表达式。本章有两个难点：\",\"如何通过递归调用 expression 来实现运算符的优先级。\",\"如何为每个运算符生成对应的汇编代码。\",\"尽管代码看起来比较简单（虽然多），但其中用到的原理还是需要仔细推敲的。\",\"最后，恭喜你！通过一步步的学习，自己实现了一个C语言的编译器（好吧，是解释器）。\"]},\"498\":{\"c\":[\"编译原理\"]},\"499\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"500\":{\"h\":\"手把手教你构建 C 语言编译器（9）——总结\",\"t\":[\"本文转自 https://lotabout.me/2016/write-a-C-interpreter-9/，如有侵权，请联系删除。\",\"Table of Contents\",\"1. 虚拟机与目标代码\",\"2. 词法分析\",\"3. 语法分析\",\"4. 关于编代码\",\"5. 结语\",\"恭喜你完成了自己的 C 语言编译器，本章中我们发一发牢骚，说一说编写编译器值得注意的一些问题；编写编译器时遇到的一些难题。\",\"手把手教你构建 C 语言编译器系列共有10个部分：\",\"手把手教你构建 C 语言编译器（0）——前言\",\"手把手教你构建 C 语言编译器（1）——设计\",\"手把手教你构建 C 语言编译器（2）——虚拟机\",\"手把手教你构建 C 语言编译器（3）——词法分析器\",\"手把手教你构建 C 语言编译器（4）——递归下降\",\"手把手教你构建 C 语言编译器（5）——变量定义\",\"手把手教你构建 C 语言编译器（6）——函数定义\",\"手把手教你构建 C 语言编译器（7）——语句\",\"手把手教你构建 C 语言编译器（8）——表达式\",\"手把手教你构建 C 语言编译器（9）——总结\"]},\"501\":{\"h\":\"虚拟机与目标代码\",\"t\":[\"整个系列的一开始，我们就着手虚拟机的实现。不知道你是否有同感，这部分对于整个编译器的编写其实是十分重要的。我认为至少占了重要程度的50%。\",\"这里要说明这样一个观点，学习编译原理时常常着眼于词法分析和语法分析，而忽略了同样重要的代码生成。对于学习或考试而言或许可以，但实际编译项目时，最为重要的是能“跑起来”，所以我们需要给予代码生成高度的重视。\",\"同时我们也看到，在后期解析语句和表达式时，难点已经不再是语法分析了，而是如何为运算符生成相应的汇编代码。\"]},\"502\":{\"h\":\"词法分析\",\"t\":[\"我们用了很暴力的手段编写了我们的词法分析器，我认为这并无不可。\",\"但你依旧可以学习相关的知识，了解自动生成词法分析器的原理，它涉及到了“正则表达式”，“状态机”等等知识。相信这部分的知识能够很大程度上提高你的编程水平。\",\"同时，如果今后你仍然想编写编译器，不妨试试这些自动生成工具。\"]},\"503\":{\"h\":\"语法分析\",\"t\":[\"长期以来，语法分析对我而言一直是迷一样的存在，直到真正用递归下降的方式实现了一个。\",\"我们用了专门的一章讲解了“递归下降”与 BNF 文法的关系。希望能减少你对理论的厌恶。至少，实现起来并不是太难。\",\"如果有兴趣，可以学习学习这些文法，因为已经有许多自动生成的工具支持它们。这样你就不需要重复造轮子。可以看看 yacc 等工具，更先进的版本是 bsion。同时其它语言也有许多类似的支持。\",\"题外话，最近知道了一个叫“PEG 文法”的表示方法，无论是读起来，还是实现起来，都比 BNF 要容易，你也可以学习看看。\"]},\"504\":{\"h\":\"关于编代码\",\"t\":[\"这也是我自己的感慨吧。无论多好的教程，想要完全理解它，最好的方式恐怕还是要自己实现它。\",\"只是在编写代码的过程中，我们会遇到许多的挫折，例如需要考虑许多细节，或是调试起来十分困难。但也只有真正静下心来去克服它，我们才能有所成长吧。\",\"例如在编写表达式的解析时，大量重复的代码特别让人崩溃。还有就是调试编译器，简直痛苦地无话可说。\",\"P.S. 如果你按这个系列自己编写代码，记得事先写一些用于输出汇编代码的函数，很有帮助的。\",\"还有就是写这个系列的文章，开始的冲动过了之后，每写一篇都特别心烦，希望文章本身没有受我的这种情绪影响吧。\"]},\"505\":{\"h\":\"结语\",\"t\":[\"编程有趣又无趣，只有身在其中的我们才能体会吧。\"]},\"506\":{\"c\":[\"编译原理\"]},\"507\":{\"c\":[\"c\",\"编译器\",\"解释器\"]},\"508\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"509\":{\"h\":\"Design ASimpile CCompiler\"}},\"dirtCount\":0,\"index\":[[\"题外话\",{\"1\":{\"503\":1}}],[\"长期以来\",{\"1\":{\"503\":1}}],[\"难点已经不再是语法分析了\",{\"1\":{\"501\":1}}],[\"难以调试\",{\"1\":{\"391\":1}}],[\"难以增加\",{\"0\":{\"382\":1}}],[\"难以增加新的零件\",{\"0\":{\"138\":1}}],[\"难以根据类生成实例\",{\"1\":{\"311\":1}}],[\"跑起来\",{\"1\":{\"501\":1}}],[\"恭喜你完成了自己的\",{\"1\":{\"500\":1}}],[\"恭喜你\",{\"1\":{\"497\":1}}],[\"查看结果\",{\"1\":{\"496\":1}}],[\"查找已有标识符的方法是线性查找\",{\"1\":{\"424\":1}}],[\"减操作\",{\"1\":{\"494\":1}}],[\"减少程序的体积\",{\"1\":{\"400\":1}}],[\"减少重复代码\",{\"1\":{\"356\":1}}],[\"减少计数\",{\"1\":{\"250\":1}}],[\"减少了类之间的耦合度\",{\"1\":{\"153\":1}}],[\"减少了客户端代码与具体类之间的耦合\",{\"1\":{\"133\":1}}],[\"减少对象之间的直接交互\",{\"1\":{\"118\":1}}],[\"减少对象之间的直接依赖\",{\"1\":{\"118\":1}}],[\"明白了这点\",{\"1\":{\"490\":1}}],[\"明确了各个类的职责分工\",{\"1\":{\"178\":1}}],[\"回想起我们之前定义过的各个标记\",{\"1\":{\"489\":1}}],[\"回到并发竞争带来的安全问题上\",{\"1\":{\"96\":1}}],[\"诸如\",{\"1\":{\"483\":1,\"495\":1}}],[\"载入相应的值\",{\"1\":{\"481\":1}}],[\"加载变量的地址\",{\"1\":{\"481\":1}}],[\"加法保序性\",{\"0\":{\"67\":1}}],[\"加法消去律\",{\"0\":{\"59\":1},\"1\":{\"59\":1}}],[\"加法结合律\",{\"0\":{\"58\":1}}],[\"加法结果的唯一性\",{\"0\":{\"55\":1}}],[\"加法结果的存在性\",{\"0\":{\"54\":1}}],[\"加法交换律\",{\"0\":{\"57\":1}}],[\"加法的性质\",{\"0\":{\"56\":1}}],[\"加法的定义\",{\"0\":{\"53\":1}}],[\"⑥\",{\"1\":{\"481\":2}}],[\"⑤则是用于加载变量的值\",{\"1\":{\"481\":1}}],[\"⑤\",{\"1\":{\"481\":1}}],[\"④\",{\"1\":{\"481\":2}}],[\"找出并计算所有优先级大于\",{\"1\":{\"477\":1}}],[\"属于这前的\",{\"1\":{\"477\":1}}],[\"属性注入或方法注入\",{\"1\":{\"124\":1}}],[\"入栈\",{\"1\":{\"477\":9}}],[\"入度为\",{\"1\":{\"80\":1}}],[\"举一个例子\",{\"1\":{\"477\":1}}],[\"答曰\",{\"1\":{\"477\":1}}],[\"嘛\",{\"1\":{\"477\":1}}],[\"毕竟叫做\",{\"1\":{\"477\":1}}],[\"毕竟我们不是真正的计算机\",{\"1\":{\"407\":1}}],[\"哪个运算符后计算\",{\"1\":{\"477\":1}}],[\"哪些角色可以复用\",{\"0\":{\"280\":1}}],[\"哪些信息不应当共享\",{\"1\":{\"248\":1}}],[\"哪些信息应当共享\",{\"1\":{\"248\":1}}],[\"逆波兰式\",{\"1\":{\"477\":1}}],[\"赋值操作是优先级最低的运算符\",{\"1\":{\"490\":1}}],[\"赋值操作\",{\"0\":{\"490\":1},\"1\":{\"476\":1}}],[\"按位取反\",{\"0\":{\"486\":1},\"1\":{\"476\":1}}],[\"强制转换的作用是获取转换的类型\",{\"1\":{\"482\":1}}],[\"强制转换\",{\"0\":{\"482\":1},\"1\":{\"476\":1}}],[\"强引用\",{\"1\":{\"250\":1}}],[\"常量\",{\"0\":{\"479\":1},\"1\":{\"476\":1}}],[\"往往比词法分析\",{\"1\":{\"473\":1}}],[\"跟据条件表达式决定跳转的位置\",{\"1\":{\"468\":1}}],[\"跟它们在\",{\"1\":{\"420\":1}}],[\"种语句\",{\"1\":{\"467\":1}}],[\"感兴趣的话可以尝试自己实现它们\",{\"1\":{\"462\":1}}],[\"局部变量覆盖全局变量\",{\"1\":{\"460\":1}}],[\"局部变量是可以和全局变量同名的\",{\"1\":{\"459\":1}}],[\"③用于清除入栈的参数\",{\"1\":{\"481\":1}}],[\"③则与汇编代码的生成有关\",{\"1\":{\"460\":1}}],[\"③\",{\"1\":{\"460\":1,\"481\":1}}],[\"全局变量就恢复了原先的作用\",{\"1\":{\"459\":1}}],[\"全局变量或局部变量等\",{\"1\":{\"424\":1}}],[\"出栈\",{\"1\":{\"477\":2}}],[\"出了函数体\",{\"1\":{\"459\":1}}],[\"出题人不愿意写一个确定精度的\",{\"1\":{\"37\":1}}],[\"消耗了\",{\"1\":{\"459\":1}}],[\"消除左递归的相关方法\",{\"1\":{\"439\":1}}],[\"消除后的文法如下\",{\"1\":{\"439\":1}}],[\"②则是因为自增自减操作还需要处理是指针的情形\",{\"1\":{\"488\":1}}],[\"②中判断函数的类型\",{\"1\":{\"481\":1}}],[\"②\",{\"1\":{\"459\":1,\"460\":1,\"461\":1,\"481\":1,\"488\":1}}],[\"①中注意我们是顺序将参数入栈\",{\"1\":{\"481\":1}}],[\"①\",{\"1\":{\"459\":1,\"460\":1,\"461\":1,\"481\":1,\"488\":2}}],[\"敬请期待\",{\"1\":{\"452\":1,\"463\":1}}],[\"敬请批评指正\",{\"1\":{\"392\":1}}],[\"剩下的内容就是按部就班地将\",{\"1\":{\"452\":1}}],[\"值得注意的是在编译器中如何保存枚举变量的信息\",{\"1\":{\"449\":1}}],[\"亏我们说了一章的递归下降\",{\"1\":{\"445\":1}}],[\"掌握了递归下降的方法\",{\"1\":{\"441\":1}}],[\"花这么大精力讲解递归下降方法\",{\"1\":{\"441\":1}}],[\"采用自顶向下的编写方法就是要不断地实现我们需要的内容\",{\"1\":{\"447\":1}}],[\"采用递归向下的方法来实现编译器是很直观的\",{\"1\":{\"440\":1}}],[\"采用反证法\",{\"1\":{\"76\":1,\"79\":1}}],[\"否则会有一些问题\",{\"1\":{\"438\":1}}],[\"底\",{\"1\":{\"437\":1}}],[\"顶\",{\"1\":{\"437\":1}}],[\"右侧的式子代替\",{\"1\":{\"436\":1}}],[\"括起来的就称作\",{\"1\":{\"436\":1}}],[\"括号太多\",{\"1\":{\"39\":1}}],[\"范式\",{\"1\":{\"436\":1}}],[\"非终结符\",{\"1\":{\"436\":2,\"438\":1}}],[\"非本质的\",{\"1\":{\"249\":1}}],[\"终结符\",{\"1\":{\"436\":2}}],[\"终结符与非终结符\",{\"0\":{\"436\":1},\"1\":{\"434\":1}}],[\"四则运算的规则可以表示如下\",{\"1\":{\"436\":1}}],[\"四则运算的实现\",{\"0\":{\"440\":1},\"1\":{\"434\":1}}],[\"四则运算的递归下降\",{\"0\":{\"437\":1},\"1\":{\"434\":1}}],[\"左递归的消除\",{\"1\":{\"441\":1}}],[\"左递归\",{\"0\":{\"439\":1},\"1\":{\"434\":1,\"438\":1}}],[\"左手画方右手画圆在现实中本来就不成立\",{\"1\":{\"93\":1}}],[\"作用是减小语法分析器的复杂程度\",{\"1\":{\"431\":1}}],[\"作为观察者\",{\"1\":{\"306\":1}}],[\"作为被观察对象\",{\"1\":{\"306\":1}}],[\"作为设计人员\",{\"1\":{\"178\":1}}],[\"平时听到的\",{\"1\":{\"427\":1}}],[\"标准\",{\"1\":{\"481\":1}}],[\"标记开头的\",{\"1\":{\"481\":1}}],[\"标记\",{\"1\":{\"427\":2}}],[\"标识符的类型\",{\"1\":{\"424\":1}}],[\"标识符\",{\"1\":{\"424\":1}}],[\"标识符与符号表\",{\"0\":{\"424\":1},\"1\":{\"416\":1}}],[\"除了上述对表达式的解析外\",{\"1\":{\"496\":1}}],[\"除了开头的\",{\"1\":{\"452\":1}}],[\"除了跳过注释\",{\"1\":{\"427\":1}}],[\"除了核心的逻辑外还需要输入输出\",{\"1\":{\"413\":1}}],[\"段中的地址\",{\"1\":{\"426\":1}}],[\"段中\",{\"1\":{\"426\":1}}],[\"十六进制及八进制\",{\"1\":{\"425\":1}}],[\"十分有成就感\",{\"1\":{\"391\":1}}],[\"十分钟学会正确的github工作流\",{\"1\":{\"34\":1}}],[\"故通过\",{\"1\":{\"425\":1}}],[\"故而使用下列方式\",{\"1\":{\"424\":1}}],[\"故我们引入一个指令mset\",{\"1\":{\"400\":1}}],[\"刚存放函数的地址\",{\"1\":{\"424\":1}}],[\"型还是指针型\",{\"1\":{\"424\":1}}],[\"型\",{\"1\":{\"424\":1,\"480\":1,\"493\":2}}],[\"型的\",{\"1\":{\"400\":1}}],[\"顾名思义\",{\"1\":{\"424\":1}}],[\"顾客想吃什么口味都可以\",{\"1\":{\"219\":1}}],[\"遇到数字5\",{\"1\":{\"477\":1}}],[\"遇到数字4\",{\"1\":{\"477\":1}}],[\"遇到数字\",{\"1\":{\"477\":1}}],[\"遇到运算符\",{\"1\":{\"477\":3}}],[\"遇到新的标识符就去查这张表\",{\"1\":{\"424\":1}}],[\"遇到的时候就知道了\",{\"1\":{\"391\":1}}],[\"基于这个理由\",{\"1\":{\"424\":1}}],[\"基址指针\",{\"1\":{\"401\":1}}],[\"循环中\",{\"1\":{\"459\":1}}],[\"循环就没法准确地知道函数定义已经结束\",{\"1\":{\"459\":1}}],[\"循环可以用来跳过它\",{\"1\":{\"421\":1}}],[\"循环的作用就是跳过这些我们不识别的字符\",{\"1\":{\"421\":1}}],[\"循环呢\",{\"1\":{\"421\":1}}],[\"跳过当前错误并继续编译\",{\"1\":{\"421\":1}}],[\"源码中若包含一个数字\",{\"1\":{\"417\":1}}],[\"源地址\",{\"1\":{\"275\":1}}],[\"宏定义\",{\"0\":{\"423\":1},\"1\":{\"416\":1}}],[\"新的指令几乎不消耗资源\",{\"1\":{\"415\":1}}],[\"新增\",{\"1\":{\"138\":1}}],[\"添加一个新的指令需要设计许多新的电路\",{\"1\":{\"415\":1}}],[\"添加flask+nginx配置\",{\"1\":{\"25\":1}}],[\"位机器下\",{\"1\":{\"414\":1}}],[\"位的\",{\"1\":{\"414\":2}}],[\"位的机器中\",{\"1\":{\"400\":1}}],[\"写的程序要\",{\"1\":{\"413\":1}}],[\"写起来很无聊\",{\"1\":{\"391\":1}}],[\"计算\",{\"1\":{\"477\":3}}],[\"计算后会将栈顶的参数退栈\",{\"1\":{\"412\":1}}],[\"计算机的栈的状态\",{\"1\":{\"458\":1}}],[\"计算机的内部工作原理\",{\"0\":{\"399\":1},\"1\":{\"398\":1}}],[\"计算机中的寄存器用于存放计算机的运行状态\",{\"1\":{\"401\":1}}],[\"计算机中有三个基本部件需要我们关注\",{\"1\":{\"399\":1}}],[\"顺序\",{\"1\":{\"411\":1}}],[\"顺其自然反而能得到意想不到的收获\",{\"1\":{\"3\":1}}],[\"钱\",{\"1\":{\"407\":1}}],[\"汇编\",{\"1\":{\"473\":1,\"477\":1}}],[\"汇编的意义上\",{\"1\":{\"412\":1}}],[\"汇编代码\",{\"1\":{\"407\":1}}],[\"汇编指令设计并实现了我们自己的指令集\",{\"1\":{\"415\":1}}],[\"汇编指令\",{\"1\":{\"399\":1}}],[\"维基百科\",{\"1\":{\"407\":1}}],[\"事先声明一下\",{\"1\":{\"407\":1}}],[\"事实上\",{\"1\":{\"94\":1}}],[\"调用参数\",{\"1\":{\"411\":1}}],[\"调用结束时\",{\"1\":{\"407\":1}}],[\"调用装饰边框的方法\",{\"1\":{\"217\":1}}],[\"反之则是变量\",{\"1\":{\"448\":1}}],[\"反之则是除号\",{\"1\":{\"427\":1}}],[\"反过来\",{\"1\":{\"407\":1}}],[\"反向遍历\",{\"1\":{\"265\":1}}],[\"详细见下文\",{\"1\":{\"403\":1}}],[\"取址\",{\"1\":{\"484\":1}}],[\"取址操作\",{\"0\":{\"484\":1},\"1\":{\"476\":1}}],[\"取自\",{\"1\":{\"407\":1}}],[\"取值会更高效\",{\"1\":{\"403\":1}}],[\"取模运算就成为了编程中不可缺少的一部分\",{\"1\":{\"38\":1}}],[\"地址存放在\",{\"1\":{\"403\":1}}],[\"地址存放在栈中\",{\"1\":{\"403\":1}}],[\"操作\",{\"1\":{\"403\":1}}],[\"操作系统将我们使用的虚拟地址映射到了到实际的内存上\",{\"1\":{\"400\":1}}],[\"放入寄存器\",{\"1\":{\"403\":1}}],[\"识别这些参数的类型\",{\"1\":{\"403\":1}}],[\"风格\",{\"1\":{\"403\":1}}],[\"风格统一\",{\"0\":{\"48\":1}}],[\"带有参数的指令在前\",{\"1\":{\"402\":1}}],[\"带颜色的大型文字\",{\"1\":{\"248\":1}}],[\"稍后你会看到\",{\"1\":{\"402\":1}}],[\"能自己编译自己\",{\"1\":{\"496\":1}}],[\"能大概理解吗\",{\"1\":{\"448\":1}}],[\"能减小语法分析复杂度\",{\"1\":{\"427\":1}}],[\"能理解的语言\",{\"1\":{\"402\":1}}],[\"能识别的命令的集合\",{\"1\":{\"402\":1}}],[\"能不能理解\",{\"1\":{\"388\":1}}],[\"永远指向当前的栈顶\",{\"1\":{\"401\":1}}],[\"真正的计算机中有许多不同种类的寄存器\",{\"1\":{\"401\":1}}],[\"真正为其分配内存\",{\"1\":{\"400\":1}}],[\"真正来实现一个简单的编译器\",{\"1\":{\"389\":1}}],[\"综上\",{\"1\":{\"400\":1,\"477\":1}}],[\"综上所述\",{\"1\":{\"54\":1,\"55\":1,\"59\":1,\"70\":1,\"71\":1,\"76\":1}}],[\"理论上所有的变量返回的标记都应该是\",{\"1\":{\"424\":1}}],[\"理论上我们的虚拟机需要维护一个堆用于内存分配\",{\"1\":{\"400\":1}}],[\"理论很复杂\",{\"0\":{\"389\":1}}],[\"^\",{\"1\":{\"400\":1,\"412\":1,\"428\":1,\"486\":1,\"493\":3}}],[\"堆\",{\"1\":{\"400\":1}}],[\"栈中的调用帧是什么样的\",{\"1\":{\"411\":1}}],[\"栈\",{\"1\":{\"400\":1,\"458\":1,\"477\":1}}],[\"未初始化数据段\",{\"1\":{\"400\":1}}],[\"物理内存\",{\"1\":{\"400\":1}}],[\"现代操作系统在操作内存时\",{\"1\":{\"400\":1}}],[\"现在我们要回忆如何将\",{\"1\":{\"458\":1}}],[\"现在\",{\"1\":{\"370\":1}}],[\"现在电话亭上加了把锁\",{\"1\":{\"94\":1}}],[\"现在不存在这种情况了\",{\"1\":{\"40\":1}}],[\"说一说编写编译器值得注意的一些问题\",{\"1\":{\"500\":1}}],[\"说得通俗一点就是自己实现一套汇编语言\",{\"1\":{\"398\":1}}],[\"说明\",{\"1\":{\"159\":1}}],[\"小于\",{\"1\":{\"489\":1}}],[\"小结\",{\"0\":{\"415\":1,\"431\":1,\"441\":1,\"452\":1,\"463\":1,\"473\":1,\"497\":1},\"1\":{\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1}}],[\"小组中的\",{\"1\":{\"274\":1}}],[\"测试\",{\"0\":{\"414\":1},\"1\":{\"398\":1}}],[\"子函数要返回时\",{\"1\":{\"407\":1}}],[\"子函数调用\",{\"0\":{\"407\":1},\"1\":{\"398\":1}}],[\"子类责任\",{\"1\":{\"370\":1}}],[\"子类具有实现在父类中所声明的抽象方法的责任\",{\"1\":{\"370\":1}}],[\"子类只需关注具体步骤的实现\",{\"1\":{\"366\":1}}],[\"子类可以在不改变算法结构的情况下\",{\"1\":{\"365\":1}}],[\"子类可以替换父类\",{\"1\":{\"129\":1}}],[\"子类应当能够替代父类的实例而不影响程序的正确性\",{\"1\":{\"223\":1}}],[\"子类应保持父类的行为\",{\"1\":{\"114\":1}}],[\"子类的方法签名应与父类一致\",{\"1\":{\"114\":1}}],[\"指定了当前的优先级\",{\"1\":{\"489\":1}}],[\"指针加上数值等于将指针移位\",{\"1\":{\"493\":1}}],[\"指针相对位置的形式\",{\"1\":{\"481\":1}}],[\"指针取值\",{\"0\":{\"483\":1},\"1\":{\"476\":1}}],[\"指针和对应的位移量进行的\",{\"1\":{\"458\":1}}],[\"指针寄存器\",{\"1\":{\"401\":1}}],[\"指向的是同一个变量\",{\"1\":{\"424\":1}}],[\"指出错误发生的位置\",{\"1\":{\"421\":2}}],[\"指的是\",{\"1\":{\"408\":1}}],[\"指的是需要编写哪些类和需要实现哪些方法都非常清楚\",{\"1\":{\"137\":1}}],[\"指令加载实际内容\",{\"1\":{\"484\":1}}],[\"指令加载对应的值\",{\"1\":{\"481\":1}}],[\"指令了\",{\"1\":{\"484\":1}}],[\"指令存入\",{\"1\":{\"481\":1}}],[\"指令将它加载到\",{\"1\":{\"479\":1}}],[\"指令无法操作除\",{\"1\":{\"411\":1}}],[\"指令功能有限\",{\"1\":{\"409\":1}}],[\"指令同样功能不足\",{\"1\":{\"407\":1}}],[\"指令并无法指定寄存器\",{\"1\":{\"407\":1}}],[\"指令来代替它\",{\"1\":{\"407\":1}}],[\"指令呢\",{\"1\":{\"407\":1}}],[\"指令的参数\",{\"1\":{\"405\":1}}],[\"指令只能将\",{\"1\":{\"403\":1}}],[\"指令中\",{\"1\":{\"403\":1}}],[\"指令其实有许多变种\",{\"1\":{\"403\":1}}],[\"指令拆分成这些指令\",{\"1\":{\"403\":1}}],[\"指令拆分成\",{\"1\":{\"403\":1}}],[\"指令有两个参数\",{\"1\":{\"403\":1}}],[\"指令\",{\"1\":{\"400\":1,\"405\":1,\"407\":1,\"410\":2,\"481\":1}}],[\"指令集是\",{\"1\":{\"402\":1}}],[\"指令集\",{\"0\":{\"402\":1},\"1\":{\"398\":1}}],[\"寄存器指向的是\",{\"1\":{\"405\":1}}],[\"寄存器设置为指定的\",{\"1\":{\"405\":1}}],[\"寄存器或是一个内存地址\",{\"1\":{\"403\":1}}],[\"寄存器及内存\",{\"1\":{\"399\":1}}],[\"寄存器\",{\"0\":{\"401\":1},\"1\":{\"398\":1}}],[\"逐个读取文件中的字符\",{\"1\":{\"397\":1}}],[\"逐个通知每个观察者可能会导致性能问题\",{\"1\":{\"305\":1}}],[\"读取一个文件\",{\"1\":{\"397\":1}}],[\"获取下一个标记\",{\"1\":{\"397\":1}}],[\"构建语法分析器\",{\"1\":{\"396\":1}}],[\"构建我们的词法分析器\",{\"1\":{\"396\":1}}],[\"构建我们自己的虚拟机以及指令集\",{\"1\":{\"396\":1}}],[\"屏蔽了许多实现上的细节\",{\"1\":{\"396\":1}}],[\"已经把\",{\"1\":{\"410\":1}}],[\"已经有许多工具能帮助我们处理阶段1和2\",{\"1\":{\"396\":1}}],[\"已经编写完成的具体工厂越多\",{\"1\":{\"138\":1}}],[\"目标代码的生成\",{\"1\":{\"396\":1}}],[\"目录类\",{\"0\":{\"203\":1}}],[\"目录可以包含其他目录和文件\",{\"1\":{\"201\":1}}],[\"目录和文件都可以被视为条目\",{\"1\":{\"201\":1}}],[\"目录的构建\",{\"1\":{\"90\":1}}],[\"系列的第三篇\",{\"1\":{\"398\":1}}],[\"系列的第二篇\",{\"1\":{\"395\":1}}],[\"系统的线程调度器是假设不同的线程是毫无关系的\",{\"1\":{\"94\":1}}],[\"系统\",{\"0\":{\"80\":1}}],[\"具有一定的参考价值\",{\"1\":{\"392\":1}}],[\"具体的实现如下\",{\"1\":{\"410\":1}}],[\"具体而言\",{\"1\":{\"216\":1}}],[\"具体类\",{\"1\":{\"135\":1}}],[\"具体实现很容易\",{\"1\":{\"440\":1}}],[\"具体实现\",{\"1\":{\"125\":1}}],[\"观看效果更佳\",{\"1\":{\"392\":1}}],[\"观察者\",{\"1\":{\"301\":1}}],[\"观察者模式在\",{\"1\":{\"306\":1}}],[\"观察者模式定义了一种一对多的依赖关系\",{\"1\":{\"298\":1}}],[\"观察者模式非常适合用于需要自动更新的场景\",{\"1\":{\"297\":1}}],[\"英文的\",{\"1\":{\"392\":1}}],[\"繁琐\",{\"1\":{\"391\":1}}],[\"做好心理准备\",{\"0\":{\"391\":1}}],[\"做任何修改\",{\"1\":{\"167\":1}}],[\"声明\",{\"1\":{\"390\":1}}],[\"声明抽象方法是希望达到以下目的\",{\"1\":{\"370\":1}}],[\"声明抽象方法\",{\"1\":{\"347\":1}}],[\"号称用\",{\"1\":{\"390\":1}}],[\"名叫\",{\"1\":{\"390\":1}}],[\"名字现在是bob\",{\"1\":{\"320\":1}}],[\"名字现在是alice\",{\"1\":{\"320\":1}}],[\"名字现在是\",{\"1\":{\"319\":2}}],[\"名字\",{\"1\":{\"159\":1}}],[\"内置函数有对应的汇编指令\",{\"1\":{\"481\":1}}],[\"内置函数的行为也和关键字类似\",{\"1\":{\"429\":1}}],[\"内置函数\",{\"0\":{\"413\":1},\"1\":{\"398\":1}}],[\"内存地址的数据\",{\"1\":{\"400\":1}}],[\"内存用于存储数据\",{\"1\":{\"400\":1}}],[\"内存\",{\"0\":{\"400\":1},\"1\":{\"398\":1}}],[\"内存之外的其它资源\",{\"0\":{\"251\":1}}],[\"内容相对容易一些\",{\"1\":{\"473\":1}}],[\"内容为\",{\"1\":{\"397\":1}}],[\"内容过于复杂\",{\"1\":{\"389\":1}}],[\"依旧不能确定是否立即计算\",{\"1\":{\"477\":1}}],[\"依旧帮助不了我们学习编译器\",{\"1\":{\"389\":1}}],[\"依赖于状态的处理\",{\"0\":{\"347\":1},\"1\":{\"347\":4,\"348\":1,\"350\":1}}],[\"依赖于特定应用程序就意味着难以复用\",{\"1\":{\"280\":1}}],[\"依赖于特定应用程序的部分都被封装在扮演\",{\"1\":{\"280\":1}}],[\"依赖注入\",{\"1\":{\"124\":1}}],[\"依赖倒置原则\",{\"0\":{\"123\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"学习编译原理时常常着眼于词法分析和语法分析\",{\"1\":{\"501\":1}}],[\"学习了编译原理\",{\"1\":{\"388\":1}}],[\"学了这么多也没用\",{\"1\":{\"389\":1}}],[\"什么是表达式\",{\"1\":{\"476\":1}}],[\"什么是递归下降\",{\"0\":{\"435\":1},\"1\":{\"434\":1}}],[\"什么是词法分析器\",{\"0\":{\"417\":1},\"1\":{\"416\":1}}],[\"什么都不干的编译器\",{\"1\":{\"397\":1}}],[\"什么\",{\"1\":{\"389\":1}}],[\"什么时候会从\",{\"1\":{\"348\":1}}],[\"什么时候从一个状态迁移到其他状态\",{\"1\":{\"348\":1}}],[\"词法分析中如何处理标识符与符号表\",{\"1\":{\"431\":1}}],[\"词法分析\",{\"0\":{\"502\":1},\"1\":{\"389\":1,\"500\":1}}],[\"词法分析器本身可以认为是一个编译器\",{\"1\":{\"431\":1}}],[\"词法分析器本质上也是编译器\",{\"1\":{\"427\":1}}],[\"词法分析器中直接解析这些关键字\",{\"1\":{\"429\":1}}],[\"词法分析器会把扫描到的标识符全都保存到一张表中\",{\"1\":{\"424\":1}}],[\"词法分析器将输出\",{\"1\":{\"417\":1}}],[\"词法分析器以源码字符串为输入\",{\"1\":{\"417\":1}}],[\"词法分析器用于对源码字符串做预处理\",{\"1\":{\"417\":1}}],[\"词法分析器的作用是对源码字符串进行预处理\",{\"1\":{\"431\":1}}],[\"词法分析器的框架\",{\"0\":{\"421\":1},\"1\":{\"416\":1}}],[\"词法分析器的实现\",{\"0\":{\"419\":1},\"1\":{\"416\":1}}],[\"词法分析器与编译器\",{\"0\":{\"418\":1},\"1\":{\"416\":1}}],[\"词法分析器\",{\"0\":{\"416\":1},\"1\":{\"387\":1,\"395\":1,\"396\":1,\"398\":1,\"416\":1,\"418\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"听不懂\",{\"1\":{\"389\":1}}],[\"听起来有些贬义的意思\",{\"1\":{\"183\":1}}],[\"好吧\",{\"1\":{\"388\":1,\"497\":1}}],[\"装b\",{\"1\":{\"388\":1}}],[\"装饰\",{\"1\":{\"217\":2}}],[\"装饰边框与被装饰物具有相同的接口\",{\"1\":{\"217\":1}}],[\"装饰边框与被装饰物具有一致性\",{\"1\":{\"216\":1}}],[\"装饰边框\",{\"1\":{\"216\":1,\"217\":1}}],[\"装饰边框里面的\",{\"1\":{\"216\":1}}],[\"装饰器模式允许我们在不修改现有代码的情况下扩展对象的功能\",{\"1\":{\"212\":1}}],[\"装饰器模式允许我们通过将对象放入包含行为的特殊封装对象中来扩展对象的功能\",{\"1\":{\"211\":1}}],[\"装饰者模式等\",{\"1\":{\"111\":1}}],[\"像是程序员的第一道门槛\",{\"1\":{\"388\":1}}],[\"像这样改一个地方会对多个地方产生影响并非总是不好\",{\"1\":{\"248\":1}}],[\"递归调用的实质也是栈的处理\",{\"1\":{\"477\":1}}],[\"递归下下降方法对\",{\"1\":{\"438\":1}}],[\"递归下降是从起始的非终结符开始\",{\"1\":{\"437\":1}}],[\"递归下降法\",{\"1\":{\"389\":1}}],[\"递归下降\",{\"0\":{\"434\":1},\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1,\"503\":1}}],[\"递归\",{\"1\":{\"388\":1}}],[\"算法\",{\"1\":{\"388\":1}}],[\"算术公理系统\",{\"0\":{\"50\":1}}],[\"谈谈这个系列的初衷\",{\"1\":{\"387\":1}}],[\"表\",{\"1\":{\"424\":1}}],[\"表达式结束\",{\"1\":{\"477\":1}}],[\"表达式的解析难点有二\",{\"1\":{\"476\":1}}],[\"表达式是将各种语言要素的一个组合\",{\"1\":{\"476\":1}}],[\"表达式可能相对不好理解一些\",{\"1\":{\"452\":1}}],[\"表达式\",{\"0\":{\"476\":1},\"1\":{\"387\":1,\"395\":1,\"397\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":2,\"455\":2,\"466\":1,\"467\":1,\"476\":1,\"500\":1}}],[\"表示转换成实际的代码\",{\"1\":{\"438\":1}}],[\"表示是十分接近的\",{\"1\":{\"438\":1}}],[\"表示选择\",{\"1\":{\"436\":1}}],[\"表示字符\",{\"1\":{\"426\":1}}],[\"表示换行符\",{\"1\":{\"426\":1}}],[\"表示将\",{\"1\":{\"403\":1}}],[\"表示该对象不再被使用\",{\"1\":{\"250\":1}}],[\"表示装饰边框的\",{\"1\":{\"216\":1}}],[\"表示\",{\"0\":{\"445\":1,\"456\":1},\"1\":{\"51\":1,\"54\":1,\"55\":1,\"70\":1,\"71\":1,\"426\":1,\"444\":1,\"455\":1}}],[\"语法\",{\"1\":{\"441\":1}}],[\"语法分析对我而言一直是迷一样的存在\",{\"1\":{\"503\":1}}],[\"语法分析更困难\",{\"1\":{\"473\":1}}],[\"语法分析的入口\",{\"1\":{\"397\":1}}],[\"语法分析器的复杂度会大大降低\",{\"1\":{\"417\":1}}],[\"语法分析器\",{\"1\":{\"396\":1}}],[\"语法分析是一样的\",{\"1\":{\"395\":1}}],[\"语法分析\",{\"0\":{\"503\":1},\"1\":{\"389\":1,\"500\":1}}],[\"语句简单\",{\"1\":{\"469\":1}}],[\"语句比\",{\"1\":{\"469\":1}}],[\"语句后方的代码\",{\"1\":{\"468\":1}}],[\"语句是可以省略的\",{\"1\":{\"468\":1}}],[\"语句的作用是跳转\",{\"1\":{\"468\":1}}],[\"语句和表达式的解析\",{\"1\":{\"466\":1}}],[\"语句就是用来向前查看标记以确定使用哪一个产生式\",{\"1\":{\"448\":1}}],[\"语句\",{\"0\":{\"466\":1,\"467\":1,\"468\":1,\"469\":1,\"470\":1},\"1\":{\"387\":1,\"395\":1,\"398\":1,\"406\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":5,\"467\":1,\"468\":1,\"470\":1,\"476\":1,\"491\":2,\"500\":1}}],[\"语言运算符优先级\",{\"1\":{\"477\":1}}],[\"语言定义了各种表达式的优先级\",{\"1\":{\"477\":1}}],[\"语言区分\",{\"1\":{\"467\":1}}],[\"语言不太一致\",{\"1\":{\"461\":1}}],[\"语言与现代的\",{\"1\":{\"461\":1}}],[\"语言中唯一的一个三元运算符\",{\"1\":{\"491\":1}}],[\"语言中\",{\"1\":{\"427\":1,\"493\":1}}],[\"语言中标识符可以是全局的也可以是局部的\",{\"1\":{\"424\":1}}],[\"语言中空格是用来作为分隔用的\",{\"1\":{\"421\":1}}],[\"语言中的优先级有关\",{\"1\":{\"420\":1}}],[\"语言中的赋值语句\",{\"1\":{\"403\":1}}],[\"语言中我们经常使用的\",{\"1\":{\"413\":1}}],[\"语言中支持的运算符都提供对应汇编指令\",{\"1\":{\"412\":1}}],[\"语言调用标准\",{\"1\":{\"407\":1}}],[\"语言代码\",{\"1\":{\"397\":1}}],[\"语言程序\",{\"1\":{\"397\":1}}],[\"语言的时候你可能已经知道了\",{\"1\":{\"495\":1}}],[\"语言的字符串常量支持如下风格\",{\"1\":{\"479\":1}}],[\"语言的文法\",{\"1\":{\"444\":1}}],[\"语言的宏定义以字符\",{\"1\":{\"423\":1}}],[\"语言的调用标准是\",{\"1\":{\"407\":1}}],[\"语言的源代码文件\",{\"1\":{\"395\":1}}],[\"语言的解释器\",{\"1\":{\"395\":1}}],[\"语言的编译器\",{\"1\":{\"387\":1}}],[\"语言编译器系列共有10个部分\",{\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"语言编译器\",{\"0\":{\"387\":1,\"395\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1},\"1\":{\"387\":13,\"390\":3,\"395\":12,\"398\":12,\"416\":10,\"434\":10,\"444\":10,\"455\":10,\"466\":10,\"476\":10,\"500\":11}}],[\"虚拟内存可以理解为一种映射\",{\"1\":{\"400\":1}}],[\"虚拟内存\",{\"1\":{\"400\":1}}],[\"虚拟机与目标代码\",{\"0\":{\"501\":1},\"1\":{\"500\":1}}],[\"虚拟机中讲解的指令是对应的\",{\"1\":{\"481\":1}}],[\"虚拟机上运行我们提供的这些指令时\",{\"1\":{\"413\":1}}],[\"虚拟机的入口\",{\"1\":{\"397\":1}}],[\"虚拟机\",{\"1\":{\"387\":1,\"395\":1,\"398\":2,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"463\":1,\"466\":1,\"476\":1,\"481\":1,\"500\":1}}],[\"虚拟代理用于控制对资源密集型对象的访问\",{\"1\":{\"327\":1}}],[\"虚拟代理\",{\"1\":{\"322\":1}}],[\"原则上我们需要立即计算\",{\"1\":{\"477\":1}}],[\"原则上我们是不讲这么深入\",{\"1\":{\"439\":1}}],[\"原因之一就是减少了语法分析器需要\",{\"1\":{\"427\":1}}],[\"原因有二\",{\"1\":{\"419\":1}}],[\"原因是当我们从子函数中返回时\",{\"1\":{\"407\":1}}],[\"原因是默认计算的结果是存放在\",{\"1\":{\"403\":1}}],[\"原因是太复杂了\",{\"1\":{\"389\":1}}],[\"原因只有一个\",{\"1\":{\"388\":1}}],[\"原文链接\",{\"1\":{\"387\":2}}],[\"原文转载自\",{\"1\":{\"93\":1,\"97\":1}}],[\"原作者\",{\"1\":{\"387\":1}}],[\"手把手教你构建\",{\"0\":{\"387\":1,\"395\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1},\"1\":{\"387\":13,\"395\":12,\"398\":13,\"416\":11,\"434\":11,\"444\":11,\"455\":11,\"466\":11,\"476\":11,\"500\":11}}],[\"手动修改后可正常运行\",{\"1\":{\"91\":1}}],[\"尽管代码看起来比较简单\",{\"1\":{\"497\":1}}],[\"尽管理论不是必需的\",{\"1\":{\"441\":1}}],[\"尽管我们还没定义\",{\"1\":{\"407\":1}}],[\"尽管有许多语法并不支持\",{\"1\":{\"387\":1}}],[\"尽管使用\",{\"1\":{\"382\":1}}],[\"尽量减少类之间的耦合\",{\"1\":{\"129\":1}}],[\"尽量减少类的公开方法\",{\"1\":{\"118\":1}}],[\"尽量使用组合\",{\"1\":{\"126\":1}}],[\"希望文章本身没有受我的这种情绪影响吧\",{\"1\":{\"504\":1}}],[\"希望能减少你对理论的厌恶\",{\"1\":{\"503\":1}}],[\"希望通过这个系列\",{\"1\":{\"387\":1}}],[\"希望通过本章的学习\",{\"1\":{\"227\":1,\"415\":1}}],[\"希望扩展某个功能\",{\"1\":{\"380\":1}}],[\"绝不能毫无理由地禁止扩展类\",{\"1\":{\"380\":1}}],[\"绝不能因为先调用\",{\"1\":{\"302\":1}}],[\"处理\",{\"1\":{\"379\":1}}],[\"处理器本来同一时间就只能有一个线程在运行\",{\"1\":{\"94\":1}}],[\"双重分发\",{\"0\":{\"378\":1}}],[\"双重检查锁定示例代码\",{\"0\":{\"338\":1}}],[\"访问数据结构并处理数据\",{\"2\":{\"386\":1}}],[\"访问\",{\"1\":{\"378\":1}}],[\"访问者\",{\"1\":{\"373\":1}}],[\"访问代理用于控制对实际对象的访问权限\",{\"1\":{\"327\":1}}],[\"数组取值操作\",{\"0\":{\"495\":1},\"1\":{\"476\":1}}],[\"数字中较为复杂的一点是需要支持十进制\",{\"1\":{\"425\":1}}],[\"数字\",{\"0\":{\"425\":1},\"1\":{\"416\":1,\"417\":1,\"478\":1}}],[\"数据段以及栈\",{\"1\":{\"400\":1}}],[\"数据段\",{\"1\":{\"400\":1,\"458\":1}}],[\"数据结构\",{\"1\":{\"388\":1}}],[\"数据结构很重要\",{\"1\":{\"379\":1}}],[\"数据结构与处理被分离开来\",{\"1\":{\"373\":1}}],[\"数学运算符\",{\"0\":{\"493\":1},\"1\":{\"476\":1}}],[\"数学\",{\"2\":{\"86\":1}}],[\"期待子类去实现抽象方法\",{\"1\":{\"370\":1}}],[\"站在父类的角度进行思考\",{\"1\":{\"370\":1}}],[\"很有帮助的\",{\"1\":{\"504\":1}}],[\"很好的初学者教程\",{\"1\":{\"392\":1}}],[\"很难懂\",{\"1\":{\"390\":1}}],[\"很容易着眼于以下几点\",{\"1\":{\"370\":1}}],[\"很可能随着需求变更实例数量会慢慢变多\",{\"1\":{\"279\":1}}],[\"延申\",{\"0\":{\"370\":1}}],[\"延迟实例化\",{\"1\":{\"318\":1}}],[\"允许子类实现具体的步骤\",{\"1\":{\"366\":1}}],[\"低速但计算准确的算法\",{\"1\":{\"361\":1}}],[\"高速但计算上可能有\",{\"1\":{\"361\":1}}],[\"高层模块不依赖低层模块\",{\"1\":{\"129\":1}}],[\"高层模块不应该依赖低层模块\",{\"1\":{\"123\":1}}],[\"高层模块依赖抽象接口\",{\"1\":{\"125\":1}}],[\"验算\",{\"1\":{\"361\":1}}],[\"速度快但耗内存的策略\",{\"1\":{\"361\":1}}],[\"速度慢但省内存的策略\",{\"1\":{\"361\":1}}],[\"例程的水平\",{\"1\":{\"360\":1}}],[\"例如需要考虑许多细节\",{\"1\":{\"504\":1}}],[\"例如对变量\",{\"1\":{\"484\":1}}],[\"例如参数的位置\",{\"1\":{\"463\":1}}],[\"例如只要遇到\",{\"1\":{\"448\":1}}],[\"例如用\",{\"1\":{\"426\":1}}],[\"例如数据库连接\",{\"1\":{\"332\":1}}],[\"例如事件对象或数据包\",{\"1\":{\"304\":1}}],[\"例如在编写表达式的解析时\",{\"1\":{\"504\":1}}],[\"例如在应用程序关闭后重新打开时恢复状态\",{\"1\":{\"291\":1}}],[\"例如在用户进行撤销操作之前\",{\"1\":{\"291\":1}}],[\"例如增加一个具体方法\",{\"1\":{\"155\":1}}],[\"例如tablefactory\",{\"1\":{\"135\":1}}],[\"例如策略模式\",{\"1\":{\"111\":1}}],[\"例如添加新插件\",{\"1\":{\"90\":1}}],[\"例如\",{\"1\":{\"90\":1,\"138\":2,\"156\":1,\"167\":1,\"168\":1,\"180\":1,\"183\":1,\"201\":1,\"217\":1,\"248\":1,\"269\":1,\"280\":1,\"297\":1,\"302\":1,\"303\":1,\"305\":1,\"322\":1,\"323\":1,\"327\":3,\"348\":1,\"360\":2,\"361\":2,\"382\":1,\"383\":1,\"400\":1,\"407\":1,\"413\":1,\"417\":1,\"420\":1,\"424\":1,\"429\":1,\"436\":1,\"437\":1,\"476\":1}}],[\"例如很多期望概率题\",{\"1\":{\"37\":1}}],[\"例如许多计数\",{\"1\":{\"37\":1}}],[\"仅仅修改\",{\"1\":{\"360\":1}}],[\"了解自动生成词法分析器的原理\",{\"1\":{\"502\":1}}],[\"了解了协程如何主动切换\",{\"1\":{\"96\":1}}],[\"了\",{\"1\":{\"360\":1,\"427\":1}}],[\"布\",{\"1\":{\"357\":1}}],[\"剪刀\",{\"1\":{\"357\":1}}],[\"石头\",{\"1\":{\"357\":1}}],[\"另外\",{\"1\":{\"414\":1,\"427\":1,\"438\":1,\"493\":1}}],[\"另外一种算法\",{\"1\":{\"361\":1}}],[\"另外一种策略是\",{\"1\":{\"357\":1}}],[\"另一个特殊的地方是我们需要支持转义符\",{\"1\":{\"426\":1}}],[\"另一点是我们的\",{\"1\":{\"403\":1}}],[\"另一种方法是传递具体的更新信息\",{\"1\":{\"304\":1}}],[\"另一方面需要对照生成的代码来调试\",{\"1\":{\"391\":1}}],[\"另一方面希望挑战一下自己\",{\"1\":{\"388\":1}}],[\"另一方面\",{\"1\":{\"95\":1,\"249\":1,\"380\":1,\"403\":1}}],[\"另一方面采取了常数更小的加减法操作\",{\"1\":{\"41\":1}}],[\"游戏\",{\"1\":{\"357\":1}}],[\"猜拳\",{\"1\":{\"357\":1}}],[\"策略模式的主要优点包括\",{\"1\":{\"356\":1}}],[\"至少\",{\"1\":{\"503\":1}}],[\"至少必须在阅读了\",{\"1\":{\"180\":1}}],[\"至此\",{\"1\":{\"380\":1}}],[\"至于这个参数是否是\",{\"1\":{\"351\":1}}],[\"向下\",{\"1\":{\"437\":1}}],[\"向前看标记\",{\"1\":{\"448\":1}}],[\"向前看\",{\"1\":{\"427\":1,\"438\":1}}],[\"向\",{\"1\":{\"351\":2}}],[\"忘记实现方法\",{\"1\":{\"350\":1}}],[\"忘记取模\",{\"1\":{\"39\":1}}],[\"必须先查看它的右方\",{\"1\":{\"477\":1}}],[\"必须先获得gil锁\",{\"1\":{\"94\":1}}],[\"必须要考虑到将来可能会扩展类\",{\"1\":{\"380\":1}}],[\"必须十分小心\",{\"1\":{\"349\":1}}],[\"输出是标记流\",{\"1\":{\"431\":1}}],[\"输出标记流\",{\"1\":{\"418\":1}}],[\"输出汇编代码\",{\"1\":{\"418\":1}}],[\"输出为标记流\",{\"1\":{\"417\":1}}],[\"输出\",{\"1\":{\"414\":1}}],[\"输出和下一个状态\",{\"1\":{\"348\":1}}],[\"输入是源码\",{\"1\":{\"431\":1}}],[\"输入和内部状态\",{\"1\":{\"348\":1}}],[\"输入任意邮箱和刚才生成的序列号到激活窗口\",{\"1\":{\"106\":1}}],[\"输入\",{\"1\":{\"33\":1,\"106\":2}}],[\"程序需要回到跳转之前的地方继续运行\",{\"1\":{\"407\":1}}],[\"程序计数器\",{\"1\":{\"401\":1}}],[\"程序运行的状态保存在寄存器中\",{\"1\":{\"399\":1}}],[\"程序运行中也可以切换策略\",{\"0\":{\"361\":1}}],[\"程序的整体结构也会更加清晰\",{\"1\":{\"348\":1}}],[\"程序可能会无法正常工作\",{\"1\":{\"180\":1}}],[\"扮演\",{\"1\":{\"348\":1}}],[\"呢\",{\"1\":{\"347\":1}}],[\"告诉我们存在还没有实现的方法\",{\"1\":{\"350\":1}}],[\"告诉\",{\"1\":{\"347\":1}}],[\"条件分支就会越多\",{\"1\":{\"346\":1}}],[\"条通信线路\",{\"1\":{\"279\":4}}],[\"开始的冲动过了之后\",{\"1\":{\"504\":1}}],[\"开头\",{\"1\":{\"423\":1}}],[\"开发过程将会变得非常困难\",{\"1\":{\"380\":1}}],[\"开发人员可以在编写一个\",{\"1\":{\"346\":1}}],[\"开闭原则是面向对象可复用设计的基石\",{\"1\":{\"109\":1}}],[\"开闭原则\",{\"0\":{\"110\":1,\"380\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"から\",{\"1\":{\"344\":3}}],[\"から$\",{\"1\":{\"343\":1}}],[\"へ状態が変化しました\",{\"1\":{\"343\":1,\"344\":3}}],[\"現在時刻は23\",{\"1\":{\"344\":1}}],[\"現在時刻は22\",{\"1\":{\"344\":1}}],[\"現在時刻は21\",{\"1\":{\"344\":1}}],[\"現在時刻は20\",{\"1\":{\"344\":1}}],[\"現在時刻は19\",{\"1\":{\"344\":1}}],[\"現在時刻は18\",{\"1\":{\"344\":1}}],[\"現在時刻は17\",{\"1\":{\"344\":1}}],[\"現在時刻は16\",{\"1\":{\"344\":1}}],[\"現在時刻は15\",{\"1\":{\"344\":1}}],[\"現在時刻は14\",{\"1\":{\"344\":1}}],[\"現在時刻は13\",{\"1\":{\"344\":1}}],[\"現在時刻は12\",{\"1\":{\"344\":1}}],[\"現在時刻は11\",{\"1\":{\"344\":1}}],[\"現在時刻は10\",{\"1\":{\"344\":1}}],[\"現在時刻は09\",{\"1\":{\"344\":1}}],[\"現在時刻は08\",{\"1\":{\"344\":1}}],[\"現在時刻は07\",{\"1\":{\"344\":1}}],[\"現在時刻は06\",{\"1\":{\"344\":1}}],[\"現在時刻は05\",{\"1\":{\"344\":1}}],[\"現在時刻は04\",{\"1\":{\"344\":1}}],[\"現在時刻は03\",{\"1\":{\"344\":1}}],[\"現在時刻は02\",{\"1\":{\"344\":1}}],[\"現在時刻は01\",{\"1\":{\"344\":1}}],[\"現在時刻は00\",{\"1\":{\"344\":1}}],[\"現在時刻は\",{\"1\":{\"343\":1}}],[\"夜间通话录音\",{\"1\":{\"343\":1,\"344\":16}}],[\"夜间\",{\"1\":{\"343\":2,\"344\":19}}],[\"夜间使用金库\",{\"1\":{\"343\":1,\"344\":16}}],[\"紧急\",{\"1\":{\"343\":1,\"344\":16}}],[\"紧急铃\",{\"1\":{\"343\":2,\"344\":24}}],[\"白天\",{\"1\":{\"343\":4,\"344\":27,\"346\":1}}],[\"金库使用\",{\"1\":{\"343\":1,\"344\":8}}],[\"函数结束时退出进程\",{\"1\":{\"496\":1}}],[\"函数调用\",{\"1\":{\"476\":1}}],[\"函数体的代码如下\",{\"1\":{\"461\":1}}],[\"函数体的解析\",{\"0\":{\"461\":1},\"1\":{\"455\":1}}],[\"函数参数与汇编代码\",{\"0\":{\"458\":1},\"1\":{\"455\":1}}],[\"函数包装起来\",{\"1\":{\"450\":1}}],[\"函数是一个辅助函数\",{\"1\":{\"450\":1}}],[\"函数我们将放到下一章中讲解\",{\"1\":{\"450\":1}}],[\"函数还没有出现过\",{\"1\":{\"447\":1}}],[\"函数的内容\",{\"1\":{\"447\":1}}],[\"函数的主体\",{\"1\":{\"421\":1}}],[\"函数的实现本身就十分复杂\",{\"1\":{\"413\":1}}],[\"函数就是用于输出\",{\"1\":{\"413\":1}}],[\"函数中加入下列代码\",{\"1\":{\"403\":1,\"414\":1}}],[\"函数中加入初始化代码\",{\"1\":{\"401\":1}}],[\"函数\",{\"1\":{\"397\":1,\"447\":1,\"458\":1,\"496\":1}}],[\"函数定义的解析\",{\"0\":{\"459\":1},\"1\":{\"455\":1}}],[\"函数定义\",{\"0\":{\"455\":1},\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":2,\"455\":2,\"466\":1,\"476\":1,\"500\":1}}],[\"函数模拟了一个锁机制\",{\"1\":{\"338\":1}}],[\"函数取模\",{\"0\":{\"40\":1}}],[\"想要完全理解它\",{\"1\":{\"504\":1}}],[\"想在程序上表现出\",{\"1\":{\"333\":1}}],[\"想确保任何情况下都绝对只有\",{\"1\":{\"333\":1}}],[\"想做一个一样的移动app\",{\"1\":{\"88\":1}}],[\"日志记录器等\",{\"1\":{\"332\":1}}],[\"性能和可维护性\",{\"1\":{\"327\":1}}],[\"防火墙代理可以用于控制对内部网络资源的访问\",{\"1\":{\"327\":1}}],[\"防止中途出错了\",{\"1\":{\"94\":1}}],[\"远程方法调用\",{\"1\":{\"327\":1}}],[\"远程代理用于控制对远程对象的访问\",{\"1\":{\"327\":1}}],[\"远程代理\",{\"1\":{\"318\":1,\"323\":1}}],[\"各个参数的位移量\",{\"1\":{\"458\":1}}],[\"各个类之间的依赖关系就会加强\",{\"1\":{\"348\":1}}],[\"各种编程语言关于如何调用子函数有不同的约定\",{\"1\":{\"407\":1}}],[\"各种\",{\"0\":{\"327\":1}}],[\"各位\",{\"1\":{\"274\":1}}],[\"安全控制等功能\",{\"1\":{\"326\":1}}],[\"安装路径打开\",{\"1\":{\"106\":1}}],[\"安装目录下\",{\"1\":{\"106\":1}}],[\"安装了\",{\"1\":{\"101\":1}}],[\"安装\",{\"0\":{\"89\":1}}],[\"安装editorconfig插件\",{\"1\":{\"48\":1}}],[\"安装证书\",{\"0\":{\"22\":1}}],[\"负载均衡\",{\"1\":{\"326\":1}}],[\"负责转发客户端的请求和目标服务器的响应\",{\"1\":{\"326\":1}}],[\"负责协调模型和视图之间的交互\",{\"1\":{\"306\":1}}],[\"负责创建和恢复\",{\"1\":{\"292\":1}}],[\"负责保存和管理\",{\"1\":{\"292\":1}}],[\"负责管理和协调各个用户\",{\"1\":{\"278\":1}}],[\"负责\",{\"1\":{\"159\":3}}],[\"客户端可以像使用实际对象一样使用代理对象\",{\"1\":{\"325\":1}}],[\"客户端代码不需要知道具体的产品类\",{\"1\":{\"238\":1}}],[\"客户端代码与子系统之间的耦合度降低\",{\"1\":{\"230\":1}}],[\"完了\",{\"1\":{\"319\":1,\"320\":1}}],[\"世界\",{\"1\":{\"319\":1,\"320\":1,\"367\":1,\"368\":5}}],[\"世界上的事情本来就是这样\",{\"1\":{\"96\":1}}],[\"世界上最大的电子图书馆\",{\"1\":{\"5\":1}}],[\"世界上最大的代码托管平台\",{\"1\":{\"5\":1}}],[\"秒钟\",{\"1\":{\"319\":1}}],[\"虽说很困难\",{\"1\":{\"350\":1}}],[\"虽说是重活\",{\"1\":{\"319\":1}}],[\"虽然多\",{\"1\":{\"497\":1}}],[\"虽然我们前面没有提到\",{\"1\":{\"482\":1}}],[\"虽然上面写完了词法分析器\",{\"1\":{\"429\":1}}],[\"虽然是int型\",{\"1\":{\"400\":1}}],[\"虽然标题是编译器\",{\"1\":{\"395\":1}}],[\"虽然接口是相同的\",{\"1\":{\"217\":1}}],[\"虽然可以从方法名中获得线索\",{\"1\":{\"180\":1}}],[\"虽然有时需要从零开始编写代码\",{\"1\":{\"180\":1}}],[\"虽然同时只能有一个线程执行\",{\"1\":{\"96\":1}}],[\"控制反转\",{\"1\":{\"366\":1}}],[\"控制访问\",{\"1\":{\"318\":1}}],[\"控制器\",{\"1\":{\"306\":1}}],[\"节省资源\",{\"1\":{\"318\":1}}],[\"代表了逻辑\",{\"1\":{\"485\":1}}],[\"代理可以用于缓存\",{\"1\":{\"326\":1}}],[\"代理服务器位于客户端和目标服务器之间\",{\"1\":{\"326\":1}}],[\"代理是一种常见的代理模式应用\",{\"1\":{\"326\":1}}],[\"代理\",{\"0\":{\"326\":1}}],[\"代理对象和实际对象实现相同的接口\",{\"1\":{\"325\":1}}],[\"代理对象可以在需要时才创建实际对象\",{\"1\":{\"318\":1}}],[\"代理模式的一个重要特点是透明性\",{\"1\":{\"325\":1}}],[\"代理模式通过代理对象来控制对实际对象的访问\",{\"1\":{\"324\":1}}],[\"代理模式通过引入代理对象来控制对实际对象的访问\",{\"1\":{\"323\":1}}],[\"代理模式主要用于控制对对象的访问\",{\"1\":{\"324\":1}}],[\"代理模式和委托模式虽然在某些方面有相似之处\",{\"1\":{\"324\":1}}],[\"代理与委托\",{\"0\":{\"324\":1}}],[\"代理人和本人的划分是为了实现职责分离和提高系统的灵活性\",{\"1\":{\"323\":1}}],[\"代理人\",{\"1\":{\"318\":2}}],[\"代码与全局的变量定义几乎一样\",{\"1\":{\"461\":1}}],[\"代码较多\",{\"1\":{\"428\":1}}],[\"代码如下\",{\"1\":{\"401\":1,\"404\":1,\"413\":1,\"448\":1,\"459\":1,\"468\":1,\"469\":1,\"471\":1}}],[\"代码段\",{\"1\":{\"400\":2}}],[\"代码\",{\"0\":{\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"496\":1},\"1\":{\"399\":1,\"416\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1}}],[\"代码难免会有错误\",{\"1\":{\"392\":1}}],[\"代码优化\",{\"1\":{\"389\":1}}],[\"代码的生成\",{\"1\":{\"389\":1}}],[\"代码的阅读方法和修改方法\",{\"0\":{\"180\":1}}],[\"代码是否高效显得就不那么重要了\",{\"1\":{\"388\":1}}],[\"代码实现\",{\"0\":{\"232\":1}}],[\"代码示例\",{\"0\":{\"174\":1,\"213\":1,\"267\":1},\"1\":{\"267\":1}}],[\"代码复用\",{\"1\":{\"173\":1,\"259\":1,\"366\":1}}],[\"代码清单\",{\"1\":{\"159\":1,\"351\":1}}],[\"代码还能正常工作\",{\"1\":{\"113\":1}}],[\"~a\",{\"1\":{\"486\":1}}],[\"~~~~~~~~~~~~~\",{\"1\":{\"313\":1}}],[\"~\",{\"1\":{\"312\":1,\"420\":1,\"428\":1,\"486\":2}}],[\"无条件地将当前的\",{\"1\":{\"405\":1}}],[\"无法将它们整合到一个类中\",{\"1\":{\"311\":1}}],[\"无论多好的教程\",{\"1\":{\"504\":1}}],[\"无论在\",{\"1\":{\"167\":1}}],[\"无论要增加多少个具体工厂\",{\"1\":{\"137\":1}}],[\"无论是读起来\",{\"1\":{\"503\":1}}],[\"无论是全局还是局部变量\",{\"1\":{\"481\":1}}],[\"无论是是否真的在全局中用到了这个变量\",{\"1\":{\"460\":1}}],[\"无论是函数的参数\",{\"1\":{\"458\":1}}],[\"无论是结果\",{\"1\":{\"96\":1}}],[\"无论是执行过程中\",{\"1\":{\"96\":1}}],[\"特别是在创建对象代价较高时\",{\"1\":{\"311\":1}}],[\"架构实现了视图和模型的松耦合\",{\"1\":{\"306\":1}}],[\"架构中得到了广泛应用\",{\"1\":{\"306\":1}}],[\"视图会自动更新\",{\"1\":{\"306\":1}}],[\"视图\",{\"1\":{\"306\":1}}],[\"先将全局变量的信息保存\",{\"1\":{\"460\":1}}],[\"先注册的\",{\"1\":{\"302\":1}}],[\"先介绍\",{\"1\":{\"51\":1}}],[\"被观察对象\",{\"1\":{\"302\":1}}],[\"被装饰物\",{\"1\":{\"216\":1,\"217\":1}}],[\"被装饰了多次\",{\"1\":{\"216\":1}}],[\"管理状态\",{\"2\":{\"295\":1,\"309\":1,\"354\":1}}],[\"序列化并保存到文件中\",{\"1\":{\"292\":1}}],[\"序的完全性\",{\"0\":{\"66\":1}}],[\"序的传递性\",{\"0\":{\"65\":1}}],[\"序的反对称性\",{\"0\":{\"64\":1}}],[\"序的定义\",{\"0\":{\"61\":1}}],[\"保存所有的标记流没有意义且浪费空间\",{\"1\":{\"419\":1}}],[\"保存在栈中\",{\"1\":{\"407\":1}}],[\"保存数据结构与基于数据结构进行处理是两种不同的概念\",{\"1\":{\"379\":1}}],[\"保存到文件中\",{\"1\":{\"292\":1}}],[\"保存过多的\",{\"1\":{\"290\":1}}],[\"保存历史记录\",{\"0\":{\"196\":1}}],[\"宽接口提供了对\",{\"1\":{\"289\":1}}],[\"宽接口\",{\"1\":{\"289\":1}}],[\"省略\",{\"1\":{\"287\":1,\"358\":1}}],[\"省时又省力\",{\"1\":{\"26\":1}}],[\"捕获和恢复对象的内部状态\",{\"1\":{\"285\":1}}],[\"迟早会暴露出问题\",{\"1\":{\"279\":1}}],[\"相应的减法的代码就不贴了\",{\"1\":{\"493\":1}}],[\"相应的值会存放在\",{\"1\":{\"490\":1}}],[\"相等\",{\"1\":{\"485\":1}}],[\"相同类型\",{\"1\":{\"493\":1}}],[\"相同\",{\"1\":{\"477\":1}}],[\"相对于表达式来说它还是较为容易的\",{\"1\":{\"466\":1}}],[\"相信这部分的知识能够很大程度上提高你的编程水平\",{\"1\":{\"502\":1}}],[\"相信这部分也不难理解\",{\"1\":{\"452\":1}}],[\"相信当你真正完成的时候会像我一样\",{\"1\":{\"391\":1}}],[\"相当于\",{\"1\":{\"403\":1}}],[\"相反\",{\"1\":{\"392\":1}}],[\"相互调用方法\",{\"1\":{\"279\":1}}],[\"相关\",{\"1\":{\"460\":1}}],[\"相关代码如下\",{\"1\":{\"426\":1}}],[\"相关的代码如下\",{\"1\":{\"457\":1}}],[\"相关的内容我们放到后面解释\",{\"1\":{\"445\":1}}],[\"相关的内容注释了\",{\"1\":{\"407\":1}}],[\"相关的是指令集\",{\"1\":{\"401\":1}}],[\"相关的设计模式\",{\"0\":{\"139\":1,\"149\":1,\"169\":1,\"187\":1,\"197\":1,\"208\":1,\"221\":1,\"252\":1,\"270\":1,\"281\":1,\"293\":1,\"307\":1,\"328\":1,\"352\":1,\"362\":1,\"384\":1}}],[\"相关设计模式\",{\"0\":{\"176\":1,\"234\":1,\"314\":1,\"336\":1,\"369\":1}}],[\"相关信息\",{\"1\":{\"34\":1,\"47\":1,\"90\":1,\"392\":1}}],[\"把处理分散在各个类中是不明智的\",{\"1\":{\"278\":1}}],[\"把握本质\",{\"1\":{\"97\":1}}],[\"仲裁者向组员下达指示\",{\"1\":{\"274\":1}}],[\"仲裁者会负责统一大家的意见\",{\"1\":{\"274\":1}}],[\"整个系列的一开始\",{\"1\":{\"501\":1}}],[\"整个系统就变得复杂了\",{\"1\":{\"403\":1}}],[\"整个编译器还剩下最后两个部分\",{\"1\":{\"466\":1}}],[\"整个解析的过程和语法的\",{\"1\":{\"438\":1}}],[\"整个解析的过程是在不断对非终结符进行替换\",{\"1\":{\"437\":1}}],[\"整个团队的交流过程就变为了组员向仲裁者报告\",{\"1\":{\"274\":1}}],[\"整体的替换算法\",{\"2\":{\"364\":1}}],[\"整体\",{\"1\":{\"201\":1}}],[\"经常为此争执不下\",{\"1\":{\"274\":1}}],[\"经常会遇到需要使用一些现有的类\",{\"1\":{\"144\":1}}],[\"他们还十分在意编码细节\",{\"1\":{\"274\":1}}],[\"请自行查阅相关的资料\",{\"1\":{\"439\":1}}],[\"请跳过本章\",{\"1\":{\"387\":1}}],[\"请联系删除\",{\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"请注意\",{\"1\":{\"351\":1}}],[\"请设置时间\",{\"1\":{\"347\":1}}],[\"请试想一下\",{\"1\":{\"278\":1}}],[\"请试想一下要在\",{\"1\":{\"138\":1}}],[\"请大家一定要透彻理解此处的实例的多面性\",{\"1\":{\"351\":1}}],[\"请大家将情况报告给我\",{\"1\":{\"274\":1}}],[\"请大家想象一下一个乱糟糟的开发小组的工作状态\",{\"1\":{\"274\":1}}],[\"支持的标记\",{\"0\":{\"420\":1},\"1\":{\"416\":1}}],[\"支持多种遍历方式\",{\"1\":{\"265\":1}}],[\"支持实时预览和多种导出格式\",{\"1\":{\"106\":1}}],[\"统一接口\",{\"1\":{\"265\":1}}],[\"改变遍历算法\",{\"1\":{\"265\":1}}],[\"改变它的理由永远只有一个\",{\"1\":{\"119\":1}}],[\"集合对象和遍历算法分离\",{\"1\":{\"265\":1}}],[\"集成到某个\",{\"1\":{\"32\":1}}],[\"迭代器模式是一种行为设计模式\",{\"1\":{\"266\":1}}],[\"迭代器模式将遍历逻辑封装在迭代器对象中\",{\"1\":{\"265\":1}}],[\"迭代器模式提供了一种方法来顺序访问集合中的元素\",{\"1\":{\"265\":1}}],[\"迭代器模式\",{\"0\":{\"264\":1}}],[\"人民邮电出版社\",{\"1\":{\"255\":1}}],[\"人们发现经常需要异步操作共享资源的情况下\",{\"1\":{\"95\":1}}],[\"北京\",{\"1\":{\"255\":1}}],[\"杨文轩译\",{\"1\":{\"255\":1}}],[\"😃\",{\"1\":{\"255\":1}}],[\"遂使用ts作为实现语言\",{\"1\":{\"255\":1}}],[\"封装\",{\"1\":{\"255\":1}}],[\"面向对象编程可以帮助我们分散处理\",{\"1\":{\"278\":1}}],[\"面向对象三大特性\",{\"1\":{\"255\":1}}],[\"面向接口编程\",{\"1\":{\"123\":1}}],[\"移除那些不再被使用的对象\",{\"1\":{\"250\":1}}],[\"定期检查集合中的对象\",{\"1\":{\"250\":1}}],[\"定期清理\",{\"1\":{\"250\":1}}],[\"定义了变量\",{\"1\":{\"424\":1}}],[\"定义了接口\",{\"1\":{\"156\":1}}],[\"定义多个类\",{\"1\":{\"347\":1}}],[\"定义接口\",{\"1\":{\"347\":1}}],[\"定义接口或抽象类\",{\"1\":{\"124\":1}}],[\"定义抽象接口\",{\"1\":{\"125\":1}}],[\"定义乘法的运算规则\",{\"1\":{\"69\":1}}],[\"定义正自然数为非\",{\"1\":{\"62\":1}}],[\"定义\",{\"1\":{\"61\":1}}],[\"定义自然数的序即定义\",{\"1\":{\"61\":1}}],[\"定义加法的运算规则\",{\"1\":{\"53\":1}}],[\"定义dns解析器\",{\"1\":{\"17\":1}}],[\"引用计数\",{\"1\":{\"250\":1}}],[\"引入中介者模式\",{\"1\":{\"118\":1}}],[\"弱引用允许垃圾回收器在没有其他强引用时回收对象\",{\"1\":{\"250\":1}}],[\"弱引用\",{\"1\":{\"250\":1}}],[\"垃圾回收器可能会认为这些对象是垃圾\",{\"1\":{\"250\":1}}],[\"看了上面的代码\",{\"1\":{\"448\":1}}],[\"看看自己能走多远\",{\"1\":{\"388\":1}}],[\"看作是\",{\"1\":{\"249\":1,\"348\":1}}],[\"看起来是这样的\",{\"1\":{\"96\":1}}],[\"颜色\",{\"1\":{\"249\":2}}],[\"颜色信息应当放在哪个类中呢\",{\"1\":{\"248\":1}}],[\"外的寄存器\",{\"1\":{\"411\":1}}],[\"外在的\",{\"1\":{\"249\":1}}],[\"外观模式通过提供一个统一的接口来隐藏子系统的复杂性\",{\"1\":{\"231\":1}}],[\"外观模式有助于分层设计\",{\"1\":{\"230\":1}}],[\"外观模式为复杂的子系统提供了一个简单的接口\",{\"1\":{\"230\":1}}],[\"换句话说\",{\"1\":{\"441\":1}}],[\"换句话说就是不需要我们自己去实现了\",{\"1\":{\"413\":1}}],[\"换行符和空格类似\",{\"1\":{\"422\":1}}],[\"换行符\",{\"0\":{\"422\":1},\"1\":{\"416\":1}}],[\"换言之\",{\"1\":{\"249\":1,\"370\":1}}],[\"换成对应的版本\",{\"1\":{\"9\":1}}],[\"固有的\",{\"1\":{\"249\":1}}],[\"信息还是\",{\"1\":{\"249\":1}}],[\"信息这个问题\",{\"1\":{\"249\":1}}],[\"信息\",{\"1\":{\"249\":5}}],[\"前缀形式\",{\"1\":{\"494\":1}}],[\"前文中我们说到\",{\"1\":{\"484\":1}}],[\"前文中我们定义了支持的类型\",{\"1\":{\"448\":1}}],[\"前言\",{\"0\":{\"387\":1},\"1\":{\"387\":2,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"前面提到的是否共享\",{\"1\":{\"249\":1}}],[\"前面讲到的\",{\"1\":{\"249\":1}}],[\"前端\",{\"1\":{\"15\":1}}],[\"形状\",{\"1\":{\"248\":1}}],[\"字符\",{\"1\":{\"427\":1,\"459\":2}}],[\"字符a对应的十六进制值是\",{\"1\":{\"425\":1}}],[\"字符串等等\",{\"1\":{\"478\":1}}],[\"字符串转换成标记流有时是有状态的\",{\"1\":{\"419\":1}}],[\"字符串\",{\"0\":{\"426\":1},\"1\":{\"416\":1}}],[\"字符的字体\",{\"1\":{\"248\":1}}],[\"字段吗\",{\"1\":{\"429\":1}}],[\"字段就是这个变量\",{\"1\":{\"349\":1}}],[\"字段即是类的两个层次结构的\",{\"1\":{\"159\":1}}],[\"字段中保存的是实现了\",{\"1\":{\"159\":1}}],[\"共享实例可以减少所需资源的使用量\",{\"1\":{\"251\":1}}],[\"共享\",{\"1\":{\"248\":1}}],[\"共有五条\",{\"1\":{\"51\":1}}],[\"符合开闭原则\",{\"1\":{\"238\":1,\"374\":1}}],[\"符合单一职责原则的类\",{\"1\":{\"121\":1}}],[\"降低了耦合性\",{\"1\":{\"238\":1}}],[\"降低类之间的耦合度\",{\"1\":{\"117\":1}}],[\"メール待っていますね\",{\"1\":{\"232\":1}}],[\"のページへようこそ\",{\"1\":{\"232\":1}}],[\"来实现运算符的优先级\",{\"1\":{\"497\":1}}],[\"来实现\",{\"1\":{\"487\":1}}],[\"来实现不同的猜拳策略\",{\"1\":{\"356\":1}}],[\"来保存一个表达式的类型\",{\"1\":{\"482\":1}}],[\"来表示退出\",{\"1\":{\"470\":1}}],[\"来表现这些依赖于操作系统的部分\",{\"1\":{\"167\":1}}],[\"来大致描述我们实现的\",{\"1\":{\"444\":1}}],[\"来压缩了源码字符串\",{\"1\":{\"420\":1}}],[\"来将字符串转换成标记流\",{\"1\":{\"418\":1}}],[\"来计算\",{\"1\":{\"414\":1}}],[\"来使用\",{\"1\":{\"351\":2}}],[\"来支持一次撤销操作\",{\"1\":{\"290\":1}}],[\"来存储共享对象\",{\"1\":{\"250\":1}}],[\"来简化与复杂子系统的交互\",{\"1\":{\"231\":1}}],[\"层与层之间通过外观类进行交互\",{\"1\":{\"230\":1}}],[\"更先进的版本是\",{\"1\":{\"503\":1}}],[\"更为重要的是\",{\"1\":{\"438\":1}}],[\"更多的标记\",{\"1\":{\"420\":1}}],[\"更易维护\",{\"1\":{\"374\":1}}],[\"更好的分层\",{\"1\":{\"230\":1}}],[\"更新代码的原生部分\",{\"1\":{\"90\":1}}],[\"增的操作\",{\"1\":{\"494\":1}}],[\"增强了代码的可扩展性\",{\"1\":{\"265\":1}}],[\"增强了代码的可维护性和可扩展性\",{\"1\":{\"230\":1}}],[\"增加\",{\"1\":{\"414\":1}}],[\"增加指令会消耗许多资源\",{\"1\":{\"407\":1}}],[\"增加计数\",{\"1\":{\"250\":1}}],[\"增加灵活性\",{\"1\":{\"184\":1}}],[\"增加后的功能可以被\",{\"1\":{\"167\":1}}],[\"增加了灵活性\",{\"1\":{\"366\":1}}],[\"增加了代码的灵活性和可维护性\",{\"1\":{\"265\":1}}],[\"增加了\",{\"1\":{\"159\":1}}],[\"增加新操作更容易\",{\"1\":{\"374\":1}}],[\"增加新的\",{\"1\":{\"379\":1}}],[\"增加新的产品类时\",{\"1\":{\"238\":1}}],[\"增加新的实现时\",{\"0\":{\"156\":1}}],[\"增加新的实现\",{\"1\":{\"111\":1}}],[\"增加新功能时\",{\"0\":{\"155\":1}}],[\"增加其它工厂\",{\"0\":{\"135\":1}}],[\"增加请求头和cookie的大小限制\",{\"1\":{\"17\":1}}],[\"松散耦合\",{\"1\":{\"230\":1}}],[\"简直痛苦地无话可说\",{\"1\":{\"504\":1}}],[\"简而言之\",{\"1\":{\"417\":1}}],[\"简化代码\",{\"1\":{\"265\":1,\"311\":1}}],[\"简化语法解析\",{\"1\":{\"259\":1}}],[\"简化接口\",{\"1\":{\"230\":1}}],[\"简单地替换下算法即可进行测试\",{\"1\":{\"360\":1}}],[\"简单地说\",{\"1\":{\"32\":1,\"33\":1,\"467\":1}}],[\"简单而言就是将一个复杂的大问题分解为多个小问题然后逐个解决\",{\"1\":{\"346\":1}}],[\"简单化\",{\"2\":{\"236\":1,\"283\":1}}],[\"简单来说\",{\"1\":{\"122\":1}}],[\"简单ppt\",{\"1\":{\"100\":1}}],[\"简单直接\",{\"1\":{\"39\":1}}],[\"图像加载时可以使用虚拟代理来显示占位符图像\",{\"1\":{\"327\":1}}],[\"图解设计模式\",{\"1\":{\"230\":1,\"255\":1}}],[\"图论\",{\"1\":{\"77\":1}}],[\"啊\",{\"1\":{\"230\":1}}],[\"编程有趣又无趣\",{\"1\":{\"505\":1}}],[\"编译时加上\",{\"1\":{\"414\":1}}],[\"编译程序\",{\"1\":{\"414\":1}}],[\"编译器中我们需要用到的函数有\",{\"1\":{\"413\":1}}],[\"编译器的语法分析部分其实是很简单的\",{\"1\":{\"473\":1}}],[\"编译器的输出\",{\"1\":{\"415\":1}}],[\"编译器的编写分为\",{\"1\":{\"396\":1}}],[\"编译器的构建流程\",{\"0\":{\"396\":1},\"1\":{\"395\":1}}],[\"编译器框架\",{\"0\":{\"397\":1},\"1\":{\"395\":1}}],[\"编译器\",{\"1\":{\"398\":1},\"2\":{\"394\":1,\"433\":1,\"443\":1,\"454\":1,\"465\":1,\"475\":1,\"499\":1,\"507\":1}}],[\"编译器生成器\",{\"1\":{\"389\":1}}],[\"编译原理\",{\"1\":{\"388\":1,\"389\":3,\"392\":1,\"398\":1},\"2\":{\"393\":1,\"432\":1,\"442\":1,\"453\":1,\"464\":1,\"474\":1,\"498\":1,\"506\":1}}],[\"编写编译器时遇到的一些难题\",{\"1\":{\"500\":1}}],[\"编写语法分析器有两种方法\",{\"1\":{\"435\":1}}],[\"编写一个\",{\"1\":{\"350\":1}}],[\"编写一个反向迭代器\",{\"1\":{\"269\":1}}],[\"编写出更加健壮和优雅的代码\",{\"1\":{\"227\":1}}],[\"编辑器\",{\"1\":{\"106\":1}}],[\"您能够掌握这些设计模式\",{\"1\":{\"227\":1}}],[\"您可以免费安装并使用\",{\"1\":{\"106\":1}}],[\"灵活应用于实际项目中\",{\"1\":{\"227\":1}}],[\"灵活性高\",{\"1\":{\"238\":1}}],[\"灵活性\",{\"1\":{\"212\":1,\"366\":1}}],[\"总共代码加注释1400行\",{\"1\":{\"390\":1}}],[\"总是互相指挥\",{\"1\":{\"274\":1}}],[\"总之\",{\"1\":{\"227\":1}}],[\"总结起来有如下两点\",{\"1\":{\"347\":1}}],[\"总结\",{\"0\":{\"129\":1,\"333\":1,\"500\":1},\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"父类控制算法的执行流程\",{\"1\":{\"366\":1}}],[\"父类和子类之间的一致性是指子类应当继承父类的行为和属性\",{\"1\":{\"223\":1}}],[\"父类和子类的一致性\",{\"0\":{\"223\":1}}],[\"父类的任务是通过声明抽象方法的方式定义接口\",{\"1\":{\"156\":1}}],[\"导致工作进度始终滞后\",{\"1\":{\"274\":1}}],[\"导致增加许多很小的类\",{\"0\":{\"220\":1}}],[\"导致插件无法正常退出\",{\"1\":{\"49\":1}}],[\"草莓味和猕猴桃三重口味\",{\"1\":{\"219\":1}}],[\"草莓冰激凌\",{\"1\":{\"219\":1}}],[\"亦或是香草味\",{\"1\":{\"219\":1}}],[\"冰激凌店只会准备各种香料\",{\"1\":{\"219\":1}}],[\"猕猴桃冰激凌等各种口味的冰激凌一样\",{\"1\":{\"219\":1}}],[\"巧克力冰激凌\",{\"1\":{\"219\":1}}],[\"此外\",{\"1\":{\"217\":1,\"227\":1,\"348\":1,\"361\":1,\"379\":1}}],[\"此时的二元运算符的解析的框架为\",{\"1\":{\"489\":1}}],[\"此时运算符栈为空\",{\"1\":{\"477\":1}}],[\"此时判断参数\",{\"1\":{\"477\":1}}],[\"此时我们期待的是+的另一个参数\",{\"1\":{\"477\":1}}],[\"此时我们可以使用ionic无缝将其迁移到移动端\",{\"1\":{\"88\":1}}],[\"此时\",{\"1\":{\"217\":1,\"305\":1,\"468\":1,\"490\":1}}],[\"此时使用权让出以后\",{\"1\":{\"96\":1}}],[\"给\",{\"1\":{\"217\":1}}],[\"给一个健康的人注射吗啡是犯罪\",{\"1\":{\"97\":1}}],[\"委托者将某些任务委托给委托对象来执行\",{\"1\":{\"224\":1}}],[\"委托\",{\"1\":{\"217\":1}}],[\"委托是弱关联\",{\"0\":{\"168\":1}}],[\"功能需求总是在不断变化\",{\"1\":{\"380\":1}}],[\"功能则越多\",{\"1\":{\"217\":1}}],[\"功能层次结构与实现层次结构是混杂在一个层次结构中的\",{\"1\":{\"157\":1}}],[\"结束的\",{\"1\":{\"459\":2}}],[\"结果存放在寄存器\",{\"1\":{\"412\":1}}],[\"结果却发现还是皮\",{\"1\":{\"216\":1}}],[\"结城浩\",{\"1\":{\"255\":1}}],[\"结语\",{\"0\":{\"227\":1,\"505\":1},\"1\":{\"500\":1}}],[\"结论当然就是看使用场景\",{\"1\":{\"97\":1}}],[\"却没有发生任何变化\",{\"1\":{\"216\":1}}],[\"透明性\",{\"0\":{\"325\":1},\"1\":{\"216\":1}}],[\"职责扩展\",{\"1\":{\"212\":1}}],[\"职责分离\",{\"1\":{\"120\":1}}],[\"容器与内容的一致性\",{\"2\":{\"210\":1,\"226\":1}}],[\"容易\",{\"1\":{\"137\":1}}],[\"快照\",{\"1\":{\"196\":1}}],[\"参见第\",{\"1\":{\"481\":1}}],[\"参照第三章讲解的虚拟机\",{\"1\":{\"458\":1}}],[\"参数和局部变量\",{\"1\":{\"463\":1}}],[\"参数逆序入栈\",{\"1\":{\"407\":1}}],[\"参数\",{\"1\":{\"195\":1,\"414\":1}}],[\"参考资料\",{\"0\":{\"26\":1,\"392\":1}}],[\"动作\",{\"1\":{\"195\":1}}],[\"动态组合职责链\",{\"1\":{\"184\":1}}],[\"动态地扩展对象的行为\",{\"1\":{\"111\":1}}],[\"执行相反的增\",{\"1\":{\"494\":1}}],[\"执行\",{\"1\":{\"468\":1}}],[\"执行条件表达式\",{\"1\":{\"468\":1}}],[\"执行操作所需的参数\",{\"1\":{\"195\":1}}],[\"执行命令的对象\",{\"1\":{\"195\":1}}],[\"执行过程本身就是安全的\",{\"1\":{\"97\":1}}],[\"接下来开始解析函数定义相关的内容\",{\"1\":{\"457\":1}}],[\"接着是字符串常量\",{\"1\":{\"479\":1}}],[\"接着\",{\"1\":{\"400\":1}}],[\"接收\",{\"1\":{\"378\":2}}],[\"接收者包含了执行具体操作的逻辑\",{\"1\":{\"195\":1}}],[\"接收者\",{\"1\":{\"195\":1}}],[\"接口中定义了的方法\",{\"1\":{\"351\":2}}],[\"接口中增加了一个\",{\"1\":{\"350\":1}}],[\"接口中增加新的方法\",{\"1\":{\"350\":1}}],[\"接口中声明的所有方法都是\",{\"1\":{\"347\":1}}],[\"接口的类的实例\",{\"1\":{\"351\":2}}],[\"接口的\",{\"1\":{\"347\":1}}],[\"接口定义了\",{\"1\":{\"268\":2}}],[\"接口\",{\"1\":{\"216\":1,\"268\":2,\"319\":1,\"350\":1}}],[\"接口和抽象类\",{\"1\":{\"127\":1}}],[\"接口隔离原则\",{\"0\":{\"122\":1},\"1\":{\"129\":1}}],[\"接口分隔原则\",{\"1\":{\"108\":1,\"109\":1}}],[\"队列或者日志来参数化其他对象\",{\"1\":{\"191\":1}}],[\"61\",{\"1\":{\"425\":1}}],[\"64\",{\"1\":{\"414\":2}}],[\"6\",{\"0\":{\"455\":1},\"1\":{\"193\":2,\"245\":1,\"279\":2,\"286\":2,\"387\":1,\"395\":1,\"398\":2,\"413\":1,\"416\":2,\"434\":2,\"437\":1,\"444\":1,\"455\":2,\"466\":1,\"467\":1,\"476\":3,\"496\":1,\"500\":1}}],[\"66\",{\"1\":{\"186\":1}}],[\"65\",{\"1\":{\"17\":1}}],[\"推卸责任\",{\"1\":{\"183\":2},\"2\":{\"189\":1}}],[\"推荐做法\",{\"1\":{\"44\":1}}],[\"组员之间不再相互询问和相互指示\",{\"1\":{\"274\":1}}],[\"组件才具有高价\",{\"1\":{\"178\":1}}],[\"组合\",{\"0\":{\"126\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"易于扩展\",{\"1\":{\"356\":1}}],[\"易于增加\",{\"0\":{\"381\":1}}],[\"易于增加新的状态\",{\"0\":{\"350\":1}}],[\"易于增加具体工厂\",{\"0\":{\"137\":1}}],[\"易于维护和扩展\",{\"1\":{\"178\":1}}],[\"■晚上\",{\"1\":{\"175\":1}}],[\"■从早上到下午\",{\"1\":{\"175\":1}}],[\"が作成されました\",{\"1\":{\"174\":1}}],[\"晚安\",{\"1\":{\"174\":1,\"175\":1}}],[\"晚上好\",{\"1\":{\"174\":1,\"175\":1}}],[\"晚上\",{\"1\":{\"174\":1,\"346\":1}}],[\"早上好\",{\"1\":{\"174\":1,\"175\":1}}],[\"问题\",{\"1\":{\"438\":1}}],[\"问题就被分解了\",{\"1\":{\"346\":1}}],[\"问题到底出在哪儿\",{\"1\":{\"94\":1}}],[\"问候\",{\"1\":{\"174\":1,\"175\":1}}],[\"才将\",{\"1\":{\"168\":1}}],[\"才与作为参数被传入的类构成关联\",{\"1\":{\"168\":1}}],[\"才能真正理解和掌握这些模式\",{\"1\":{\"227\":1}}],[\"才能正常看到渲染后的\",{\"1\":{\"101\":1}}],[\"才能透过现象\",{\"1\":{\"97\":1}}],[\"继承\",{\"1\":{\"255\":1}}],[\"继承和委托中的一致性\",{\"0\":{\"222\":1}}],[\"继承是强关联关系\",{\"1\":{\"168\":1}}],[\"继承是强关联\",{\"0\":{\"168\":1}}],[\"继续执行我们当前的任务\",{\"1\":{\"96\":1}}],[\"个字节\",{\"1\":{\"493\":1}}],[\"个字符或标记\",{\"1\":{\"431\":1}}],[\"个数等\",{\"1\":{\"463\":1}}],[\"个部分进行讲解\",{\"1\":{\"444\":1,\"455\":1}}],[\"个标记\",{\"1\":{\"438\":1}}],[\"个指令\",{\"1\":{\"403\":1}}],[\"个寄存器\",{\"1\":{\"401\":1}}],[\"个函数\",{\"1\":{\"397\":1}}],[\"个函数来实现了一个小的\",{\"1\":{\"390\":1}}],[\"个步骤\",{\"1\":{\"396\":1}}],[\"个实例则会有\",{\"1\":{\"279\":1}}],[\"个实例就会有\",{\"1\":{\"279\":1}}],[\"个实例\",{\"1\":{\"279\":3,\"333\":1}}],[\"个成员虽然一起协同工作\",{\"1\":{\"274\":1}}],[\"个操作系统上\",{\"1\":{\"167\":1}}],[\"个\",{\"1\":{\"167\":1}}],[\"个类的子类\",{\"1\":{\"137\":1}}],[\"角色公开足够多的信息\",{\"1\":{\"383\":1}}],[\"角色必须向\",{\"1\":{\"383\":1}}],[\"角色负责\",{\"1\":{\"381\":1}}],[\"角色即可\",{\"1\":{\"360\":1}}],[\"角色相关联的部分\",{\"1\":{\"350\":1}}],[\"角色就必须要知道\",{\"1\":{\"348\":1}}],[\"角色都需要或多或少地知道其他角色\",{\"1\":{\"348\":1}}],[\"角色都需要知道其他\",{\"1\":{\"348\":1}}],[\"角色后\",{\"1\":{\"348\":2}}],[\"角色的增加\",{\"1\":{\"382\":1}}],[\"角色的开发可以独立于\",{\"1\":{\"379\":1}}],[\"角色的接口\",{\"1\":{\"360\":1}}],[\"角色的独立性\",{\"1\":{\"348\":1}}],[\"角色的代码的同时\",{\"1\":{\"346\":1}}],[\"角色的类时\",{\"1\":{\"302\":1}}],[\"角色的划分具有重要意义\",{\"1\":{\"292\":1}}],[\"角色的意义\",{\"0\":{\"292\":1}}],[\"角色的\",{\"1\":{\"280\":2,\"348\":3}}],[\"角色的实例传递给\",{\"1\":{\"168\":1}}],[\"角色很难复用\",{\"1\":{\"280\":1}}],[\"角色可以复用\",{\"1\":{\"280\":1}}],[\"角色中都实现这个方法\",{\"1\":{\"350\":1}}],[\"角色中\",{\"1\":{\"348\":1}}],[\"角色中并没有任何依赖于特定对话框的代码\",{\"1\":{\"280\":1}}],[\"角色中即可\",{\"1\":{\"248\":1}}],[\"角色中的字段时\",{\"1\":{\"248\":1}}],[\"角色\",{\"0\":{\"381\":1,\"382\":1},\"1\":{\"167\":2,\"219\":1,\"302\":2,\"348\":2,\"379\":2,\"381\":2,\"382\":1}}],[\"版的\",{\"1\":{\"167\":1}}],[\"版\",{\"1\":{\"167\":5}}],[\"版权协议\",{\"1\":{\"30\":1}}],[\"版权声明\",{\"1\":{\"30\":1}}],[\"应当是谁来管理状态的迁移\",{\"0\":{\"348\":1}}],[\"应当共享的信息被称作\",{\"1\":{\"249\":1}}],[\"应当共享的信息和不应当共享的信息\",{\"1\":{\"249\":1}}],[\"应用程序中\",{\"1\":{\"297\":1}}],[\"应用程序在运行时很容易就会达到资源极限而导致崩溃\",{\"1\":{\"251\":1}}],[\"应用于软件所运行的操作系统上\",{\"1\":{\"167\":1}}],[\"应根据实际需求灵活应用设计模式\",{\"1\":{\"227\":1}}],[\"应该可以在不修改原模块的基础上\",{\"1\":{\"110\":1}}],[\"分隔的变量\",{\"1\":{\"449\":1}}],[\"分别是\",{\"1\":{\"444\":1,\"455\":1}}],[\"分别是源地址和目标地址\",{\"1\":{\"403\":1}}],[\"分别如下\",{\"1\":{\"401\":1}}],[\"分析标识符的相关代码如下\",{\"1\":{\"424\":1}}],[\"分析整个\",{\"1\":{\"397\":1}}],[\"分析\",{\"1\":{\"389\":1}}],[\"分析方法为递归下降\",{\"1\":{\"260\":1}}],[\"分而治之\",{\"0\":{\"346\":1},\"1\":{\"278\":1,\"346\":1}}],[\"分开考虑\",{\"2\":{\"171\":1,\"364\":1}}],[\"分开后更容易扩展\",{\"0\":{\"167\":1}}],[\"分离关注点\",{\"1\":{\"374\":1}}],[\"分离开了\",{\"1\":{\"167\":1}}],[\"分离为两个独立的类层次结构\",{\"1\":{\"157\":1}}],[\"桥梁\",{\"1\":{\"159\":1}}],[\"以减少语法分析器的复杂程度\",{\"1\":{\"417\":1}}],[\"以上就是我们为了实现函数调用需要的指令了\",{\"1\":{\"411\":1}}],[\"以二进制的形式保存在内存中\",{\"1\":{\"399\":1}}],[\"以前人们会说\",{\"1\":{\"388\":1}}],[\"以实现\",{\"1\":{\"347\":1}}],[\"以确保在多线程环境下\",{\"1\":{\"338\":1}}],[\"以控制对该对象的访问\",{\"1\":{\"318\":1}}],[\"以避免循环依赖和无限递归\",{\"1\":{\"303\":1}}],[\"以释放资源\",{\"1\":{\"291\":1}}],[\"以支持多次撤销操作\",{\"1\":{\"290\":1}}],[\"以支持多种遍历方式\",{\"1\":{\"265\":1}}],[\"以支持撤销和重做操作\",{\"1\":{\"196\":1}}],[\"以下是\",{\"1\":{\"298\":1}}],[\"以下是示例代码\",{\"1\":{\"286\":1}}],[\"以下是实现迭代器模式的\",{\"1\":{\"267\":1}}],[\"以下是实现保存历史记录的一些常见方法\",{\"1\":{\"196\":1}}],[\"以下是一些常见的解决方案\",{\"1\":{\"250\":1}}],[\"以便从后向前遍历书籍\",{\"1\":{\"269\":1}}],[\"以便重复使用这些对象\",{\"1\":{\"250\":1}}],[\"以便在需要时恢复到之前的状态\",{\"1\":{\"196\":1}}],[\"以便在需要时进行撤销操作\",{\"1\":{\"195\":1}}],[\"以保持我们的知识体系与时俱进\",{\"1\":{\"227\":1}}],[\"以示例程序来说\",{\"1\":{\"217\":1,\"350\":1}}],[\"以及该函数在代码段\",{\"1\":{\"457\":1}}],[\"以及从文件中读取并反序列化\",{\"1\":{\"292\":1}}],[\"以及\",{\"1\":{\"216\":1}}],[\"以及它的子类\",{\"1\":{\"216\":1}}],[\"以供后面的处理使用\",{\"1\":{\"159\":1}}],[\"以管理员身份在\",{\"1\":{\"106\":1}}],[\"该标识符的类别\",{\"1\":{\"424\":1}}],[\"该标识符返回的标记\",{\"1\":{\"424\":1}}],[\"该地址中存放着\",{\"1\":{\"401\":1}}],[\"该实例会被当作\",{\"1\":{\"351\":2}}],[\"该实例通过\",{\"1\":{\"159\":1}}],[\"该方法中很容易发生\",{\"1\":{\"278\":1}}],[\"该类位于\",{\"1\":{\"159\":1}}],[\"该怎么办\",{\"1\":{\"96\":1}}],[\"试图教会我们的是如何构造\",{\"1\":{\"389\":1}}],[\"试程序行为的类\",{\"1\":{\"159\":1}}],[\"试证乘法交换律\",{\"1\":{\"73\":1}}],[\"试证加法交换律\",{\"1\":{\"57\":1}}],[\"试证\",{\"1\":{\"57\":2,\"59\":2,\"73\":2,\"76\":2}}],[\"两个概念\",{\"1\":{\"467\":1}}],[\"两个参数都无法取得了\",{\"1\":{\"412\":1}}],[\"两个状态\",{\"1\":{\"346\":1}}],[\"两个自然数\",{\"1\":{\"66\":1}}],[\"两种接口和可见性\",{\"0\":{\"289\":1}}],[\"两者之间必然会缺少联系\",{\"1\":{\"157\":1}}],[\"与前缀形式不同的是\",{\"1\":{\"494\":1}}],[\"与之不同\",{\"1\":{\"481\":1}}],[\"与语法分析相关的部分就是上文所说的优先级问题了\",{\"1\":{\"478\":1}}],[\"与存放在\",{\"1\":{\"458\":1}}],[\"与表示被装饰物的\",{\"1\":{\"216\":1}}],[\"与\",{\"0\":{\"249\":1},\"1\":{\"157\":1,\"167\":1,\"401\":1,\"407\":1,\"459\":1,\"503\":1}}],[\"与线程相比\",{\"1\":{\"95\":1}}],[\"正则表达式\",{\"1\":{\"502\":1}}],[\"正如我们保证的那样\",{\"1\":{\"496\":1}}],[\"正负号\",{\"0\":{\"487\":1},\"1\":{\"476\":1}}],[\"正常的全局变量的类别则是\",{\"1\":{\"449\":1}}],[\"正常通话\",{\"1\":{\"343\":1,\"344\":8}}],[\"正在生成printer的实例\",{\"1\":{\"320\":1}}],[\"正是因为它相当于通过一定的编码\",{\"1\":{\"420\":1}}],[\"正是因为可以替换\",{\"1\":{\"178\":1}}],[\"正是因为不知道才能够替换\",{\"1\":{\"178\":1}}],[\"正是由于父类和子类的这种任务分担\",{\"1\":{\"156\":1}}],[\"正自然数与自然数相加为正自然数\",{\"1\":{\"63\":2}}],[\"正自然数的性质\",{\"0\":{\"63\":1}}],[\"正自然数\",{\"0\":{\"62\":1}}],[\"章\",{\"1\":{\"156\":1,\"348\":1}}],[\"派生类\",{\"1\":{\"155\":1}}],[\"派生类应当可以替换基类并出现在基类能够出现的任何地方\",{\"1\":{\"113\":1}}],[\"之前\",{\"1\":{\"477\":1,\"490\":1}}],[\"之类的表达式要如何实现呢\",{\"1\":{\"481\":1}}],[\"之类的函数\",{\"1\":{\"413\":1}}],[\"之类的运算符是与参数顺序有关的\",{\"1\":{\"412\":1}}],[\"之间的关系是松耦合的\",{\"1\":{\"301\":1}}],[\"之间搭建桥梁\",{\"1\":{\"152\":1}}],[\"之后再计算运算符\",{\"1\":{\"477\":1}}],[\"之后\",{\"1\":{\"96\":1}}],[\"`not\",{\"1\":{\"495\":1}}],[\"`node\",{\"1\":{\"260\":1}}],[\"`ax`\",{\"1\":{\"481\":1}}],[\"`int\",{\"1\":{\"448\":1}}],[\"`winner\",{\"1\":{\"357\":2}}],[\"`warning\",{\"1\":{\"260\":2}}],[\"`record\",{\"1\":{\"343\":1}}],[\"`char\",{\"1\":{\"493\":1}}],[\"`call\",{\"1\":{\"343\":1}}],[\"`current\",{\"1\":{\"260\":1,\"286\":1}}],[\"`0$\",{\"1\":{\"343\":1}}],[\"`sizeof\",{\"1\":{\"480\":3}}],[\"`singleton\",{\"1\":{\"334\":1,\"338\":1}}],[\"`subscribing\",{\"1\":{\"275\":1}}],[\"`===\",{\"1\":{\"319\":1}}],[\"`====\",{\"1\":{\"286\":1}}],[\"`正在生成printer的实例\",{\"1\":{\"319\":1}}],[\"`graphobserver\",{\"1\":{\"298\":1}}],[\"`got\",{\"1\":{\"286\":1}}],[\"`digitobserver\",{\"1\":{\"298\":1}}],[\"`drawing\",{\"1\":{\"192\":1}}],[\"`publishing\",{\"1\":{\"275\":1}}],[\"`money\",{\"1\":{\"286\":1}}],[\"`message\",{\"1\":{\"275\":1}}],[\"`main`\",{\"1\":{\"429\":1}}],[\"`mailto\",{\"1\":{\"232\":1}}],[\"`making\",{\"1\":{\"232\":1}}],[\"`■$\",{\"1\":{\"174\":1}}],[\"`$\",{\"1\":{\"174\":2,\"185\":2,\"203\":2,\"204\":1,\"205\":1,\"239\":1,\"260\":1,\"312\":1,\"343\":2,\"375\":4}}],[\"`|$\",{\"1\":{\"164\":1,\"367\":1}}],[\"`\",{\"1\":{\"147\":4,\"174\":3,\"185\":6,\"192\":1,\"203\":2,\"204\":1,\"205\":1,\"232\":2,\"260\":5,\"275\":2,\"286\":6,\"298\":2,\"312\":5,\"319\":1,\"334\":1,\"338\":1,\"343\":3,\"357\":4,\"375\":4,\"448\":1,\"480\":3,\"493\":1,\"495\":1}}],[\"`<a\",{\"1\":{\"232\":1}}],[\"`<li>$\",{\"1\":{\"174\":1}}],[\"`<li><a\",{\"1\":{\"134\":1}}],[\"`<p>$\",{\"1\":{\"174\":1,\"232\":1}}],[\"`<\",{\"1\":{\"134\":2}}],[\"`<ul>`\",{\"1\":{\"134\":1}}],[\"`<hr><address>$\",{\"1\":{\"134\":1}}],[\"`<h1>$\",{\"1\":{\"134\":1,\"174\":1}}],[\"`<html><head><title>$\",{\"1\":{\"134\":1,\"174\":1,\"232\":1}}],[\"`<body>`\",{\"1\":{\"134\":1}}],[\"直至可以解决它们为止\",{\"1\":{\"346\":1}}],[\"直到真正用递归下降的方式实现了一个\",{\"1\":{\"503\":1}}],[\"直到遇到优先级\",{\"1\":{\"489\":1}}],[\"直到遇见了终结符\",{\"1\":{\"437\":1}}],[\"直到合并成起始的非终结符\",{\"1\":{\"435\":1}}],[\"直到匹配输入的终结符\",{\"1\":{\"435\":1}}],[\"直到实际图像加载完成\",{\"1\":{\"327\":1}}],[\"直到有一个对象能够处理它\",{\"1\":{\"185\":1}}],[\"直流12v\",{\"1\":{\"146\":1}}],[\"直接将对应的值用\",{\"1\":{\"481\":1}}],[\"直接从源代码编译成汇编代码是很困难的\",{\"1\":{\"418\":1}}],[\"直接证明比较困难\",{\"1\":{\"57\":1,\"73\":1}}],[\"直接取模\",{\"0\":{\"39\":1}}],[\"直接地创建各种图表\",{\"1\":{\"5\":1}}],[\"需求\",{\"1\":{\"146\":1}}],[\"需要两个字符\",{\"1\":{\"420\":1}}],[\"需要有参数\",{\"1\":{\"403\":1}}],[\"需要去理解程序运行中会有哪些状态\",{\"1\":{\"401\":1}}],[\"需要删除\",{\"1\":{\"348\":1}}],[\"需要注意这些\",{\"1\":{\"302\":1}}],[\"需要注意的是\",{\"1\":{\"290\":1,\"379\":1,\"405\":1}}],[\"需要根据具体需求来决定\",{\"1\":{\"291\":1}}],[\"需要根据具体需求来决定需要保存多少个\",{\"1\":{\"290\":1}}],[\"需要多少个\",{\"0\":{\"290\":1}}],[\"需要在不暴露对象实现细节的情况下保存对象状态\",{\"1\":{\"285\":1}}],[\"需要在对象状态变化时进行撤销操作\",{\"1\":{\"285\":1}}],[\"需要保存和恢复对象的多个状态\",{\"1\":{\"285\":1}}],[\"需要精挑细选\",{\"1\":{\"248\":1}}],[\"需要先将这个插件\",{\"1\":{\"101\":1}}],[\"需要先申请一个域名\",{\"1\":{\"13\":1}}],[\"需要创建配置文件\",{\"1\":{\"10\":1}}],[\"变更为不仅可以撤销\",{\"1\":{\"292\":1}}],[\"变更为可以多次撤销\",{\"1\":{\"292\":1}}],[\"变换装置\",{\"1\":{\"146\":1}}],[\"变量赋值\",{\"1\":{\"476\":1}}],[\"变量与函数调用\",{\"0\":{\"481\":1},\"1\":{\"476\":1,\"484\":1}}],[\"变量类型的表示\",{\"1\":{\"448\":1}}],[\"变量是\",{\"1\":{\"424\":1}}],[\"变量定义\",{\"0\":{\"444\":1},\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":2,\"455\":2,\"466\":1,\"476\":1,\"500\":1}}],[\"变量balance的最终结果是0\",{\"1\":{\"96\":1}}],[\"变量的状态并不会进行同步\",{\"1\":{\"96\":1}}],[\"交给\",{\"1\":{\"383\":1}}],[\"交给子类\",{\"2\":{\"242\":1,\"372\":1}}],[\"交流100v\",{\"1\":{\"146\":1}}],[\"交替进行\",{\"1\":{\"94\":1}}],[\"实际上\",{\"1\":{\"477\":1}}],[\"实际上我们也不能使用递归\",{\"1\":{\"445\":1}}],[\"实际上又是别的物体的\",{\"1\":{\"216\":1}}],[\"实际中可以自己指定\",{\"1\":{\"437\":1}}],[\"实际计算机中\",{\"1\":{\"415\":1}}],[\"实际调用该方法的却是扮演\",{\"1\":{\"348\":1}}],[\"实际需求\",{\"1\":{\"146\":1}}],[\"实例的多面性\",{\"0\":{\"351\":1}}],[\"实例代码\",{\"0\":{\"245\":1,\"319\":1}}],[\"实例\",{\"1\":{\"216\":1}}],[\"实现起来并不是太难\",{\"1\":{\"503\":1}}],[\"实现起来也更直观\",{\"1\":{\"445\":1}}],[\"实现四则运算来讲解优先级问题\",{\"1\":{\"477\":1}}],[\"实现如下\",{\"1\":{\"405\":1,\"406\":1,\"408\":1,\"409\":1,\"411\":1,\"412\":1}}],[\"实现一个功能完善的\",{\"1\":{\"390\":1}}],[\"实现也很复杂\",{\"0\":{\"389\":1}}],[\"实现了\",{\"1\":{\"351\":2}}],[\"实现具体方法\",{\"1\":{\"347\":1}}],[\"实现的代码示例\",{\"1\":{\"298\":1}}],[\"实现迭代器模式\",{\"0\":{\"266\":1},\"1\":{\"266\":1}}],[\"实现显示\",{\"1\":{\"248\":1}}],[\"实现\",{\"1\":{\"159\":1}}],[\"实现方法\",{\"0\":{\"111\":1,\"114\":1,\"118\":1,\"120\":1,\"124\":1,\"127\":1}}],[\"适用于需要保存复杂对象状态的场景\",{\"1\":{\"196\":1}}],[\"适用于需要按顺序执行和撤销命令的场景\",{\"1\":{\"196\":1}}],[\"适用于编写笔记\",{\"1\":{\"106\":1}}],[\"适配器\",{\"1\":{\"146\":1}}],[\"适配器模式通过创建一个适配器类\",{\"1\":{\"144\":1}}],[\"适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\",{\"1\":{\"143\":1}}],[\"适配器模式\",{\"0\":{\"142\":1,\"143\":1},\"1\":{\"143\":1}}],[\"类别信息在后面章节中解析\",{\"1\":{\"449\":1}}],[\"类必须提供用于获取每个目录条目的\",{\"1\":{\"383\":1}}],[\"类负责\",{\"1\":{\"383\":1}}],[\"类作为组件的独立性\",{\"1\":{\"379\":1}}],[\"类作为显示文件夹内容的\",{\"1\":{\"379\":1}}],[\"类作为中介者\",{\"1\":{\"278\":1}}],[\"类型的解析在前面的文章中我们已经很熟悉了\",{\"1\":{\"480\":1}}],[\"类型的注释\",{\"1\":{\"427\":1}}],[\"类型定义\",{\"1\":{\"448\":1}}],[\"类型\",{\"1\":{\"351\":2}}],[\"类来负责\",{\"1\":{\"348\":1}}],[\"类时\",{\"1\":{\"348\":1}}],[\"类变化为其他状态\",{\"1\":{\"348\":1}}],[\"类会调用\",{\"1\":{\"347\":1}}],[\"类会负责管理\",{\"1\":{\"248\":1}}],[\"类具有一致性\",{\"1\":{\"319\":1}}],[\"类具有相同的接口\",{\"1\":{\"216\":1}}],[\"类与\",{\"1\":{\"319\":1}}],[\"类则使用窄接口来保存和传递\",{\"1\":{\"289\":1}}],[\"类则不需要做任何修改\",{\"1\":{\"168\":1}}],[\"类使用宽接口来创建和恢复\",{\"1\":{\"289\":1}}],[\"类很难在其他对话框中被复用\",{\"1\":{\"280\":1}}],[\"类用于新的对话框中\",{\"1\":{\"280\":1}}],[\"类实现了实际进行状态迁移的\",{\"1\":{\"348\":1}}],[\"类实现了\",{\"1\":{\"268\":1}}],[\"类表示一个书架\",{\"1\":{\"268\":1}}],[\"类表示一个书籍对象\",{\"1\":{\"268\":1}}],[\"类是表示被装饰物的\",{\"1\":{\"216\":1}}],[\"类方法的地方和\",{\"1\":{\"180\":1}}],[\"类知道如何生成对象的具体表示\",{\"1\":{\"178\":1}}],[\"类知道如何构建复杂对象\",{\"1\":{\"178\":1}}],[\"类中声明一个\",{\"1\":{\"382\":1}}],[\"类中的以下两条语句\",{\"1\":{\"351\":1}}],[\"类中实现这个方法\",{\"1\":{\"350\":1}}],[\"类中用到的所有\",{\"1\":{\"248\":1}}],[\"类中使用的所有\",{\"1\":{\"248\":1}}],[\"类中\",{\"1\":{\"173\":1,\"248\":3,\"278\":1,\"280\":1,\"379\":1}}],[\"类和\",{\"1\":{\"168\":4,\"180\":1,\"280\":1,\"348\":1,\"350\":1,\"351\":1,\"379\":3,\"382\":1}}],[\"类生成\",{\"1\":{\"168\":1}}],[\"类继承了\",{\"1\":{\"159\":1}}],[\"类比\",{\"0\":{\"145\":1,\"146\":1}}],[\"类\",{\"1\":{\"138\":1,\"155\":1,\"159\":2,\"168\":3,\"180\":2,\"216\":1,\"250\":1,\"280\":1,\"347\":1,\"348\":2,\"350\":1,\"379\":1,\"382\":1}}],[\"类的兄弟类\",{\"1\":{\"382\":1}}],[\"类的层次与抽象类\",{\"0\":{\"370\":1}}],[\"类的层次结构的混杂和分离\",{\"0\":{\"157\":1}}],[\"类的层次结构的两个作用\",{\"0\":{\"154\":1}}],[\"类的构造函数中的\",{\"1\":{\"351\":1}}],[\"类的构造函数被传递给\",{\"1\":{\"159\":1}}],[\"类的构造了数中调用了\",{\"1\":{\"319\":1}}],[\"类的方法后具体会进行什么样的处理\",{\"1\":{\"180\":1}}],[\"类的方法的调用方法\",{\"1\":{\"180\":1}}],[\"类的代码就可以了\",{\"1\":{\"348\":1}}],[\"类的代码\",{\"1\":{\"180\":1,\"348\":1}}],[\"类的使用方法\",{\"1\":{\"180\":1}}],[\"类的实例并不重要\",{\"1\":{\"351\":1}}],[\"类的实例都带有相同的颜色\",{\"1\":{\"248\":1}}],[\"类的实例是被共享的\",{\"1\":{\"248\":1}}],[\"类的实例\",{\"1\":{\"168\":1,\"248\":1,\"319\":1,\"351\":1}}],[\"类的实例时\",{\"1\":{\"168\":1}}],[\"类的实例生成时\",{\"1\":{\"168\":1}}],[\"类的实现层次结构\",{\"1\":{\"152\":1,\"157\":1,\"159\":2,\"167\":3}}],[\"类的\",{\"1\":{\"159\":1,\"217\":1,\"248\":1,\"278\":1,\"347\":2,\"348\":1,\"349\":1,\"351\":1}}],[\"类的具体功能的实例\",{\"1\":{\"159\":1}}],[\"类的一览表\",{\"0\":{\"159\":1}}],[\"类的抽象方法时\",{\"1\":{\"156\":1}}],[\"类的子类中都实现这个方法\",{\"1\":{\"382\":1}}],[\"类的子类产生影响\",{\"1\":{\"180\":1}}],[\"类的子类\",{\"1\":{\"155\":1,\"216\":1}}],[\"类的功能层次结构\",{\"1\":{\"152\":1,\"157\":1,\"159\":4,\"167\":4}}],[\"类的设计原则有七个\",{\"1\":{\"108\":1}}],[\"类的多项式题目\",{\"1\":{\"37\":1}}],[\"方法本身有一定的要求\",{\"1\":{\"438\":1}}],[\"方法是为每个产生式\",{\"1\":{\"438\":1}}],[\"方法需要调用每个目录条目的\",{\"1\":{\"383\":1}}],[\"方法就会明白了\",{\"1\":{\"351\":1}}],[\"方法就使用了\",{\"1\":{\"348\":1}}],[\"方法传递\",{\"1\":{\"351\":2}}],[\"方法之间的关系\",{\"1\":{\"347\":1}}],[\"方法和\",{\"1\":{\"347\":1}}],[\"方法的调用方式如下\",{\"1\":{\"378\":2}}],[\"方法的调用顺序\",{\"1\":{\"302\":1}}],[\"方法的参数类型是\",{\"1\":{\"351\":2}}],[\"方法的线程安全性\",{\"1\":{\"338\":1}}],[\"方法而导致应用程序不能正常工作\",{\"1\":{\"302\":1}}],[\"方法后调用\",{\"1\":{\"302\":1}}],[\"方法会先被调用\",{\"1\":{\"302\":1}}],[\"方法中与函数定义相关的内容\",{\"1\":{\"456\":1}}],[\"方法中会用到的方法也都是在\",{\"1\":{\"351\":2}}],[\"方法中和\",{\"1\":{\"351\":1}}],[\"方法中的\",{\"1\":{\"351\":1}}],[\"方法中\",{\"1\":{\"302\":1,\"347\":1,\"351\":1}}],[\"方法中发生了\",{\"1\":{\"278\":1}}],[\"方法集中处理了所有消息的发布和订阅逻辑\",{\"1\":{\"278\":1}}],[\"方法稍微有些复杂\",{\"1\":{\"278\":1}}],[\"方法也调用了\",{\"1\":{\"217\":1}}],[\"方法调用了\",{\"1\":{\"217\":1}}],[\"方法\",{\"1\":{\"138\":1,\"159\":1,\"216\":1,\"268\":2,\"319\":1,\"337\":1,\"347\":3,\"348\":1,\"350\":1,\"382\":1,\"383\":2}}],[\"方式使用\",{\"1\":{\"32\":1}}],[\"零件\",{\"1\":{\"138\":1}}],[\"包中\",{\"1\":{\"138\":1}}],[\"包中增加一个表示图像的\",{\"1\":{\"138\":1}}],[\"包中的抽象部分全部具体化即可\",{\"1\":{\"137\":1}}],[\"包括变量定义\",{\"1\":{\"448\":1}}],[\"包括\",{\"1\":{\"108\":1}}],[\"包括编程\",{\"1\":{\"35\":1}}],[\"模型\",{\"1\":{\"306\":1}}],[\"模式提高了\",{\"1\":{\"379\":1}}],[\"模式编写象棋程序时\",{\"1\":{\"360\":1}}],[\"模式却特意将算法与其他部分分离开来\",{\"1\":{\"360\":1}}],[\"模式以及接口与类之间的关系\",{\"1\":{\"347\":1}}],[\"模式用类表示系统的\",{\"1\":{\"346\":1}}],[\"模式用于为某对象提供一个代理\",{\"1\":{\"318\":1}}],[\"模式确保一个类只有一个实例\",{\"1\":{\"332\":1}}],[\"模式是一种创建型设计模式\",{\"1\":{\"311\":1}}],[\"模式是一种结构型设计模式\",{\"1\":{\"244\":1}}],[\"模式来管理\",{\"1\":{\"286\":1}}],[\"模式来处理一系列的请求\",{\"1\":{\"185\":1}}],[\"模式了\",{\"1\":{\"279\":1}}],[\"模式共享实例可以减少使用\",{\"1\":{\"251\":1}}],[\"模式共享信息时必须仔细思考应当共享哪些信息\",{\"1\":{\"248\":1}}],[\"模式时\",{\"1\":{\"250\":1,\"346\":1}}],[\"模式非常有用\",{\"1\":{\"244\":1}}],[\"模式有以下几个好处\",{\"1\":{\"238\":1}}],[\"模式有以下几个优点\",{\"1\":{\"184\":1}}],[\"模式就是可以应对这种多功能对象的需求的一种模式\",{\"1\":{\"219\":1}}],[\"模式可以很容易地增加\",{\"1\":{\"381\":1,\"382\":1}}],[\"模式可以避免大量的条件语句\",{\"1\":{\"342\":1}}],[\"模式可以\",{\"1\":{\"311\":1}}],[\"模式可以显著减少内存消耗\",{\"1\":{\"244\":1}}],[\"模式可以为程序添加许多功能\",{\"1\":{\"219\":1}}],[\"模式可以将构建过程分解为多个步骤\",{\"1\":{\"173\":1}}],[\"模式使用了委托\",{\"1\":{\"217\":1}}],[\"模式一样\",{\"1\":{\"216\":1}}],[\"模式虽然与\",{\"1\":{\"216\":1}}],[\"模式允许对象在其内部状态改变时改变其行为\",{\"1\":{\"342\":1}}],[\"模式允许我们在不暴露对象实现细节的情况下保存和恢复对象的状态\",{\"1\":{\"286\":1}}],[\"模式允许你将对象组合成递归结构来表示\",{\"1\":{\"201\":1}}],[\"模式允许使用相同的构建过程来生成不同的对象表示\",{\"1\":{\"173\":1}}],[\"模式也支持可撤销的操作\",{\"1\":{\"191\":1}}],[\"模式将请求封装成对象\",{\"1\":{\"191\":1}}],[\"模式通过将构建过程与表示分离\",{\"1\":{\"179\":1}}],[\"模式通过将对象的构建过程与其表示分离\",{\"1\":{\"173\":1,\"178\":1}}],[\"模式中用到了委托\",{\"1\":{\"218\":1}}],[\"模式中也形成了类似于\",{\"1\":{\"216\":1}}],[\"模式中\",{\"1\":{\"216\":1,\"217\":1,\"237\":1,\"289\":1,\"292\":1,\"346\":1,\"347\":1,\"349\":1,\"373\":1,\"378\":1,\"383\":1}}],[\"模式中的方法调用关系\",{\"1\":{\"378\":1}}],[\"模式中的递归结构\",{\"1\":{\"216\":1}}],[\"模式中的\",{\"1\":{\"167\":1,\"347\":1}}],[\"模式中增加其他\",{\"1\":{\"350\":1}}],[\"模式中增加新的状态是非常简单的\",{\"1\":{\"350\":1}}],[\"模式中增加新的零件时应当如何做\",{\"1\":{\"138\":1}}],[\"模式中增加具体的工厂是非常容易的\",{\"1\":{\"137\":1}}],[\"模式的目的是将处理逻辑从数据结构中分离出来\",{\"1\":{\"379\":1}}],[\"模式的示例程序\",{\"1\":{\"357\":1}}],[\"模式的优势就会非常明显了\",{\"1\":{\"346\":1}}],[\"模式的实现需要特别注意线程安全问题\",{\"1\":{\"337\":1}}],[\"模式的主题是\",{\"1\":{\"248\":1}}],[\"模式的主要目的是为了定义一个算法的骨架\",{\"1\":{\"365\":1}}],[\"模式的主要目的是在不破坏封装性的前提下\",{\"1\":{\"285\":1}}],[\"模式的主要目的是通过添加装饰物来增加对象的功能\",{\"1\":{\"216\":1}}],[\"模式的主要目的是将抽象部分与实现部分分离\",{\"1\":{\"153\":1}}],[\"模式的一个缺点是会导致程序中增加许多功能类似的很小的类\",{\"1\":{\"220\":1}}],[\"模式的特征是将\",{\"1\":{\"167\":1}}],[\"模式的作用就是搭建这座桥梁\",{\"1\":{\"157\":1}}],[\"模式在\",{\"1\":{\"152\":1}}],[\"模式\",{\"0\":{\"152\":1,\"172\":1,\"173\":1,\"183\":1,\"190\":1,\"200\":1,\"211\":1,\"230\":1,\"237\":1,\"243\":1,\"244\":1,\"258\":1,\"273\":1,\"284\":1,\"285\":1,\"296\":1,\"310\":1,\"311\":1,\"317\":1,\"327\":1,\"331\":1,\"332\":1,\"341\":1,\"342\":1,\"355\":1,\"365\":1,\"366\":1,\"373\":1,\"374\":1},\"1\":{\"139\":4,\"156\":1,\"169\":3,\"176\":4,\"183\":1,\"187\":2,\"197\":3,\"201\":1,\"208\":3,\"221\":2,\"234\":3,\"238\":1,\"252\":3,\"270\":3,\"281\":2,\"293\":3,\"307\":1,\"314\":5,\"328\":2,\"332\":1,\"336\":4,\"348\":2,\"349\":1,\"350\":2,\"352\":2,\"360\":1,\"361\":1,\"362\":3,\"369\":2,\"384\":3}}],[\"模块化设计\",{\"1\":{\"120\":1}}],[\"拓展思路的要点\",{\"0\":{\"136\":1,\"166\":1,\"177\":1,\"194\":1,\"215\":1,\"247\":1,\"277\":1,\"288\":1,\"300\":1,\"321\":1,\"345\":1,\"359\":1,\"377\":1}}],[\"划分\",{\"0\":{\"292\":1},\"1\":{\"135\":1}}],[\"超链接集合的文件\",{\"1\":{\"135\":1}}],[\"<unit>\",{\"1\":{\"493\":2}}],[\"<ul>\",{\"1\":{\"134\":5,\"174\":1}}],[\"<false\",{\"1\":{\"468\":2}}],[\"<factor>11\",{\"1\":{\"437\":1}}],[\"<factor>3\",{\"1\":{\"437\":1}}],[\"<factor><factor>\",{\"1\":{\"436\":1}}],[\"<factor>\",{\"1\":{\"436\":2,\"437\":2,\"438\":2,\"439\":3}}],[\"<true\",{\"1\":{\"468\":2}}],[\"<term\",{\"1\":{\"439\":3}}],[\"<term>7\",{\"1\":{\"437\":1}}],[\"<term>或\",{\"1\":{\"436\":1}}],[\"<term><term>\",{\"1\":{\"436\":1}}],[\"<term>\",{\"1\":{\"436\":6,\"437\":2,\"438\":2,\"439\":3}}],[\"<cond>\",{\"1\":{\"468\":3,\"469\":2}}],[\"<command>\",{\"1\":{\"260\":6}}],[\"<command\",{\"1\":{\"260\":8}}],[\"<empty\",{\"1\":{\"467\":1}}],[\"<empty><factor>\",{\"1\":{\"439\":1}}],[\"<empty><term>\",{\"1\":{\"439\":1}}],[\"<expr2>normal\",{\"1\":{\"493\":1}}],[\"<expr2>\",{\"1\":{\"492\":4,\"493\":6}}],[\"<expr1>push\",{\"1\":{\"493\":1}}],[\"<expr1>\",{\"1\":{\"492\":4,\"493\":4}}],[\"<expr\",{\"1\":{\"439\":3}}],[\"<expr>2\",{\"1\":{\"437\":1}}],[\"<expr>\",{\"1\":{\"436\":7,\"437\":4,\"438\":2,\"439\":2,\"485\":1,\"486\":1}}],[\"<>\",{\"1\":{\"436\":1}}],[\"<offset>\",{\"1\":{\"411\":1}}],[\"<size>\",{\"1\":{\"408\":1,\"409\":2}}],[\"<statement>\",{\"1\":{\"467\":4,\"468\":2,\"469\":2,\"471\":1}}],[\"<string\",{\"1\":{\"397\":1}}],[\"<stdlib\",{\"1\":{\"397\":1,\"440\":1}}],[\"<stdio\",{\"1\":{\"397\":1,\"423\":1,\"440\":1}}],[\"<num>\",{\"1\":{\"403\":2}}],[\"<number>\",{\"1\":{\"260\":3}}],[\"<memory\",{\"1\":{\"397\":1}}],[\"<<\",{\"1\":{\"367\":1,\"368\":1,\"412\":1,\"428\":1,\"493\":1}}],[\"<=\",{\"1\":{\"343\":2,\"397\":1,\"412\":1,\"424\":5,\"425\":6,\"428\":1,\"429\":2,\"440\":2}}],[\"<left>\",{\"1\":{\"260\":1}}],[\"<li><a\",{\"1\":{\"134\":5}}],[\"<li>\",{\"1\":{\"134\":4}}],[\"<right>\",{\"1\":{\"260\":1}}],[\"<repeat\",{\"1\":{\"260\":6}}],[\"<go>\",{\"1\":{\"260\":1}}],[\"<product>object\",{\"1\":{\"312\":1}}],[\"<program>\",{\"1\":{\"260\":3}}],[\"<primitive\",{\"1\":{\"260\":6}}],[\"<p>メール待っていますね\",{\"1\":{\"233\":1}}],[\"<p>hiroshi\",{\"1\":{\"233\":1}}],[\"<addr>pushsc\",{\"1\":{\"490\":1}}],[\"<addr>lc\",{\"1\":{\"490\":1}}],[\"<addr>li\",{\"1\":{\"484\":1}}],[\"<addr>\",{\"1\":{\"405\":3,\"407\":2,\"481\":1,\"483\":1}}],[\"<a\",{\"1\":{\"233\":1}}],[\"<h1>welcome\",{\"1\":{\"233\":1}}],[\"<h1>linkpage<\",{\"1\":{\"134\":1}}],[\"<html><head><title>问候<\",{\"1\":{\"175\":1}}],[\"<html><head><title>linkpage<\",{\"1\":{\"134\":1}}],[\"<hr><address>gmw<\",{\"1\":{\"134\":1}}],[\"<body>\",{\"1\":{\"134\":1}}],[\"<\",{\"1\":{\"134\":14,\"160\":1,\"164\":1,\"174\":6,\"175\":5,\"185\":2,\"192\":1,\"213\":2,\"232\":5,\"233\":5,\"260\":1,\"267\":1,\"286\":2,\"298\":2,\"319\":1,\"343\":4,\"357\":4,\"367\":2,\"375\":1,\"397\":1,\"411\":1,\"412\":1,\"428\":3,\"458\":1,\"493\":3,\"495\":1}}],[\"扩展性强\",{\"1\":{\"238\":1}}],[\"扩展性\",{\"1\":{\"133\":1}}],[\"扩展其功能\",{\"1\":{\"110\":1}}],[\"解决了优先级的问题\",{\"1\":{\"489\":1}}],[\"解决方法\",{\"1\":{\"414\":1}}],[\"解析表达式\",{\"1\":{\"476\":1,\"497\":1}}],[\"解析函数的参数就是解析以逗号分隔的一个个标识符\",{\"1\":{\"460\":1}}],[\"解析函数的定义\",{\"0\":{\"457\":1},\"1\":{\"455\":1}}],[\"解析参数\",{\"0\":{\"460\":1},\"1\":{\"455\":1}}],[\"解析变量的定义\",{\"0\":{\"446\":1},\"1\":{\"444\":1}}],[\"解析为\",{\"1\":{\"420\":3}}],[\"解释器需要我们实现自己的虚拟机与指令集\",{\"1\":{\"395\":1}}],[\"解释器与编译器仅在代码生成阶段有区别\",{\"1\":{\"395\":1}}],[\"解释器\",{\"1\":{\"398\":1,\"400\":1},\"2\":{\"394\":1,\"433\":1,\"443\":1,\"454\":1,\"465\":1,\"475\":1,\"499\":1,\"507\":1}}],[\"解释器模式\",{\"1\":{\"259\":1}}],[\"解释器就自动释放gil锁\",{\"1\":{\"94\":1}}],[\"解耦框架与生成的实例\",{\"1\":{\"311\":1}}],[\"解耦集合和遍历\",{\"1\":{\"265\":1}}],[\"解耦创建和使用\",{\"1\":{\"238\":1}}],[\"解耦请求发送者和接收者\",{\"1\":{\"184\":1}}],[\"解耦\",{\"1\":{\"133\":1}}],[\"抽象条目类\",{\"0\":{\"204\":1}}],[\"抽象类声明了一些抽象方法\",{\"1\":{\"156\":1}}],[\"抽象类\",{\"1\":{\"135\":1,\"180\":1}}],[\"抽象容器\",{\"1\":{\"134\":1}}],[\"抽象html页面\",{\"1\":{\"134\":1}}],[\"抽象超链接\",{\"1\":{\"134\":1}}],[\"抽象零件\",{\"1\":{\"134\":1}}],[\"抽象工厂\",{\"1\":{\"134\":1}}],[\"抽象工厂模式通过将对象的创建过程抽象化\",{\"1\":{\"133\":1}}],[\"抽象工厂模式使得一个类的实例化延迟到其子类\",{\"1\":{\"133\":1}}],[\"抽象工厂模式提供一个接口\",{\"1\":{\"133\":1}}],[\"抽象工厂模式\",{\"0\":{\"132\":1}}],[\"抽象不应该依赖细节\",{\"1\":{\"123\":1}}],[\"优先级大于\",{\"1\":{\"477\":1}}],[\"优先级\",{\"1\":{\"477\":2,\"489\":1}}],[\"优先级关心的就是哪个运算符先计算\",{\"1\":{\"477\":1}}],[\"优先级高于加法\",{\"1\":{\"477\":1}}],[\"优先使用组合\",{\"1\":{\"129\":1}}],[\"优点是这种处理方式将\",{\"1\":{\"348\":1}}],[\"优雅的解决方案\",{\"1\":{\"1\":1}}],[\"聚合\",{\"1\":{\"126\":1,\"129\":1}}],[\"聚合复用原则\",{\"0\":{\"126\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"核心思想是\",{\"1\":{\"123\":1}}],[\"细节应该依赖抽象\",{\"1\":{\"123\":1}}],[\"二是如何将表达式编译成目标代码\",{\"1\":{\"476\":1}}],[\"二是容易中间运算时搞错运算顺序\",{\"1\":{\"39\":1}}],[\"二元运算符\",{\"0\":{\"489\":1},\"1\":{\"476\":1}}],[\"二选一\",{\"1\":{\"414\":1}}],[\"二者都依赖抽象\",{\"1\":{\"129\":1}}],[\"二者都应该依赖其抽象\",{\"1\":{\"123\":1}}],[\"显示一些东西\",{\"1\":{\"159\":1}}],[\"显示\",{\"1\":{\"159\":2}}],[\"显示用户信息逻辑\",{\"1\":{\"121\":2}}],[\"显得代码冗长\",{\"1\":{\"40\":1}}],[\"注释\",{\"0\":{\"427\":1},\"1\":{\"416\":1}}],[\"注册逻辑\",{\"1\":{\"121\":2}}],[\"注意这里并不是四则运算中的加减法\",{\"1\":{\"487\":1}}],[\"注意这里的类型\",{\"1\":{\"400\":1}}],[\"注意我们的之前的程序需要指令一个源文件\",{\"1\":{\"414\":1}}],[\"注意的是自增自减操作的优先级是和它的位置有关的\",{\"1\":{\"488\":1}}],[\"注意的是只支持\",{\"1\":{\"480\":1}}],[\"注意的是\",{\"1\":{\"410\":1}}],[\"注意的是pc在初始应指向目标代码中的main函数\",{\"1\":{\"401\":1}}],[\"注意的是由于栈是位于高地址并向低地址增长的\",{\"1\":{\"401\":1}}],[\"注意不要让变量的值之间互相矛盾\",{\"1\":{\"349\":1}}],[\"注意\",{\"1\":{\"90\":1}}],[\"登录逻辑\",{\"1\":{\"121\":2}}],[\"避免重复代码\",{\"1\":{\"366\":1}}],[\"避免重复初始化对象的复杂过程\",{\"1\":{\"311\":1}}],[\"避免处理过于集中\",{\"1\":{\"278\":1}}],[\"避免浪费\",{\"2\":{\"254\":1,\"330\":1}}],[\"避免高层模块直接依赖具体类\",{\"1\":{\"124\":1}}],[\"避免不必要的外部依赖\",{\"1\":{\"118\":1}}],[\"避免了多线程的上下文切换\",{\"1\":{\"95\":1}}],[\"限制公开方法\",{\"1\":{\"118\":1}}],[\"隐藏系统的复杂性\",{\"1\":{\"118\":1}}],[\"示例程序的前提是\",{\"1\":{\"319\":1}}],[\"示例程序中的\",{\"1\":{\"278\":1}}],[\"示例程序\",{\"0\":{\"147\":1,\"357\":1},\"1\":{\"146\":1}}],[\"示例代码\",{\"0\":{\"134\":1,\"158\":1,\"185\":1,\"192\":1,\"202\":1,\"231\":1,\"239\":1,\"260\":1,\"275\":1,\"286\":1,\"298\":1,\"312\":1,\"334\":1,\"343\":1,\"367\":1,\"375\":1}}],[\"示例\",{\"0\":{\"115\":1,\"121\":1,\"125\":1,\"128\":1}}],[\"返回类型应与父类相同或是其子类型\",{\"1\":{\"114\":1}}],[\"确保同一工厂创建的一系列对象具有一致的接口和行为\",{\"1\":{\"133\":1}}],[\"确保每个模块只负责一个功能\",{\"1\":{\"120\":1}}],[\"确保每个类只有一个职责\",{\"1\":{\"111\":1}}],[\"确保子类实现父类的抽象方法\",{\"1\":{\"114\":1}}],[\"通用寄存器\",{\"1\":{\"401\":1}}],[\"通信线路的增加\",{\"0\":{\"279\":1}}],[\"通常是站在子类的角度进行思考的\",{\"1\":{\"370\":1}}],[\"通常在编程时算法会被写在具体方法中\",{\"1\":{\"360\":1}}],[\"通常会有两种接口\",{\"1\":{\"289\":1}}],[\"通常情况下\",{\"1\":{\"278\":1}}],[\"通常\",{\"1\":{\"109\":1,\"302\":2,\"379\":1}}],[\"通过一步步的学习\",{\"1\":{\"497\":1}}],[\"通过一个有趣的代码示例\",{\"1\":{\"102\":1}}],[\"通过本章的学习\",{\"1\":{\"431\":1}}],[\"通过词法分析器的预处理\",{\"1\":{\"417\":1}}],[\"通过教程来说明这个过程\",{\"1\":{\"390\":1}}],[\"通过代理对象来延迟实际对象的创建\",{\"1\":{\"322\":1}}],[\"通过保存多个\",{\"1\":{\"292\":1}}],[\"通过这些不同类型的代理模式\",{\"1\":{\"327\":1}}],[\"通过这些类和接口\",{\"1\":{\"268\":1}}],[\"通过这种划分\",{\"1\":{\"292\":1}}],[\"通过这种方式\",{\"1\":{\"289\":1,\"365\":1}}],[\"通过实现统一的迭代器接口\",{\"1\":{\"265\":1}}],[\"通过定义文法规则\",{\"1\":{\"259\":1}}],[\"通过定义抽象类和接口\",{\"1\":{\"111\":1}}],[\"通过\",{\"1\":{\"251\":1,\"332\":1,\"496\":1}}],[\"通过引用计数来管理共享对象的生命周期\",{\"1\":{\"250\":1}}],[\"通过引入外观类\",{\"1\":{\"230\":1}}],[\"通过共享对象\",{\"1\":{\"244\":1}}],[\"通过使用策略模式\",{\"1\":{\"356\":1}}],[\"通过使用观察者模式\",{\"1\":{\"297\":1,\"306\":1}}],[\"通过使用迭代器模式\",{\"1\":{\"265\":1}}],[\"通过使用\",{\"1\":{\"238\":1}}],[\"通过使用装饰器模式\",{\"1\":{\"212\":1}}],[\"通过学习和应用设计模式\",{\"1\":{\"227\":1}}],[\"通过将\",{\"1\":{\"292\":1,\"403\":1}}],[\"通过将不同的语法规则封装在不同的类中\",{\"1\":{\"259\":1}}],[\"通过将每个执行的命令对象保存到一个历史记录列表中\",{\"1\":{\"196\":1}}],[\"通过将这些信息封装在命令对象中\",{\"1\":{\"195\":1}}],[\"通过将构建过程封装在\",{\"1\":{\"173\":1}}],[\"通过接口和抽象类定义行为\",{\"1\":{\"127\":1}}],[\"通过在类中引用其他类的实例来实现功能\",{\"1\":{\"127\":1}}],[\"通过在类中包含其他类的实例来实现功能\",{\"1\":{\"127\":1}}],[\"通过构造函数注入\",{\"1\":{\"124\":1}}],[\"通过模块化设计\",{\"1\":{\"120\":1}}],[\"通过门面对象提供统一的接口\",{\"1\":{\"118\":1}}],[\"通过中介者对象来管理对象之间的交互\",{\"1\":{\"118\":1}}],[\"通过举反例的方式\",{\"1\":{\"77\":1}}],[\"通过上述步骤\",{\"1\":{\"77\":1,\"106\":1}}],[\"违反其中一个原则\",{\"1\":{\"109\":1}}],[\"七大原则之间并不是相互孤立的\",{\"1\":{\"109\":1}}],[\"单元运算符往往没有这个问题\",{\"1\":{\"477\":1}}],[\"单一职责原则\",{\"0\":{\"119\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"单核处理器还是同时间只能做一件事\",{\"1\":{\"95\":1}}],[\"单核处理器本来就没法同时处理两件事情\",{\"1\":{\"93\":1}}],[\"单核同时间内只能有一个线程运行\",{\"1\":{\"93\":1}}],[\"迪米特原则\",{\"0\":{\"116\":1,\"117\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"里氏代换原则规定子类不得重写父类的普通方法\",{\"1\":{\"113\":1}}],[\"里氏代换原则\",{\"0\":{\"112\":1,\"113\":1},\"1\":{\"108\":1,\"109\":1,\"129\":1}}],[\"里的\",{\"0\":{\"33\":1}}],[\"设置了正确的类型\",{\"1\":{\"457\":1}}],[\"设置把你主机\",{\"1\":{\"32\":1}}],[\"设计我们自己的指令集\",{\"1\":{\"398\":1}}],[\"设计\",{\"0\":{\"395\":1},\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"设计者在使用\",{\"1\":{\"248\":1}}],[\"设计时能够决定的事情和不能决定的事情\",{\"0\":{\"179\":1}}],[\"设计模式和面向对象的目的正是为我们提供一种结构\",{\"1\":{\"380\":1}}],[\"设计模式需遵循面向对象的设计原则\",{\"1\":{\"255\":1}}],[\"设计模式是软件开发中的一把利器\",{\"1\":{\"227\":1}}],[\"设计模式的学习和应用需要不断的实践和积累\",{\"1\":{\"227\":1}}],[\"设计模式的使用不是最终目的\",{\"1\":{\"227\":1}}],[\"设计模式并不是万能的\",{\"1\":{\"227\":1}}],[\"设计模式提供了一种通用的解决方案\",{\"1\":{\"227\":1}}],[\"设计模式\",{\"0\":{\"255\":1},\"2\":{\"130\":1,\"131\":1,\"140\":1,\"141\":1,\"150\":1,\"151\":1,\"170\":1,\"171\":1,\"181\":1,\"182\":1,\"188\":1,\"189\":1,\"198\":1,\"199\":1,\"209\":1,\"210\":1,\"225\":1,\"226\":1,\"228\":1,\"229\":1,\"235\":1,\"236\":1,\"241\":1,\"242\":1,\"253\":1,\"254\":1,\"256\":1,\"257\":1,\"262\":1,\"263\":1,\"271\":1,\"272\":1,\"282\":1,\"283\":1,\"294\":1,\"295\":1,\"308\":1,\"309\":1,\"315\":1,\"316\":1,\"329\":1,\"330\":1,\"339\":1,\"340\":1,\"353\":1,\"354\":1,\"363\":1,\"364\":1,\"371\":1,\"372\":1,\"385\":1,\"386\":1}}],[\"设计模式七大原则\",{\"0\":{\"108\":1}}],[\"设计方法\",{\"1\":{\"109\":1}}],[\"设计目标\",{\"1\":{\"109\":1}}],[\"启动\",{\"1\":{\"106\":1}}],[\"启动项目\",{\"0\":{\"19\":1}}],[\"复杂对象的创建\",{\"1\":{\"173\":1}}],[\"复杂演示推荐\",{\"1\":{\"99\":1}}],[\"复制到\",{\"1\":{\"106\":1}}],[\"密码\",{\"1\":{\"106\":1}}],[\"百度网盘\",{\"1\":{\"106\":1}}],[\"官网\",{\"1\":{\"106\":1}}],[\"官方推荐的\",{\"1\":{\"32\":1}}],[\"教程源码示例\",{\"1\":{\"227\":1,\"255\":1}}],[\"教程\",{\"0\":{\"105\":1}}],[\"准备好了吗\",{\"1\":{\"102\":1}}],[\"展示如何用闭包来实现这一点\",{\"1\":{\"102\":1}}],[\"页面\",{\"1\":{\"101\":1}}],[\"预览功能\",{\"1\":{\"101\":1}}],[\"转换成对应的汇编代码\",{\"1\":{\"458\":1}}],[\"转给另外一个人\",{\"1\":{\"183\":1}}],[\"转\",{\"0\":{\"107\":1}}],[\"转而使用\",{\"1\":{\"101\":1}}],[\"转载声明\",{\"0\":{\"398\":1}}],[\"转载工具\",{\"1\":{\"387\":1}}],[\"转载请附上原文出处链接和本声明\",{\"1\":{\"30\":1}}],[\"转载自\",{\"1\":{\"29\":1}}],[\"卸载\",{\"1\":{\"101\":1}}],[\"禁用\",{\"1\":{\"101\":1}}],[\"渲染插件\",{\"1\":{\"101\":1}}],[\"⚠️注意事项\",{\"1\":{\"101\":1}}],[\"缺点是\",{\"1\":{\"348\":1}}],[\"缺点\",{\"0\":{\"100\":1,\"101\":1}}],[\"文法\",{\"1\":{\"503\":1}}],[\"文法的关系\",{\"1\":{\"503\":1}}],[\"文法如下\",{\"1\":{\"260\":1}}],[\"文章\",{\"1\":{\"392\":1}}],[\"文档和博客等\",{\"1\":{\"106\":1}}],[\"文档\",{\"1\":{\"98\":1}}],[\"文件描述符\",{\"1\":{\"251\":1}}],[\"文件句柄\",{\"1\":{\"251\":1}}],[\"文件类\",{\"0\":{\"205\":1}}],[\"文件\",{\"1\":{\"106\":1}}],[\"文件来实现风格统一\",{\"1\":{\"48\":1}}],[\"文件目录\",{\"1\":{\"33\":1}}],[\"文件管理器\",{\"1\":{\"33\":1}}],[\"文件的实际位置很奇怪\",{\"1\":{\"32\":1}}],[\"脱离具体场景孤立存在的\",{\"1\":{\"97\":1}}],[\"脱离对象孤立存在的\",{\"1\":{\"97\":1}}],[\"抛开场景谈逻辑\",{\"1\":{\"97\":1}}],[\"抛开剂量谈毒性\",{\"1\":{\"97\":1}}],[\"道德不是空泛的\",{\"1\":{\"97\":1}}],[\"只支持枚举\",{\"1\":{\"448\":1}}],[\"只支持\",{\"1\":{\"427\":1}}],[\"只能说它是一个相当大的挑战吧\",{\"1\":{\"388\":1}}],[\"只能重写父类的抽象方法\",{\"1\":{\"113\":1}}],[\"只是在编写代码的过程中\",{\"1\":{\"504\":1}}],[\"只是在实现\",{\"1\":{\"488\":1}}],[\"只是这时就是提前看k个\",{\"1\":{\"427\":1}}],[\"只是现在还用不着\",{\"1\":{\"414\":1}}],[\"只是现在用\",{\"1\":{\"411\":1}}],[\"只是我们的指令集中并没有\",{\"1\":{\"410\":1}}],[\"只是它们的功能都过于强大\",{\"1\":{\"396\":1}}],[\"只是对于一般的学生或程序员来说\",{\"1\":{\"389\":1}}],[\"只是定义了与算法相关的接口\",{\"1\":{\"360\":1}}],[\"只是阅读抽象类的代码是无法获取很多信息的\",{\"1\":{\"180\":1}}],[\"只存在一个实例\",{\"1\":{\"333\":1}}],[\"只要保持各个类的独立性\",{\"1\":{\"302\":1}}],[\"只要准备一些装饰边框\",{\"1\":{\"219\":1}}],[\"只将那些真正应该在多个地方共享的字段定义在\",{\"1\":{\"248\":1}}],[\"只需添加新的访问者类\",{\"1\":{\"374\":1}}],[\"只需添加新的子类工厂\",{\"1\":{\"238\":1}}],[\"只需要阅读\",{\"1\":{\"348\":1}}],[\"只需要依赖抽象产品接口\",{\"1\":{\"238\":1}}],[\"只需要一些装饰物即可添加许多功能\",{\"0\":{\"219\":1}}],[\"只需要在\",{\"1\":{\"167\":1}}],[\"只有身在其中的我们才能体会吧\",{\"1\":{\"505\":1}}],[\"只有当访问者从数据结构中获取了足够多的信息后才能工作\",{\"1\":{\"383\":1}}],[\"只有\",{\"1\":{\"346\":1,\"403\":1}}],[\"只有在实际项目中多次使用\",{\"1\":{\"227\":1}}],[\"只有掌握了辩证的矛盾思维才能更全面更灵活的看待问题\",{\"1\":{\"97\":1}}],[\"只显示规定次数\",{\"1\":{\"159\":1}}],[\"只关注最终结果一致性\",{\"1\":{\"97\":1}}],[\"只不过这个让出的过程是线程调度器主动抢占的\",{\"1\":{\"93\":1}}],[\"没有什么值得说明的内容\",{\"1\":{\"469\":1}}],[\"没有学过编译原理的话可能并不知道什么是\",{\"1\":{\"436\":1}}],[\"没有参数的指令在后\",{\"1\":{\"402\":1}}],[\"没有主动放弃执行权\",{\"1\":{\"97\":1}}],[\"没锁的话\",{\"1\":{\"94\":1}}],[\"还有就是写这个系列的文章\",{\"1\":{\"504\":1}}],[\"还有就是调试编译器\",{\"1\":{\"504\":1}}],[\"还有两个重要函数没有完成\",{\"1\":{\"462\":1}}],[\"还剩最后一部分没有完成\",{\"1\":{\"472\":1}}],[\"还记得前面说的标识符\",{\"1\":{\"429\":1}}],[\"还要考虑如何传递参数和如何返回结果\",{\"1\":{\"407\":1}}],[\"还没仔细了解过\",{\"1\":{\"392\":1}}],[\"还可以用某种算法去\",{\"1\":{\"361\":1}}],[\"还可以不用\",{\"1\":{\"348\":1}}],[\"还可以将现在的状态保存在文件中\",{\"1\":{\"292\":1}}],[\"还会使得调试和维护变得更加困难\",{\"1\":{\"278\":1}}],[\"还想变量安全\",{\"1\":{\"96\":1}}],[\"还是实现起来\",{\"1\":{\"503\":1}}],[\"还是函数的局部变量\",{\"1\":{\"458\":1}}],[\"还是需要仔细一点的\",{\"1\":{\"350\":1}}],[\"还是咖啡朗姆和开心果的混合口味\",{\"1\":{\"219\":1}}],[\"还是要增加实现呢\",{\"1\":{\"157\":1}}],[\"还是过程中\",{\"1\":{\"96\":1}}],[\"还是只能加锁\",{\"1\":{\"96\":1}}],[\"还是只能一个人打电话\",{\"1\":{\"94\":1}}],[\"还是最后执行结果\",{\"1\":{\"96\":1}}],[\"话说回来\",{\"1\":{\"96\":1}}],[\"切换过程是协作的\",{\"1\":{\"96\":1}}],[\"连最终一致性也无法保证\",{\"1\":{\"96\":1}}],[\"连接你的\",{\"1\":{\"32\":1}}],[\"意味着协程操作变量的最终一致性是可以保证的\",{\"1\":{\"96\":1}}],[\"混乱状态\",{\"1\":{\"96\":1}}],[\"状况发生改变时会变化的信息\",{\"1\":{\"249\":1}}],[\"状态机\",{\"1\":{\"502\":1}}],[\"状态迁移\",{\"1\":{\"348\":1}}],[\"状态不同处理也不同\",{\"1\":{\"347\":1}}],[\"状态越多\",{\"1\":{\"346\":1}}],[\"状态\",{\"1\":{\"195\":1,\"346\":1}}],[\"状态一致\",{\"1\":{\"96\":1}}],[\"状自然数系统\",{\"1\":{\"84\":1}}],[\"925\",{\"1\":{\"287\":4}}],[\"98\",{\"1\":{\"287\":1,\"389\":1}}],[\"97\",{\"1\":{\"287\":1}}],[\"900\",{\"1\":{\"207\":1,\"376\":1}}],[\"998\",{\"1\":{\"417\":3}}],[\"998244353>\",{\"1\":{\"41\":3}}],[\"998244353\",{\"1\":{\"37\":1}}],[\"9999\",{\"1\":{\"358\":1}}],[\"9998\",{\"1\":{\"358\":1}}],[\"9997\",{\"1\":{\"358\":1}}],[\"9994\",{\"1\":{\"358\":1}}],[\"9992\",{\"1\":{\"358\":1}}],[\"9991\",{\"1\":{\"358\":1}}],[\"99\",{\"1\":{\"186\":1,\"287\":1}}],[\"9\",{\"0\":{\"500\":1},\"1\":{\"96\":1,\"159\":1,\"193\":2,\"245\":1,\"343\":2,\"387\":1,\"395\":1,\"398\":2,\"416\":2,\"424\":1,\"425\":6,\"434\":1,\"440\":2,\"444\":1,\"455\":1,\"466\":1,\"476\":2,\"500\":2}}],[\"再将\",{\"1\":{\"494\":1}}],[\"再赋上局部变量相关的信息\",{\"1\":{\"460\":1}}],[\"再例如\",{\"1\":{\"417\":1}}],[\"再见\",{\"1\":{\"174\":1,\"175\":1}}],[\"再也没有异步的加持了\",{\"1\":{\"96\":1}}],[\"再进行减法运算\",{\"1\":{\"96\":1}}],[\"再根据\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"逻辑运算符\",{\"0\":{\"492\":1},\"1\":{\"476\":1}}],[\"逻辑取反\",{\"0\":{\"485\":1},\"1\":{\"476\":1}}],[\"逻辑也较为直接\",{\"1\":{\"425\":1}}],[\"逻辑有了些许修改\",{\"1\":{\"96\":1}}],[\"逻辑紧凑\",{\"1\":{\"95\":1}}],[\"让它实现\",{\"1\":{\"350\":1}}],[\"让它干一些\",{\"1\":{\"319\":1}}],[\"让高层模块依赖这些抽象\",{\"1\":{\"124\":1}}],[\"让我们继续讲解如何把运算符编译成汇编代码吧\",{\"1\":{\"489\":1}}],[\"让我们继续之前的逻辑\",{\"1\":{\"96\":1}}],[\"让我们稍微改变一下立场\",{\"1\":{\"370\":1}}],[\"让我们简单地举个例子\",{\"1\":{\"248\":1}}],[\"让我们再回顾一下示例程序\",{\"1\":{\"180\":1}}],[\"让我们开始这段有趣的旅程吧\",{\"1\":{\"102\":1}}],[\"让我们来看一下代码运行结果\",{\"1\":{\"96\":1}}],[\"让别的协程运行\",{\"1\":{\"96\":1}}],[\"让别的线程有机会执行\",{\"1\":{\"94\":1}}],[\"让出了使用权\",{\"1\":{\"96\":1}}],[\"又可能会导致软件产品的质量降低\",{\"1\":{\"380\":1}}],[\"又访问\",{\"1\":{\"378\":1}}],[\"又想多协程\",{\"1\":{\"96\":1}}],[\"又要共享状态\",{\"1\":{\"96\":1}}],[\"又或者别的协程任务也\",{\"1\":{\"96\":1}}],[\"又不确定性\",{\"1\":{\"94\":1}}],[\"随后立刻切换回来\",{\"1\":{\"96\":1}}],[\"随后当我们让出使用权1秒之后\",{\"1\":{\"96\":1}}],[\"随笔\",{\"0\":{\"2\":1}}],[\"别的协程就可以进行执行\",{\"1\":{\"96\":1}}],[\"别的线程表一定不能改\",{\"1\":{\"94\":1}}],[\"暂时\",{\"1\":{\"96\":1}}],[\"关于编代码\",{\"0\":{\"504\":1},\"1\":{\"500\":1}}],[\"关于变量\",{\"1\":{\"481\":1}}],[\"关于表达式的解析\",{\"1\":{\"478\":1}}],[\"关于这个问题\",{\"1\":{\"248\":1}}],[\"关于这一点\",{\"1\":{\"248\":1}}],[\"关键是判断\",{\"1\":{\"483\":1}}],[\"关键就是去理解汇编代码的执行原理\",{\"1\":{\"473\":1}}],[\"关键字与内置函数\",{\"0\":{\"429\":1},\"1\":{\"416\":1}}],[\"关键字生成实例的次数\",{\"1\":{\"251\":1}}],[\"关键字生成实例会花费时间\",{\"1\":{\"251\":1}}],[\"关键字\",{\"1\":{\"96\":1,\"429\":1}}],[\"关系\",{\"0\":{\"109\":1}}],[\"关闭vscode\",{\"1\":{\"49\":1}}],[\"那诸如\",{\"1\":{\"481\":1}}],[\"那意味着也支持指针的指针\",{\"1\":{\"448\":1}}],[\"那就不行了\",{\"1\":{\"380\":1}}],[\"那就不需要加锁\",{\"1\":{\"97\":1}}],[\"那就意味着大家完全理解了\",{\"1\":{\"347\":1}}],[\"那就是\",{\"1\":{\"383\":1,\"429\":1}}],[\"那就是最大的道德\",{\"1\":{\"97\":1}}],[\"那就是任务又回到了线性同步执行\",{\"1\":{\"96\":1}}],[\"那就是代码中没有\",{\"1\":{\"96\":1}}],[\"那到底怎么主动让出使用权\",{\"1\":{\"96\":1}}],[\"那么对变量\",{\"1\":{\"484\":1}}],[\"那么如何确定运算符的优先级呢\",{\"1\":{\"477\":1}}],[\"那么外层的\",{\"1\":{\"459\":1}}],[\"那么它应该被转换成什么样的汇编代码呢\",{\"1\":{\"458\":1}}],[\"那么我们如何表示指针类型呢\",{\"1\":{\"448\":1}}],[\"那么我们怎么表示标识符呢\",{\"1\":{\"424\":1}}],[\"那么我们就可以用\",{\"1\":{\"167\":1}}],[\"那么参数的传递呢\",{\"1\":{\"407\":1}}],[\"那么你会发现\",{\"1\":{\"389\":1}}],[\"那么为什么要学习编译原理呢\",{\"1\":{\"388\":1}}],[\"那么在看到这条设计原则后\",{\"1\":{\"380\":1}}],[\"那么每次要扩展功能\",{\"1\":{\"379\":1}}],[\"那么下一局也出一样的手势\",{\"1\":{\"357\":1}}],[\"那么这个\",{\"1\":{\"351\":1}}],[\"那么这些分散的类最终只会导致灾难\",{\"1\":{\"278\":1}}],[\"那么增加新的状态时会怎样呢\",{\"1\":{\"350\":1}}],[\"那么编译器在编译代码时就会报错\",{\"1\":{\"350\":1}}],[\"那么程序结构会变得非常复杂\",{\"1\":{\"279\":1}}],[\"那么通信线路有两条\",{\"1\":{\"279\":1}}],[\"那么无论是编写代码还是调试代码和修改代码\",{\"1\":{\"278\":1}}],[\"那么两种解决方案到底哪个是正确的呢\",{\"1\":{\"248\":1}}],[\"那么此时\",{\"1\":{\"248\":1}}],[\"那么\",{\"1\":{\"248\":3}}],[\"那么就在返回时保存在\",{\"1\":{\"407\":1}}],[\"那么就会有\",{\"1\":{\"279\":1}}],[\"那么就会对类中调用\",{\"1\":{\"180\":1}}],[\"那么就可以在字符串的四周加上边框\",{\"1\":{\"217\":1}}],[\"那么需要做的就是编写\",{\"1\":{\"137\":1}}],[\"那么协程一定是安全的\",{\"1\":{\"96\":1}}],[\"那么值会是0\",{\"1\":{\"94\":1}}],[\"上节中说到了运算符的优先级\",{\"1\":{\"478\":1}}],[\"上的\",{\"1\":{\"458\":1}}],[\"上一章的代码中\",{\"1\":{\"457\":1}}],[\"上述代码中我们看到\",{\"1\":{\"427\":1}}],[\"上述等式表明\",{\"1\":{\"76\":1}}],[\"上面这断代码为当前的标识符设置了正确的类别\",{\"1\":{\"457\":1}}],[\"上面这些标记是有顺序的\",{\"1\":{\"420\":1}}],[\"上面这段代码在我们自己的虚拟机里会有几个问题\",{\"1\":{\"407\":1}}],[\"上面的一些指令解决了调用帧的问题\",{\"1\":{\"411\":1}}],[\"上面的代码运行后会出现\",{\"1\":{\"430\":1}}],[\"上面的代码看上去挺复杂\",{\"1\":{\"397\":1}}],[\"上面的代码也充分说明了这个结论的正确性\",{\"1\":{\"96\":1}}],[\"上下载\",{\"1\":{\"397\":1,\"415\":1,\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"496\":1}}],[\"上看到了一个项目\",{\"1\":{\"390\":1}}],[\"谁知道什么\",{\"0\":{\"178\":1},\"1\":{\"178\":1}}],[\"谁举证\",{\"1\":{\"96\":1}}],[\"谁主张\",{\"1\":{\"96\":1}}],[\"毫无疑问\",{\"1\":{\"96\":2}}],[\"运行程序\",{\"1\":{\"414\":1}}],[\"运行我们的指令集\",{\"1\":{\"398\":1}}],[\"运行结果\",{\"0\":{\"148\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"276\":1,\"287\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"358\":1,\"368\":1,\"376\":1},\"1\":{\"96\":1}}],[\"运算符出栈\",{\"1\":{\"477\":2}}],[\"运算符运算等等\",{\"1\":{\"476\":1}}],[\"运算符的优先级决定了表达式的运算顺序\",{\"1\":{\"477\":1}}],[\"运算符的优先级\",{\"0\":{\"477\":1},\"1\":{\"476\":1}}],[\"运算符指令\",{\"0\":{\"412\":1},\"1\":{\"398\":1}}],[\"运算更快\",{\"1\":{\"41\":1}}],[\"既然同一时间只能有一个协程任务运行\",{\"1\":{\"96\":1}}],[\"体本身就无缝保持了程序状态\",{\"1\":{\"95\":1}}],[\"闭包实现类\",{\"0\":{\"102\":1}}],[\"闭包\",{\"1\":{\"95\":1}}],[\"比起可怕的\",{\"1\":{\"389\":1}}],[\"比喻\",{\"1\":{\"146\":1}}],[\"比操作系统的抢占式调度所需要的时间代价要小很多\",{\"1\":{\"95\":1}}],[\"比如大量的\",{\"1\":{\"37\":1}}],[\"比如\",{\"1\":{\"32\":1}}],[\"过滤遍历等\",{\"1\":{\"265\":1}}],[\"过了一段时间\",{\"1\":{\"95\":1}}],[\"过去的做法\",{\"0\":{\"38\":1}}],[\"抢占式的线程就不那么让人愉快了\",{\"1\":{\"94\":1}}],[\"抢占式的线程调度器是非常不错的选择\",{\"1\":{\"94\":1}}],[\"因而灵活性较差\",{\"1\":{\"392\":1}}],[\"因为已经有许多自动生成的工具支持它们\",{\"1\":{\"503\":1}}],[\"因为只有一个参数\",{\"1\":{\"477\":1}}],[\"因为汇编代码是顺序排列的\",{\"1\":{\"468\":1,\"477\":1}}],[\"因为汇编语言就是\",{\"1\":{\"415\":1}}],[\"因为这决定了我们需要从解析中获取什么样的信息\",{\"1\":{\"463\":1}}],[\"因为这决定了在解析时我们需要哪些相关的信息\",{\"1\":{\"458\":1}}],[\"因为这样实现起来就会变得复杂\",{\"1\":{\"407\":1}}],[\"因为还有许多功能没有实现\",{\"1\":{\"451\":1}}],[\"因为它们可以用\",{\"1\":{\"436\":1}}],[\"因为它会尝试运行我们上一章创建的虚拟机\",{\"1\":{\"430\":1}}],[\"因为它可以保证所有的线程都可以被分到时间片不被垃圾代码所拖累\",{\"1\":{\"94\":1}}],[\"因为有特殊的含义\",{\"1\":{\"429\":1}}],[\"因为输入的字符串比较难处理\",{\"1\":{\"418\":1}}],[\"因为像\",{\"1\":{\"412\":1}}],[\"因为我们不在乎出栈的值\",{\"1\":{\"481\":1}}],[\"因为我们需要先对它们进行解析\",{\"1\":{\"478\":1}}],[\"因为我们会在代码段\",{\"1\":{\"400\":1}}],[\"因为我们的编译器并不支持初始化变量\",{\"1\":{\"400\":1}}],[\"因为不关心其中的真正数值\",{\"1\":{\"400\":1}}],[\"因为好多理论根本用不上\",{\"1\":{\"389\":1}}],[\"因为具体的处理被交给\",{\"1\":{\"381\":1}}],[\"因为状态迁移的部分正是与其他\",{\"1\":{\"350\":1}}],[\"因为即使\",{\"1\":{\"278\":1}}],[\"因为共享对象永远不会被回收\",{\"1\":{\"250\":1}}],[\"因为自己难以确定究竟应该在类的哪一个层次结构中去增加子类\",{\"1\":{\"157\":1}}],[\"因为协程是用户态\",{\"1\":{\"96\":1}}],[\"因为线程是系统态切换\",{\"1\":{\"96\":1}}],[\"因此对应的源码如下\",{\"1\":{\"493\":1}}],[\"因此对于需要讲解的运算符\",{\"1\":{\"478\":1}}],[\"因此要有特殊的处理\",{\"1\":{\"493\":1}}],[\"因此将它们放在一起处理\",{\"1\":{\"481\":1}}],[\"因此得到结果\",{\"1\":{\"477\":1}}],[\"因此只凭当前的字符我们并无法确定具体应该解释成哪一个标记\",{\"1\":{\"427\":1}}],[\"因此只要调试该方法就能很容易地找出\",{\"1\":{\"278\":1}}],[\"因此在实现中我们将它作为\",{\"1\":{\"421\":1}}],[\"因此在\",{\"1\":{\"414\":1}}],[\"因此在我们的编译器\",{\"1\":{\"413\":1}}],[\"因此编译编译器时\",{\"1\":{\"413\":1}}],[\"因此计算结束后\",{\"1\":{\"412\":1}}],[\"因此实际中我们将\",{\"1\":{\"407\":1}}],[\"因此我们要做的就是生成类似的汇编代码\",{\"1\":{\"495\":1}}],[\"因此我们要消除左递归\",{\"1\":{\"439\":1}}],[\"因此我们判断它是否与数字\",{\"1\":{\"485\":1}}],[\"因此我们删除相应的指令\",{\"1\":{\"484\":1}}],[\"因此我们可以利用这一点\",{\"1\":{\"415\":1}}],[\"因此我们继续实现新的指令\",{\"1\":{\"413\":1}}],[\"因此我们采用的方法是增加指令集\",{\"1\":{\"407\":1}}],[\"因此我们将\",{\"1\":{\"403\":1}}],[\"因此我们也不需要未初始化数据段\",{\"1\":{\"400\":1}}],[\"因此先不处理\",{\"1\":{\"401\":1}}],[\"因此简单起见\",{\"1\":{\"400\":1}}],[\"因此完全不用修改\",{\"1\":{\"381\":1}}],[\"因此这两个\",{\"1\":{\"351\":1}}],[\"因此需要在性能和功能之间找到一个平衡点\",{\"1\":{\"290\":1}}],[\"因此颜色信息也被共享了\",{\"1\":{\"248\":1}}],[\"因此一个进程可以容纳数量相当可观的协程任务\",{\"1\":{\"95\":1}}],[\"因此假设不成立\",{\"1\":{\"79\":1}}],[\"因此\",{\"1\":{\"39\":1,\"64\":2,\"66\":2,\"67\":1,\"78\":1,\"157\":1,\"218\":1,\"219\":1,\"248\":1,\"249\":3,\"251\":1,\"278\":1,\"280\":1,\"349\":1,\"370\":1,\"380\":1,\"458\":2}}],[\"而忽略了同样重要的代码生成\",{\"1\":{\"501\":1}}],[\"而数字\",{\"1\":{\"485\":1}}],[\"而就像上节中提到的\",{\"1\":{\"483\":1}}],[\"而普通的函数则编译成\",{\"1\":{\"481\":1}}],[\"而剩下的较难较烦的部分是与目标代码的生成有关的\",{\"1\":{\"478\":1}}],[\"而真正的难点是如何在语法分析时收集足够多的信息\",{\"1\":{\"473\":1}}],[\"而它们的逻辑和全局变量的解析几乎一致\",{\"1\":{\"463\":1}}],[\"而②则用于生成汇编代码\",{\"1\":{\"461\":1}}],[\"而②则与上节中提到的\",{\"1\":{\"460\":1}}],[\"而②中的代码是用于将符号表中的信息恢复成全局的信息\",{\"1\":{\"459\":1}}],[\"而注意到上节中\",{\"1\":{\"449\":1}}],[\"而如果\",{\"1\":{\"493\":1}}],[\"而如果是全局变量则用\",{\"1\":{\"481\":1}}],[\"而如果只解析到类型\",{\"1\":{\"448\":1}}],[\"而如果操作同一资源\",{\"1\":{\"94\":1}}],[\"而为了实现自举\",{\"1\":{\"445\":1}}],[\"而左递归的语法是没法直接使用递归下降的方法实现的\",{\"1\":{\"439\":1}}],[\"而没有出现在\",{\"1\":{\"436\":1}}],[\"而我们可以从解析的过程中看出\",{\"1\":{\"437\":1}}],[\"而我们定义的语法不支持\",{\"1\":{\"424\":1}}],[\"而我们还存放了一些只有语法分析器才会得到的信息\",{\"1\":{\"424\":1}}],[\"而我们又不希望扩充现有指令的功能\",{\"1\":{\"407\":1}}],[\"而我们又想在执行过程中保证共享数据的强一致性\",{\"1\":{\"96\":1}}],[\"而之后的语句\",{\"1\":{\"424\":1}}],[\"而只关心这个变量名代表的唯一标识\",{\"1\":{\"424\":1}}],[\"而词法分析器能减小语法分析复杂度的原因\",{\"1\":{\"420\":1}}],[\"而词法分析器则是以源码字符串为输入\",{\"1\":{\"418\":1}}],[\"而标记流对于语法分析器而言就容易处理得多了\",{\"1\":{\"418\":1}}],[\"而地址通常是需要通过计算获得\",{\"1\":{\"403\":1}}],[\"而这就意味着我们需要决定先为哪个运算符生成目标代码\",{\"1\":{\"477\":1}}],[\"而这些可能需要你重新回顾一下\",{\"1\":{\"463\":1}}],[\"而这些寄存器只是用于保存这些状态的\",{\"1\":{\"401\":1}}],[\"而这个标记足够让我们确定用哪个表达式了\",{\"1\":{\"438\":1}}],[\"而这部分能帮助我们了解计算机的工作原理\",{\"1\":{\"395\":1}}],[\"而电脑上的实际内存可能只有\",{\"1\":{\"400\":1}}],[\"而其它方面如词法分析\",{\"1\":{\"395\":1}}],[\"而会不会写编译器则是第二道\",{\"1\":{\"388\":1}}],[\"而将该方法的实现交给了子类\",{\"1\":{\"370\":1}}],[\"而将一些步骤的具体实现延迟到子类中\",{\"1\":{\"365\":1}}],[\"而忘记了在\",{\"1\":{\"350\":1}}],[\"而在我们的虚拟机中\",{\"1\":{\"404\":1}}],[\"而在内存容量多的运行环境中则可以使用\",{\"1\":{\"361\":1}}],[\"而在\",{\"1\":{\"349\":1}}],[\"而在其他情况下\",{\"1\":{\"291\":1}}],[\"而委托模式通过委托对象来执行具体的任务\",{\"1\":{\"324\":1}}],[\"而委托模式则用于将任务分配给其他对象来执行\",{\"1\":{\"324\":1}}],[\"而委托对象应当能够无缝地完成这些任务\",{\"1\":{\"224\":1}}],[\"而不能以值作为参数\",{\"1\":{\"403\":1}}],[\"而不需要修改现有的数据结构\",{\"1\":{\"374\":1}}],[\"而不需要修改现有的代码\",{\"1\":{\"356\":1}}],[\"而不需要关心代理对象的内部实现\",{\"1\":{\"325\":1}}],[\"而不需要客户端了解远程服务器的具体实现\",{\"1\":{\"323\":1}}],[\"而不会影响系统的其他部分\",{\"1\":{\"301\":1}}],[\"而不影响系统的功能\",{\"1\":{\"301\":1}}],[\"而不是\",{\"1\":{\"427\":1,\"438\":1,\"477\":1}}],[\"而不是盲目地套用\",{\"1\":{\"227\":1}}],[\"而不是继承\",{\"1\":{\"129\":1}}],[\"而不是一个通用接口\",{\"1\":{\"129\":1}}],[\"而不是通过继承\",{\"1\":{\"127\":2}}],[\"而不是具体实现\",{\"1\":{\"124\":1}}],[\"而不是面向实现编程\",{\"1\":{\"123\":1}}],[\"而不是重写父类的具体方法\",{\"1\":{\"114\":1}}],[\"而对于一些复杂的应用\",{\"1\":{\"290\":1}}],[\"而窄接口则只提供了有限的操作权限\",{\"1\":{\"289\":1}}],[\"而\",{\"1\":{\"279\":1,\"289\":1,\"292\":1,\"378\":2,\"390\":1,\"403\":1,\"459\":2,\"489\":1}}],[\"而内存是资源中的一种\",{\"1\":{\"251\":1}}],[\"而应理解其背后的核心思想\",{\"1\":{\"227\":1}}],[\"而无需了解其内部实现细节\",{\"1\":{\"268\":1}}],[\"而无需暴露其底层表示\",{\"1\":{\"265\":1,\"266\":1}}],[\"而无需修改现有代码\",{\"1\":{\"259\":1}}],[\"而无需修改原始类的代码\",{\"1\":{\"211\":1}}],[\"而无需明确指定具体类\",{\"1\":{\"133\":1}}],[\"而文件则是叶子节点\",{\"1\":{\"201\":1}}],[\"而具体的表示则可以在运行时灵活选择\",{\"1\":{\"179\":1}}],[\"而有些事情则需要在运行时决定\",{\"1\":{\"179\":1}}],[\"而有没有锁\",{\"1\":{\"94\":1}}],[\"而是如何为运算符生成相应的汇编代码\",{\"1\":{\"501\":1}}],[\"而是单个数字的取正取负操作\",{\"1\":{\"487\":1}}],[\"而是操作\",{\"1\":{\"400\":1}}],[\"而是用状态迁移表来设计程序\",{\"1\":{\"348\":1}}],[\"而是将所有的状态迁移交给扮演\",{\"1\":{\"348\":1}}],[\"而是将它放在\",{\"1\":{\"248\":1}}],[\"而是将其他\",{\"1\":{\"168\":1}}],[\"而是应该用代码将它们表现出来\",{\"1\":{\"230\":1}}],[\"而是为了更好地解决问题和优化代码结构\",{\"1\":{\"227\":1}}],[\"而是相互关联的\",{\"1\":{\"109\":1}}],[\"而且这些功能需求大都是\",{\"1\":{\"380\":1}}],[\"而且我们必须在所有的事件处理方法中都编写这些条件分支语句\",{\"1\":{\"346\":1}}],[\"而且当将子类替换为\",{\"1\":{\"180\":1}}],[\"而且\",{\"1\":{\"167\":1,\"360\":1}}],[\"而子类的任务是实现抽象方法\",{\"1\":{\"156\":1}}],[\"而协程虽然在手动切换过程中也无法保证状态一致\",{\"1\":{\"96\":1}}],[\"而线程是抢占使用权\",{\"1\":{\"95\":1}}],[\"而现在\",{\"1\":{\"94\":1}}],[\"然而如果你能跟我一样\",{\"1\":{\"389\":1}}],[\"然而\",{\"1\":{\"135\":1,\"227\":1,\"250\":1}}],[\"然而我们都忽略了一个客观事实\",{\"1\":{\"96\":1}}],[\"然而人们很快发现\",{\"1\":{\"94\":1}}],[\"然后返回它在\",{\"1\":{\"426\":1}}],[\"然后让数据结构可以接受访问者的访问即可\",{\"1\":{\"373\":1}}],[\"然后让后者去验算前者的计算结果\",{\"1\":{\"361\":1}}],[\"然后实现一些所需的方法就可以了\",{\"1\":{\"350\":1}}],[\"然后进行相应的处理\",{\"1\":{\"346\":1}}],[\"然后下达指示\",{\"1\":{\"274\":1}}],[\"然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理\",{\"1\":{\"183\":1}}],[\"然后再去看看\",{\"1\":{\"180\":1}}],[\"然后编写\",{\"1\":{\"167\":1}}],[\"然后保存在字段中\",{\"1\":{\"159\":1}}],[\"然后子类负责实现这些抽象方法\",{\"1\":{\"156\":1}}],[\"然后\",{\"1\":{\"94\":1}}],[\"然后才能去处理另一件事情\",{\"1\":{\"93\":1}}],[\"然后在程序中以委托的方式来使用算法\",{\"1\":{\"360\":1}}],[\"然后在具体类中实现这些行为\",{\"1\":{\"127\":1}}],[\"然后在\",{\"1\":{\"32\":1}}],[\"然后就能正常访问\",{\"1\":{\"19\":1}}],[\"如变量\",{\"1\":{\"478\":1}}],[\"如在普通的四则运算中\",{\"1\":{\"477\":1}}],[\"如经典的\",{\"1\":{\"438\":1}}],[\"如为什么用\",{\"1\":{\"438\":1}}],[\"如本例需向前查看一个字符\",{\"1\":{\"427\":1}}],[\"如本小节中的注释与除号\",{\"1\":{\"427\":1}}],[\"如标识符是函数\",{\"1\":{\"424\":1}}],[\"如数字\",{\"1\":{\"424\":1}}],[\"如右方括号\",{\"1\":{\"420\":1}}],[\"如只能操作ax寄存器\",{\"1\":{\"407\":1}}],[\"如下\",{\"1\":{\"403\":1,\"407\":1,\"424\":1,\"458\":1}}],[\"如调用帧\",{\"1\":{\"400\":1}}],[\"如int\",{\"1\":{\"400\":1}}],[\"如实现四则运算\",{\"1\":{\"390\":1}}],[\"如有侵权\",{\"1\":{\"387\":1,\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"如正向遍历\",{\"1\":{\"265\":1}}],[\"如\",{\"1\":{\"250\":1,\"389\":1,\"390\":1,\"392\":1,\"396\":1,\"400\":1,\"419\":1,\"420\":2,\"423\":1,\"424\":1,\"426\":2,\"436\":1,\"448\":4,\"458\":2,\"460\":1,\"481\":1,\"488\":1,\"493\":1}}],[\"如果今后你仍然想编写编译器\",{\"1\":{\"502\":1}}],[\"如果条件失败\",{\"1\":{\"468\":1}}],[\"如果是两个指针相减\",{\"1\":{\"493\":1}}],[\"如果是局部变量则采用与\",{\"1\":{\"481\":1}}],[\"如果是指针的指针\",{\"1\":{\"448\":1}}],[\"如果是有\",{\"1\":{\"279\":1}}],[\"如果遇到标识符就用\",{\"1\":{\"481\":1}}],[\"如果遇到\",{\"1\":{\"448\":1}}],[\"如果分析到字符串\",{\"1\":{\"426\":1}}],[\"如果标识符已经存在\",{\"1\":{\"424\":1}}],[\"如果子函数有返回结果\",{\"1\":{\"407\":1}}],[\"如果你按这个系列自己编写代码\",{\"1\":{\"504\":1}}],[\"如果你理解了上一章中的内容\",{\"1\":{\"452\":1}}],[\"如果你尝试阅读\",{\"1\":{\"389\":1}}],[\"如果你急切地想进入正篇\",{\"1\":{\"387\":1}}],[\"如果你的\",{\"1\":{\"101\":1}}],[\"如果公开了不应当被公开的信息\",{\"1\":{\"383\":1}}],[\"如果无法获取到这些信息\",{\"1\":{\"383\":1}}],[\"如果要我说计算机专业最重要的三门课\",{\"1\":{\"388\":1}}],[\"如果要修改已经编写和测试完成的类\",{\"1\":{\"380\":1}}],[\"如果要改变被共享的对象\",{\"1\":{\"248\":1}}],[\"如果在每次扩展类时都需要修改现有的类就太麻烦了\",{\"1\":{\"380\":1}}],[\"如果在逻辑执行过程中我们需要判断变量状态\",{\"1\":{\"97\":1}}],[\"如果将处理逻辑的方法定义在\",{\"1\":{\"379\":1}}],[\"如果将这些逻辑分散到各个用户类中\",{\"1\":{\"278\":1}}],[\"如果想比较原来的算法与改进后的算法的处理速度有多大区别\",{\"1\":{\"360\":1}}],[\"如果使用\",{\"1\":{\"361\":1}}],[\"如果使用了\",{\"1\":{\"360\":1}}],[\"如果使用继承\",{\"1\":{\"126\":1}}],[\"如果以后发生需求变更\",{\"1\":{\"348\":1}}],[\"如果大家在读完这两点之后会点头表示赞同\",{\"1\":{\"347\":1}}],[\"如果还是不能解决这些小问题\",{\"1\":{\"346\":1}}],[\"如果多个线程同时访问\",{\"1\":{\"337\":1}}],[\"如果\",{\"1\":{\"318\":1,\"493\":1}}],[\"如果实例很少就不需要\",{\"1\":{\"279\":1}}],[\"如果存在很多这样的互相通信的实例\",{\"1\":{\"279\":1}}],[\"如果存在多个改变它的理由\",{\"1\":{\"119\":1}}],[\"如果有兴趣\",{\"1\":{\"503\":1}}],[\"如果有\",{\"1\":{\"279\":1}}],[\"如果这局猜拳获胜\",{\"1\":{\"357\":1}}],[\"如果这段逻辑分散在\",{\"1\":{\"278\":1}}],[\"如果这些集合中的对象没有被其他任何地方引用\",{\"1\":{\"250\":1}}],[\"如果发生需求变更\",{\"1\":{\"278\":1}}],[\"如果不是预期的标记则报错并退出\",{\"1\":{\"450\":1}}],[\"如果不想看可以跳过\",{\"1\":{\"445\":1}}],[\"如果不能比较容易地扩展类\",{\"1\":{\"380\":1}}],[\"如果不能做就将\",{\"1\":{\"183\":1}}],[\"如果不使用\",{\"1\":{\"349\":1,\"350\":2}}],[\"如果不共享实例\",{\"1\":{\"251\":1}}],[\"如果冰激凌店要为顾客准备所有的冰激凌成品那真是太麻烦了\",{\"1\":{\"219\":1}}],[\"如果再用\",{\"1\":{\"217\":1}}],[\"如果也不能自己处理\",{\"1\":{\"183\":1}}],[\"如果他可以做就自己做\",{\"1\":{\"183\":1}}],[\"如果修改\",{\"1\":{\"180\":1}}],[\"如果没有理解各个类的角色就动手增加和修改代码\",{\"1\":{\"180\":1}}],[\"如果我们的编译器要达到自举\",{\"1\":{\"413\":1}}],[\"如果我们不把颜色信息放在\",{\"1\":{\"248\":1}}],[\"如果我们不传递\",{\"1\":{\"168\":1}}],[\"如果我们不关注执行过程中的状态\",{\"1\":{\"97\":1}}],[\"如果我们将某个程序中依赖于操作系统的部分划分为\",{\"1\":{\"167\":1}}],[\"如果只是将应当分散的处理分散在各个类中\",{\"1\":{\"278\":1}}],[\"如果只是简单地将它们分开\",{\"1\":{\"157\":1}}],[\"如果只是为了编写包含\",{\"1\":{\"135\":1}}],[\"如果一个类需要改变\",{\"1\":{\"119\":1}}],[\"如果协程在操作共享变量的过程中\",{\"1\":{\"97\":1}}],[\"如果每个线程按顺序执行\",{\"1\":{\"94\":1}}],[\"如此往复\",{\"1\":{\"96\":1}}],[\"如图所示\",{\"1\":{\"95\":1}}],[\"如何为每个运算符生成对应的汇编代码\",{\"1\":{\"497\":1}}],[\"如何通过递归调用\",{\"1\":{\"497\":1}}],[\"如何确定具体选择哪一个\",{\"1\":{\"438\":1}}],[\"如何处理错误\",{\"1\":{\"421\":1}}],[\"如何表示语法\",{\"1\":{\"389\":1}}],[\"如何实现风格统一\",{\"1\":{\"48\":1}}],[\"如何给python\",{\"1\":{\"26\":1}}],[\"最好的方式恐怕还是要自己实现它\",{\"1\":{\"504\":1}}],[\"最近知道了一个叫\",{\"1\":{\"503\":1}}],[\"最为重要的是能\",{\"1\":{\"501\":1}}],[\"最终都根据它们的类型用\",{\"1\":{\"481\":1}}],[\"最终把源代码转换成目标代码\",{\"1\":{\"473\":1}}],[\"最终构建起我们的编译器\",{\"1\":{\"397\":1}}],[\"最重要的是理解我们会为函数生成怎样的汇编代码\",{\"1\":{\"463\":1}}],[\"最大的区别就是保存的信息不同\",{\"1\":{\"463\":1}}],[\"最简单的方法是直接调用观察者的更新方法\",{\"1\":{\"304\":1}}],[\"最后要注意的一点是\",{\"1\":{\"496\":1}}],[\"最后要注意的是还有一些字符\",{\"1\":{\"420\":1}}],[\"最后注意的是优先通常只与多元运算符相关\",{\"1\":{\"477\":1}}],[\"最后是main函数\",{\"1\":{\"440\":1}}],[\"最后再加上一个错误判断\",{\"1\":{\"413\":1}}],[\"最后祝你学得愉快\",{\"1\":{\"392\":1}}],[\"最后想介绍几个资料\",{\"1\":{\"392\":1}}],[\"最后\",{\"1\":{\"274\":1,\"497\":1}}],[\"最后的值不是0\",{\"1\":{\"94\":1}}],[\"最少知道原则\",{\"1\":{\"108\":1}}],[\"最新推荐文章于\",{\"1\":{\"30\":2}}],[\"大量重复的代码特别让人崩溃\",{\"1\":{\"504\":1}}],[\"大量的函数调用将会耗费不少的时间\",{\"1\":{\"40\":1}}],[\"大部分的代码依旧是用于解析变量\",{\"1\":{\"463\":1}}],[\"大致500+行\",{\"1\":{\"390\":1}}],[\"大家应该都会点头表示赞同吧\",{\"1\":{\"380\":1}}],[\"大家已经学习了多种设计模式\",{\"1\":{\"380\":1}}],[\"大家只要再回顾一下\",{\"1\":{\"351\":1}}],[\"大家又发明了同步锁\",{\"1\":{\"94\":1}}],[\"于是\",{\"1\":{\"94\":1,\"96\":1}}],[\"它涉及到了\",{\"1\":{\"502\":1}}],[\"它相当于一个小型的\",{\"1\":{\"491\":1}}],[\"它相当于\",{\"1\":{\"479\":1}}],[\"它比较特殊的一点是\",{\"1\":{\"479\":1}}],[\"它本身不难\",{\"1\":{\"473\":1}}],[\"它对应的汇编代码如下\",{\"1\":{\"469\":1}}],[\"它用于将数据放进寄存器或内存地址\",{\"1\":{\"403\":1}}],[\"它用于存放一条指令执行后的结果\",{\"1\":{\"401\":1}}],[\"它存放的是一个内存地址\",{\"1\":{\"401\":1}}],[\"它的类型保存在变量\",{\"1\":{\"483\":1}}],[\"它的优先级和\",{\"1\":{\"477\":1}}],[\"它的运算顺序是这样的\",{\"1\":{\"477\":1}}],[\"它的\",{\"1\":{\"469\":1}}],[\"它的语法更容易理解\",{\"1\":{\"445\":1}}],[\"它的本质上也是编译器\",{\"1\":{\"418\":1}}],[\"它的作用是将\",{\"1\":{\"404\":1}}],[\"它的作用是屏蔽了物理的细节\",{\"1\":{\"400\":1}}],[\"它的流程为\",{\"1\":{\"397\":1}}],[\"它的真正作用是帮助我们实现任务分担\",{\"1\":{\"156\":1}}],[\"它将\",{\"1\":{\"450\":1}}],[\"它将自动忽略空白字符\",{\"1\":{\"397\":1}}],[\"它将与状态相关的行为封装在独立的类中\",{\"1\":{\"342\":1}}],[\"它最让我震惊的是能够自举\",{\"1\":{\"390\":1}}],[\"它就无法工作\",{\"1\":{\"383\":1}}],[\"它是\",{\"1\":{\"382\":1}}],[\"它是当实例的位置\",{\"1\":{\"249\":1}}],[\"它能够将元素集合及其关联关系组织在一起\",{\"1\":{\"379\":1}}],[\"它能做什么\",{\"1\":{\"96\":1}}],[\"它决定了系统的状态\",{\"1\":{\"349\":1}}],[\"它非常适用于大规模的复杂处理\",{\"1\":{\"346\":1}}],[\"它常用于需要控制资源访问的场景\",{\"1\":{\"332\":1}}],[\"它在客户端和远程服务器之间进行通信\",{\"1\":{\"327\":1}}],[\"它在实际对象创建之前进行一些轻量级的操作\",{\"1\":{\"327\":1}}],[\"它在以下情况下特别有用\",{\"1\":{\"285\":1}}],[\"它实现了\",{\"1\":{\"268\":1}}],[\"它允许你复制现有对象而无需使代码依赖它们所属的类\",{\"1\":{\"311\":1}}],[\"它允许顺序访问集合中的元素\",{\"1\":{\"266\":1}}],[\"它允许将一个类的接口转换成客户希望的另一个接口\",{\"1\":{\"143\":1}}],[\"它定义了一种语言的文法表示\",{\"1\":{\"259\":1}}],[\"它属于\",{\"1\":{\"249\":1}}],[\"它指的是不论实例在哪里\",{\"1\":{\"249\":1}}],[\"它通过定义自己的指令集并支持该指令集的虚拟机来模拟编译的部分过程\",{\"1\":{\"392\":1}}],[\"它通过定义一个创建对象的接口来实现\",{\"1\":{\"133\":1}}],[\"它通过共享尽可能多的相同对象来减少内存使用\",{\"1\":{\"244\":1}}],[\"它使类之间形成了弱关联关系\",{\"1\":{\"218\":1}}],[\"它主要用于以下情况\",{\"1\":{\"173\":1}}],[\"它们包括\",{\"1\":{\"493\":1}}],[\"它们对应的汇编代码如下\",{\"1\":{\"492\":1}}],[\"它们是以优先级从低到高排列的\",{\"1\":{\"489\":1}}],[\"它们是单字符的\",{\"1\":{\"420\":1}}],[\"它们的实现都很类似\",{\"1\":{\"493\":1}}],[\"它们的语法分析都相对容易\",{\"1\":{\"467\":1}}],[\"它们的内容比较多\",{\"1\":{\"466\":1}}],[\"它们的具体使用在后面的语法分析中会提到\",{\"1\":{\"420\":1}}],[\"它们不能被作为普通的标识符\",{\"1\":{\"429\":1}}],[\"它们不涉及优先级关系\",{\"1\":{\"420\":1}}],[\"它们自己就构成了标记\",{\"1\":{\"420\":1}}],[\"它们可以是一个数\",{\"1\":{\"403\":1}}],[\"它们基于\",{\"1\":{\"402\":1}}],[\"它们就是无符号的\",{\"1\":{\"400\":1}}],[\"它们在内存中的位置类似于下图\",{\"1\":{\"400\":1}}],[\"它们将作为我们的编译器最终输出的目标代码\",{\"1\":{\"398\":1}}],[\"它们过于强大\",{\"1\":{\"389\":1}}],[\"它们有很强的实际意义\",{\"1\":{\"389\":1}}],[\"它们呈现出一种相反的关系\",{\"1\":{\"378\":1}}],[\"它们都有对应的标记\",{\"1\":{\"424\":1}}],[\"它们都是\",{\"1\":{\"351\":1}}],[\"它们都可以工作于这\",{\"1\":{\"167\":1}}],[\"它们会被解析成标识符\",{\"1\":{\"429\":1}}],[\"它们会自动收到通知并更新显示\",{\"1\":{\"297\":1}}],[\"它们会操作同一个资源\",{\"1\":{\"94\":1}}],[\"它们之间互相通信\",{\"1\":{\"279\":1}}],[\"它们之间就构成了一个小小的层次结构\",{\"1\":{\"156\":1}}],[\"它们也有其局限性和适用范围\",{\"1\":{\"227\":1}}],[\"它可以是一个值\",{\"1\":{\"407\":1}}],[\"它可以在访问实际对象之前进行权限检查\",{\"1\":{\"327\":1}}],[\"它可以在协程内部用await调用另一个协程实现异步操作\",{\"1\":{\"96\":1}}],[\"它可以挂起当前协程任务\",{\"1\":{\"96\":1}}],[\"它和线程的最主要差别就是\",{\"1\":{\"95\":1}}],[\"它让调用者自己来决定什么时候让出\",{\"1\":{\"95\":1}}],[\"它应该具有反对称性\",{\"1\":{\"61\":1}}],[\"多个迭代器\",{\"0\":{\"269\":1}}],[\"多个线程同时改同一个变量\",{\"1\":{\"94\":1}}],[\"多个线程之前也并不是完全独立的\",{\"1\":{\"94\":1}}],[\"多态\",{\"1\":{\"255\":1}}],[\"多线程下\",{\"0\":{\"337\":1}}],[\"多线程在未加锁的情况下\",{\"1\":{\"96\":1}}],[\"多线程在python中只能交替执行\",{\"1\":{\"94\":1}}],[\"多线程逻辑执行结果\",{\"1\":{\"96\":1}}],[\"多了把锁\",{\"1\":{\"94\":1}}],[\"就如前文的\",{\"1\":{\"489\":1}}],[\"就返回它的唯一标识\",{\"1\":{\"424\":1}}],[\"就势必要实现\",{\"1\":{\"413\":1}}],[\"就实现了数据结构与处理的分离\",{\"1\":{\"383\":1}}],[\"就程序而言\",{\"1\":{\"370\":1}}],[\"就不得不去修改这些类\",{\"1\":{\"379\":1}}],[\"就不必修改\",{\"1\":{\"360\":1}}],[\"就不会发生上面这种类的依赖关系混乱的问题\",{\"1\":{\"302\":1}}],[\"就必须用条件分支语句判断状态\",{\"1\":{\"350\":1}}],[\"就必须要相应地修改\",{\"1\":{\"348\":1}}],[\"就将其交给\",{\"1\":{\"318\":1}}],[\"就会发现太可怕了\",{\"1\":{\"389\":1}}],[\"就会对多个地方产生影响\",{\"1\":{\"248\":1}}],[\"就会很容易出错\",{\"1\":{\"180\":1}}],[\"就意味着我们需要引人facade了\",{\"1\":{\"230\":1}}],[\"就可以应付大多数的语法分析器编写\",{\"1\":{\"441\":1}}],[\"就可以提高程序运行速度\",{\"1\":{\"251\":1}}],[\"就可以生成一个与其他对象具有不同关系的新对象\",{\"1\":{\"218\":1}}],[\"就可以在字符串的左右两侧加上装饰字符\",{\"1\":{\"217\":1}}],[\"就可以明白调用\",{\"1\":{\"180\":1}}],[\"就像委托者自己完成一样\",{\"1\":{\"224\":1}}],[\"就像是剥洋葱时以为洋葱心要出来了\",{\"1\":{\"216\":1}}],[\"就像以前的公共电话亭\",{\"1\":{\"94\":1}}],[\"就再转给另外一个人\",{\"1\":{\"183\":1}}],[\"就自己做\",{\"1\":{\"183\":1}}],[\"就能很容易地改变实现\",{\"1\":{\"168\":1}}],[\"就需要获取并恢复这个信息\",{\"1\":{\"407\":1}}],[\"就需要存放到数据段中\",{\"1\":{\"400\":1}}],[\"就需要推卸责任\",{\"1\":{\"183\":1}}],[\"就需要先确认自己的意图\",{\"1\":{\"157\":1}}],[\"就需要重新设计该类\",{\"1\":{\"119\":1}}],[\"就算只能用单核处理任务\",{\"1\":{\"94\":1}}],[\"就是指针的加减\",{\"1\":{\"493\":1}}],[\"就是前文提到的\",{\"1\":{\"460\":1}}],[\"就是上述的消除左递归后的文法直接转换而来的\",{\"1\":{\"440\":1}}],[\"就是上例中\",{\"1\":{\"438\":1}}],[\"就是一种用来描述语法的语言\",{\"1\":{\"436\":1}}],[\"就是一种远程代理的实现\",{\"1\":{\"327\":1}}],[\"就是需要向前看的标记的个数了\",{\"1\":{\"427\":1}}],[\"就是这个标识符的哈希值\",{\"1\":{\"424\":1}}],[\"就是对应字符型和整型的存取操作\",{\"1\":{\"403\":1}}],[\"就是\",{\"1\":{\"55\":1,\"71\":1,\"217\":1}}],[\"每写一篇都特别心烦\",{\"1\":{\"504\":1}}],[\"每当一个引用被释放时\",{\"1\":{\"250\":1}}],[\"每当一个对象被引用时\",{\"1\":{\"250\":1}}],[\"每次遇到换行符\",{\"1\":{\"422\":1}}],[\"每次调用该函数则返回下一个标记\",{\"1\":{\"419\":1}}],[\"每次撤销操作时从栈中弹出一个\",{\"1\":{\"292\":1}}],[\"每次撤销操作时\",{\"1\":{\"196\":1}}],[\"每次执行命令时\",{\"1\":{\"196\":1}}],[\"每次执行更新你的\",{\"1\":{\"90\":1}}],[\"每个id占用数组中的9个空间\",{\"1\":{\"424\":1}}],[\"每个标记通常包括\",{\"1\":{\"417\":1}}],[\"每个运算符都是二元的\",{\"1\":{\"412\":1}}],[\"每个\",{\"1\":{\"348\":2}}],[\"每个请求都会沿着职责链传递\",{\"1\":{\"185\":1}}],[\"每个类只负责一个职责\",{\"1\":{\"120\":1}}],[\"每个协程的体积比线程要小得多\",{\"1\":{\"95\":1}}],[\"每执行100条字节码\",{\"1\":{\"94\":1}}],[\"雨露均沾\",{\"1\":{\"94\":1}}],[\"刘悦的技术博客\",{\"1\":{\"93\":1,\"97\":1}}],[\"主要涉及如何将语句和表达式编译成汇编代码\",{\"1\":{\"466\":1}}],[\"主要的逻辑用于解析用逗号\",{\"1\":{\"449\":1}}],[\"主要原因是我们的语言不支持跨函数递归\",{\"1\":{\"445\":1}}],[\"主要有以下几个优点\",{\"1\":{\"318\":1}}],[\"主程序\",{\"0\":{\"206\":1},\"1\":{\"159\":1}}],[\"主动释放使用权\",{\"1\":{\"96\":1}}],[\"主动\",{\"1\":{\"96\":1}}],[\"主动让出使用权\",{\"1\":{\"96\":1}}],[\"主动让出时间片的协程模式比线程抢占式分配的效率要好\",{\"1\":{\"95\":1}}],[\"主动切换了使用权\",{\"1\":{\"96\":1}}],[\"主动切换\",{\"0\":{\"93\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"挂起\",{\"0\":{\"93\":1},\"1\":{\"96\":1}}],[\"线程是系统态\",{\"1\":{\"95\":1}}],[\"线程操作共享资源需要加锁\",{\"1\":{\"94\":1}}],[\"线程并不安全\",{\"1\":{\"94\":1}}],[\"线程共享数据危险在于\",{\"1\":{\"94\":1}}],[\"线程安全\",{\"0\":{\"94\":1}}],[\"线程更被我们所熟知\",{\"1\":{\"93\":1}}],[\"线程\",{\"0\":{\"93\":1}}],[\"协程也不是虚空的\",{\"1\":{\"97\":1}}],[\"协程加锁执行后结果\",{\"1\":{\"96\":1}}],[\"协程在工作状态中\",{\"1\":{\"96\":1}}],[\"协程运行过程中\",{\"1\":{\"96\":1}}],[\"协程又可以切回来\",{\"1\":{\"96\":1}}],[\"协程操作共享变量不需要加锁的结论开始在坊间流传\",{\"1\":{\"96\":1}}],[\"协程本身就是单线程的\",{\"1\":{\"95\":1}}],[\"协程本身可以做成用户态\",{\"1\":{\"95\":1}}],[\"协程是否需要加锁\",{\"0\":{\"97\":1}}],[\"协程是用户态\",{\"1\":{\"95\":1}}],[\"协程是主动让出使用权\",{\"1\":{\"95\":1}}],[\"协程保证了编写过程中的思维连贯性\",{\"1\":{\"95\":1}}],[\"协程与线程向来焦孟不离\",{\"1\":{\"93\":1}}],[\"协程安全\",{\"0\":{\"93\":1,\"96\":1}}],[\"协程\",{\"0\":{\"93\":1,\"95\":1,\"98\":1}}],[\"插件\",{\"1\":{\"90\":1}}],[\"命令队列\",{\"1\":{\"196\":1}}],[\"命令栈\",{\"1\":{\"196\":1}}],[\"命令模式的一个重要应用是保存历史记录\",{\"1\":{\"196\":1}}],[\"命令执行前后的状态信息\",{\"1\":{\"195\":1}}],[\"命令对象可以保存执行前的状态\",{\"1\":{\"195\":1}}],[\"命令对象可以包含执行操作所需的所有参数\",{\"1\":{\"195\":1}}],[\"命令对象将动作封装为一个方法调用\",{\"1\":{\"195\":1}}],[\"命令对象通常包含以下信息\",{\"1\":{\"195\":1}}],[\"命令中应该包含哪些信息\",{\"0\":{\"195\":1}}],[\"命令\",{\"1\":{\"90\":1}}],[\"命里无时莫强求\",{\"1\":{\"3\":1}}],[\"命里有时终须有\",{\"0\":{\"3\":1},\"1\":{\"3\":1}}],[\"后缀形式\",{\"1\":{\"494\":1}}],[\"后面我们会看到\",{\"1\":{\"481\":1}}],[\"后面的文章中\",{\"1\":{\"397\":1}}],[\"后来集成的\",{\"1\":{\"101\":1}}],[\"后者为了能恢复现场会在切换线程时保存相当多的状态\",{\"1\":{\"95\":1}}],[\"后\",{\"1\":{\"90\":1,\"217\":1}}],[\"你也可以学习看看\",{\"1\":{\"503\":1}}],[\"你可能有疑问\",{\"1\":{\"481\":1}}],[\"你可能会觉得将一个指令变成了许多指令\",{\"1\":{\"403\":1}}],[\"你就会发现\",{\"1\":{\"418\":1}}],[\"你就能写出更加高效的代码\",{\"1\":{\"388\":1}}],[\"你能对计算机程序的原理有一定的了解\",{\"1\":{\"415\":1}}],[\"你好\",{\"1\":{\"319\":1,\"320\":1,\"367\":1}}],[\"你将看到闭包是如何捕获变量并提供类似类的功能的\",{\"1\":{\"102\":1}}],[\"你是否曾经想过\",{\"1\":{\"102\":1}}],[\"你需要将这些更改复制到你的原生项目中\",{\"1\":{\"90\":1}}],[\"你的用\",{\"1\":{\"32\":1}}],[\"默认是\",{\"1\":{\"414\":1}}],[\"默认为\",{\"1\":{\"106\":1}}],[\"默认不支持http\",{\"1\":{\"90\":1}}],[\"默认\",{\"1\":{\"90\":1}}],[\"到底是什么呢\",{\"1\":{\"351\":1}}],[\"到底需不需要加锁\",{\"0\":{\"93\":1}}],[\"到底在哪里\",{\"0\":{\"33\":1}}],[\"到任意点的路径\",{\"1\":{\"80\":1}}],[\"点\",{\"1\":{\"80\":1}}],[\"所谓状态迁移表是可以根据\",{\"1\":{\"348\":1}}],[\"所谓主动让出使用权\",{\"1\":{\"96\":1}}],[\"所对应的字体数据\",{\"1\":{\"248\":1}}],[\"所有的变量定义必须放在语句之前\",{\"1\":{\"496\":1}}],[\"所有的\",{\"1\":{\"348\":1}}],[\"所有的实现\",{\"1\":{\"167\":1}}],[\"所有依赖于它的对象都会得到通知并自动更新\",{\"1\":{\"298\":1}}],[\"所有显示该数据的视图都需要自动更新\",{\"1\":{\"297\":1}}],[\"所有点的出度为\",{\"1\":{\"80\":1}}],[\"所以你可以执行\",{\"1\":{\"496\":1}}],[\"所以源码如下\",{\"1\":{\"492\":1}}],[\"所以生成的代码也类似于\",{\"1\":{\"491\":1}}],[\"所以直接修改栈指针的大小即可\",{\"1\":{\"481\":1}}],[\"所以直接跳过它们\",{\"1\":{\"423\":1}}],[\"所以解析的时候要注意这一点\",{\"1\":{\"479\":1}}],[\"所以先将它入栈\",{\"1\":{\"477\":1}}],[\"所以建议如果没有学过汇编\",{\"1\":{\"473\":1}}],[\"所以不多做说明\",{\"1\":{\"471\":1}}],[\"所以不需要考虑多线程问题\",{\"1\":{\"245\":1}}],[\"所以需要生成汇编代码\",{\"1\":{\"470\":1}}],[\"所以需要无条件跳转\",{\"1\":{\"468\":1}}],[\"所以如果执行了\",{\"1\":{\"468\":1}}],[\"所以一个类型首先有基本类型\",{\"1\":{\"448\":1}}],[\"所以还需要继续查看后续的标记\",{\"1\":{\"448\":1}}],[\"所以实际上它们间的对应关系并不是特别明显\",{\"1\":{\"445\":1}}],[\"所以实际的处理方法是提供一个函数\",{\"1\":{\"419\":1}}],[\"所以只能再向前查看字符\",{\"1\":{\"427\":1}}],[\"所以代码中并没有支持除\",{\"1\":{\"426\":1}}],[\"所以这里我们会有这样的印象\",{\"1\":{\"420\":1}}],[\"所以人们已经开发出了许多工具来生成词法分析器\",{\"1\":{\"419\":1}}],[\"所以为了获取第一个参数\",{\"1\":{\"411\":1}}],[\"所以用一个指令代替\",{\"1\":{\"410\":1}}],[\"所以用上面提到的指令\",{\"1\":{\"407\":1}}],[\"所以合在一起说\",{\"1\":{\"407\":1}}],[\"所以此时它存放的是\",{\"1\":{\"405\":1}}],[\"所以执行\",{\"1\":{\"403\":1}}],[\"所以大大简化了实现的难度\",{\"1\":{\"403\":1}}],[\"所以入栈时\",{\"1\":{\"401\":1}}],[\"所以是\",{\"1\":{\"400\":1}}],[\"所以单独存放可以节省空间\",{\"1\":{\"400\":1}}],[\"所以我希望你有足够的耐心和时间来学习\",{\"1\":{\"391\":1}}],[\"所以我们首先执行类似前缀自增自减的操作\",{\"1\":{\"494\":1}}],[\"所以我们需要给予代码生成高度的重视\",{\"1\":{\"501\":1}}],[\"所以我们需要先\",{\"1\":{\"488\":1}}],[\"所以我们需要在不修改现有类的前提下能够扩展类\",{\"1\":{\"380\":1}}],[\"所以我们用异或来实现\",{\"1\":{\"486\":1}}],[\"所以我们将结束符的解析放在了外层的\",{\"1\":{\"459\":1}}],[\"所以我们将它拆分成\",{\"1\":{\"444\":1,\"455\":1}}],[\"所以我们将它单独作为一个模块\",{\"1\":{\"397\":1}}],[\"所以我们先编写一个较为简单的编译器\",{\"1\":{\"418\":1}}],[\"所以我们提供了一个新的指令\",{\"1\":{\"411\":1}}],[\"所以我们不再需要\",{\"1\":{\"410\":1}}],[\"所以我们会依照以下步骤来构建我们的编译器\",{\"1\":{\"396\":1}}],[\"所以我们要完全手写这些功能\",{\"1\":{\"396\":1}}],[\"所以我们还需要在它们之间搭建一座桥梁\",{\"1\":{\"157\":1}}],[\"所以本项目的主要目的\",{\"1\":{\"390\":1}}],[\"所以写得很乱\",{\"1\":{\"390\":1}}],[\"所以写操作不会被争抢覆盖\",{\"1\":{\"96\":1}}],[\"所以当学校开\",{\"1\":{\"389\":1}}],[\"所以优先使用组合的方式代替继承的方式\",{\"1\":{\"126\":1}}],[\"所以说\",{\"1\":{\"97\":1}}],[\"所以肯定可以保证最终一致性\",{\"1\":{\"96\":1}}],[\"所以它对应的代码为\",{\"1\":{\"493\":1}}],[\"所以它的性能要比多线程好\",{\"1\":{\"95\":1}}],[\"所以它平均地分配时间片让处理器一视同仁\",{\"1\":{\"94\":1}}],[\"所以同一时间点还是只能有一个协程任务运行\",{\"1\":{\"95\":1}}],[\"所以加锁是为了同时只有一个线程再修改\",{\"1\":{\"94\":1}}],[\"所以\",{\"1\":{\"66\":1,\"94\":2,\"489\":2}}],[\"同样\",{\"1\":{\"487\":1}}],[\"同样我们没有相应的指令\",{\"1\":{\"486\":1}}],[\"同样在第三章\",{\"1\":{\"481\":1}}],[\"同样不能确定是否能立即计算\",{\"1\":{\"477\":1}}],[\"同理\",{\"1\":{\"97\":1,\"448\":1}}],[\"同时其它语言也有许多类似的支持\",{\"1\":{\"503\":1}}],[\"同时我们也看到\",{\"1\":{\"501\":1}}],[\"同时我们也用实例看到了理论\",{\"1\":{\"441\":1}}],[\"同时将运算符\",{\"1\":{\"477\":1}}],[\"同时值得一提的是\",{\"1\":{\"473\":1}}],[\"同时记录它们的位置与类型\",{\"1\":{\"460\":1}}],[\"同时能对汇编语言有一定的概念\",{\"1\":{\"415\":1}}],[\"同时在栈上保留一定的空间\",{\"1\":{\"408\":1}}],[\"同时开启四个协程任务\",{\"1\":{\"96\":1}}],[\"同时也不需要系统的线程调度器参与抢占式的调度\",{\"1\":{\"95\":1}}],[\"同时\",{\"1\":{\"95\":1,\"227\":1,\"387\":1,\"502\":1}}],[\"同时修改变量\",{\"1\":{\"94\":1}}],[\"同时为了解决多个模数的问题\",{\"1\":{\"41\":1}}],[\"同构\",{\"1\":{\"80\":1}}],[\"用来求值\",{\"1\":{\"476\":1}}],[\"用尖括号\",{\"1\":{\"436\":1}}],[\"用作保存全局标识符的信息\",{\"1\":{\"424\":1}}],[\"用更多的指令来完成更多的功能\",{\"1\":{\"415\":1}}],[\"用以存放局部变量\",{\"1\":{\"408\":1}}],[\"用什么有穷自动机和无穷自动机\",{\"1\":{\"389\":1}}],[\"用类来表示状态\",{\"1\":{\"348\":1}}],[\"用类实现\",{\"2\":{\"199\":1,\"263\":1}}],[\"用于标识符的快速比较\",{\"1\":{\"424\":1}}],[\"用于实现\",{\"1\":{\"408\":1,\"409\":1}}],[\"用于为程序动态分配内存\",{\"1\":{\"400\":1}}],[\"用于处理函数调用相关的数据\",{\"1\":{\"400\":1}}],[\"用于存放未初始化的数据\",{\"1\":{\"400\":1}}],[\"用于存放初始化了的数据\",{\"1\":{\"400\":1}}],[\"用于存放代码\",{\"1\":{\"400\":1}}],[\"用于解析该参数的类型\",{\"1\":{\"460\":1}}],[\"用于解析枚举类型的定义\",{\"1\":{\"449\":1}}],[\"用于解析一个表达式\",{\"1\":{\"397\":1}}],[\"用于解释目标代码\",{\"1\":{\"397\":1}}],[\"用于语法分析\",{\"1\":{\"396\":1}}],[\"用于词法分析\",{\"1\":{\"396\":1,\"397\":1}}],[\"用于将字符串转化成内部的表示结构\",{\"1\":{\"396\":1}}],[\"用于遍历\",{\"1\":{\"268\":1}}],[\"用于创建相关或依赖对象的家族\",{\"1\":{\"133\":1}}],[\"用\",{\"1\":{\"217\":1,\"479\":1,\"487\":1}}],[\"用户可以统一地对待单个对象和组合对象\",{\"1\":{\"201\":1}}],[\"用字符串显示\",{\"1\":{\"159\":1}}],[\"用android\",{\"1\":{\"91\":1}}],[\"用acme\",{\"1\":{\"26\":1}}],[\"用图论阐述\",{\"0\":{\"80\":1}}],[\"研究\",{\"1\":{\"77\":1}}],[\"少了任何一条都不足以构建出上述的自然数系统\",{\"1\":{\"77\":1}}],[\"从上小节对四则运算的递归下降解析可以看出\",{\"1\":{\"438\":1}}],[\"从上述步骤中我们看出\",{\"1\":{\"77\":1}}],[\"从虚拟机的角度予以支持\",{\"1\":{\"413\":1}}],[\"从中一条条地加载指令执行\",{\"1\":{\"399\":1}}],[\"从观察变为通知\",{\"0\":{\"305\":1}}],[\"从栈中弹出命令对象并执行撤销操作\",{\"1\":{\"196\":1}}],[\"从早上到下午\",{\"1\":{\"174\":1}}],[\"从而简化具体的实现\",{\"1\":{\"415\":1}}],[\"从而确保只有授权的客户端才能访问实际对象\",{\"1\":{\"327\":1}}],[\"从而延迟实际对象的创建\",{\"1\":{\"327\":1}}],[\"从而减少系统的开销\",{\"1\":{\"322\":1}}],[\"从而引发无限循环\",{\"1\":{\"303\":1}}],[\"从而引发程序错误\",{\"1\":{\"250\":1}}],[\"从而保持封装性\",{\"1\":{\"289\":1}}],[\"从而避免内存泄漏\",{\"1\":{\"250\":1}}],[\"从而将其回收掉\",{\"1\":{\"250\":1}}],[\"从而提高网络通信的效率和安全性\",{\"1\":{\"326\":1}}],[\"从而提高了系统的可维护性和可扩展性\",{\"1\":{\"306\":1}}],[\"从而提高系统的性能和可扩展性\",{\"1\":{\"305\":1}}],[\"从而提高系统的可维护性和可扩展性\",{\"1\":{\"292\":1}}],[\"从而提高系统的灵活性和可维护性\",{\"1\":{\"195\":1,\"304\":1}}],[\"从而提高性能\",{\"1\":{\"244\":1}}],[\"从而遵循开闭原则\",{\"1\":{\"212\":1}}],[\"从而使得现有类可以在新的环境中使用\",{\"1\":{\"144\":1}}],[\"从而导致执行过程中变量状态的\",{\"1\":{\"96\":1}}],[\"从而启动失败\",{\"1\":{\"49\":1}}],[\"从代码结构上看\",{\"1\":{\"95\":1}}],[\"从实际开发角度看\",{\"1\":{\"95\":1}}],[\"但也只有真正静下心来去克服它\",{\"1\":{\"504\":1}}],[\"但你依旧可以学习相关的知识\",{\"1\":{\"502\":1}}],[\"但这当中还有一个问题\",{\"1\":{\"493\":1}}],[\"但对理解计算机的原理有很大帮助\",{\"1\":{\"473\":1}}],[\"但没有关系\",{\"1\":{\"447\":1}}],[\"但真正看起来还是很烦\",{\"1\":{\"445\":1}}],[\"但其中用到的原理还是需要仔细推敲的\",{\"1\":{\"497\":1}}],[\"但其中并没有任何汇编代码\",{\"1\":{\"430\":1}}],[\"但其实内容不多\",{\"1\":{\"397\":1}}],[\"但其实\",{\"1\":{\"94\":1}}],[\"但由于符号表中已经有了相关的信息\",{\"1\":{\"429\":1}}],[\"但由子类决定要实例化的类是哪一个\",{\"1\":{\"237\":1}}],[\"但还有一个问题需要考虑\",{\"1\":{\"429\":1}}],[\"但还有一个问题是如何在子函数中获得传入的参数\",{\"1\":{\"411\":1}}],[\"但主要逻辑就是向前看一个字符来确定真正的标记\",{\"1\":{\"428\":1}}],[\"但仍支持\",{\"1\":{\"426\":1}}],[\"但有一点不同\",{\"1\":{\"422\":1}}],[\"但又枯燥且容易出错\",{\"1\":{\"419\":1}}],[\"但从结果可以看出\",{\"1\":{\"414\":1}}],[\"但就如上面的说\",{\"1\":{\"411\":1}}],[\"但最为重要的是\",{\"1\":{\"403\":1}}],[\"但更为简单\",{\"1\":{\"402\":1}}],[\"但更多时候我们都是在现有代码的基础上进行增加和修改\",{\"1\":{\"180\":1}}],[\"但我们一直用\",{\"1\":{\"482\":1}}],[\"但我们不确定数字\",{\"1\":{\"477\":1}}],[\"但我们上面的四则运算的文法就是左递归的\",{\"1\":{\"439\":1}}],[\"但我们的虚拟机中\",{\"1\":{\"415\":1}}],[\"但我们的虚拟机中只使用\",{\"1\":{\"401\":1}}],[\"但我们的\",{\"1\":{\"407\":1}}],[\"但我们讲解的顺序并不依据它\",{\"1\":{\"402\":1}}],[\"但我们还没有写任何编译相关的代码\",{\"1\":{\"401\":1}}],[\"但我不会评价大家的工作细节\",{\"1\":{\"274\":1}}],[\"但理解起来应该作为无符号的整型\",{\"1\":{\"400\":1}}],[\"但实际编译项目时\",{\"1\":{\"501\":1}}],[\"但实际上由于我们还将在符号表中加入关键字如\",{\"1\":{\"424\":1}}],[\"但实际上我们构建的是\",{\"1\":{\"395\":1}}],[\"但实际情况并非如此\",{\"1\":{\"403\":1}}],[\"但实际实现上较为复杂且与编译无关\",{\"1\":{\"400\":1}}],[\"但需要了解的是\",{\"1\":{\"400\":1}}],[\"但确为自己重写\",{\"1\":{\"390\":1}}],[\"但随着计算机性能的提升\",{\"1\":{\"388\":1}}],[\"但如果你查看了\",{\"1\":{\"452\":1}}],[\"但如果有兴趣的话\",{\"1\":{\"451\":1}}],[\"但如果能掌握它\",{\"1\":{\"441\":1}}],[\"但如果需要修改现有代码\",{\"1\":{\"380\":1}}],[\"但如有条件还请支持正版\",{\"1\":{\"106\":1}}],[\"但可以有效地管理内存\",{\"1\":{\"250\":1}}],[\"但可能会导致内存泄漏\",{\"1\":{\"250\":1}}],[\"但它又与编译器没有太大的联系\",{\"1\":{\"413\":1}}],[\"但它却难以应对\",{\"1\":{\"382\":1}}],[\"但它们的目的和实现方式有所不同\",{\"1\":{\"324\":1}}],[\"但它们的接口并不符合当前系统的需求\",{\"1\":{\"144\":1}}],[\"但它需要我们在理解其核心思想的基础上\",{\"1\":{\"227\":1}}],[\"但程序暂时无法直接决定由哪个对象负责处理时\",{\"1\":{\"183\":1}}],[\"但不知道构建的具体步骤\",{\"1\":{\"178\":1}}],[\"但不知道对象的具体表示\",{\"1\":{\"178\":1}}],[\"但委托是弱关联关系\",{\"1\":{\"168\":1}}],[\"但切换过程是争抢的\",{\"1\":{\"96\":1}}],[\"但归根结底\",{\"1\":{\"95\":1}}],[\"但事实上是\",{\"1\":{\"93\":1}}],[\"但\",{\"1\":{\"77\":1,\"280\":1}}],[\"但是两节课后我就放弃了\",{\"1\":{\"389\":1}}],[\"但是要达到这个目的是有条件的\",{\"1\":{\"383\":1}}],[\"但是好在我们绝对不会忘记实现这个方法\",{\"1\":{\"350\":1}}],[\"但是当状态非常多的时候\",{\"1\":{\"346\":1}}],[\"但是需要考虑到的是\",{\"1\":{\"279\":1}}],[\"但是没有将应当集中的处理集中起来\",{\"1\":{\"278\":1}}],[\"但是在本章中的示例程序中\",{\"1\":{\"278\":1}}],[\"但是意见难以统一\",{\"1\":{\"274\":1}}],[\"但是越装饰\",{\"1\":{\"217\":1}}],[\"但是它们的使用目的不同\",{\"1\":{\"216\":1}}],[\"但是接口\",{\"1\":{\"216\":1}}],[\"但是有时候也确实存在需要\",{\"1\":{\"183\":1}}],[\"但是不能改变父类原有的功能\",{\"1\":{\"113\":1}}],[\"但是给一个垂死的人注射吗啡\",{\"1\":{\"97\":1}}],[\"但是我们也付出了相应的代价\",{\"1\":{\"96\":1}}],[\"但是可以保证最终一致性呢\",{\"1\":{\"96\":1}}],[\"但是所有协程执行完毕后\",{\"1\":{\"96\":1}}],[\"但是线程时系统调度\",{\"1\":{\"94\":1}}],[\"但是python受限于gil全局解释器锁\",{\"1\":{\"94\":1}}],[\"但是模数个数少的时候可以缩写\",{\"1\":{\"41\":1}}],[\"但是\",{\"1\":{\"40\":1,\"156\":1,\"347\":1,\"348\":1,\"350\":1,\"379\":1,\"380\":1,\"413\":1}}],[\"但是这种方法有着严重的缺陷\",{\"1\":{\"39\":1}}],[\"ⅳ\",{\"0\":{\"84\":1},\"1\":{\"76\":1}}],[\"其它的我们便不再详述\",{\"1\":{\"493\":1}}],[\"其它的标记的解析就相对容易一些了\",{\"1\":{\"428\":1}}],[\"其它语句并不直接生成汇编代码\",{\"1\":{\"471\":1}}],[\"其它语句\",{\"0\":{\"471\":1},\"1\":{\"466\":1}}],[\"其它就不多说了\",{\"1\":{\"425\":1}}],[\"其它\",{\"0\":{\"428\":1,\"450\":1},\"1\":{\"416\":1,\"444\":1}}],[\"其实只要不执行\",{\"1\":{\"484\":1}}],[\"其实提前看字符的概念也存在于编译器\",{\"1\":{\"427\":1}}],[\"其实是抄\",{\"1\":{\"425\":1}}],[\"其实是同一个对象\",{\"1\":{\"351\":1}}],[\"其实不然\",{\"1\":{\"360\":1}}],[\"其实并没有绝对的答案\",{\"1\":{\"248\":1}}],[\"其职责是引起该类变化的原因\",{\"1\":{\"119\":1}}],[\"其他类依然可以调用\",{\"1\":{\"216\":1}}],[\"其他设计原则是实现开闭原则的手段和工具\",{\"1\":{\"109\":1}}],[\"其他线程又说我拿不到锁\",{\"1\":{\"94\":1}}],[\"其他线程只能等待\",{\"1\":{\"94\":1}}],[\"其中①用于解析函数体内的局部变量的定义\",{\"1\":{\"461\":1}}],[\"其中①与全局变量定义的解析十分一样\",{\"1\":{\"460\":1}}],[\"其中①中我们没有消耗最后的\",{\"1\":{\"459\":1}}],[\"其中的自顶向下方法就是我们所说的递归下降\",{\"1\":{\"435\":1}}],[\"其中的\",{\"1\":{\"403\":1,\"448\":1,\"450\":1}}],[\"其中的数据段我们只用来存放字符串\",{\"1\":{\"400\":1}}],[\"其中数据段\",{\"1\":{\"400\":1}}],[\"其中\",{\"1\":{\"76\":1,\"445\":1}}],[\"其与自然数\",{\"1\":{\"63\":1}}],[\"可惜的是它的代码初衷是代码最小化\",{\"1\":{\"390\":1}}],[\"可作为组件复用\",{\"1\":{\"380\":1}}],[\"可替换性是指一个对象可以被另一个具有相同接口的对象替换\",{\"1\":{\"301\":1}}],[\"可替換性\",{\"1\":{\"178\":1}}],[\"可能唯一不好理解的是获取十六进制的值相关的代码\",{\"1\":{\"425\":1}}],[\"可能包含多个字符\",{\"1\":{\"420\":1}}],[\"可能大家对此感受不深\",{\"1\":{\"346\":1}}],[\"可能会更具普适性\",{\"1\":{\"392\":1}}],[\"可能会导致创建多个实例\",{\"1\":{\"337\":1}}],[\"可能会有读者认为\",{\"1\":{\"279\":1}}],[\"可能需要长期保存\",{\"1\":{\"291\":1}}],[\"可能需要保存多个\",{\"1\":{\"290\":1}}],[\"可能只需要在短时间内有效\",{\"1\":{\"291\":1}}],[\"可能只需要保存一个\",{\"1\":{\"290\":1}}],[\"可能同时违反其他原则\",{\"1\":{\"109\":1}}],[\"可扩展性\",{\"1\":{\"259\":1}}],[\"可维护性和可扩展性\",{\"1\":{\"227\":1}}],[\"可是如果在执行事务逻辑块中主动放弃执行权了\",{\"1\":{\"97\":1}}],[\"可调试性强\",{\"1\":{\"95\":1}}],[\"可读性高\",{\"1\":{\"95\":1}}],[\"可知\",{\"1\":{\"76\":1}}],[\"可以看看\",{\"1\":{\"503\":1}}],[\"可以看到和之前有同样的输出\",{\"1\":{\"496\":1}}],[\"可以看到\",{\"1\":{\"96\":2,\"437\":1,\"440\":1}}],[\"可以自己实现看看\",{\"1\":{\"493\":1}}],[\"可以自己先试着去实现它\",{\"1\":{\"451\":1}}],[\"可以参考\",{\"1\":{\"477\":1}}],[\"可以学习学习这些文法\",{\"1\":{\"503\":1}}],[\"可以学习学习\",{\"1\":{\"473\":1}}],[\"可以认为语句就是表达式加上末尾的分号\",{\"1\":{\"467\":1}}],[\"可以是\",{\"1\":{\"436\":1}}],[\"可以得到个位数的值\",{\"1\":{\"425\":1}}],[\"可以理解为变量名\",{\"1\":{\"424\":1}}],[\"可以帮助我们设计出这样的类\",{\"1\":{\"380\":1}}],[\"可以帮助我们应对软件开发中的常见问题\",{\"1\":{\"227\":1}}],[\"可以通过在子类中增加方法以实现新的功能\",{\"1\":{\"370\":1}}],[\"可以通过子类来定制产品的创建过程\",{\"1\":{\"238\":1}}],[\"可以方便地根据棋手的选择切换\",{\"1\":{\"360\":1}}],[\"可以方便地增加新的产品族而不影响现有代码\",{\"1\":{\"133\":1}}],[\"可以避免在多个地方重复相同的算法逻辑\",{\"1\":{\"356\":1}}],[\"可以避免创建多个实例带来的资源浪费和不一致性问题\",{\"1\":{\"332\":1}}],[\"可以很容易地添加新的策略\",{\"1\":{\"356\":1}}],[\"可以很容易地添加新的处理者而不影响现有代码\",{\"1\":{\"184\":1}}],[\"可以提高系统的响应速度和资源利用率\",{\"1\":{\"322\":1}}],[\"可以提高代码的复用性和可维护性\",{\"1\":{\"259\":1}}],[\"可以用程序来生成代码而不是手写代码\",{\"1\":{\"348\":1}}],[\"可以用于访问远程对象\",{\"1\":{\"318\":1}}],[\"可以用来存储弱引用的键值对\",{\"1\":{\"250\":1}}],[\"可以负责将\",{\"1\":{\"292\":1}}],[\"可以维护一个\",{\"1\":{\"292\":1}}],[\"可以实现持久化存储\",{\"1\":{\"292\":1}}],[\"可以实现多次撤销操作\",{\"1\":{\"292\":1}}],[\"可以实现命令的参数化和可撤销性\",{\"1\":{\"195\":1}}],[\"可以将状态保存和恢复的逻辑与业务逻辑分离\",{\"1\":{\"292\":1}}],[\"可以将这七个原则分为以下两部分\",{\"1\":{\"109\":1}}],[\"可以确保\",{\"1\":{\"289\":1}}],[\"可以根据需要实现不同的迭代器\",{\"1\":{\"265\":1}}],[\"可以根据需要动态地添加或删除职责\",{\"1\":{\"212\":1}}],[\"可以轻松添加新的语法规则或指令\",{\"1\":{\"259\":1}}],[\"可以轻松解析和执行特定的语言或指令集\",{\"1\":{\"259\":1}}],[\"可以同时使用的文件句柄和窗口句柄是有限制的\",{\"1\":{\"251\":1}}],[\"可以安全地回收\",{\"1\":{\"250\":1}}],[\"可以动态地增加功能\",{\"0\":{\"218\":1}}],[\"可以在客户端和远程服务器之间进行通信\",{\"1\":{\"323\":1}}],[\"可以在实际对象创建之前进行一些轻量级的操作\",{\"1\":{\"322\":1}}],[\"可以在代理中加入额外的逻辑来控制对实际对象的访问\",{\"1\":{\"318\":1}}],[\"可以在需要时回滚到之前的状态\",{\"1\":{\"196\":1}}],[\"可以在运行时动态地改变职责链的结构\",{\"1\":{\"184\":1}}],[\"可以在不修改实际对象的情况下添加额外的功能\",{\"1\":{\"323\":1}}],[\"可以在不修改集合对象的情况下\",{\"1\":{\"265\":1}}],[\"可以在不修改现有代码的情况下\",{\"1\":{\"111\":1}}],[\"可以在不同的上下文中重用相同的构建逻辑\",{\"1\":{\"173\":1}}],[\"可以在不改变原有代码的情况下\",{\"1\":{\"111\":1}}],[\"可以构造出分段状自然数系统\",{\"1\":{\"85\":1}}],[\"可以构造出\",{\"1\":{\"84\":1}}],[\"可以构造出环状自然数系统\",{\"1\":{\"83\":1}}],[\"可以构造出菊花图自然数系统\",{\"1\":{\"82\":1}}],[\"可以构造出空集自然数系统\",{\"1\":{\"81\":1}}],[\"可以使用双重检查锁定\",{\"1\":{\"337\":1}}],[\"可以使用\",{\"1\":{\"48\":1}}],[\"可以使用的\",{\"1\":{\"32\":1}}],[\"可以快速\",{\"1\":{\"5\":1}}],[\"假设要在某个表格计算软件的开发版本中进行复杂的计算\",{\"1\":{\"361\":1}}],[\"假设我们现在在\",{\"1\":{\"350\":1}}],[\"假设我们现在需要制作另外一个对话框\",{\"1\":{\"280\":1}}],[\"假设我们将颜色信息放在\",{\"1\":{\"248\":1}}],[\"假设我们要在示例程序中增加一个功能\",{\"1\":{\"248\":1}}],[\"假设我们改变了示例程序中\",{\"1\":{\"248\":1}}],[\"假设现在我们要在示例程序中增加一个\",{\"1\":{\"382\":1}}],[\"假设现在我们要在示例程序中增加新的具体工厂\",{\"1\":{\"137\":1}}],[\"假设现在有\",{\"1\":{\"279\":1}}],[\"假设现在有一个类\",{\"1\":{\"155\":1}}],[\"假设\",{\"1\":{\"76\":1,\"79\":1}}],[\"假设存在一个算数系统的模型满足\",{\"1\":{\"50\":1}}],[\"证明了乘法运算规则的交换律之后\",{\"1\":{\"73\":1}}],[\"证明了加法运算规则的交换律之后\",{\"1\":{\"57\":1}}],[\"存在内存地址上就另当别论\",{\"1\":{\"412\":1}}],[\"存在从\",{\"1\":{\"80\":1}}],[\"存在点\",{\"1\":{\"80\":1}}],[\"存在\",{\"1\":{\"70\":1}}],[\"存放这个标识符的值\",{\"1\":{\"424\":1}}],[\"存放标识符本身的字符串\",{\"1\":{\"424\":1}}],[\"存放日志\",{\"1\":{\"15\":1}}],[\"存放ssl证书\",{\"1\":{\"15\":1}}],[\"乘法\",{\"1\":{\"477\":1}}],[\"乘法消去保序性\",{\"0\":{\"79\":1}}],[\"乘法消去律\",{\"0\":{\"76\":1},\"1\":{\"76\":1}}],[\"乘法保序性\",{\"0\":{\"78\":1}}],[\"乘法结合律\",{\"0\":{\"75\":1}}],[\"乘法结果的唯一性\",{\"0\":{\"71\":1}}],[\"乘法结果的存在性\",{\"0\":{\"70\":1}}],[\"乘法分配律\",{\"0\":{\"74\":1}}],[\"乘法交换律\",{\"0\":{\"73\":1}}],[\"乘法的性质\",{\"0\":{\"72\":1}}],[\"乘法的定义\",{\"0\":{\"69\":1}}],[\"任何python线程执行前\",{\"1\":{\"94\":1}}],[\"任何自然数的后继存在且唯一\",{\"1\":{\"51\":1}}],[\"任意点的入度小于等于\",{\"1\":{\"80\":1}}],[\"任意非零自然数\",{\"1\":{\"76\":1}}],[\"任意两个自然数\",{\"1\":{\"66\":1}}],[\"ⅲ\",{\"0\":{\"83\":1},\"1\":{\"63\":1,\"76\":3}}],[\"传统的编程书籍会用\",{\"1\":{\"477\":1}}],[\"传统上\",{\"1\":{\"435\":1}}],[\"传统意义上的符号表只需要知道标识符的唯一标识即可\",{\"1\":{\"424\":1}}],[\"传递更新信息的方式有多种选择\",{\"1\":{\"304\":1}}],[\"传递更新信息的方式\",{\"0\":{\"304\":1}}],[\"传递性和完全性\",{\"1\":{\"61\":1}}],[\"传说皮\",{\"1\":{\"3\":1}}],[\"满足不同的需求\",{\"1\":{\"238\":1}}],[\"满足\",{\"1\":{\"61\":1,\"76\":1,\"79\":1}}],[\"当解析完=右边的表达式后\",{\"1\":{\"490\":1}}],[\"当前优先级的运算符\",{\"1\":{\"489\":1}}],[\"当该标识符是全局定义的枚举类型时\",{\"1\":{\"481\":1}}],[\"当它是一个指向基本类型的指针时\",{\"1\":{\"448\":1}}],[\"当局部标识符的名字与全局标识符相同时\",{\"1\":{\"424\":1}}],[\"当用户的程序需要分配内存时\",{\"1\":{\"400\":1}}],[\"当时很火的\",{\"1\":{\"390\":1}}],[\"当需要增加新的处理时\",{\"1\":{\"373\":1}}],[\"当需要创建不同表示的对象时\",{\"1\":{\"173\":1}}],[\"当检测到没有考虑到的状态时就报错\",{\"1\":{\"350\":1}}],[\"当状态数过多时\",{\"1\":{\"348\":1}}],[\"当状态迁移遵循一定的规则时\",{\"1\":{\"348\":1}}],[\"当遇到庞大且复杂的问题\",{\"1\":{\"346\":1}}],[\"当模型的状态发生变化时\",{\"1\":{\"306\":1}}],[\"当系统中有大量的观察者时\",{\"1\":{\"305\":1}}],[\"当观察者的行为会对被观察对象产生影响时\",{\"1\":{\"303\":1}}],[\"当数据模型发生变化时\",{\"1\":{\"297\":2}}],[\"当发生分散灾难时\",{\"0\":{\"278\":1}}],[\"当出现争执时大家就会找仲裁者进行商量\",{\"1\":{\"274\":1}}],[\"当计数为零时\",{\"1\":{\"250\":1}}],[\"当某个程序员得意地说出\",{\"1\":{\"230\":1}}],[\"当顾客下单后只需要在冰激凌上加上各种香料就可以了\",{\"1\":{\"219\":1}}],[\"当一个表达式解析结束时\",{\"1\":{\"483\":1}}],[\"当一个终结符有多个选择时\",{\"1\":{\"438\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"298\":1}}],[\"当一个对象的构建过程非常复杂时\",{\"1\":{\"173\":1}}],[\"当一个人被要求做什么事情时\",{\"1\":{\"183\":1}}],[\"当外部请求程序进行某个处理\",{\"1\":{\"183\":1}}],[\"当想要增加功能时\",{\"1\":{\"167\":1}}],[\"当然\",{\"1\":{\"157\":1,\"302\":1,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"388\":1,\"400\":1,\"420\":1,\"463\":1,\"478\":1,\"496\":1}}],[\"当类的层次结构只有一层时\",{\"1\":{\"157\":1}}],[\"当子类实现了父类\",{\"1\":{\"156\":1}}],[\"当只有一个具体工厂时\",{\"1\":{\"135\":1}}],[\"当我对全局变量balance进行加法运算后\",{\"1\":{\"96\":1}}],[\"当我们调用\",{\"1\":{\"489\":1}}],[\"当我们想要通过改善算法来提高算法的处理速度时\",{\"1\":{\"360\":1}}],[\"当我们想要编写子类时\",{\"1\":{\"157\":1}}],[\"当我们想知道\",{\"1\":{\"348\":1}}],[\"当我们想在\",{\"1\":{\"155\":1}}],[\"当我们执行第一句代码print\",{\"1\":{\"96\":1}}],[\"当我们写完了vue项目后\",{\"1\":{\"88\":1}}],[\"当别的协程任务执行完毕\",{\"1\":{\"96\":1}}],[\"当\",{\"0\":{\"303\":1},\"1\":{\"63\":1,\"66\":2,\"168\":1}}],[\"当且仅当\",{\"1\":{\"61\":1}}],[\"当且仅当存在自然数\",{\"1\":{\"61\":1}}],[\"当今科学界最具争议性的项目\",{\"1\":{\"5\":1}}],[\"首先我们介绍\",{\"1\":{\"407\":1}}],[\"首先是数字\",{\"1\":{\"479\":1}}],[\"首先是之前定义过的\",{\"1\":{\"447\":1}}],[\"首先是\",{\"1\":{\"403\":1,\"436\":1}}],[\"首先在全局变量中加入一个枚举类型\",{\"1\":{\"402\":1}}],[\"首先要说明的是\",{\"1\":{\"395\":1}}],[\"首先要想到的是\",{\"1\":{\"248\":1}}],[\"首先\",{\"1\":{\"63\":1,\"73\":1,\"248\":1}}],[\"首先当\",{\"1\":{\"58\":1,\"59\":2,\"73\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"首先由加法运算规则\",{\"1\":{\"57\":1}}],[\"首先有\",{\"1\":{\"57\":2,\"73\":1}}],[\"对应的\",{\"1\":{\"468\":1}}],[\"对应的汇编代码也比较直观\",{\"1\":{\"488\":1}}],[\"对应的汇编代码流程为\",{\"1\":{\"468\":1}}],[\"对应的汇编代码为\",{\"1\":{\"408\":1,\"409\":1,\"493\":1}}],[\"对应的汇编指令为\",{\"1\":{\"410\":1}}],[\"对词法分析器而言\",{\"1\":{\"421\":1}}],[\"对照\",{\"1\":{\"392\":1}}],[\"对数据结构中的元素进行处理的任务被分离出来\",{\"1\":{\"383\":1}}],[\"对修改是关闭的\",{\"1\":{\"380\":1}}],[\"对修改关闭的类具有高可复用性\",{\"1\":{\"380\":1}}],[\"对修改关闭\",{\"0\":{\"380\":1},\"1\":{\"110\":1,\"129\":1,\"374\":1}}],[\"对扩展是开放的\",{\"1\":{\"380\":1}}],[\"对扩展开放\",{\"0\":{\"380\":1},\"1\":{\"110\":1,\"129\":1,\"374\":1,\"380\":1}}],[\"对比这两个方法会发现\",{\"1\":{\"378\":1}}],[\"对象负责\",{\"1\":{\"318\":1}}],[\"对象太忙了\",{\"1\":{\"318\":1}}],[\"对象种类繁多\",{\"1\":{\"311\":1}}],[\"对象的所有操作权限\",{\"1\":{\"289\":1}}],[\"对象的状态\",{\"1\":{\"286\":1}}],[\"对多个地方产生影响\",{\"0\":{\"248\":1}}],[\"对\",{\"1\":{\"217\":1,\"351\":1}}],[\"对于学习或考试而言或许可以\",{\"1\":{\"501\":1}}],[\"对于学习构建编译器帮助不大\",{\"1\":{\"396\":1}}],[\"对于变量\",{\"1\":{\"484\":1}}],[\"对于提高我们的水平还是很有帮助的\",{\"1\":{\"441\":1}}],[\"对于语法分析而言\",{\"1\":{\"424\":1}}],[\"对于一些简单的应用\",{\"1\":{\"290\":1}}],[\"对于那些能够明确地用语言描述出来的知识\",{\"1\":{\"230\":1}}],[\"对于\",{\"1\":{\"66\":1}}],[\"对于任意自然数\",{\"1\":{\"51\":1,\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"对任意自然数\",{\"1\":{\"57\":3,\"58\":1,\"59\":3,\"73\":3,\"74\":1,\"75\":1,\"76\":2}}],[\"根据标识符后的运算符\",{\"1\":{\"481\":1}}],[\"根据类型的不同有\",{\"1\":{\"403\":1}}],[\"根据文法来生成编译器\",{\"1\":{\"389\":1}}],[\"根据上一局的手势从概率上计算出下一局的手势\",{\"1\":{\"357\":1}}],[\"根据开闭原则\",{\"1\":{\"110\":1}}],[\"根据乘法消去律有\",{\"1\":{\"79\":1}}],[\"根据乘法运算规则\",{\"1\":{\"70\":1,\"71\":1}}],[\"根据序的反对称性有\",{\"1\":{\"79\":1}}],[\"根据加法结合律得出\",{\"1\":{\"65\":1}}],[\"根据加法结果的存在性得到\",{\"1\":{\"65\":1}}],[\"根据加法运算规则\",{\"1\":{\"54\":1,\"55\":1}}],[\"根据正自然数的性质得出\",{\"1\":{\"64\":1}}],[\"根据\",{\"1\":{\"57\":3,\"58\":1,\"59\":2,\"63\":2,\"73\":3,\"74\":1,\"75\":1,\"76\":1}}],[\"考虑诸如\",{\"1\":{\"490\":1}}],[\"考虑下列函数\",{\"1\":{\"458\":1}}],[\"考虑其他的类\",{\"1\":{\"346\":1}}],[\"考虑从乘法运算的定义下手\",{\"1\":{\"73\":1}}],[\"考虑从加法运算的定义下手\",{\"1\":{\"57\":1}}],[\"考虑到函数取模的优点\",{\"1\":{\"41\":1}}],[\"且当\",{\"1\":{\"496\":1}}],[\"且根据不同的类型移动的位移不同\",{\"1\":{\"493\":1}}],[\"且多数情况下如此\",{\"1\":{\"420\":1}}],[\"且不需要判断类型\",{\"1\":{\"403\":1}}],[\"且程序行为不变\",{\"1\":{\"129\":1}}],[\"且需要导出为pptx推荐\",{\"1\":{\"100\":1}}],[\"且乘法运算的结果存在且唯一之后\",{\"1\":{\"72\":1}}],[\"且\",{\"1\":{\"61\":1,\"64\":1,\"65\":1}}],[\"且加法运算的结果存在且唯一之后\",{\"1\":{\"56\":1}}],[\"且满足两个条件\",{\"1\":{\"51\":1}}],[\"成立\",{\"1\":{\"54\":1,\"55\":1,\"57\":3,\"58\":1,\"59\":3,\"70\":1,\"71\":1,\"73\":3,\"74\":1,\"75\":1,\"76\":2}}],[\"ⅴ\",{\"0\":{\"85\":1},\"1\":{\"54\":1,\"55\":1,\"57\":3,\"58\":1,\"59\":2,\"63\":1,\"66\":1,\"70\":1,\"71\":1,\"73\":3,\"74\":1,\"75\":1,\"76\":1}}],[\"ⅱ\",{\"0\":{\"82\":1},\"1\":{\"54\":2,\"55\":2,\"57\":1,\"70\":1,\"71\":1,\"73\":1,\"76\":1}}],[\"得到结果\",{\"1\":{\"477\":1}}],[\"得到\",{\"1\":{\"348\":1,\"477\":2}}],[\"得到的\",{\"1\":{\"33\":1}}],[\"得益于接口\",{\"1\":{\"216\":1}}],[\"得知\",{\"1\":{\"57\":3,\"58\":1,\"59\":2,\"73\":3,\"74\":1,\"75\":1,\"76\":1}}],[\"得出对于任意自然数\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"得证\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"ⅰ\",{\"0\":{\"81\":1},\"1\":{\"54\":1,\"55\":1,\"57\":1,\"70\":1,\"71\":1,\"73\":1}}],[\"记得事先写一些用于输出汇编代码的函数\",{\"1\":{\"504\":1}}],[\"记得我们说过词法分析器也是某种意义上的编译器\",{\"1\":{\"421\":1}}],[\"记录\",{\"0\":{\"91\":1}}],[\"记\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"也提到了优先级一般只与多元运算符有关\",{\"1\":{\"478\":1}}],[\"也许现在还想学习编译原理的人只可能是因为兴趣了\",{\"1\":{\"388\":1}}],[\"也不过是让程序睡眠\",{\"1\":{\"319\":1}}],[\"也不会被隐藏起来\",{\"1\":{\"216\":1}}],[\"也无法理解程序整体\",{\"1\":{\"180\":1}}],[\"也难以透彻地理解类的层次结构\",{\"1\":{\"157\":1}}],[\"也是一样的问题\",{\"1\":{\"407\":1}}],[\"也是用于指向栈的某些位置\",{\"1\":{\"401\":1}}],[\"也是不客观的\",{\"1\":{\"97\":1}}],[\"也是自然数\",{\"1\":{\"54\":1,\"70\":1}}],[\"也就能理解下面的源代码了\",{\"1\":{\"490\":1}}],[\"也就会导致写操作被原子性覆盖\",{\"1\":{\"96\":1}}],[\"也就是没有切换挂起状态\",{\"1\":{\"97\":1}}],[\"也就是一旦通过await关键字切换协程\",{\"1\":{\"96\":1}}],[\"也就是第二行代码print\",{\"1\":{\"96\":1}}],[\"也就是说由于我们的指令过于简单\",{\"1\":{\"407\":1}}],[\"也就是说可以\",{\"1\":{\"278\":1}}],[\"也就是说将\",{\"1\":{\"137\":1}}],[\"也就是说\",{\"1\":{\"53\":1,\"69\":1,\"156\":1,\"167\":1,\"216\":2,\"248\":2,\"249\":1,\"347\":1,\"348\":3,\"370\":2,\"379\":1}}],[\"也可以看文末给出的链接\",{\"1\":{\"493\":1}}],[\"也可以认为\",{\"1\":{\"477\":1}}],[\"也可以是一个地址\",{\"1\":{\"407\":1}}],[\"也可以是其它的数据\",{\"1\":{\"400\":1}}],[\"也可以说是\",{\"1\":{\"402\":1}}],[\"也可以直接\",{\"1\":{\"397\":1,\"415\":1,\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"496\":1}}],[\"也可以恢复到之前的状态\",{\"1\":{\"292\":1}}],[\"也可以将它们自由组合成为新的对象\",{\"1\":{\"219\":1}}],[\"也可以理解为把程序\",{\"1\":{\"96\":1}}],[\"也可另外指定\",{\"1\":{\"10\":1}}],[\"也更简单\",{\"1\":{\"95\":1}}],[\"也能释放锁\",{\"1\":{\"94\":1}}],[\"也只能用到1个核\",{\"1\":{\"94\":1}}],[\"也唯一\",{\"1\":{\"55\":1,\"71\":1}}],[\"都比\",{\"1\":{\"503\":1}}],[\"都指向\",{\"1\":{\"468\":1}}],[\"都会非常困难\",{\"1\":{\"278\":1}}],[\"都会发生改变\",{\"1\":{\"248\":1}}],[\"都具有递归结构\",{\"1\":{\"216\":1}}],[\"都无需修改抽象工厂和\",{\"1\":{\"137\":1}}],[\"都保持了其一致性\",{\"1\":{\"96\":1}}],[\"都保证了其状态的一致性\",{\"1\":{\"96\":1}}],[\"都有唯一的数\",{\"1\":{\"76\":1}}],[\"都有序关系\",{\"1\":{\"66\":2}}],[\"都可以进行乘法运算\",{\"1\":{\"69\":1}}],[\"都可以进行加法运算\",{\"1\":{\"53\":1}}],[\"都是存放在计算机的\",{\"1\":{\"458\":1}}],[\"都是\",{\"1\":{\"347\":1}}],[\"都是对象\",{\"1\":{\"318\":1}}],[\"都是唯一的\",{\"1\":{\"55\":1,\"71\":1}}],[\"都是自然数\",{\"1\":{\"53\":1,\"54\":1,\"69\":1,\"70\":1}}],[\"都是在这个路径下的\",{\"1\":{\"33\":1}}],[\"则结果是两个指针间隔的元素个数\",{\"1\":{\"493\":1}}],[\"则移动\",{\"1\":{\"493\":1}}],[\"则移动一字节\",{\"1\":{\"493\":1}}],[\"则意味着函数要退出了\",{\"1\":{\"470\":1}}],[\"则跳转到\",{\"1\":{\"468\":1}}],[\"则再加上\",{\"1\":{\"448\":1}}],[\"则可以断定是函数了\",{\"1\":{\"448\":1}}],[\"则说明是注释\",{\"1\":{\"427\":1}}],[\"则用于从子函数中返回\",{\"1\":{\"407\":1}}],[\"则会导致其失去作为可复用组件的独立性\",{\"1\":{\"180\":1}}],[\"则不需要加锁\",{\"1\":{\"97\":1}}],[\"则必须加锁\",{\"1\":{\"97\":1}}],[\"则对连通性无要求\",{\"1\":{\"85\":1}}],[\"则对一个数可以是多个数的后继\",{\"1\":{\"84\":1}}],[\"则对\",{\"1\":{\"83\":1}}],[\"则对点的出度无规定\",{\"1\":{\"82\":1}}],[\"则允许不存在\",{\"1\":{\"81\":1}}],[\"则存在正自然数\",{\"1\":{\"79\":1}}],[\"则由加法运算规则\",{\"1\":{\"76\":1}}],[\"则\",{\"1\":{\"53\":2,\"54\":1,\"55\":1,\"64\":1,\"65\":1,\"66\":3,\"67\":1,\"69\":2,\"70\":1,\"71\":1,\"78\":1,\"79\":1}}],[\"则有\",{\"1\":{\"51\":1,\"76\":1}}],[\"则需要写多个函数\",{\"1\":{\"40\":1}}],[\"为例\",{\"1\":{\"493\":1}}],[\"为例介绍几种写法\",{\"1\":{\"38\":1}}],[\"为\",{\"1\":{\"477\":2}}],[\"为零或不为零情况下的跳转\",{\"1\":{\"406\":1}}],[\"为此\",{\"1\":{\"383\":1}}],[\"为了实际将这个值保存起来\",{\"1\":{\"490\":1}}],[\"为了实现\",{\"1\":{\"406\":1}}],[\"为了防止因为顺序排列而执行了\",{\"1\":{\"468\":1}}],[\"为了在程序中体现这一点\",{\"1\":{\"319\":1}}],[\"为了让\",{\"1\":{\"319\":1}}],[\"为了解决这个问题\",{\"1\":{\"303\":1,\"337\":1}}],[\"为了避免这种情况\",{\"1\":{\"250\":1}}],[\"为了对比\",{\"1\":{\"96\":1}}],[\"为什么选择递归下降\",{\"0\":{\"438\":1},\"1\":{\"434\":1}}],[\"为什么不能直接使用\",{\"1\":{\"407\":1}}],[\"为什么\",{\"1\":{\"403\":1}}],[\"为什么使用代理模式\",{\"0\":{\"318\":1}}],[\"为什么使用观察者模式\",{\"0\":{\"297\":1}}],[\"为什么使用\",{\"0\":{\"244\":1,\"285\":1,\"342\":1,\"374\":1}}],[\"为什么使用外观模式\",{\"1\":{\"230\":1}}],[\"为什么使用装饰器模式\",{\"0\":{\"212\":1}}],[\"为什么使用此模式\",{\"0\":{\"191\":1,\"259\":1}}],[\"为什么使用此类\",{\"0\":{\"184\":1,\"274\":1}}],[\"为什么要用\",{\"1\":{\"421\":1}}],[\"为什么要用适配器模式\",{\"0\":{\"144\":1}}],[\"为什么要学编译原理\",{\"0\":{\"388\":1}}],[\"为什么要这么复杂\",{\"0\":{\"379\":1}}],[\"为什么要特意编写\",{\"0\":{\"360\":1}}],[\"为什么要使用迭代器模式\",{\"0\":{\"265\":1}}],[\"为什么要使用\",{\"0\":{\"173\":1,\"238\":1,\"311\":1,\"332\":1,\"366\":1}}],[\"为什么要使用抽象工厂模式\",{\"0\":{\"133\":1}}],[\"为自然数时\",{\"1\":{\"66\":1}}],[\"为自然数且\",{\"1\":{\"58\":1,\"59\":2,\"63\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"为正自然数时有\",{\"1\":{\"63\":1}}],[\"为正自然数\",{\"1\":{\"63\":4}}],[\"为真命题可以推出\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"为真命题可以推理出\",{\"1\":{\"51\":1}}],[\"为真命题\",{\"1\":{\"51\":2,\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"由上可以看出\",{\"1\":{\"424\":1}}],[\"由调用者将参数出栈\",{\"1\":{\"407\":1}}],[\"由调用者将参数入栈\",{\"1\":{\"407\":1}}],[\"由于取变量的值与函数的调用都是以\",{\"1\":{\"481\":1}}],[\"由于语法分析本身比较复杂\",{\"1\":{\"444\":1,\"455\":1}}],[\"由于本编译器的目的是达到自己编译自己\",{\"1\":{\"426\":1}}],[\"由于本人水平一般\",{\"1\":{\"392\":1}}],[\"由于我们的目标是能自举\",{\"1\":{\"424\":1}}],[\"由于词法分析的工作很常见\",{\"1\":{\"419\":1}}],[\"由于只存放字符串\",{\"1\":{\"400\":1}}],[\"由于在示例程序中只生成了一个\",{\"1\":{\"351\":1}}],[\"由于其他地方并没有控制消息发布和订阅的逻辑处理\",{\"1\":{\"278\":1}}],[\"由于笔者不太喜欢java\",{\"1\":{\"255\":1}}],[\"由于\",{\"1\":{\"248\":1}}],[\"由此有\",{\"1\":{\"79\":1}}],[\"由此知道假设不成立\",{\"1\":{\"76\":1}}],[\"由乘法运算规则\",{\"1\":{\"70\":1,\"71\":1}}],[\"由加法结果的唯一性有\",{\"1\":{\"71\":1}}],[\"由加法结果的存在性有\",{\"1\":{\"70\":1}}],[\"由加法消去律得到\",{\"1\":{\"64\":1}}],[\"由加法运算规则\",{\"1\":{\"54\":1,\"55\":1}}],[\"由\",{\"1\":{\"51\":1,\"54\":2,\"55\":2,\"64\":2,\"65\":2,\"66\":1,\"67\":1,\"70\":1,\"71\":1,\"76\":2,\"78\":1}}],[\"是解释器\",{\"1\":{\"497\":1}}],[\"是指针时\",{\"1\":{\"493\":1}}],[\"是逆序将参数入栈的\",{\"1\":{\"481\":1}}],[\"是第几个参数\",{\"1\":{\"460\":1}}],[\"是以字符\",{\"1\":{\"459\":2}}],[\"是放在一起解析的\",{\"1\":{\"459\":1}}],[\"是对前一章提到的\",{\"1\":{\"445\":1}}],[\"是如何帮助我们的工程实现的\",{\"1\":{\"441\":1}}],[\"是因为几乎所有手工编写的语法分析器都或多或少地有它的影子\",{\"1\":{\"441\":1}}],[\"是因为之后我们将用\",{\"1\":{\"407\":1}}],[\"是因为表达式在语法分析中相对独立并且比较复杂\",{\"1\":{\"397\":1}}],[\"是跳转指令\",{\"1\":{\"405\":1}}],[\"是比较困难的\",{\"1\":{\"403\":1}}],[\"是数据还是地址\",{\"1\":{\"403\":1}}],[\"是所有指令中最基础的一个\",{\"1\":{\"403\":1}}],[\"是很困难的\",{\"1\":{\"350\":1}}],[\"是用类来表示状态的\",{\"1\":{\"349\":1}}],[\"是有专有名词的\",{\"1\":{\"249\":1}}],[\"是单线程的\",{\"1\":{\"245\":1}}],[\"是非常重要的\",{\"1\":{\"178\":1}}],[\"是一个一元运算符\",{\"1\":{\"480\":1}}],[\"是一个普通的变量还是一个函数\",{\"1\":{\"448\":1}}],[\"是一种行为设计模式\",{\"1\":{\"259\":1}}],[\"是一种结构型设计模式\",{\"1\":{\"143\":1}}],[\"是一款简洁高效的\",{\"1\":{\"106\":1}}],[\"是没有必要的\",{\"1\":{\"135\":1}}],[\"是不客观的\",{\"1\":{\"97\":1}}],[\"是的\",{\"1\":{\"96\":1,\"97\":1}}],[\"是线程调度器抢占划分时间片给其他线程跑\",{\"1\":{\"94\":1}}],[\"是\",{\"1\":{\"76\":1,\"96\":1,\"159\":1,\"414\":1,\"493\":2}}],[\"是唯一的\",{\"1\":{\"55\":2,\"71\":2}}],[\"是否属于优先级更高的运算符\",{\"1\":{\"477\":1}}],[\"是否唯一\",{\"1\":{\"55\":1,\"71\":1}}],[\"是否存在\",{\"1\":{\"54\":1,\"70\":1}}],[\"是否是自然数\",{\"1\":{\"54\":1,\"70\":1}}],[\"是任意自然数\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"是真命题\",{\"1\":{\"51\":1}}],[\"是关于自然数\",{\"1\":{\"51\":1}}],[\"是自然数且\",{\"1\":{\"55\":1,\"57\":3,\"73\":3}}],[\"是自然数\",{\"1\":{\"51\":1,\"53\":1,\"54\":7,\"55\":2,\"65\":1,\"69\":1,\"70\":6,\"71\":2}}],[\"是什么\",{\"0\":{\"32\":1}}],[\"即当\",{\"1\":{\"493\":1}}],[\"即可\",{\"1\":{\"481\":1,\"484\":1}}],[\"即跨行的字符串拼接\",{\"1\":{\"479\":1}}],[\"即在这断代码之前\",{\"1\":{\"457\":1}}],[\"即我们将该变量的类别设置成了\",{\"1\":{\"449\":1}}],[\"即我们自己的虚拟机\",{\"1\":{\"397\":1}}],[\"即代码中的\",{\"1\":{\"448\":1}}],[\"即全局的定义语句\",{\"1\":{\"448\":1}}],[\"即向前看\",{\"1\":{\"431\":1}}],[\"即提前看多个字符\",{\"1\":{\"427\":1}}],[\"即用一个整型数组来保存相关的id信息\",{\"1\":{\"424\":1}}],[\"即用户主动触发协程切换\",{\"1\":{\"96\":1}}],[\"即如果它是个变量\",{\"1\":{\"424\":1}}],[\"即并不是多个字符共同构成标记\",{\"1\":{\"420\":1}}],[\"即前几篇中提到的\",{\"1\":{\"419\":1}}],[\"即与代码的上下文是有关系的\",{\"1\":{\"419\":1}}],[\"即标记本身和标记的值\",{\"1\":{\"417\":1}}],[\"即一连串的标记\",{\"1\":{\"417\":1}}],[\"即有两个参数\",{\"1\":{\"412\":1}}],[\"即保存当前的栈指针\",{\"1\":{\"408\":1}}],[\"即结果\",{\"1\":{\"406\":1}}],[\"即能自己编译自己\",{\"1\":{\"390\":1}}],[\"即构造一个工具\",{\"1\":{\"389\":1}}],[\"即应当将\",{\"1\":{\"249\":1}}],[\"即使最初实例很少\",{\"1\":{\"279\":1}}],[\"即使这些装饰边框都只具有非常简单的功能\",{\"1\":{\"219\":1}}],[\"即使被装饰物被边框装饰起来了\",{\"1\":{\"216\":1}}],[\"即使理解了\",{\"1\":{\"180\":1}}],[\"即使多个线程跑在8核处理上\",{\"1\":{\"94\":1}}],[\"即子类可以扩展父类的功能\",{\"1\":{\"113\":1}}],[\"即python3\",{\"1\":{\"96\":1}}],[\"即不会触发系统的全局解释器锁\",{\"1\":{\"95\":1}}],[\"即所谓的\",{\"1\":{\"95\":1}}],[\"即证明了乘法消去的保序性\",{\"1\":{\"79\":1}}],[\"即乘法结合律成立\",{\"1\":{\"75\":1}}],[\"即乘法分配律成立\",{\"1\":{\"74\":1}}],[\"即乘法交换律成立\",{\"1\":{\"73\":1}}],[\"即先证明乘法的两条运算规则符合交换律\",{\"1\":{\"73\":1}}],[\"即先证明加法的两条运算规则符合交换律\",{\"1\":{\"57\":1}}],[\"即任意两个自然数都可以进行乘法运算\",{\"1\":{\"72\":1}}],[\"即任意两个自然数都可以进行加法运算\",{\"1\":{\"56\":1}}],[\"即对于正自然数\",{\"1\":{\"63\":1}}],[\"即对于任意自然数\",{\"1\":{\"57\":1,\"58\":1,\"59\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"即加法结合律成立\",{\"1\":{\"58\":1}}],[\"即加法交换律成立\",{\"1\":{\"57\":1}}],[\"即由\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"即\",{\"1\":{\"53\":1,\"54\":3,\"55\":3,\"59\":2,\"69\":1,\"70\":3,\"71\":3,\"76\":2,\"80\":5,\"155\":1,\"279\":2,\"361\":1,\"405\":1,\"417\":1,\"421\":1,\"438\":1,\"486\":1,\"489\":1,\"494\":1}}],[\"即假定\",{\"1\":{\"50\":1}}],[\"即写成\",{\"1\":{\"41\":1}}],[\"公理系统\",{\"2\":{\"87\":1}}],[\"公理系统内出发\",{\"1\":{\"77\":1}}],[\"公理自然不能从\",{\"1\":{\"77\":1}}],[\"公理自身任有待研究\",{\"1\":{\"77\":1}}],[\"公理每一条公理都被使用过\",{\"1\":{\"77\":1}}],[\"公理构建出了一个自然数代数系统\",{\"1\":{\"77\":1}}],[\"公理的合理性\",{\"0\":{\"77\":1}}],[\"公理相容\",{\"1\":{\"50\":1}}],[\"公理\",{\"0\":{\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1},\"1\":{\"50\":1,\"51\":1,\"54\":2,\"55\":2,\"57\":3,\"58\":1,\"59\":2,\"63\":2,\"66\":1,\"70\":1,\"71\":1,\"73\":3,\"74\":1,\"75\":1,\"76\":4}}],[\"自己实现了一个c语言的编译器\",{\"1\":{\"497\":1}}],[\"自己和被委托对象的一致性\",{\"0\":{\"224\":1}}],[\"自增自减\",{\"0\":{\"488\":1,\"494\":1},\"1\":{\"476\":2}}],[\"自底向上是不断地将终结符进行合并\",{\"1\":{\"435\":1}}],[\"自顶向下是从起始非终结符开始\",{\"1\":{\"435\":1}}],[\"自然数与有向图\",{\"1\":{\"80\":1}}],[\"自然数中最重要的运算当然是加法\",{\"1\":{\"52\":1}}],[\"自然数的乘法也十分重要\",{\"1\":{\"68\":1}}],[\"自然数的乘法运算\",{\"0\":{\"68\":1}}],[\"自然数的序是全序关系\",{\"1\":{\"61\":1}}],[\"自然数的序为两个自然数的关系\",{\"1\":{\"60\":1}}],[\"自然数的序\",{\"0\":{\"60\":1}}],[\"自然数的加法运算\",{\"0\":{\"52\":1}}],[\"自然数的定义\",{\"0\":{\"51\":1}}],[\"自然数的定义则是构建此算术公理系统的第一步\",{\"1\":{\"50\":1}}],[\"自然数这个新的数学对象因我们的假设而确立\",{\"1\":{\"51\":1}}],[\"自然数\",{\"0\":{\"50\":1},\"1\":{\"62\":1}}],[\"自由访问知识和文化\",{\"1\":{\"5\":1}}],[\"若在此通过\",{\"1\":{\"459\":1}}],[\"若是\",{\"1\":{\"427\":1}}],[\"若得到的是单个字符\",{\"1\":{\"426\":1}}],[\"若碰到了一个我们不认识的字符该怎么处理\",{\"1\":{\"421\":1}}],[\"若无特殊理由\",{\"1\":{\"380\":1}}],[\"若为多线程则需要加锁\",{\"1\":{\"245\":1}}],[\"若去除\",{\"1\":{\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1}}],[\"若有\",{\"1\":{\"76\":1}}],[\"若\",{\"1\":{\"53\":2,\"54\":1,\"55\":1,\"64\":1,\"65\":1,\"66\":3,\"67\":1,\"69\":2,\"70\":1,\"71\":1,\"78\":1,\"79\":1}}],[\"若deactivate\",{\"1\":{\"49\":1}}],[\"若activate\",{\"1\":{\"49\":1}}],[\"=<=\",{\"1\":{\"493\":1}}],[\"=左边的就称作\",{\"1\":{\"436\":1}}],[\"==\",{\"1\":{\"185\":1,\"245\":1,\"260\":4,\"275\":1,\"298\":1,\"319\":1,\"403\":5,\"404\":1,\"405\":1,\"406\":2,\"407\":2,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":17,\"413\":8,\"420\":2,\"422\":1,\"423\":1,\"424\":3,\"425\":2,\"426\":6,\"427\":2,\"428\":33,\"440\":7,\"448\":8,\"449\":2,\"450\":1,\"457\":1,\"459\":1,\"460\":5,\"461\":6,\"468\":2,\"469\":1,\"470\":1,\"471\":2,\"479\":3,\"480\":5,\"481\":9,\"482\":5,\"483\":2,\"484\":3,\"485\":2,\"486\":1,\"487\":3,\"488\":6,\"490\":4,\"491\":2,\"492\":2,\"493\":3,\"494\":5,\"495\":2}}],[\"===>\",{\"1\":{\"468\":1}}],[\"===`\",{\"1\":{\"319\":1}}],[\"====\",{\"1\":{\"287\":3}}],[\"==============================\",{\"1\":{\"174\":2,\"175\":2}}],[\"===\",{\"1\":{\"185\":2,\"213\":3,\"260\":3,\"275\":2,\"286\":3,\"319\":1,\"320\":2,\"334\":2,\"338\":2,\"357\":4}}],[\"=>\",{\"1\":{\"134\":2,\"174\":2,\"192\":1,\"203\":2,\"245\":2,\"260\":1,\"275\":1,\"286\":1,\"298\":2,\"319\":1,\"338\":2,\"375\":1,\"417\":1,\"437\":11}}],[\"=\",{\"1\":{\"48\":7,\"90\":1,\"94\":7,\"95\":5,\"96\":21,\"125\":3,\"128\":3,\"134\":20,\"147\":4,\"160\":1,\"161\":1,\"163\":3,\"164\":4,\"174\":11,\"185\":13,\"192\":9,\"203\":1,\"206\":7,\"213\":10,\"232\":5,\"239\":7,\"245\":11,\"260\":34,\"261\":5,\"267\":10,\"275\":7,\"286\":18,\"287\":6,\"298\":11,\"312\":18,\"319\":7,\"334\":5,\"338\":4,\"343\":7,\"357\":31,\"367\":9,\"375\":15,\"397\":8,\"400\":6,\"401\":3,\"403\":6,\"404\":1,\"405\":1,\"406\":2,\"407\":4,\"408\":3,\"409\":1,\"410\":3,\"411\":1,\"412\":17,\"413\":8,\"414\":11,\"420\":3,\"421\":1,\"423\":2,\"424\":11,\"425\":8,\"426\":9,\"427\":3,\"428\":29,\"429\":9,\"436\":4,\"438\":3,\"439\":5,\"440\":19,\"445\":13,\"448\":23,\"449\":10,\"456\":8,\"457\":2,\"459\":5,\"460\":14,\"461\":16,\"468\":6,\"469\":6,\"470\":2,\"471\":2,\"479\":9,\"480\":6,\"481\":19,\"482\":3,\"483\":2,\"484\":1,\"485\":5,\"486\":6,\"487\":8,\"488\":10,\"489\":1,\"490\":7,\"491\":6,\"492\":8,\"493\":10,\"494\":14,\"495\":8,\"496\":7}}],[\"=404\",{\"1\":{\"17\":3,\"23\":5}}],[\"会使用到\",{\"1\":{\"449\":1}}],[\"会增加许多的成本\",{\"1\":{\"415\":1}}],[\"会出现\",{\"1\":{\"414\":1}}],[\"会生成如下的\",{\"1\":{\"407\":1}}],[\"会像下面这样将处理委托给\",{\"1\":{\"347\":1}}],[\"会占用大量的内存资源\",{\"1\":{\"290\":1}}],[\"会有许多相似的代码\",{\"1\":{\"391\":1}}],[\"会有\",{\"1\":{\"279\":1}}],[\"会编写一个\",{\"1\":{\"155\":1}}],[\"会导致父类的任何变换都可能影响到子类的行为\",{\"1\":{\"126\":1}}],[\"会导致activating\",{\"1\":{\"49\":1}}],[\"会分两种情况\",{\"1\":{\"97\":1}}],[\"会被转交\",{\"1\":{\"217\":1}}],[\"会被顺序执行\",{\"1\":{\"96\":1}}],[\"会被强行终止\",{\"1\":{\"49\":1}}],[\"会和adb冲突\",{\"1\":{\"91\":1}}],[\"会带有本地路径\",{\"1\":{\"44\":1}}],[\"会给你创建两个\",{\"1\":{\"32\":1}}],[\">|\",{\"1\":{\"424\":1,\"461\":1}}],[\">=\",{\"1\":{\"412\":1,\"424\":5,\"425\":8,\"428\":1,\"440\":2,\"483\":1,\"489\":1,\"493\":1}}],[\">>\",{\"1\":{\"367\":1,\"368\":1,\"412\":1,\"428\":1,\"493\":1}}],[\">hiroshi\",{\"1\":{\"233\":1}}],[\">excite<\",{\"1\":{\"134\":1}}],[\">jp\",{\"1\":{\"134\":1}}],[\">us\",{\"1\":{\"134\":1}}],[\">gmw<\",{\"1\":{\"134\":1}}],[\">people<\",{\"1\":{\"134\":1}}],[\">$\",{\"1\":{\"134\":1,\"232\":1}}],[\">\",{\"1\":{\"44\":2,\"286\":2,\"397\":1,\"412\":1,\"418\":4,\"425\":1,\"428\":3,\"440\":1,\"447\":1,\"481\":1,\"488\":1,\"493\":2,\"494\":3,\"495\":1}}],[\"生成汇编代码\",{\"1\":{\"494\":2}}],[\"生成了如下的汇编代码\",{\"1\":{\"490\":1}}],[\"生成一个同名的函数\",{\"1\":{\"438\":1}}],[\"生成一棵语法树\",{\"1\":{\"396\":1}}],[\"生成实例\",{\"2\":{\"141\":1,\"182\":1,\"316\":1,\"340\":1}}],[\"生成\",{\"1\":{\"44\":1,\"319\":1}}],[\"生活记录等非技术类文章\",{\"1\":{\"2\":1}}],[\"唯一特殊的地方是\",{\"1\":{\"470\":1}}],[\"唯一\",{\"1\":{\"55\":4,\"71\":4}}],[\"唯一的缺点就是类型名难写\",{\"1\":{\"41\":1}}],[\"唯独你没懂\",{\"0\":{\"30\":1},\"1\":{\"29\":1}}],[\"将参数出栈\",{\"1\":{\"477\":2}}],[\"将运算符\",{\"1\":{\"477\":1}}],[\"将它改成\",{\"1\":{\"447\":1}}],[\"将它们加入符号表\",{\"1\":{\"429\":1}}],[\"将对应地址中的整数载入\",{\"1\":{\"403\":1}}],[\"将对应地址中的字符载入\",{\"1\":{\"403\":1}}],[\"将\",{\"1\":{\"403\":3,\"420\":2,\"477\":1}}],[\"将语法树转化成目标代码\",{\"1\":{\"396\":1}}],[\"将词法分析得到的标记流\",{\"1\":{\"396\":1}}],[\"将来对数据结构的改良就会变得非常困难\",{\"1\":{\"383\":1}}],[\"将数据结构与操作分离\",{\"1\":{\"374\":1}}],[\"将通用的算法结构放在父类中\",{\"1\":{\"366\":1}}],[\"将状态迁移交给\",{\"1\":{\"348\":2}}],[\"将依赖于状态的处理分散在每个\",{\"1\":{\"348\":1}}],[\"将这些逻辑集中在中介者类中是更明智的选择\",{\"1\":{\"278\":1}}],[\"将共享对象存储在一个全局的集合中\",{\"1\":{\"250\":1}}],[\"将命令对象压入栈中\",{\"1\":{\"196\":1}}],[\"将类的这两个层次结构分离开有利于独立地对它们进行扩展\",{\"1\":{\"167\":1}}],[\"将现有类的接口转换为所需的接口\",{\"1\":{\"144\":1}}],[\"将具体实现传递给高层模块\",{\"1\":{\"124\":1}}],[\"将不同的算法封装在独立的类中\",{\"1\":{\"356\":1}}],[\"将不同的功能模块分开\",{\"1\":{\"120\":1}}],[\"将不同的职责分离到不同的类中\",{\"1\":{\"120\":2}}],[\"将下载的工具解压后得到的两个\",{\"1\":{\"106\":1}}],[\"将其称为新的乘法运算规则\",{\"1\":{\"73\":1}}],[\"将其称为新的加法运算规则\",{\"1\":{\"57\":1}}],[\"将模数直接包含在类型中\",{\"1\":{\"41\":1}}],[\"将成名\",{\"1\":{\"3\":1}}],[\"泛型编程\",{\"0\":{\"41\":1}}],[\"泛型与\",{\"0\":{\"36\":1}}],[\"并执行\",{\"1\":{\"496\":1}}],[\"并根据它们类型使用\",{\"1\":{\"484\":1}}],[\"并直接修改\",{\"1\":{\"482\":1}}],[\"并将之前的\",{\"1\":{\"477\":1}}],[\"并将保存在\",{\"1\":{\"459\":1}}],[\"并将被观察对象自身作为参数传递\",{\"1\":{\"304\":1}}],[\"并实现其中解析变量定义部分\",{\"1\":{\"444\":1}}],[\"并实现它们定义的抽象方法\",{\"1\":{\"137\":1}}],[\"并用它来实现了四则运算的语法分析器\",{\"1\":{\"441\":1}}],[\"并用它完成一个基本的四则运算的语法分析器\",{\"1\":{\"434\":1}}],[\"并不作为语法的一部分\",{\"1\":{\"421\":1}}],[\"并不是直接处理\",{\"1\":{\"400\":1}}],[\"并不是说是没写过编译器就不是好程序员\",{\"1\":{\"388\":1}}],[\"并退出整个程序\",{\"1\":{\"421\":1}}],[\"并仿照\",{\"1\":{\"415\":1}}],[\"并输出\",{\"1\":{\"397\":1}}],[\"并把对各元素的处理交给访问者类\",{\"1\":{\"373\":1}}],[\"并以此将复杂的程序分解开来\",{\"1\":{\"346\":1}}],[\"并为每一种具体的状态都定义一个相应的类\",{\"1\":{\"346\":1}}],[\"并提前为它们赋予必要的信息\",{\"1\":{\"429\":1}}],[\"并提供一个全局访问点\",{\"1\":{\"332\":1}}],[\"并提高应用程序的效率\",{\"1\":{\"244\":1}}],[\"并恢复状态\",{\"1\":{\"292\":1}}],[\"并定义一个解释器来解释该语言中的句子\",{\"1\":{\"259\":1}}],[\"并嫌弃cpp中没有interface\",{\"1\":{\"255\":1}}],[\"并确保这个集合在程序的整个生命周期内都存在\",{\"1\":{\"250\":1}}],[\"并在所有的\",{\"1\":{\"350\":1,\"382\":1}}],[\"并在适当的时候清理过期的\",{\"1\":{\"291\":1}}],[\"并在实际项目中灵活运用它们\",{\"1\":{\"227\":1}}],[\"并在增加需求时尽量不修改已有的类\",{\"1\":{\"227\":1}}],[\"并使用它们来增加这个新功能\",{\"1\":{\"159\":1}}],[\"并点击激活\",{\"1\":{\"106\":1}}],[\"并回车\",{\"1\":{\"106\":2}}],[\"并没有保证\",{\"1\":{\"96\":1}}],[\"并且它的结果是\",{\"1\":{\"480\":1}}],[\"并且它用很少的代码就完成了一个功能相当完善的\",{\"1\":{\"390\":1}}],[\"并且三条指令写来比较麻烦且浪费空间\",{\"1\":{\"410\":1}}],[\"并且我们也只有一个寄存器\",{\"1\":{\"404\":1}}],[\"并且最重要的是\",{\"1\":{\"389\":1}}],[\"并且可以扩展或重写这些行为和属性\",{\"1\":{\"223\":1}}],[\"并且协程切换并不是系统态抢占式\",{\"1\":{\"96\":1}}],[\"并且会非常频繁地进行切换\",{\"1\":{\"95\":1}}],[\"并且如果要对多个模数取模\",{\"1\":{\"40\":1}}],[\"并且如果编译器没有任何优化\",{\"1\":{\"40\":1}}],[\"并发异步编程之争\",{\"0\":{\"93\":1}}],[\"并添加以下内容\",{\"1\":{\"48\":1}}],[\"并自动重载docker\",{\"1\":{\"26\":1}}],[\"第二个参数放在\",{\"1\":{\"412\":1}}],[\"第二种\",{\"0\":{\"40\":1}}],[\"第一个参数放在栈顶\",{\"1\":{\"412\":1}}],[\"第一篇完全没有正题相关的内容也是希望你能有所心理准备再开始学习\",{\"1\":{\"391\":1}}],[\"第一种策略是\",{\"1\":{\"357\":1}}],[\"第一种\",{\"0\":{\"39\":1}}],[\"第三个字符的颜色是红色的\",{\"1\":{\"248\":1}}],[\"第\",{\"1\":{\"156\":1,\"348\":1}}],[\"不知道你是否有同感\",{\"1\":{\"501\":1}}],[\"不指定的话一般认为是第一个出现的非终结符\",{\"1\":{\"437\":1}}],[\"不断地对非终结符进行分解\",{\"1\":{\"435\":1}}],[\"不识别\",{\"1\":{\"421\":1}}],[\"不只是\",{\"1\":{\"347\":1}}],[\"不能用一般的方法解决时\",{\"1\":{\"346\":1}}],[\"不能因为方法的调用顺序发生改变而产生问题\",{\"1\":{\"302\":1}}],[\"不仅要考虑函数的地址\",{\"1\":{\"407\":1}}],[\"不仅会增加代码的复杂性\",{\"1\":{\"278\":1}}],[\"不仅如此\",{\"1\":{\"274\":1}}],[\"不同类型的集合可以使用相同的遍历方式\",{\"1\":{\"265\":1}}],[\"不同的只是赋值的信息\",{\"1\":{\"429\":1}}],[\"不同的表示\",{\"1\":{\"173\":1}}],[\"不同的自然数后继不同\",{\"1\":{\"51\":1}}],[\"不要让被共享的实例被垃圾回收器回收了\",{\"0\":{\"250\":1}}],[\"不要使用类继承\",{\"1\":{\"126\":1}}],[\"不论在什么情况下都不会改变的信息\",{\"1\":{\"249\":1}}],[\"不管怎样\",{\"1\":{\"248\":1}}],[\"不管是香草味\",{\"1\":{\"219\":1}}],[\"不需要修改现有代码\",{\"1\":{\"238\":1}}],[\"不过据说c\",{\"1\":{\"392\":1}}],[\"不过这样做的话\",{\"1\":{\"348\":1}}],[\"不过这并不是什么问题\",{\"1\":{\"278\":1}}],[\"不过却需要我们特别注意\",{\"1\":{\"347\":1}}],[\"不过\",{\"1\":{\"180\":1,\"216\":1,\"302\":1,\"348\":1,\"351\":1,\"392\":1}}],[\"不必对\",{\"1\":{\"167\":1}}],[\"不应当在\",{\"1\":{\"249\":1}}],[\"不应当共享的信息被称作\",{\"1\":{\"249\":1}}],[\"不应强迫用户依赖他们不使用的接口\",{\"1\":{\"122\":1}}],[\"不应引入违反父类预期的新行为\",{\"1\":{\"114\":1}}],[\"不符合单一职责原则的类\",{\"1\":{\"121\":1}}],[\"不会出现强制转换后的问题\",{\"1\":{\"414\":1}}],[\"不会存在自相矛盾的状态\",{\"1\":{\"349\":1}}],[\"不会自相矛盾\",{\"0\":{\"349\":1}}],[\"不会影响其他功能\",{\"1\":{\"111\":1}}],[\"不会触发ondidclosetextdocument事件\",{\"1\":{\"49\":1}}],[\"不用外部工具\",{\"1\":{\"390\":1}}],[\"不用改变框架代码\",{\"1\":{\"218\":1}}],[\"不用类也能封装数据和方法\",{\"1\":{\"102\":1}}],[\"不用操心运算时忘记取模\",{\"1\":{\"41\":1}}],[\"不支持\",{\"1\":{\"427\":1}}],[\"不支持动画\",{\"1\":{\"101\":1}}],[\"不支持导出pptx\",{\"1\":{\"100\":1}}],[\"不易写出错的代码\",{\"1\":{\"95\":1}}],[\"不易检验\",{\"1\":{\"39\":1,\"40\":1}}],[\"不加锁的话\",{\"1\":{\"94\":1}}],[\"不妨试试这些自动生成工具\",{\"1\":{\"502\":1}}],[\"不妨记作\",{\"1\":{\"76\":1}}],[\"不妨设\",{\"1\":{\"76\":1}}],[\"不是任何自然数的后继\",{\"1\":{\"51\":1}}],[\"不推荐\",{\"1\":{\"44\":1}}],[\"不推荐运用这种方法\",{\"1\":{\"39\":1}}],[\"不方便输出结果\",{\"1\":{\"37\":1}}],[\"三目运算符\",{\"0\":{\"491\":1},\"1\":{\"476\":1}}],[\"三点水\",{\"1\":{\"387\":1}}],[\"三是式子太长\",{\"1\":{\"39\":1}}],[\"三国杀\",{\"1\":{\"3\":1}}],[\"清晰明了\",{\"1\":{\"39\":1}}],[\"清河公主\",{\"1\":{\"3\":1}}],[\"要容易\",{\"1\":{\"503\":1}}],[\"要根据它的类型放大\",{\"1\":{\"493\":1}}],[\"要理解函数定义的解析过程\",{\"1\":{\"463\":1}}],[\"要理解这些寄存器的作用\",{\"1\":{\"401\":1}}],[\"要是深入词法分析器\",{\"1\":{\"418\":1}}],[\"要引入的命令有\",{\"1\":{\"407\":1}}],[\"要执行的计算机指令\",{\"1\":{\"401\":1}}],[\"要执行的具体操作\",{\"1\":{\"195\":1}}],[\"要么就是借助了自动生成的工具\",{\"1\":{\"390\":1}}],[\"要么是因为这道题目直接考察了模的性质和运用\",{\"1\":{\"37\":1}}],[\"要么是因为答案是浮点数\",{\"1\":{\"37\":1}}],[\"要求栈顶存放地址\",{\"1\":{\"403\":2}}],[\"要求子类去实现抽象方法\",{\"1\":{\"370\":1}}],[\"要求\",{\"1\":{\"183\":1,\"403\":2}}],[\"要同时进行多件事情本来就需要正在运行的让出处理器\",{\"1\":{\"93\":1}}],[\"要部署的\",{\"1\":{\"15\":1}}],[\"背景介绍\",{\"0\":{\"37\":1}}],[\"有了bnf方法后\",{\"1\":{\"440\":1}}],[\"有一个或多个标记是以同样的字符开头的\",{\"1\":{\"427\":1}}],[\"有一次在\",{\"1\":{\"390\":1}}],[\"有用\",{\"1\":{\"413\":1}}],[\"有点类似于\",{\"1\":{\"403\":1}}],[\"有时\",{\"1\":{\"348\":1}}],[\"有必要划分代理人和本人吗\",{\"0\":{\"323\":1}}],[\"有些工作无法自己亲自完成\",{\"1\":{\"318\":1}}],[\"有些情况下这是坏事\",{\"1\":{\"248\":1}}],[\"有些情况下这是好事\",{\"1\":{\"248\":1}}],[\"有些事情是可以在设计阶段决定的\",{\"1\":{\"179\":1}}],[\"有些事情是强求不来的\",{\"1\":{\"3\":1}}],[\"有两种方式实现\",{\"1\":{\"147\":1}}],[\"有什么区别呢\",{\"1\":{\"94\":1}}],[\"有任意两个自然数\",{\"1\":{\"66\":1}}],[\"有\",{\"1\":{\"54\":4,\"55\":4,\"57\":3,\"58\":2,\"59\":1,\"64\":2,\"65\":2,\"67\":1,\"70\":3,\"71\":3,\"73\":3,\"74\":1,\"75\":2,\"76\":3,\"78\":1,\"79\":1}}],[\"有大量的题目要求对一些数字取模\",{\"1\":{\"36\":1}}],[\"中我们介绍过内置函数的支持\",{\"1\":{\"481\":1}}],[\"中即可\",{\"1\":{\"479\":1}}],[\"中存放的是参数的位置\",{\"1\":{\"460\":1}}],[\"中存放地址\",{\"1\":{\"403\":2}}],[\"中存放如指针\",{\"1\":{\"400\":1}}],[\"中间代码的表示\",{\"1\":{\"389\":1}}],[\"中注册有多个\",{\"1\":{\"302\":1}}],[\"中保存这个信息\",{\"1\":{\"249\":1}}],[\"中的值执行减\",{\"1\":{\"494\":1}}],[\"中的信息还原\",{\"1\":{\"459\":1}}],[\"中的全局变量不同\",{\"1\":{\"458\":1}}],[\"中的位置\",{\"1\":{\"457\":1}}],[\"中的位置变化而发生变化\",{\"1\":{\"249\":1}}],[\"中的一种\",{\"1\":{\"436\":1}}],[\"中的\",{\"1\":{\"403\":1,\"427\":1}}],[\"中的数据作为整数存放入地址中\",{\"1\":{\"403\":1}}],[\"中的数据作为字符存放入地址中\",{\"1\":{\"403\":1}}],[\"中的内存\",{\"1\":{\"400\":1}}],[\"中的书籍\",{\"1\":{\"268\":2}}],[\"中的哪个地方都不会改变\",{\"1\":{\"249\":1}}],[\"中是第几个字符这种信息会根据\",{\"1\":{\"249\":1}}],[\"中增加多少个功能\",{\"1\":{\"167\":1}}],[\"中增加新功能时\",{\"1\":{\"155\":1}}],[\"中增加\",{\"1\":{\"138\":1}}],[\"中文官网\",{\"1\":{\"106\":1}}],[\"中\",{\"1\":{\"36\":1,\"156\":1,\"250\":1,\"403\":6,\"404\":1,\"407\":1,\"412\":2,\"460\":1,\"483\":1,\"490\":1}}],[\"技术分享等内容\",{\"1\":{\"35\":1}}],[\"技术\",{\"0\":{\"35\":1}}],[\"工作所需的条件\",{\"0\":{\"383\":1}}],[\"工作流程\",{\"0\":{\"34\":1}}],[\"工厂方法\",{\"2\":{\"242\":1}}],[\"工厂模式\",{\"1\":{\"124\":1}}],[\"工程化\",{\"1\":{\"227\":1}}],[\"工具\",{\"0\":{\"107\":1}}],[\"工具下载\",{\"1\":{\"106\":1}}],[\"工具使用\",{\"1\":{\"35\":1}}],[\"工具等资源\",{\"1\":{\"5\":1}}],[\"去处理\",{\"1\":{\"217\":1}}],[\"去手动异步执行另一个协程\",{\"1\":{\"96\":1}}],[\"去\",{\"1\":{\"33\":1}}],[\"打开\",{\"1\":{\"33\":1}}],[\"在后期解析语句和表达式时\",{\"1\":{\"501\":1}}],[\"在学习\",{\"1\":{\"495\":1}}],[\"在执行自增自减后\",{\"1\":{\"494\":1}}],[\"在执行命令前保存对象的快照\",{\"1\":{\"196\":1}}],[\"在作指针减法时\",{\"1\":{\"493\":1}}],[\"在解析\",{\"1\":{\"490\":1}}],[\"在解析的过程中\",{\"1\":{\"458\":1}}],[\"在前文的一元运算符处理中也用到了这一点\",{\"1\":{\"489\":1}}],[\"在计算一个运算符\",{\"1\":{\"477\":1}}],[\"在函数体内局部变量就会覆盖全局变量\",{\"1\":{\"459\":1}}],[\"在函数内访问它们是通过\",{\"1\":{\"458\":1}}],[\"在思考这个问题之前\",{\"1\":{\"458\":1}}],[\"在main函数中进行初始化如下\",{\"1\":{\"429\":1}}],[\"在main函数中加入初始化代码\",{\"1\":{\"400\":1}}],[\"在语法分析前将关键字提前加入符号表\",{\"1\":{\"429\":1}}],[\"在我们的编译器中共识别\",{\"1\":{\"467\":1}}],[\"在我们的\",{\"1\":{\"427\":1}}],[\"在我看来\",{\"1\":{\"388\":1}}],[\"在分析时\",{\"1\":{\"426\":2}}],[\"在全局中添加如下定义\",{\"1\":{\"420\":1}}],[\"在全局中加入如下定义\",{\"1\":{\"401\":1}}],[\"在代码的开头\",{\"1\":{\"414\":1}}],[\"在将调用子函数时压入栈中的数据清除\",{\"1\":{\"409\":1}}],[\"在调用函数时会使用到它\",{\"1\":{\"401\":1}}],[\"在调用那个方法之前需要先在这个类中注册一下\",{\"1\":{\"230\":1}}],[\"在调用那个类之前需要先调用这个类\",{\"1\":{\"230\":1}}],[\"在写编译器的时候会遇到两个主要问题\",{\"1\":{\"391\":1}}],[\"在开始进入正题之前\",{\"1\":{\"387\":1}}],[\"在练习题中\",{\"1\":{\"379\":1}}],[\"在父类中\",{\"1\":{\"370\":1}}],[\"在父类中定义处理流程的框架\",{\"1\":{\"365\":1}}],[\"在子类中重写父类的方法可以改变程序的行为\",{\"1\":{\"370\":1}}],[\"在子类中可以使用父类中定义的方法\",{\"1\":{\"370\":1}}],[\"在子类中实现具体处理\",{\"1\":{\"365\":1}}],[\"在内存容量少的运行环境中可以使用\",{\"1\":{\"361\":1}}],[\"在程序运行中也可以切换角色\",{\"1\":{\"361\":1}}],[\"在运行时检测出问题并不难\",{\"1\":{\"350\":1}}],[\"在修改状态迁移部分的代码时\",{\"1\":{\"350\":1}}],[\"在不修改现有代码的前提下进行扩展\",{\"1\":{\"380\":1}}],[\"在不使用\",{\"1\":{\"346\":1}}],[\"在不改变被装饰物的前提下增加功能\",{\"0\":{\"217\":1}}],[\"在本章的警报系统的示例程序中\",{\"1\":{\"346\":1}}],[\"在本节中\",{\"1\":{\"266\":1}}],[\"在头脑中\",{\"1\":{\"346\":1}}],[\"在多线程环境中\",{\"1\":{\"337\":1}}],[\"在示例程序的\",{\"1\":{\"302\":1}}],[\"在示例程序中\",{\"1\":{\"168\":1,\"216\":2,\"249\":2,\"251\":1,\"280\":1,\"302\":1,\"348\":2,\"349\":1,\"379\":1,\"383\":1}}],[\"在观察者模式中\",{\"1\":{\"301\":1,\"304\":1}}],[\"在图形用户界面\",{\"1\":{\"297\":1}}],[\"在实际调用函数时\",{\"1\":{\"407\":1}}],[\"在实际应用中\",{\"1\":{\"290\":1}}],[\"在实际开发中\",{\"1\":{\"227\":1}}],[\"在某些情况下\",{\"1\":{\"269\":1,\"291\":1,\"305\":1,\"322\":1}}],[\"在上面的代码中\",{\"1\":{\"268\":1,\"338\":1}}],[\"在操作系统中\",{\"1\":{\"251\":1}}],[\"在使用模式时需要注意应当是谁来管理状态迁移\",{\"1\":{\"348\":1}}],[\"在使用\",{\"1\":{\"250\":1}}],[\"在有垃圾回收的语言中要注意共享内存未被使用时被\",{\"1\":{\"250\":1}}],[\"在决定\",{\"1\":{\"248\":1}}],[\"在共享实例时应当注意什么呢\",{\"1\":{\"248\":1}}],[\"在需要生成大量细粒度对象的场景中\",{\"1\":{\"244\":1}}],[\"在委托模式中\",{\"1\":{\"224\":1}}],[\"在文件系统中\",{\"1\":{\"201\":1}}],[\"在命令模式中\",{\"1\":{\"195\":1}}],[\"在这个前提下\",{\"1\":{\"418\":1}}],[\"在这个示例程序中\",{\"1\":{\"278\":1,\"356\":1}}],[\"在这个示例中\",{\"1\":{\"185\":1,\"211\":1,\"231\":1,\"286\":1,\"298\":1}}],[\"在这种情况下\",{\"1\":{\"348\":1}}],[\"在这种要求之下\",{\"1\":{\"38\":1}}],[\"在其内部调用了类的特有的方法\",{\"1\":{\"180\":1}}],[\"在判断到底应该修改哪个类时\",{\"1\":{\"180\":1}}],[\"在编程时\",{\"1\":{\"180\":1,\"248\":1,\"346\":1}}],[\"在设计类时\",{\"1\":{\"380\":1}}],[\"在设计\",{\"1\":{\"302\":1}}],[\"在设计模式中\",{\"1\":{\"301\":1,\"323\":1}}],[\"在设计软件时\",{\"1\":{\"179\":1}}],[\"在设计一个系统模块的时候\",{\"1\":{\"110\":1}}],[\"在面向对象编程中\",{\"1\":{\"178\":1,\"223\":1,\"318\":1}}],[\"在桥的哪一侧\",{\"1\":{\"159\":1}}],[\"在软件开发中\",{\"1\":{\"144\":1}}],[\"在发现类有多个职责时\",{\"1\":{\"120\":1}}],[\"在所有线程相互独立且不会操作同一资源的模式下\",{\"1\":{\"94\":1}}],[\"在python编程领域\",{\"1\":{\"93\":1}}],[\"在明确证明了自然数乘法运算的良好性质\",{\"1\":{\"72\":1}}],[\"在明确证明了自然数加法运算的良好性质\",{\"1\":{\"56\":1}}],[\"在考察序的性质之前\",{\"1\":{\"62\":1}}],[\"在此承认次假设的基础之上\",{\"1\":{\"50\":1}}],[\"在项目根目录下创建\",{\"1\":{\"48\":1}}],[\"在\",{\"1\":{\"32\":1,\"36\":1,\"137\":1,\"138\":2,\"156\":1,\"159\":1,\"216\":1,\"217\":1,\"237\":1,\"249\":1,\"289\":1,\"292\":1,\"346\":1,\"347\":3,\"350\":2,\"351\":3,\"373\":1,\"378\":1,\"383\":1,\"401\":1,\"403\":1,\"404\":1,\"414\":1,\"460\":1,\"493\":1}}],[\"在准备好前端项目及安装相应环境后\",{\"1\":{\"16\":1}}],[\"的表示方法\",{\"1\":{\"503\":1}}],[\"的表达式\",{\"1\":{\"490\":1}}],[\"的地址两次\",{\"1\":{\"488\":1}}],[\"的优先级最高\",{\"1\":{\"489\":1}}],[\"的优先级最低\",{\"1\":{\"489\":1}}],[\"的优先级高于\",{\"1\":{\"488\":1}}],[\"的优先级就要高于\",{\"1\":{\"420\":1}}],[\"的指针取值\",{\"1\":{\"483\":1}}],[\"的指令集\",{\"1\":{\"402\":1}}],[\"的形式\",{\"1\":{\"481\":1}}],[\"的形式返回\",{\"1\":{\"426\":1}}],[\"的运算符\",{\"1\":{\"477\":1}}],[\"的运算结果为\",{\"1\":{\"53\":1,\"69\":1}}],[\"的结果\",{\"1\":{\"477\":1}}],[\"的结果是否唯一\",{\"1\":{\"55\":1,\"71\":1}}],[\"的位置\",{\"1\":{\"460\":1,\"468\":1}}],[\"的产生式转换成函数的过程\",{\"1\":{\"452\":1}}],[\"的具体表示方法后就不难理解了\",{\"1\":{\"452\":1}}],[\"的扩展\",{\"1\":{\"445\":1}}],[\"的概念了\",{\"1\":{\"438\":1}}],[\"的概念\",{\"1\":{\"427\":1,\"431\":1}}],[\"的注释\",{\"1\":{\"427\":1}}],[\"的语法\",{\"1\":{\"426\":1}}],[\"的转义符\",{\"1\":{\"426\":1}}],[\"的源代码的\",{\"1\":{\"425\":1}}],[\"的字符个数\",{\"1\":{\"427\":1}}],[\"的字符\",{\"1\":{\"421\":1}}],[\"的字体数据属于\",{\"1\":{\"249\":1}}],[\"的字体数据不论在\",{\"1\":{\"249\":1}}],[\"的功能包含了\",{\"1\":{\"410\":1}}],[\"的功能\",{\"1\":{\"408\":1}}],[\"的功能是抽象的\",{\"1\":{\"159\":1}}],[\"的子函数\",{\"1\":{\"407\":1}}],[\"的作用是跳转到地址为\",{\"1\":{\"407\":1}}],[\"的作用是将值或寄存器\",{\"1\":{\"404\":1}}],[\"的作用是退栈\",{\"1\":{\"403\":1}}],[\"的值\",{\"1\":{\"405\":1,\"482\":1,\"493\":1}}],[\"的值放入栈中\",{\"1\":{\"404\":1}}],[\"的值放到栈上\",{\"1\":{\"403\":1}}],[\"的值减小\",{\"1\":{\"401\":1}}],[\"的内容放在\",{\"1\":{\"403\":1}}],[\"的内部状态不会被外部直接修改\",{\"1\":{\"289\":1}}],[\"的函数\",{\"1\":{\"397\":1}}],[\"的学生顶多学到语法分析就结束了\",{\"1\":{\"389\":1}}],[\"的课程后\",{\"1\":{\"389\":1}}],[\"的意思\",{\"1\":{\"380\":2}}],[\"的意思是\",{\"1\":{\"249\":2}}],[\"的算法\",{\"1\":{\"361\":1}}],[\"的使用方式是不一样的\",{\"1\":{\"351\":1}}],[\"的代码完全是手工实现的\",{\"1\":{\"390\":1}}],[\"的代码\",{\"1\":{\"389\":1}}],[\"的代码即可\",{\"1\":{\"350\":1}}],[\"的代码后才能理解\",{\"1\":{\"180\":1}}],[\"的一个问题\",{\"1\":{\"421\":1}}],[\"的一个命题\",{\"1\":{\"51\":1}}],[\"的一览表\",{\"1\":{\"348\":1}}],[\"的信息集中在了一个类中\",{\"1\":{\"348\":1}}],[\"的实质就是两个运算符在抢参数\",{\"1\":{\"477\":1}}],[\"的实际运行顺序是\",{\"1\":{\"477\":1}}],[\"的实现方法\",{\"1\":{\"347\":1}}],[\"的实例\",{\"1\":{\"351\":1}}],[\"的实例在\",{\"1\":{\"249\":1}}],[\"的实例作为参数传递给\",{\"1\":{\"168\":1}}],[\"的行为会对被观察对象产生影响时\",{\"0\":{\"303\":1}}],[\"的顺序\",{\"0\":{\"302\":1}}],[\"的栈\",{\"1\":{\"292\":1}}],[\"的有效期限\",{\"1\":{\"291\":1}}],[\"的有效期限取决于具体的应用场景\",{\"1\":{\"291\":1}}],[\"的有效期限是多久\",{\"0\":{\"291\":1}}],[\"的交互\",{\"1\":{\"278\":1}}],[\"的原因\",{\"1\":{\"278\":1}}],[\"的问题\",{\"1\":{\"250\":1}}],[\"的时候\",{\"1\":{\"230\":1}}],[\"的透明性\",{\"0\":{\"216\":1},\"1\":{\"216\":1}}],[\"的层次结构\",{\"1\":{\"201\":1}}],[\"的情况\",{\"1\":{\"183\":1}}],[\"的\",{\"1\":{\"167\":1,\"216\":1,\"302\":4,\"403\":2}}],[\"的缩写\",{\"1\":{\"159\":1}}],[\"的最上层\",{\"1\":{\"159\":1}}],[\"的类型\",{\"1\":{\"483\":1}}],[\"的类来访问数据结构中的元素\",{\"1\":{\"373\":1}}],[\"的类\",{\"1\":{\"159\":3}}],[\"的操作等价于\",{\"1\":{\"495\":1}}],[\"的操作\",{\"1\":{\"96\":1,\"488\":1}}],[\"的入度无规定\",{\"1\":{\"83\":1}}],[\"的假设矛盾\",{\"1\":{\"79\":1}}],[\"的和\",{\"1\":{\"63\":1}}],[\"的任意性\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"的性质和\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"的后继\",{\"1\":{\"51\":1,\"76\":1}}],[\"的话\",{\"1\":{\"40\":1}}],[\"的开发过程了\",{\"1\":{\"32\":1}}],[\"的开发环境去\",{\"1\":{\"32\":1}}],[\"的环境下\",{\"1\":{\"32\":1}}],[\"的图形界面\",{\"1\":{\"32\":1}}],[\"发现是\",{\"1\":{\"438\":1}}],[\"发送者无需知道哪个对象会处理请求\",{\"1\":{\"184\":1,\"185\":1}}],[\"发生变化的代码只有\",{\"1\":{\"168\":1}}],[\"发行版\",{\"1\":{\"32\":1}}],[\"发布\",{\"1\":{\"30\":2}}],[\"下一条\",{\"1\":{\"401\":1,\"405\":1}}],[\"下一章中我们将讲解语句的解析\",{\"1\":{\"463\":1}}],[\"下一章中我们将介绍如何解析函数的定义\",{\"1\":{\"452\":1}}],[\"下一章中\",{\"1\":{\"397\":1,\"431\":1}}],[\"下一个人如果可以自己处理\",{\"1\":{\"183\":1}}],[\"下一步\",{\"1\":{\"106\":1}}],[\"下午好\",{\"1\":{\"174\":1,\"175\":1}}],[\"下面以加法为例\",{\"1\":{\"493\":1}}],[\"下面以式子\",{\"1\":{\"38\":1}}],[\"下面是\",{\"1\":{\"447\":1}}],[\"下面是相应的源代码\",{\"1\":{\"397\":1}}],[\"下面的例子\",{\"1\":{\"407\":1}}],[\"下面我们逐一解释\",{\"1\":{\"467\":1}}],[\"下面我们用我们的汇编写一小段程序\",{\"1\":{\"414\":1}}],[\"下面我们来看一段使用了\",{\"1\":{\"357\":1}}],[\"下面我们试着通过删除公理的方法来寻找反例\",{\"1\":{\"80\":1}}],[\"下面我们需要证明对于任意两个自然数\",{\"1\":{\"53\":1,\"69\":1}}],[\"下面我将阐述为什么每条公理都是必须的\",{\"1\":{\"77\":1}}],[\"下面证明乘法消去律\",{\"1\":{\"76\":1}}],[\"下面证明乘法结合律\",{\"1\":{\"75\":1}}],[\"下面证明乘法分配律\",{\"1\":{\"74\":1}}],[\"下面证明乘法交换律\",{\"1\":{\"73\":1}}],[\"下面证明加法消去律\",{\"1\":{\"59\":1}}],[\"下面证明加法结合律\",{\"1\":{\"58\":1}}],[\"下面证明加法交换律\",{\"1\":{\"57\":1}}],[\"下文用\",{\"1\":{\"51\":1}}],[\"下的实践是\",{\"1\":{\"32\":1}}],[\"下载错误查看\",{\"1\":{\"9\":1}}],[\"等工具\",{\"1\":{\"503\":1}}],[\"等工具来编写\",{\"1\":{\"392\":1}}],[\"等指令\",{\"1\":{\"403\":1}}],[\"等等知识\",{\"1\":{\"502\":1}}],[\"等等\",{\"1\":{\"389\":1,\"420\":1,\"481\":1}}],[\"等待显示序列号\",{\"1\":{\"106\":1}}],[\"等待提示\",{\"1\":{\"106\":1}}],[\"等函数\",{\"1\":{\"41\":1}}],[\"等\",{\"1\":{\"32\":1,\"392\":1,\"420\":1,\"424\":1,\"426\":1,\"429\":1}}],[\"服务本体\",{\"1\":{\"32\":1}}],[\"0xffff\",{\"1\":{\"486\":1}}],[\"0x123\",{\"1\":{\"425\":1}}],[\"017\",{\"1\":{\"425\":1}}],[\"00\",{\"1\":{\"344\":24}}],[\"00`\",{\"1\":{\"343\":2}}],[\"0<=x\",{\"1\":{\"41\":1}}],[\"0\",{\"0\":{\"387\":1},\"1\":{\"30\":1,\"94\":1,\"95\":1,\"96\":17,\"160\":1,\"164\":1,\"185\":1,\"186\":1,\"192\":1,\"193\":2,\"203\":1,\"207\":3,\"213\":4,\"245\":1,\"260\":2,\"267\":2,\"286\":2,\"298\":3,\"299\":2,\"319\":1,\"334\":1,\"338\":1,\"343\":1,\"357\":14,\"367\":2,\"375\":2,\"376\":3,\"387\":2,\"395\":1,\"397\":7,\"398\":1,\"400\":3,\"401\":2,\"403\":1,\"413\":1,\"414\":2,\"416\":1,\"423\":1,\"424\":1,\"425\":11,\"426\":1,\"427\":1,\"434\":1,\"440\":8,\"444\":1,\"447\":1,\"449\":1,\"455\":1,\"460\":1,\"466\":1,\"476\":1,\"479\":2,\"481\":2,\"485\":4,\"487\":1,\"500\":1}}],[\"06\",{\"1\":{\"30\":2}}],[\"遵循开闭原则\",{\"1\":{\"212\":1}}],[\"遵循行为一致性\",{\"1\":{\"114\":1}}],[\"遵循契约\",{\"1\":{\"114\":1}}],[\"遵循单一职责原则\",{\"1\":{\"111\":1}}],[\"遵循\",{\"1\":{\"30\":1}}],[\"2|\",{\"1\":{\"477\":1}}],[\"2+3\",{\"1\":{\"477\":1}}],[\"2+3的值\",{\"1\":{\"477\":1}}],[\"2+\",{\"1\":{\"411\":2,\"458\":2}}],[\"2^32\",{\"1\":{\"400\":1}}],[\"24\",{\"1\":{\"343\":1}}],[\"26\",{\"1\":{\"299\":2}}],[\"264\",{\"1\":{\"186\":1}}],[\"256\",{\"1\":{\"397\":1,\"400\":1}}],[\"25\",{\"1\":{\"287\":1,\"299\":2}}],[\"22\",{\"1\":{\"246\":10,\"299\":2}}],[\"2222222222\",{\"1\":{\"246\":1}}],[\"222222\",{\"1\":{\"246\":1}}],[\"297\",{\"1\":{\"186\":1}}],[\"28\",{\"1\":{\"96\":1,\"299\":2}}],[\"2014\",{\"1\":{\"476\":1}}],[\"2016\",{\"1\":{\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"500\":1}}],[\"2015\",{\"1\":{\"395\":1,\"398\":1,\"416\":1}}],[\"2017\",{\"1\":{\"255\":1}}],[\"20\",{\"1\":{\"279\":1,\"298\":1,\"299\":2,\"414\":1,\"448\":1,\"477\":2}}],[\"20000\",{\"1\":{\"206\":1,\"207\":2,\"375\":1,\"376\":2}}],[\"200\",{\"1\":{\"185\":1,\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"208\",{\"1\":{\"93\":1,\"97\":1}}],[\"2024\",{\"1\":{\"30\":2}}],[\"2\",{\"1\":{\"32\":1,\"48\":1,\"95\":1,\"96\":3,\"185\":1,\"193\":2,\"245\":1,\"279\":1,\"286\":3,\"299\":2,\"357\":3,\"387\":1,\"395\":2,\"398\":17,\"407\":2,\"411\":2,\"413\":4,\"416\":3,\"417\":2,\"430\":1,\"434\":2,\"437\":2,\"444\":7,\"455\":7,\"458\":2,\"461\":1,\"466\":3,\"476\":14,\"477\":7,\"481\":1,\"500\":2}}],[\"231\",{\"1\":{\"186\":1,\"287\":1}}],[\"23\",{\"1\":{\"30\":2}}],[\"居然把路径藏在这里\",{\"0\":{\"30\":1},\"1\":{\"29\":1}}],[\"|add\",{\"1\":{\"493\":1}}],[\"|10\",{\"1\":{\"437\":1}}],[\"|9\",{\"1\":{\"437\":1}}],[\"|8\",{\"1\":{\"437\":1}}],[\"|5\",{\"1\":{\"437\":1}}],[\"|4\",{\"1\":{\"437\":1}}],[\"|<\",{\"1\":{\"424\":1,\"461\":1}}],[\"|token|hash|name|type|class|value|btype|bclass|bvalue|\",{\"1\":{\"424\":1}}],[\"|你好\",{\"1\":{\"368\":5}}],[\"||\",{\"1\":{\"214\":6,\"343\":1,\"400\":6,\"424\":5,\"425\":3,\"426\":1,\"428\":9,\"440\":1,\"461\":1,\"482\":1,\"484\":1,\"488\":1,\"490\":1,\"492\":2}}],[\"|+\",{\"1\":{\"214\":2,\"400\":3,\"477\":9}}],[\"|hello|\",{\"1\":{\"214\":1}}],[\"|hello\",{\"1\":{\"165\":7,\"368\":5}}],[\"|`\",{\"1\":{\"164\":1,\"367\":1}}],[\"|\",{\"0\":{\"30\":1},\"1\":{\"29\":1,\"165\":7,\"213\":2,\"214\":2,\"260\":9,\"334\":1,\"338\":1,\"368\":10,\"400\":4,\"411\":10,\"412\":1,\"418\":4,\"428\":3,\"436\":6,\"439\":5,\"445\":7,\"448\":2,\"456\":5,\"458\":9,\"459\":1,\"477\":12,\"493\":4}}],[\"踩坑记录\",{\"0\":{\"30\":1,\"31\":1},\"1\":{\"29\":1},\"2\":{\"46\":1}}],[\"续订泛域名证书\",{\"1\":{\"26\":1}}],[\"使我们能直接使用编译器\",{\"1\":{\"400\":1}}],[\"使代码更加简洁和可维护\",{\"1\":{\"342\":1}}],[\"使代码更易于维护和理解\",{\"1\":{\"173\":1}}],[\"使一个类的实例化延迟到其子类\",{\"1\":{\"237\":1}}],[\"使它们可以独立变化\",{\"1\":{\"153\":1}}],[\"使得代码更清晰\",{\"1\":{\"374\":1}}],[\"使得代码更加清晰\",{\"1\":{\"356\":1}}],[\"使得状态转换变得清晰且易于管理\",{\"1\":{\"342\":1}}],[\"使得客户端可以像使用本地对象一样使用远程对象\",{\"1\":{\"327\":1}}],[\"使得客户端代码更加简洁和易读\",{\"1\":{\"265\":1}}],[\"使得客户端代码可以更容易地使用子系统的功能\",{\"1\":{\"231\":1}}],[\"使得客户端代码不需要了解子系统的内部细节\",{\"1\":{\"230\":1}}],[\"使得对象的创建更加灵活\",{\"1\":{\"311\":1}}],[\"使得每一层只关注自己的职责\",{\"1\":{\"230\":1}}],[\"使得可以用不同的请求\",{\"1\":{\"191\":1}}],[\"使得在设计时可以决定构建的步骤和逻辑\",{\"1\":{\"179\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"173\":1}}],[\"使得系统功能模块相对独立\",{\"1\":{\"117\":1}}],[\"使得函数\",{\"1\":{\"95\":1}}],[\"使得一段时间内只有一个线程可以操作这个资源\",{\"1\":{\"94\":1}}],[\"使flask支持\",{\"0\":{\"25\":1}}],[\"使用了单例模式\",{\"1\":{\"357\":1}}],[\"使用了id卡`\",{\"1\":{\"239\":1}}],[\"使用状态迁移表非常有效\",{\"1\":{\"348\":1}}],[\"使用这种解决方法可以提高\",{\"1\":{\"348\":1}}],[\"使用代理可以显著提升处理速度\",{\"1\":{\"322\":1}}],[\"使用代理人来提升处理速度\",{\"0\":{\"322\":1}}],[\"使用迭代器模式有以下几个优点\",{\"1\":{\"265\":1}}],[\"使用解释器模式的原因包括\",{\"1\":{\"259\":1}}],[\"使用弱引用\",{\"1\":{\"250\":1}}],[\"使用队列数据结构保存执行的命令对象\",{\"1\":{\"196\":1}}],[\"使用栈数据结构保存执行的命令对象\",{\"1\":{\"196\":1}}],[\"使用此设计模式的理由\",{\"0\":{\"153\":1,\"201\":1,\"356\":1}}],[\"使用委托这种弱关联关系可以很方便地整体替换算法\",{\"1\":{\"360\":1}}],[\"使用委托\",{\"1\":{\"147\":1}}],[\"使用继承\",{\"1\":{\"147\":1}}],[\"使用继承的方式\",{\"1\":{\"128\":1}}],[\"使用抽象工厂模式\",{\"1\":{\"135\":1}}],[\"使用抽象类和接口\",{\"1\":{\"111\":1,\"114\":1}}],[\"使用多个专门的接口\",{\"1\":{\"129\":1}}],[\"使用多个专门的接口比使用单个通用接口要好得多\",{\"1\":{\"122\":1}}],[\"使用聚合\",{\"1\":{\"127\":1}}],[\"使用组合的方式\",{\"1\":{\"128\":1}}],[\"使用组合\",{\"1\":{\"127\":1}}],[\"使用依赖注入\",{\"1\":{\"125\":1}}],[\"使用工厂模式创建对象\",{\"1\":{\"124\":1}}],[\"使用接口和抽象类\",{\"1\":{\"124\":1}}],[\"使用门面模式\",{\"1\":{\"118\":1}}],[\"使用设计模式的目的是重用代码\",{\"1\":{\"227\":1}}],[\"使用设计模式\",{\"1\":{\"111\":1}}],[\"使用await关键字让出使用权\",{\"1\":{\"96\":1}}],[\"使用权\",{\"1\":{\"96\":1}}],[\"使用capacitor和ionic将vue项目迁移到mobile端\",{\"0\":{\"88\":1}}],[\"使用docker\",{\"1\":{\"26\":1}}],[\"使用\",{\"1\":{\"17\":1,\"23\":2,\"32\":1,\"90\":1,\"91\":1,\"96\":1,\"167\":1,\"184\":1,\"201\":1,\"219\":1,\"238\":1,\"251\":1,\"311\":1,\"342\":1,\"360\":1,\"381\":1}}],[\"重写的代码历时一周\",{\"1\":{\"390\":1}}],[\"重新定义算法中的某些步骤\",{\"1\":{\"365\":1}}],[\"重活\",{\"1\":{\"319\":1}}],[\"重构\",{\"1\":{\"120\":1}}],[\"重要的是去理解如何将这些语句编译成汇编代码\",{\"1\":{\"467\":1}}],[\"重要\",{\"1\":{\"91\":1,\"98\":1}}],[\"重启container\",{\"0\":{\"24\":1}}],[\"重定向到automaton\",{\"1\":{\"17\":1,\"23\":2}}],[\"3+\",{\"1\":{\"411\":1,\"458\":1}}],[\"32位系统\",{\"1\":{\"493\":1}}],[\"32\",{\"1\":{\"400\":1,\"414\":1}}],[\"32k\",{\"1\":{\"17\":1}}],[\"3573\",{\"1\":{\"358\":2}}],[\"3572\",{\"1\":{\"358\":1}}],[\"3571\",{\"1\":{\"358\":1}}],[\"3570\",{\"1\":{\"358\":1}}],[\"3569\",{\"1\":{\"358\":1}}],[\"3568\",{\"1\":{\"358\":1}}],[\"3567\",{\"1\":{\"358\":1}}],[\"37\",{\"1\":{\"299\":2}}],[\"31500\",{\"1\":{\"207\":1,\"376\":1}}],[\"363\",{\"1\":{\"186\":1}}],[\"3333\",{\"1\":{\"246\":1}}],[\"333333\",{\"1\":{\"246\":2}}],[\"330\",{\"1\":{\"186\":1}}],[\"33\",{\"1\":{\"185\":1,\"186\":1,\"246\":12}}],[\"3\",{\"0\":{\"416\":1},\"1\":{\"96\":1,\"156\":1,\"167\":2,\"193\":2,\"245\":1,\"248\":2,\"260\":1,\"261\":2,\"279\":1,\"299\":2,\"357\":5,\"387\":1,\"395\":1,\"396\":1,\"398\":3,\"407\":2,\"411\":1,\"413\":1,\"416\":14,\"417\":2,\"434\":2,\"437\":2,\"444\":4,\"449\":1,\"451\":1,\"455\":4,\"466\":3,\"468\":1,\"476\":10,\"477\":9,\"481\":1,\"491\":1,\"500\":2}}],[\"396\",{\"1\":{\"186\":1}}],[\"39\",{\"1\":{\"30\":2}}],[\"3049\",{\"1\":{\"358\":8}}],[\"3001\",{\"1\":{\"476\":1}}],[\"30000\",{\"1\":{\"207\":3,\"376\":3}}],[\"300\",{\"1\":{\"185\":1,\"206\":1,\"207\":3,\"375\":1,\"376\":3}}],[\"30\",{\"1\":{\"30\":2,\"279\":1,\"299\":2,\"414\":1}}],[\"301\",{\"1\":{\"23\":2}}],[\"进程的内存会被分成几个段\",{\"1\":{\"400\":1}}],[\"进而当\",{\"1\":{\"57\":3,\"58\":1,\"59\":2,\"63\":1,\"73\":3,\"74\":1,\"75\":1,\"76\":1}}],[\"进而\",{\"1\":{\"55\":1,\"63\":1,\"65\":1,\"67\":1,\"71\":1,\"78\":1}}],[\"进而有\",{\"1\":{\"54\":1,\"70\":1}}],[\"进有\",{\"1\":{\"54\":1,\"55\":1,\"70\":1,\"71\":1}}],[\"进入acme\",{\"1\":{\"21\":1}}],[\"进行编译\",{\"1\":{\"496\":1}}],[\"进行解析的时候\",{\"1\":{\"489\":1}}],[\"进行语法分析\",{\"1\":{\"437\":1}}],[\"进行安装\",{\"1\":{\"106\":1}}],[\"进行包含\",{\"1\":{\"32\":1}}],[\"进行修改\",{\"1\":{\"16\":1}}],[\"进行如下操作\",{\"1\":{\"16\":1}}],[\"申请证书\",{\"0\":{\"21\":1}}],[\"升级为https\",{\"0\":{\"20\":1}}],[\"及函数定义\",{\"1\":{\"448\":1}}],[\"及时进行重构\",{\"1\":{\"120\":1}}],[\"及\",{\"1\":{\"19\":1,\"407\":1,\"413\":1,\"457\":1,\"462\":1,\"480\":1}}],[\"失败\",{\"1\":{\"17\":1,\"23\":2}}],[\"或波浪号\",{\"1\":{\"420\":1}}],[\"或其他线程同步机制\",{\"1\":{\"337\":1}}],[\"或是调试起来十分困难\",{\"1\":{\"504\":1}}],[\"或是重新学习学习汇编相关的知识\",{\"1\":{\"463\":1}}],[\"或是函数的局部变量等\",{\"1\":{\"400\":1}}],[\"或是依赖于实例状态的信息\",{\"1\":{\"249\":1}}],[\"或是不依赖于实例状态的信息\",{\"1\":{\"249\":1}}],[\"或是如果不小心修改了\",{\"1\":{\"180\":1}}],[\"或是要修改具体工厂的\",{\"1\":{\"137\":1}}],[\"或是\",{\"1\":{\"101\":1}}],[\"或者使用更复杂的事件处理机制\",{\"1\":{\"303\":1}}],[\"或者说如果我们把代码中使用基类的地方用它的派生类所代替\",{\"1\":{\"113\":1}}],[\"或者说的更简单一点\",{\"1\":{\"96\":1}}],[\"或者执行过程中要根据变量状态进行一些下游操作\",{\"1\":{\"97\":1}}],[\"或\",{\"1\":{\"17\":1,\"23\":2,\"76\":1,\"250\":1,\"389\":1,\"448\":1,\"481\":1,\"494\":1}}],[\"4|\",{\"1\":{\"477\":1}}],[\"4+\",{\"1\":{\"411\":1}}],[\"4g\",{\"1\":{\"400\":1}}],[\"44\",{\"1\":{\"299\":2}}],[\"443\",{\"1\":{\"18\":2,\"23\":3}}],[\"49\",{\"1\":{\"299\":2}}],[\"495\",{\"1\":{\"186\":1}}],[\"46\",{\"1\":{\"299\":2}}],[\"462\",{\"1\":{\"186\":1,\"287\":1}}],[\"43\",{\"1\":{\"299\":2}}],[\"404\",{\"1\":{\"508\":1}}],[\"400\",{\"1\":{\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"4096\",{\"1\":{\"17\":1}}],[\"429\",{\"1\":{\"185\":1,\"186\":1}}],[\"4版本的yield\",{\"1\":{\"96\":1}}],[\"4\",{\"0\":{\"434\":1},\"1\":{\"17\":1,\"30\":1,\"137\":1,\"193\":2,\"245\":1,\"260\":2,\"261\":4,\"279\":1,\"312\":2,\"387\":1,\"390\":1,\"395\":1,\"397\":1,\"398\":3,\"401\":1,\"411\":1,\"413\":1,\"416\":3,\"417\":2,\"434\":3,\"437\":2,\"444\":3,\"455\":3,\"462\":1,\"466\":2,\"476\":4,\"477\":6,\"493\":1,\"500\":2}}],[\"k\",{\"1\":{\"389\":1,\"392\":1,\"427\":2,\"431\":2,\"438\":1}}],[\"kinds\",{\"1\":{\"425\":1}}],[\"kingsonfu\",{\"1\":{\"33\":1}}],[\"kid\",{\"1\":{\"275\":1,\"276\":3}}],[\"know\",{\"1\":{\"275\":1}}],[\"kcodetime\",{\"1\":{\"49\":1}}],[\"keep\",{\"1\":{\"429\":1}}],[\"keepalive\",{\"1\":{\"17\":1}}],[\"keywords\",{\"1\":{\"429\":1}}],[\"key\",{\"1\":{\"22\":2,\"23\":6,\"232\":1,\"245\":1,\"312\":1}}],[\"kts\",{\"1\":{\"9\":1}}],[\"nightstate\",{\"1\":{\"343\":7,\"348\":3,\"350\":1,\"351\":1}}],[\"n$\",{\"1\":{\"298\":2}}],[\"narrow\",{\"1\":{\"289\":1}}],[\"names\",{\"1\":{\"357\":2}}],[\"name+\",{\"1\":{\"260\":1}}],[\"name\",{\"1\":{\"17\":2,\"23\":5,\"185\":10,\"203\":3,\"205\":2,\"260\":7,\"267\":5,\"275\":3,\"312\":4,\"319\":21,\"357\":5,\"375\":4,\"424\":5,\"459\":1,\"460\":2,\"461\":1}}],[\"n<h1>$\",{\"1\":{\"232\":1}}],[\"num\",{\"1\":{\"420\":1,\"425\":1,\"426\":3,\"436\":1,\"437\":4,\"439\":1,\"440\":3,\"445\":2,\"448\":2,\"449\":3,\"479\":2,\"481\":1,\"487\":2,\"489\":1}}],[\"numbervoid\",{\"1\":{\"397\":1}}],[\"numbergenerator\",{\"1\":{\"298\":17}}],[\"number\",{\"1\":{\"160\":1,\"164\":1,\"185\":18,\"192\":8,\"203\":1,\"204\":1,\"205\":2,\"213\":9,\"260\":11,\"267\":4,\"286\":6,\"298\":9,\"334\":1,\"338\":1,\"343\":6,\"357\":4,\"367\":1,\"375\":3,\"417\":5,\"424\":1,\"425\":2,\"481\":1}}],[\"null\",{\"1\":{\"185\":1,\"245\":1,\"260\":2,\"312\":2,\"334\":3,\"338\":4,\"440\":2}}],[\"n`\",{\"1\":{\"134\":1,\"174\":3,\"232\":3,\"260\":1}}],[\"normal\",{\"1\":{\"482\":1}}],[\"non\",{\"1\":{\"445\":3,\"456\":3}}],[\"now\",{\"1\":{\"286\":1,\"287\":3,\"480\":1,\"493\":2}}],[\"note\",{\"1\":{\"357\":1,\"448\":1}}],[\"nothing\",{\"1\":{\"286\":1,\"287\":2,\"397\":2,\"487\":1}}],[\"not\",{\"1\":{\"275\":1,\"375\":2,\"397\":2,\"400\":3,\"406\":1,\"423\":1,\"485\":1,\"486\":1,\"493\":1,\"508\":1}}],[\"notifyobservers\",{\"1\":{\"298\":2,\"302\":1}}],[\"notify\",{\"1\":{\"275\":6,\"278\":3}}],[\"nosupport\",{\"1\":{\"185\":5}}],[\"node\",{\"1\":{\"106\":2,\"134\":1,\"148\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"260\":29,\"261\":6,\"268\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1}}],[\"nopush\",{\"1\":{\"17\":1}}],[\"n\",{\"1\":{\"94\":6,\"95\":3,\"96\":12,\"134\":6,\"174\":5,\"232\":1,\"245\":119,\"260\":7,\"298\":1,\"397\":4,\"400\":3,\"413\":1,\"422\":1,\"423\":1,\"426\":5,\"427\":1,\"440\":2,\"448\":2,\"449\":2,\"450\":1,\"460\":2,\"461\":2,\"481\":2,\"483\":1,\"484\":1,\"488\":1,\"490\":1,\"491\":1,\"495\":1}}],[\"net\",{\"1\":{\"476\":1}}],[\"networks\",{\"1\":{\"18\":2}}],[\"ne\",{\"1\":{\"402\":1,\"412\":1,\"420\":2,\"428\":1,\"489\":1}}],[\"need\",{\"1\":{\"275\":1}}],[\"nexthand2\",{\"1\":{\"357\":3}}],[\"nexthand\",{\"1\":{\"357\":7}}],[\"nexthand1\",{\"1\":{\"357\":3}}],[\"nexttoken\",{\"1\":{\"260\":6}}],[\"next\",{\"1\":{\"185\":8,\"267\":3,\"268\":1,\"397\":5,\"419\":1,\"421\":2,\"424\":1,\"425\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":4,\"440\":3,\"447\":2,\"448\":1,\"449\":4,\"450\":2}}],[\"news\",{\"1\":{\"134\":2}}],[\"new\",{\"1\":{\"125\":2,\"128\":2,\"134\":4,\"147\":3,\"163\":6,\"174\":4,\"185\":7,\"192\":3,\"204\":1,\"206\":14,\"213\":9,\"232\":1,\"239\":2,\"245\":4,\"251\":2,\"260\":12,\"267\":6,\"275\":4,\"286\":2,\"298\":3,\"312\":4,\"319\":2,\"334\":1,\"338\":1,\"343\":3,\"357\":7,\"367\":3,\"375\":18,\"407\":1,\"408\":3,\"411\":8,\"424\":1,\"458\":7,\"460\":1}}],[\"newline\",{\"1\":{\"48\":1}}],[\"nginx\",{\"0\":{\"13\":1},\"1\":{\"13\":2,\"14\":1,\"15\":2,\"17\":17,\"18\":10,\"21\":4,\"22\":4,\"23\":15,\"26\":2},\"2\":{\"27\":1}}],[\"xx\",{\"1\":{\"495\":1}}],[\"xxx\",{\"1\":{\"448\":1,\"467\":1}}],[\"xxxstate\",{\"1\":{\"350\":1}}],[\"xzp740813\",{\"1\":{\"476\":1}}],[\"xc\",{\"1\":{\"414\":2,\"496\":5}}],[\"xor\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"486\":2,\"489\":1,\"493\":4}}],[\"x86\",{\"1\":{\"402\":1,\"403\":2,\"404\":1,\"407\":1,\"415\":1}}],[\"x<p\",{\"1\":{\"41\":1}}],[\"x+y+z\",{\"1\":{\"41\":1}}],[\"x+y\",{\"1\":{\"39\":1}}],[\"x\",{\"1\":{\"17\":1,\"40\":1,\"41\":2,\"192\":8,\"425\":2,\"448\":1,\"477\":3,\"487\":2}}],[\"$\",{\"1\":{\"134\":1,\"147\":2,\"174\":2,\"185\":3,\"192\":2,\"203\":2,\"204\":1,\"205\":1,\"232\":4,\"260\":7,\"275\":4,\"286\":6,\"298\":2,\"312\":4,\"319\":2,\"334\":1,\"338\":1,\"343\":2,\"357\":6,\"375\":4}}],[\"$host$request\",{\"1\":{\"23\":2}}],[\"$http\",{\"1\":{\"17\":3}}],[\"$uri\",{\"1\":{\"17\":6,\"23\":10}}],[\"$body\",{\"1\":{\"17\":1}}],[\"$status\",{\"1\":{\"17\":1}}],[\"$request\",{\"1\":{\"17\":1}}],[\"$remote\",{\"1\":{\"17\":2}}],[\"$time\",{\"1\":{\"17\":1}}],[\"rmi\",{\"1\":{\"327\":1}}],[\"right\",{\"1\":{\"260\":9,\"261\":12,\"417\":1}}],[\"role\",{\"1\":{\"275\":1}}],[\"row\",{\"1\":{\"213\":9}}],[\"rootdir\",{\"1\":{\"206\":6,\"375\":6}}],[\"root\",{\"1\":{\"17\":2,\"21\":2,\"22\":1,\"23\":3,\"48\":1,\"206\":2,\"207\":21,\"375\":2,\"376\":21}}],[\"randomnumbergenerator\",{\"1\":{\"298\":5}}],[\"random\",{\"1\":{\"286\":3,\"298\":1,\"357\":2}}],[\"range\",{\"1\":{\"94\":2,\"96\":1}}],[\"rawclose\",{\"1\":{\"161\":1,\"162\":1,\"164\":1}}],[\"rawprint\",{\"1\":{\"161\":1,\"162\":1,\"164\":1}}],[\"rawopen\",{\"1\":{\"161\":1,\"162\":1,\"164\":1}}],[\"r\",{\"1\":{\"96\":1,\"426\":1}}],[\"run\",{\"1\":{\"17\":1,\"95\":1,\"96\":3}}],[\"remove\",{\"1\":{\"407\":1,\"409\":2}}],[\"remote\",{\"1\":{\"32\":1,\"323\":1,\"327\":1}}],[\"ret\",{\"1\":{\"407\":9,\"410\":2}}],[\"returns\",{\"1\":{\"496\":1}}],[\"returnret\",{\"1\":{\"410\":1}}],[\"returned\",{\"1\":{\"397\":1}}],[\"return\",{\"0\":{\"470\":1},\"1\":{\"23\":2,\"40\":3,\"41\":4,\"134\":6,\"174\":2,\"185\":11,\"203\":3,\"204\":1,\"205\":2,\"213\":13,\"232\":2,\"239\":4,\"245\":2,\"260\":11,\"267\":6,\"286\":6,\"298\":1,\"312\":3,\"319\":2,\"334\":1,\"338\":1,\"343\":4,\"357\":12,\"375\":7,\"397\":6,\"400\":3,\"403\":1,\"407\":3,\"413\":2,\"420\":1,\"421\":1,\"424\":3,\"425\":1,\"426\":2,\"427\":1,\"428\":15,\"429\":2,\"440\":11,\"445\":1,\"448\":1,\"456\":1,\"466\":1,\"467\":1,\"470\":6,\"489\":1}}],[\"regex\",{\"1\":{\"392\":1}}],[\"registers\",{\"1\":{\"401\":1}}],[\"registerproduct\",{\"1\":{\"239\":3}}],[\"register\",{\"1\":{\"121\":2,\"312\":4}}],[\"read\",{\"1\":{\"397\":3,\"402\":1,\"413\":3,\"429\":1,\"481\":1}}],[\"readonly\",{\"1\":{\"357\":2}}],[\"realize\",{\"1\":{\"319\":2}}],[\"real\",{\"1\":{\"275\":1,\"319\":6}}],[\"record\",{\"1\":{\"344\":24}}],[\"recordlog\",{\"1\":{\"343\":4}}],[\"received\",{\"1\":{\"275\":1,\"276\":6}}],[\"receivemessage\",{\"1\":{\"275\":2}}],[\"receiver\",{\"1\":{\"195\":1}}],[\"repeatcommandnode\",{\"1\":{\"260\":5}}],[\"repeat\",{\"1\":{\"260\":9,\"261\":6,\"312\":3}}],[\"replace\",{\"1\":{\"245\":1}}],[\"repos\",{\"1\":{\"9\":1}}],[\"repository\",{\"1\":{\"9\":12}}],[\"repositoriesmode\",{\"1\":{\"9\":2}}],[\"repositories\",{\"1\":{\"9\":2}}],[\"reduce\",{\"1\":{\"203\":1}}],[\"rest\",{\"1\":{\"479\":1}}],[\"restore\",{\"1\":{\"407\":1,\"410\":2}}],[\"restorememento\",{\"1\":{\"286\":2}}],[\"restoring\",{\"1\":{\"286\":1,\"287\":1}}],[\"resolved\",{\"1\":{\"185\":2,\"186\":16}}],[\"resolve\",{\"1\":{\"185\":6}}],[\"resolver\",{\"1\":{\"17\":2}}],[\"responsibility\",{\"1\":{\"183\":1,\"184\":1,\"185\":1,\"370\":1}}],[\"result\",{\"1\":{\"174\":2,\"357\":1,\"358\":1,\"407\":1,\"493\":1}}],[\"res\",{\"1\":{\"95\":1,\"96\":3}}],[\"requirements有两种方式\",{\"1\":{\"44\":1}}],[\"requirements\",{\"0\":{\"44\":1},\"1\":{\"44\":2}}],[\"reverse\",{\"1\":{\"26\":1}}],[\"release\",{\"1\":{\"94\":1}}],[\"releases\",{\"1\":{\"9\":2}}],[\"reloadcmd\",{\"1\":{\"22\":1}}],[\"rewrite\",{\"1\":{\"17\":1,\"23\":2}}],[\"referer\",{\"1\":{\"17\":1}}],[\"142961332\",{\"1\":{\"476\":1}}],[\"147\",{\"1\":{\"424\":1}}],[\"15\",{\"1\":{\"425\":3,\"477\":2}}],[\"1500\",{\"1\":{\"207\":1,\"376\":1}}],[\"1+\",{\"1\":{\"411\":2,\"458\":2}}],[\"19\",{\"1\":{\"351\":1}}],[\"198\",{\"1\":{\"186\":1}}],[\"13\",{\"1\":{\"299\":4}}],[\"132\",{\"1\":{\"186\":1}}],[\"128\",{\"1\":{\"420\":1,\"489\":1}}],[\"12\",{\"1\":{\"279\":1,\"407\":2,\"409\":1}}],[\"123\",{\"1\":{\"245\":1,\"425\":1}}],[\"16\",{\"1\":{\"299\":2,\"348\":1,\"425\":2}}],[\"165\",{\"1\":{\"186\":1}}],[\"16k\",{\"1\":{\"17\":1}}],[\"18\",{\"1\":{\"96\":1,\"299\":2}}],[\"10+20\",{\"1\":{\"414\":1}}],[\"1024\",{\"1\":{\"397\":1}}],[\"1000\",{\"1\":{\"319\":1,\"400\":1}}],[\"10000\",{\"1\":{\"206\":1,\"207\":2,\"357\":1,\"358\":2,\"375\":1,\"376\":2}}],[\"1000000\",{\"1\":{\"94\":2,\"96\":1}}],[\"100\",{\"1\":{\"185\":1,\"206\":1,\"207\":1,\"286\":3,\"375\":1,\"376\":1}}],[\"10\",{\"1\":{\"94\":1,\"95\":1,\"96\":6,\"192\":1,\"274\":1,\"299\":2,\"343\":1,\"398\":1,\"400\":1,\"414\":1,\"416\":1,\"424\":1,\"425\":1,\"440\":1,\"448\":1,\"476\":1,\"481\":1,\"495\":2}}],[\"10s\",{\"1\":{\"17\":1}}],[\"1ll\",{\"1\":{\"40\":1,\"41\":1}}],[\"111111\",{\"1\":{\"246\":1}}],[\"1111\",{\"1\":{\"246\":1}}],[\"11\",{\"1\":{\"246\":8,\"299\":2,\"398\":1}}],[\"1190000040806239\",{\"1\":{\"101\":1}}],[\"11578073\",{\"1\":{\"33\":1}}],[\"114\",{\"1\":{\"17\":4}}],[\"17\",{\"1\":{\"30\":2,\"96\":1,\"343\":2}}],[\"1\",{\"0\":{\"50\":1,\"395\":1},\"1\":{\"17\":1,\"96\":3,\"159\":1,\"185\":1,\"193\":2,\"213\":9,\"245\":1,\"255\":2,\"286\":2,\"333\":1,\"335\":1,\"357\":18,\"387\":1,\"395\":3,\"397\":5,\"398\":6,\"400\":3,\"403\":1,\"406\":2,\"407\":3,\"408\":1,\"411\":2,\"413\":7,\"415\":1,\"416\":3,\"424\":1,\"425\":1,\"434\":2,\"437\":1,\"440\":1,\"444\":3,\"448\":3,\"449\":3,\"450\":1,\"455\":3,\"457\":1,\"458\":3,\"460\":2,\"461\":3,\"466\":7,\"468\":1,\"469\":2,\"476\":4,\"477\":1,\"481\":3,\"483\":1,\"484\":1,\"486\":2,\"487\":1,\"488\":1,\"490\":1,\"491\":2,\"492\":2,\"493\":1,\"495\":1,\"500\":2}}],[\"we\",{\"1\":{\"423\":1}}],[\"weakhashmap\",{\"1\":{\"250\":1}}],[\"weakreference\",{\"1\":{\"250\":1}}],[\"welcome\",{\"1\":{\"232\":2,\"233\":2}}],[\"web\",{\"1\":{\"90\":1}}],[\"web服务器添加https功能\",{\"1\":{\"26\":1}}],[\"webnet\",{\"1\":{\"18\":2}}],[\"write\",{\"1\":{\"390\":1,\"395\":1,\"397\":1,\"398\":1,\"415\":1,\"416\":1,\"430\":1,\"434\":1,\"444\":1,\"451\":1,\"455\":1,\"462\":1,\"466\":1,\"472\":1,\"496\":1,\"500\":1}}],[\"writer\",{\"1\":{\"232\":13}}],[\"wrapper\",{\"1\":{\"9\":1}}],[\"won\",{\"1\":{\"357\":3}}],[\"wodfan\",{\"1\":{\"96\":2}}],[\"working\",{\"1\":{\"125\":1}}],[\"work\",{\"1\":{\"96\":2,\"125\":3}}],[\"worker\",{\"1\":{\"17\":2,\"125\":9}}],[\"world\",{\"1\":{\"96\":2,\"163\":1,\"165\":1,\"213\":1,\"214\":3,\"267\":1,\"268\":1,\"275\":1,\"312\":3,\"313\":3,\"367\":1,\"368\":5}}],[\"when\",{\"1\":{\"481\":1}}],[\"which\",{\"1\":{\"481\":1}}],[\"white\",{\"1\":{\"440\":1}}],[\"whitespace\",{\"1\":{\"48\":1}}],[\"while\",{\"0\":{\"469\":1},\"1\":{\"260\":1,\"267\":1,\"397\":1,\"403\":1,\"420\":1,\"421\":4,\"423\":1,\"424\":3,\"425\":3,\"426\":1,\"427\":1,\"429\":5,\"440\":3,\"445\":3,\"447\":1,\"448\":2,\"449\":1,\"456\":3,\"459\":3,\"460\":2,\"461\":4,\"466\":1,\"467\":1,\"469\":4,\"471\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"489\":2}}],[\"what\",{\"1\":{\"32\":1}}],[\"will\",{\"1\":{\"423\":1}}],[\"wide\",{\"1\":{\"289\":1}}],[\"width\",{\"1\":{\"48\":1,\"164\":3,\"367\":3}}],[\"with\",{\"1\":{\"94\":3,\"96\":6,\"334\":1,\"335\":1,\"338\":1,\"425\":2,\"467\":1}}],[\"without\",{\"1\":{\"94\":1,\"95\":5,\"96\":15}}],[\"winner\",{\"1\":{\"358\":6}}],[\"winningstrategy\",{\"1\":{\"357\":6}}],[\"wincount++\",{\"1\":{\"357\":1}}],[\"wincount\",{\"1\":{\"357\":2}}],[\"win\",{\"1\":{\"357\":9,\"358\":8}}],[\"windows\",{\"1\":{\"33\":2,\"167\":2}}],[\"win10\",{\"1\":{\"32\":3,\"33\":1}}],[\"wsl$\",{\"1\":{\"33\":3}}],[\"wsl2\",{\"0\":{\"30\":1,\"31\":1},\"1\":{\"29\":1,\"33\":1}}],[\"wsl\",{\"0\":{\"29\":1,\"33\":1},\"1\":{\"32\":4}}],[\"www\",{\"1\":{\"17\":1,\"23\":4,\"33\":1,\"134\":11}}],[\"warning\",{\"1\":{\"312\":2}}],[\"warn\",{\"1\":{\"17\":5,\"23\":5}}],[\"部分\",{\"1\":{\"137\":1,\"201\":1,\"446\":1}}],[\"部分ide默认直接支持\",{\"1\":{\"48\":1}}],[\"部分路径以实际为准\",{\"1\":{\"16\":1}}],[\"部署一个\",{\"1\":{\"13\":1}}],[\"部署\",{\"0\":{\"13\":1},\"1\":{\"25\":1},\"2\":{\"28\":1}}],[\"└──\",{\"1\":{\"15\":2}}],[\"lvalue\",{\"1\":{\"440\":12,\"488\":1,\"490\":2}}],[\"lt\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"lc\",{\"1\":{\"402\":1,\"403\":5,\"481\":4,\"483\":1,\"484\":4,\"488\":2,\"490\":1,\"495\":1}}],[\"ll\",{\"1\":{\"389\":1,\"392\":1,\"427\":1}}],[\"le\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"leaving\",{\"1\":{\"461\":1}}],[\"lea\",{\"0\":{\"411\":1},\"1\":{\"398\":1,\"402\":1,\"411\":2,\"481\":1}}],[\"lev\",{\"0\":{\"410\":1},\"1\":{\"398\":1,\"402\":1,\"407\":2,\"410\":2,\"461\":1,\"470\":2}}],[\"level\",{\"1\":{\"397\":2,\"489\":3}}],[\"lemon\",{\"1\":{\"392\":1}}],[\"lexer\",{\"1\":{\"418\":1}}],[\"lex\",{\"1\":{\"389\":2,\"419\":1}}],[\"legs\",{\"1\":{\"267\":1,\"268\":1}}],[\"left\",{\"1\":{\"260\":4,\"261\":2,\"417\":1}}],[\"length\",{\"1\":{\"164\":1,\"213\":1,\"260\":2,\"286\":1,\"312\":7,\"367\":1,\"375\":1}}],[\"let\",{\"1\":{\"134\":13,\"160\":1,\"164\":2,\"185\":7,\"192\":1,\"206\":7,\"213\":7,\"232\":3,\"245\":3,\"260\":3,\"286\":3,\"298\":3,\"312\":9,\"319\":2,\"343\":2,\"357\":4,\"367\":3,\"375\":9,\"392\":1}}],[\"letsencrypt\",{\"1\":{\"18\":1,\"23\":6}}],[\"lf\",{\"1\":{\"48\":1}}],[\"lan\",{\"1\":{\"420\":1,\"428\":1,\"489\":1,\"492\":3}}],[\"lalr\",{\"1\":{\"389\":1}}],[\"last++\",{\"1\":{\"267\":1}}],[\"last\",{\"1\":{\"267\":3,\"420\":1,\"421\":1,\"424\":4,\"426\":2}}],[\"latex\",{\"1\":{\"206\":1,\"207\":2,\"375\":1,\"376\":2}}],[\"latest\",{\"1\":{\"18\":1}}],[\"large\",{\"1\":{\"17\":1}}],[\"lookahead\",{\"1\":{\"427\":1,\"431\":1}}],[\"look\",{\"1\":{\"424\":1}}],[\"loop\",{\"1\":{\"95\":3,\"96\":9}}],[\"lor\",{\"1\":{\"420\":1,\"428\":1,\"489\":1,\"492\":2}}],[\"load\",{\"1\":{\"403\":3,\"411\":1,\"481\":1}}],[\"low\",{\"1\":{\"400\":1,\"411\":1,\"458\":1}}],[\"lotabout\",{\"1\":{\"395\":1,\"397\":1,\"398\":1,\"415\":1,\"416\":1,\"430\":1,\"434\":1,\"444\":1,\"451\":1,\"455\":1,\"462\":1,\"466\":1,\"472\":1,\"496\":1,\"500\":1}}],[\"losecount++\",{\"1\":{\"357\":1}}],[\"losecount\",{\"1\":{\"357\":2}}],[\"lose\",{\"1\":{\"357\":4,\"358\":8}}],[\"long\",{\"1\":{\"267\":1,\"268\":1,\"414\":4}}],[\"loc\",{\"1\":{\"420\":1,\"459\":1,\"460\":2,\"461\":2,\"481\":1,\"489\":1}}],[\"locking\",{\"1\":{\"337\":1}}],[\"lock\",{\"1\":{\"94\":8,\"95\":5,\"96\":23,\"338\":4}}],[\"locating\",{\"1\":{\"33\":1}}],[\"location\",{\"1\":{\"17\":3,\"23\":6}}],[\"local\",{\"1\":{\"17\":1,\"411\":2,\"458\":5,\"459\":2,\"460\":1,\"461\":11,\"481\":1}}],[\"logic\",{\"1\":{\"492\":2}}],[\"loginframe\",{\"1\":{\"280\":2}}],[\"login\",{\"1\":{\"121\":2}}],[\"log\",{\"1\":{\"15\":2,\"17\":29,\"18\":1,\"23\":30,\"125\":1,\"128\":4,\"134\":2,\"147\":2,\"164\":2,\"174\":4,\"185\":2,\"192\":1,\"203\":1,\"205\":1,\"206\":2,\"213\":1,\"232\":2,\"239\":1,\"245\":1,\"260\":2,\"267\":1,\"275\":3,\"286\":10,\"298\":2,\"312\":8,\"319\":9,\"334\":2,\"338\":1,\"343\":4,\"357\":6,\"367\":5,\"375\":4}}],[\"logs\",{\"1\":{\"15\":1,\"18\":1}}],[\"literal\",{\"1\":{\"426\":2}}],[\"li\",{\"1\":{\"402\":1,\"403\":5,\"481\":4,\"483\":1,\"484\":4,\"488\":2,\"490\":2,\"495\":1}}],[\"lightning\",{\"1\":{\"275\":1,\"276\":3}}],[\"liskov\",{\"1\":{\"223\":1}}],[\"listvisitor\",{\"1\":{\"375\":6,\"379\":1}}],[\"list>\",{\"1\":{\"260\":8}}],[\"listpicture\",{\"1\":{\"138\":1}}],[\"listpage\",{\"1\":{\"134\":5}}],[\"listtray\",{\"1\":{\"134\":5}}],[\"listlink\",{\"1\":{\"134\":5}}],[\"listfactory\",{\"1\":{\"134\":5,\"138\":2}}],[\"listen\",{\"1\":{\"17\":2,\"23\":5}}],[\"list\",{\"1\":{\"8\":1,\"44\":1,\"250\":1,\"260\":3}}],[\"limit\",{\"1\":{\"185\":5}}],[\"limitsupport\",{\"1\":{\"185\":7}}],[\"li><li>再见\",{\"1\":{\"175\":1}}],[\"li><li>晚安\",{\"1\":{\"175\":1}}],[\"li><li>下午好\",{\"1\":{\"175\":1}}],[\"li><\",{\"1\":{\"175\":2}}],[\"li>`\",{\"1\":{\"174\":1}}],[\"li>\",{\"1\":{\"134\":10}}],[\"license\",{\"1\":{\"106\":2}}],[\"liuyue$\",{\"1\":{\"96\":4}}],[\"liuyue\",{\"1\":{\"96\":6}}],[\"linkpage\",{\"1\":{\"134\":1}}],[\"link\",{\"1\":{\"134\":8,\"137\":1,\"232\":2}}],[\"linesecond\",{\"1\":{\"479\":1}}],[\"linelen\",{\"1\":{\"440\":2}}],[\"linecap\",{\"1\":{\"440\":2}}],[\"linear\",{\"1\":{\"424\":1}}],[\"line\",{\"1\":{\"48\":1,\"367\":4,\"397\":3,\"440\":3,\"448\":2,\"449\":2,\"450\":1,\"460\":2,\"461\":2,\"479\":3,\"481\":2,\"483\":1,\"484\":1,\"488\":1,\"490\":1,\"491\":1,\"495\":1}}],[\"linux\",{\"1\":{\"32\":2}}],[\"like\",{\"1\":{\"22\":1,\"449\":1,\"461\":1}}],[\"live\",{\"1\":{\"18\":1,\"23\":6}}],[\"libgen\",{\"1\":{\"5\":2}}],[\"lib\",{\"1\":{\"5\":1,\"33\":2}}],[\"library\",{\"1\":{\"5\":2,\"429\":1}}],[\"yet\",{\"1\":{\"397\":1}}],[\"yacc\",{\"1\":{\"389\":2,\"503\":1}}],[\"yahoo<\",{\"1\":{\"134\":2}}],[\"yahoo\",{\"1\":{\"134\":12}}],[\"yuki<\",{\"1\":{\"233\":1}}],[\"yukiのページへようこそ\",{\"1\":{\"233\":1}}],[\"yuki\",{\"1\":{\"206\":5,\"207\":3,\"232\":1,\"233\":2,\"375\":5,\"376\":3}}],[\"y\",{\"1\":{\"40\":1,\"41\":1,\"192\":8}}],[\"yml\",{\"1\":{\"15\":1,\"18\":1}}],[\"your\",{\"1\":{\"49\":1}}],[\"you\",{\"1\":{\"8\":1}}],[\"bxxx\",{\"1\":{\"459\":1,\"460\":1}}],[\"bxxxx\",{\"1\":{\"424\":1}}],[\"bnf\",{\"1\":{\"436\":1,\"438\":3,\"441\":1,\"445\":1,\"503\":2}}],[\"bnf什么的\",{\"1\":{\"389\":1}}],[\"bvalue\",{\"1\":{\"424\":2,\"459\":1,\"460\":1,\"461\":1}}],[\"btype\",{\"1\":{\"424\":2,\"459\":1,\"460\":1,\"461\":1}}],[\"bp+\",{\"1\":{\"411\":1,\"458\":1}}],[\"bp\",{\"1\":{\"401\":3,\"408\":2,\"410\":2,\"411\":9,\"458\":7,\"460\":5,\"461\":2,\"481\":2}}],[\"brak\",{\"1\":{\"420\":1,\"428\":1,\"489\":2,\"495\":2}}],[\"bracket\",{\"1\":{\"417\":2}}],[\"break\",{\"1\":{\"260\":1}}],[\"bridge\",{\"0\":{\"152\":1},\"1\":{\"149\":1,\"152\":1,\"153\":1,\"157\":1,\"165\":1,\"167\":2}}],[\"bsion\",{\"1\":{\"503\":1}}],[\"bss\",{\"1\":{\"400\":2}}],[\"bs\",{\"1\":{\"245\":2}}],[\"bclass\",{\"1\":{\"424\":2,\"459\":1,\"460\":1,\"461\":1}}],[\"bc\",{\"1\":{\"245\":5}}],[\"bitwise\",{\"1\":{\"486\":1,\"493\":1}}],[\"bison\",{\"1\":{\"389\":1,\"390\":1,\"392\":1,\"396\":1}}],[\"bible\",{\"1\":{\"267\":1,\"268\":1}}],[\"bigstring\",{\"1\":{\"245\":6,\"248\":4,\"249\":3}}],[\"bigchars\",{\"1\":{\"245\":3}}],[\"bigchar>\",{\"1\":{\"245\":1}}],[\"bigcharfactory\",{\"1\":{\"245\":9}}],[\"bigchar\",{\"1\":{\"245\":13,\"248\":6,\"249\":5}}],[\"binary\",{\"1\":{\"489\":1}}],[\"bin\",{\"1\":{\"206\":1,\"207\":6,\"375\":1,\"376\":6}}],[\"bindir\",{\"1\":{\"206\":4,\"375\":4}}],[\"b4\",{\"1\":{\"213\":2,\"216\":1}}],[\"b3\",{\"1\":{\"213\":2}}],[\"b2\",{\"1\":{\"213\":3}}],[\"b1\",{\"1\":{\"213\":3}}],[\"body\",{\"1\":{\"445\":2,\"448\":1,\"456\":2,\"457\":1,\"459\":1,\"461\":1}}],[\"body><\",{\"1\":{\"134\":2,\"174\":1,\"175\":1,\"232\":1,\"233\":1}}],[\"box\",{\"1\":{\"312\":4}}],[\"books\",{\"1\":{\"267\":4}}],[\"bookshelfiterator\",{\"1\":{\"267\":5,\"268\":1}}],[\"bookshelf\",{\"1\":{\"267\":21,\"268\":3,\"269\":1}}],[\"book\",{\"1\":{\"267\":19,\"268\":1}}],[\"boolean\",{\"1\":{\"185\":4,\"260\":1,\"267\":2,\"357\":5}}],[\"borderchar\",{\"1\":{\"213\":4}}],[\"border\",{\"1\":{\"213\":8,\"216\":2}}],[\"bob使用了id卡\",{\"1\":{\"240\":1}}],[\"bob\",{\"1\":{\"185\":3,\"186\":4,\"239\":1,\"319\":1,\"320\":2}}],[\"ba\",{\"1\":{\"468\":1}}],[\"bad\",{\"1\":{\"448\":1,\"449\":2,\"460\":1,\"461\":1,\"481\":1,\"483\":1,\"484\":1,\"488\":1,\"490\":1}}],[\"basetype\",{\"1\":{\"448\":4,\"461\":2}}],[\"banana\",{\"1\":{\"286\":1,\"287\":9}}],[\"banner\",{\"1\":{\"146\":1,\"147\":13}}],[\"balance\",{\"1\":{\"94\":12,\"95\":7,\"96\":32}}],[\"backend\",{\"1\":{\"32\":1}}],[\"behaviour\",{\"1\":{\"481\":1}}],[\"because\",{\"1\":{\"423\":1}}],[\"bet\",{\"1\":{\"286\":2,\"357\":3}}],[\"be\",{\"1\":{\"185\":1,\"186\":3,\"448\":1,\"481\":1}}],[\"bepinex\",{\"1\":{\"47\":1}}],[\"below\",{\"1\":{\"22\":1}}],[\"b+p\",{\"1\":{\"40\":1}}],[\"b\",{\"1\":{\"40\":5,\"279\":7,\"397\":1,\"415\":1,\"430\":1,\"448\":1,\"449\":1,\"451\":1,\"458\":2,\"462\":1,\"468\":8,\"469\":4,\"471\":1,\"472\":1,\"491\":1,\"492\":4,\"496\":1}}],[\"by\",{\"1\":{\"30\":1,\"185\":1,\"186\":13,\"275\":1,\"276\":6}}],[\"bytes\",{\"1\":{\"17\":1}}],[\"blog\",{\"1\":{\"15\":3,\"17\":4,\"18\":2,\"23\":7,\"476\":1}}],[\"but\",{\"1\":{\"260\":1,\"481\":1}}],[\"buttonuse\",{\"1\":{\"351\":1}}],[\"button\",{\"1\":{\"8\":1}}],[\"buf\",{\"1\":{\"213\":3}}],[\"buffers\",{\"1\":{\"17\":1}}],[\"buffer\",{\"1\":{\"17\":1,\"134\":21,\"164\":4,\"174\":19}}],[\"bug\",{\"0\":{\"91\":1},\"1\":{\"137\":1,\"278\":3,\"361\":1}}],[\"builder\",{\"0\":{\"172\":1,\"173\":1},\"1\":{\"139\":1,\"173\":3,\"174\":24,\"175\":1,\"178\":2,\"179\":1,\"180\":7,\"336\":1}}],[\"build\",{\"1\":{\"18\":1,\"19\":1,\"22\":1,\"24\":1,\"90\":2,\"392\":1}}],[\"bupt\",{\"1\":{\"13\":1,\"17\":4,\"19\":3,\"21\":2,\"22\":4,\"23\":14}}],[\"│\",{\"1\":{\"15\":6}}],[\"├──\",{\"1\":{\"15\":12}}],[\"ulchar\",{\"1\":{\"312\":5}}],[\"ul><\",{\"1\":{\"175\":1}}],[\"ul><p>晚上<\",{\"1\":{\"175\":1}}],[\"ul>\",{\"1\":{\"134\":5,\"174\":1}}],[\"ul>`\",{\"1\":{\"134\":1}}],[\"unary\",{\"1\":{\"480\":1}}],[\"unwind\",{\"1\":{\"459\":1}}],[\"unknown\",{\"1\":{\"413\":1}}],[\"underlinepen\",{\"1\":{\"312\":5}}],[\"undefined`\",{\"1\":{\"260\":1}}],[\"undefined\",{\"1\":{\"49\":1,\"185\":1,\"319\":2,\"481\":1}}],[\"undo\",{\"1\":{\"192\":1}}],[\"unit\",{\"1\":{\"481\":1}}],[\"unityexplorer\",{\"1\":{\"47\":1}}],[\"unix\",{\"1\":{\"167\":2}}],[\"universe\",{\"1\":{\"163\":1,\"165\":5}}],[\"until\",{\"1\":{\"95\":1,\"96\":3}}],[\"utf\",{\"1\":{\"48\":1}}],[\"u\",{\"1\":{\"39\":1,\"40\":1,\"41\":2,\"275\":2}}],[\"uri\",{\"1\":{\"23\":2}}],[\"url\",{\"1\":{\"9\":2,\"134\":10}}],[\"url=uri\",{\"1\":{\"9\":12}}],[\"upen\",{\"1\":{\"312\":2}}],[\"update\",{\"1\":{\"298\":4,\"302\":4}}],[\"up\",{\"1\":{\"19\":1,\"22\":1,\"24\":1}}],[\"us\",{\"1\":{\"134\":5}}],[\"use\",{\"1\":{\"22\":1,\"239\":5,\"312\":6,\"407\":1,\"485\":1,\"486\":1}}],[\"user3\",{\"1\":{\"275\":2}}],[\"user2\",{\"1\":{\"275\":2}}],[\"user1\",{\"1\":{\"275\":2}}],[\"username\",{\"1\":{\"232\":6}}],[\"userprofile\",{\"1\":{\"121\":1}}],[\"usersexcludingsender\",{\"1\":{\"275\":2}}],[\"users\",{\"1\":{\"96\":2,\"275\":4}}],[\"user\",{\"1\":{\"17\":3,\"121\":1,\"206\":1,\"207\":1,\"275\":13,\"278\":2,\"375\":1,\"376\":1}}],[\"usrdir\",{\"1\":{\"206\":5,\"375\":5}}],[\"usr\",{\"1\":{\"17\":3,\"18\":2,\"23\":5,\"206\":1,\"207\":10,\"375\":1,\"376\":10}}],[\"ubuntu\",{\"1\":{\"14\":1,\"22\":4,\"32\":2}}],[\"环境\",{\"0\":{\"14\":1}}],[\"提前看字符的原理是\",{\"1\":{\"427\":1}}],[\"提供了\",{\"1\":{\"250\":1}}],[\"提供所有科学知识\",{\"1\":{\"5\":1}}],[\"提出的要求\",{\"1\":{\"217\":1}}],[\"提高系统的安全性\",{\"1\":{\"327\":1}}],[\"提高性能\",{\"1\":{\"311\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"265\":1,\"356\":1}}],[\"提高代码的可维护性和可扩展性\",{\"1\":{\"238\":1}}],[\"提高了系统的可扩展性和可维护性\",{\"1\":{\"153\":1}}],[\"提高模块的相对独立性\",{\"1\":{\"117\":1}}],[\"提示\",{\"1\":{\"13\":1}}],[\"配置docker\",{\"0\":{\"18\":1}}],[\"配置nginx反向代理\",{\"0\":{\"25\":1}}],[\"配置nginx\",{\"0\":{\"17\":1}}],[\"配置http服务\",{\"0\":{\"16\":1}}],[\"配置以及如何升级到\",{\"1\":{\"13\":1}}],[\"配置\",{\"1\":{\"13\":1}}],[\"和字符串如\",{\"1\":{\"426\":1}}],[\"和文法并编写解析算法\",{\"1\":{\"392\":1}}],[\"和文法的定义\",{\"1\":{\"392\":1}}],[\"和被观察者\",{\"1\":{\"301\":1}}],[\"和窄接口\",{\"1\":{\"289\":1}}],[\"和窗口句柄等也都是一种资源\",{\"1\":{\"251\":1}}],[\"和开源作者们使用同一套流程\",{\"1\":{\"34\":1}}],[\"和\",{\"0\":{\"292\":1},\"1\":{\"13\":2,\"54\":2,\"70\":1,\"76\":1,\"106\":1,\"135\":1,\"152\":1,\"268\":1,\"279\":4,\"292\":1,\"318\":1,\"346\":1,\"361\":1,\"378\":1,\"388\":1,\"403\":1,\"446\":1,\"467\":1,\"468\":1,\"477\":1,\"492\":1}}],[\"本节中我们专注语法分析器部分的实现\",{\"1\":{\"440\":1}}],[\"本节的代码可以在\",{\"1\":{\"397\":1}}],[\"本例中是\",{\"1\":{\"437\":1}}],[\"本质上这个指令并不是必需的\",{\"1\":{\"410\":1}}],[\"本质上是因为我们的\",{\"1\":{\"409\":1}}],[\"本质的\",{\"1\":{\"249\":1}}],[\"本章有两个难点\",{\"1\":{\"497\":1}}],[\"本章讲解了如何将语句编译成汇编代码\",{\"1\":{\"473\":1}}],[\"本章讲解函数定义相关的内容\",{\"1\":{\"455\":1}}],[\"本章的内容应该不难\",{\"1\":{\"452\":1}}],[\"本章的代码依旧无法运行\",{\"1\":{\"462\":1,\"472\":1}}],[\"本章的代码还无法正常运行\",{\"1\":{\"451\":1}}],[\"本章的代码可以在\",{\"1\":{\"415\":1,\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"496\":1}}],[\"本章要讲解的就是上节文法中的\",{\"1\":{\"446\":1}}],[\"本章我们进行了最后的解析\",{\"1\":{\"497\":1}}],[\"本章我们将讲解递归下降的方法\",{\"1\":{\"434\":1}}],[\"本章我们为我们的编译器构建了词法分析器\",{\"1\":{\"431\":1}}],[\"本章我们要讲解如何构建词法分析器\",{\"1\":{\"416\":1}}],[\"本章我们要构建一台虚拟的电脑\",{\"1\":{\"398\":1}}],[\"本章中我们发一发牢骚\",{\"1\":{\"500\":1}}],[\"本章中我们用了不多的代码完成了函数定义的解析\",{\"1\":{\"463\":1}}],[\"本章中我们用\",{\"1\":{\"444\":1}}],[\"本章中我们介绍了递归下降的方法\",{\"1\":{\"441\":1}}],[\"本章中我们回顾了计算机的内部运行原理\",{\"1\":{\"415\":1}}],[\"本章中要学习的\",{\"1\":{\"157\":1}}],[\"本项目中的代码逻辑绝大多数取自\",{\"1\":{\"390\":1}}],[\"本篇是一些闲聊\",{\"1\":{\"387\":1}}],[\"本人\",{\"1\":{\"318\":2}}],[\"本实例是一个控制小车的脚本语言解释器demo\",{\"1\":{\"260\":1}}],[\"本专栏源码大部分参考自参考资料\",{\"1\":{\"255\":1}}],[\"本来就没有两全其美的解决方案\",{\"1\":{\"96\":1}}],[\"本来就只能一个人打电话\",{\"1\":{\"94\":1}}],[\"本文转自\",{\"1\":{\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"本文转载自\",{\"1\":{\"387\":1}}],[\"本文为博主原创文章\",{\"1\":{\"30\":1}}],[\"本文是\",{\"1\":{\"13\":1}}],[\"本文将介绍如何使用\",{\"1\":{\"13\":1}}],[\"本地调试工具\",{\"1\":{\"10\":1}}],[\"+var\",{\"1\":{\"487\":1}}],[\"+global\",{\"1\":{\"445\":1}}],[\"++p时\",{\"1\":{\"488\":1}}],[\"++p\",{\"1\":{\"488\":2}}],[\"++pos\",{\"1\":{\"461\":1}}],[\"++text\",{\"1\":{\"461\":3,\"468\":4,\"469\":4,\"470\":1,\"479\":4,\"480\":2,\"481\":13,\"483\":1,\"485\":4,\"486\":4,\"487\":6,\"488\":7,\"490\":1,\"491\":4,\"492\":4,\"493\":8,\"494\":14,\"495\":7}}],[\"++line\",{\"1\":{\"422\":1}}],[\"++src\",{\"1\":{\"421\":1,\"425\":2,\"427\":1}}],[\"++\",{\"1\":{\"357\":3,\"428\":10,\"440\":2,\"481\":1,\"482\":1,\"483\":1}}],[\"+|return\",{\"1\":{\"411\":1,\"458\":1}}],[\"+|\",{\"1\":{\"214\":2,\"400\":4,\"411\":7,\"458\":6,\"477\":6}}],[\"+=\",{\"1\":{\"164\":2,\"174\":15,\"185\":1,\"213\":1,\"232\":4,\"286\":1,\"298\":1,\"343\":2,\"357\":1,\"367\":2,\"375\":1,\"407\":1}}],[\"+\",{\"0\":{\"13\":2},\"1\":{\"94\":2,\"95\":1,\"96\":4,\"134\":1,\"164\":2,\"165\":12,\"203\":1,\"213\":19,\"214\":12,\"232\":3,\"245\":109,\"260\":6,\"286\":2,\"312\":2,\"319\":4,\"357\":4,\"367\":2,\"368\":8,\"400\":2,\"401\":1,\"406\":2,\"409\":1,\"411\":6,\"412\":1,\"413\":1,\"417\":1,\"418\":8,\"420\":1,\"424\":22,\"425\":6,\"428\":3,\"436\":2,\"437\":2,\"439\":1,\"440\":4,\"448\":4,\"457\":1,\"458\":3,\"459\":1,\"460\":1,\"461\":1,\"468\":2,\"469\":2,\"477\":27,\"479\":1,\"480\":1,\"482\":1,\"484\":1,\"491\":2,\"492\":2,\"493\":3,\"495\":1,\"496\":1}}],[\"7章函数定义\",{\"1\":{\"481\":1}}],[\"7|\",{\"1\":{\"477\":1}}],[\"7\",{\"0\":{\"466\":1},\"1\":{\"9\":1,\"95\":1,\"96\":4,\"193\":2,\"245\":1,\"351\":1,\"387\":1,\"395\":1,\"398\":2,\"416\":2,\"425\":1,\"434\":2,\"444\":1,\"455\":1,\"466\":2,\"476\":2,\"500\":1}}],[\"80\",{\"1\":{\"17\":2,\"18\":2,\"23\":2,\"267\":1,\"268\":1}}],[\"8\",{\"0\":{\"476\":1},\"1\":{\"9\":1,\"17\":4,\"48\":1,\"94\":1,\"95\":1,\"96\":6,\"193\":2,\"245\":1,\"387\":1,\"395\":1,\"398\":2,\"416\":2,\"425\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":2,\"500\":1}}],[\"m32\",{\"1\":{\"414\":2}}],[\"mcmp\",{\"1\":{\"402\":1,\"413\":1}}],[\"mset\",{\"1\":{\"402\":1,\"413\":1}}],[\"msg\",{\"1\":{\"319\":2,\"343\":6}}],[\"mbox\",{\"1\":{\"312\":2}}],[\"mvc\",{\"0\":{\"306\":1},\"1\":{\"306\":2}}],[\"m\",{\"1\":{\"286\":3,\"400\":1}}],[\"me\",{\"1\":{\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"500\":1}}],[\"mechanism\",{\"1\":{\"338\":1}}],[\"messaging\",{\"1\":{\"275\":1}}],[\"messagebox\",{\"1\":{\"312\":6}}],[\"messages\",{\"1\":{\"275\":2}}],[\"message\",{\"1\":{\"232\":2,\"275\":5,\"276\":9,\"312\":2}}],[\"mediator\",{\"0\":{\"273\":1},\"1\":{\"234\":1,\"275\":11,\"276\":1,\"278\":1,\"279\":1,\"307\":1,\"348\":1}}],[\"memcmp\",{\"1\":{\"413\":2,\"424\":1,\"429\":1}}],[\"memset\",{\"1\":{\"400\":3,\"401\":1,\"413\":2,\"429\":1}}],[\"memory\",{\"1\":{\"400\":1,\"448\":2,\"457\":1}}],[\"memo\",{\"1\":{\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"memento\",{\"0\":{\"284\":1,\"285\":1,\"290\":1,\"291\":1},\"1\":{\"197\":1,\"285\":1,\"286\":17,\"289\":5,\"290\":4,\"291\":5,\"292\":9,\"314\":1}}],[\"method\",{\"0\":{\"237\":1,\"238\":1,\"365\":1,\"366\":1},\"1\":{\"139\":1,\"156\":1,\"169\":1,\"176\":1,\"237\":2,\"238\":2,\"240\":2,\"270\":1,\"365\":1,\"368\":1,\"369\":1}}],[\"md\",{\"0\":{\"107\":1}}],[\"mytornado\",{\"1\":{\"96\":5}}],[\"multiply\",{\"1\":{\"417\":1}}],[\"multidisplay\",{\"1\":{\"160\":1,\"163\":1}}],[\"mul\",{\"1\":{\"40\":1,\"402\":1,\"412\":1,\"420\":2,\"428\":1,\"448\":2,\"460\":2,\"461\":2,\"480\":2,\"482\":2,\"483\":2,\"487\":1,\"489\":1,\"493\":3,\"495\":1}}],[\"move\",{\"1\":{\"479\":1}}],[\"movw\",{\"1\":{\"403\":1}}],[\"movb\",{\"1\":{\"403\":1}}],[\"mov\",{\"0\":{\"403\":1},\"1\":{\"398\":1,\"403\":6,\"407\":4,\"410\":1}}],[\"mod\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"model\",{\"0\":{\"306\":1},\"1\":{\"306\":1}}],[\"modint1\",{\"1\":{\"41\":1}}],[\"modint<int\",{\"1\":{\"41\":3}}],[\"modint\",{\"0\":{\"36\":1},\"1\":{\"41\":9},\"2\":{\"43\":1,\"104\":1}}],[\"money\",{\"1\":{\"286\":21,\"287\":8}}],[\"mobile\",{\"2\":{\"92\":1}}],[\"more\",{\"1\":{\"33\":1}}],[\"missing\",{\"1\":{\"260\":1,\"491\":1}}],[\"mixmark\",{\"1\":{\"107\":1}}],[\"mime\",{\"1\":{\"17\":1}}],[\"mirrors\",{\"1\":{\"9\":1}}],[\"may\",{\"1\":{\"448\":1}}],[\"malc\",{\"1\":{\"402\":1,\"413\":1}}],[\"malloc\",{\"1\":{\"397\":2,\"400\":6,\"413\":2,\"429\":1,\"481\":1}}],[\"match\",{\"1\":{\"440\":8,\"448\":10,\"450\":2,\"459\":5,\"460\":5,\"461\":5,\"468\":4,\"469\":3,\"470\":2,\"471\":4,\"479\":3,\"480\":6,\"481\":4,\"482\":5,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":3,\"488\":1,\"490\":1,\"491\":2,\"492\":2,\"493\":2,\"495\":2}}],[\"math\",{\"1\":{\"286\":5,\"298\":2,\"357\":4}}],[\"mater\",{\"1\":{\"275\":1,\"276\":3}}],[\"map\",{\"1\":{\"245\":1}}],[\"map<string\",{\"1\":{\"245\":1}}],[\"maps\",{\"1\":{\"33\":1}}],[\"mamoru\",{\"1\":{\"232\":2}}],[\"mailprop\",{\"1\":{\"232\":2}}],[\"mailaddress\",{\"1\":{\"232\":4}}],[\"mailaddr\",{\"1\":{\"232\":2}}],[\"mailto\",{\"1\":{\"232\":2,\"233\":1}}],[\"maildata\",{\"1\":{\"232\":3}}],[\"mail\",{\"1\":{\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"mainly\",{\"1\":{\"424\":1}}],[\"main\",{\"0\":{\"163\":1,\"206\":1},\"1\":{\"17\":2,\"134\":2,\"137\":1,\"147\":1,\"148\":1,\"159\":1,\"165\":1,\"168\":2,\"174\":1,\"175\":1,\"185\":1,\"186\":1,\"192\":1,\"193\":1,\"207\":1,\"213\":1,\"214\":1,\"232\":1,\"233\":1,\"239\":1,\"240\":1,\"245\":1,\"246\":1,\"260\":1,\"261\":1,\"267\":1,\"268\":1,\"276\":1,\"286\":1,\"298\":1,\"299\":1,\"312\":1,\"313\":1,\"319\":1,\"320\":1,\"334\":1,\"335\":1,\"343\":1,\"344\":1,\"347\":1,\"357\":1,\"367\":1,\"368\":1,\"375\":1,\"376\":1,\"397\":1,\"400\":1,\"401\":1,\"414\":2,\"429\":3,\"440\":1,\"496\":3}}],[\"maintenance\",{\"0\":{\"8\":1},\"1\":{\"8\":1}}],[\"making\",{\"1\":{\"206\":2,\"207\":2,\"233\":1,\"375\":2,\"376\":2}}],[\"make\",{\"1\":{\"407\":1,\"408\":3,\"448\":1}}],[\"makewelcomepage\",{\"1\":{\"232\":2}}],[\"makeline\",{\"1\":{\"213\":3}}],[\"makeitems\",{\"1\":{\"174\":5}}],[\"makestring\",{\"1\":{\"174\":5}}],[\"maketitle\",{\"1\":{\"174\":4}}],[\"makehtml\",{\"1\":{\"134\":8}}],[\"macro\",{\"1\":{\"423\":1}}],[\"macrocommand\",{\"1\":{\"192\":9}}],[\"machine\",{\"1\":{\"400\":1,\"401\":1}}],[\"macintosh\",{\"1\":{\"167\":2}}],[\"manage\",{\"1\":{\"125\":2,\"275\":1}}],[\"manager\",{\"1\":{\"125\":4,\"312\":12}}],[\"master\",{\"1\":{\"96\":1}}],[\"mavencentral\",{\"1\":{\"9\":2}}],[\"maven\",{\"1\":{\"9\":26}}],[\"markdown\",{\"1\":{\"5\":1,\"101\":3,\"106\":1}}],[\"duplicate\",{\"1\":{\"448\":1,\"460\":1,\"461\":1,\"488\":1}}],[\"dump\",{\"1\":{\"400\":1}}],[\"daddy\",{\"1\":{\"267\":1,\"268\":1}}],[\"daystate\",{\"1\":{\"343\":10,\"348\":5,\"350\":1,\"351\":1}}],[\"days\",{\"1\":{\"267\":1,\"268\":1}}],[\"data++\",{\"1\":{\"426\":1}}],[\"databasename\",{\"1\":{\"232\":1}}],[\"database\",{\"1\":{\"232\":6}}],[\"data\",{\"1\":{\"32\":1,\"33\":7,\"397\":1,\"400\":8,\"426\":4,\"448\":5,\"479\":4}}],[\"drawing\",{\"1\":{\"193\":10}}],[\"drawcommand\",{\"1\":{\"192\":5}}],[\"drawcanvas\",{\"1\":{\"192\":8}}],[\"draw\",{\"1\":{\"192\":3}}],[\"drawable\",{\"1\":{\"192\":5}}],[\"driving\",{\"1\":{\"128\":2}}],[\"drive\",{\"1\":{\"128\":3}}],[\"divide\",{\"1\":{\"427\":1}}],[\"div\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"427\":2,\"489\":1}}],[\"directly\",{\"1\":{\"428\":1}}],[\"directory\",{\"0\":{\"203\":1},\"1\":{\"203\":6,\"206\":16,\"375\":14,\"379\":3,\"382\":1,\"383\":2}}],[\"director2\",{\"1\":{\"174\":2}}],[\"director\",{\"1\":{\"173\":1,\"174\":8,\"178\":1,\"180\":2}}],[\"dir\",{\"1\":{\"375\":4}}],[\"digitobserver\",{\"1\":{\"298\":5,\"299\":20,\"302\":1}}],[\"dice\",{\"1\":{\"286\":4}}],[\"diary\",{\"1\":{\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"diana\",{\"1\":{\"185\":3,\"186\":3}}],[\"dispatch\",{\"1\":{\"378\":1}}],[\"displayimpl\",{\"0\":{\"162\":1},\"1\":{\"159\":1,\"160\":3,\"161\":4,\"162\":1,\"164\":3,\"168\":1}}],[\"display\",{\"0\":{\"161\":1},\"1\":{\"159\":6,\"160\":3,\"161\":2,\"163\":5,\"168\":5,\"213\":36,\"216\":2,\"217\":3,\"367\":4}}],[\"displayprofile\",{\"1\":{\"121\":2}}],[\"distro\",{\"1\":{\"32\":3}}],[\"distributionurl=https\",{\"1\":{\"9\":1}}],[\"d3\",{\"1\":{\"163\":2,\"367\":2}}],[\"d2\",{\"1\":{\"163\":2,\"367\":2}}],[\"d1\",{\"1\":{\"163\":2,\"367\":2}}],[\"do\",{\"1\":{\"397\":2,\"487\":1}}],[\"doyyy\",{\"1\":{\"350\":1}}],[\"dophone\",{\"1\":{\"343\":6}}],[\"doalarm\",{\"1\":{\"343\":6}}],[\"douse\",{\"1\":{\"343\":6,\"351\":6}}],[\"double\",{\"1\":{\"337\":1,\"378\":1}}],[\"done\",{\"1\":{\"106\":1,\"185\":2}}],[\"doclock\",{\"1\":{\"343\":4,\"347\":3,\"348\":1}}],[\"doc\",{\"1\":{\"206\":1,\"207\":1,\"275\":1,\"276\":3,\"375\":1,\"376\":1}}],[\"documentation\",{\"1\":{\"26\":2}}],[\"docker部署certbot与nginx来获取ssl证书添加https及自动更新\",{\"1\":{\"26\":1}}],[\"dockerfile\",{\"1\":{\"15\":1,\"18\":3}}],[\"docker\",{\"0\":{\"13\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1},\"1\":{\"13\":2,\"14\":2,\"15\":1,\"18\":1,\"19\":1,\"22\":1,\"24\":1,\"29\":1,\"32\":10,\"33\":10}}],[\"dcqe\",{\"1\":{\"106\":1}}],[\"dnspy\",{\"1\":{\"47\":1}}],[\"dp\",{\"1\":{\"37\":1}}],[\"dereference\",{\"1\":{\"483\":3}}],[\"details\",{\"1\":{\"476\":1}}],[\"demo函数被调用时\",{\"1\":{\"458\":1}}],[\"demo\",{\"1\":{\"458\":1}}],[\"declenum\",{\"1\":{\"445\":1}}],[\"decl\",{\"1\":{\"445\":10,\"446\":2,\"448\":8,\"456\":7,\"457\":2,\"459\":4,\"460\":1}}],[\"declarations\",{\"1\":{\"459\":1,\"461\":1}}],[\"declaration\",{\"0\":{\"448\":1,\"449\":1},\"1\":{\"444\":2,\"445\":2,\"447\":3,\"448\":10,\"449\":1,\"450\":1,\"457\":1,\"459\":1,\"460\":2,\"461\":4}}],[\"dec\",{\"1\":{\"420\":1,\"425\":2,\"428\":1,\"488\":1,\"489\":1}}],[\"decochar\",{\"1\":{\"312\":8}}],[\"decorator\",{\"0\":{\"211\":1},\"1\":{\"149\":1,\"208\":1,\"214\":1,\"216\":3,\"217\":2,\"218\":1,\"219\":2,\"220\":1,\"314\":1,\"328\":1}}],[\"deleteobserver\",{\"1\":{\"298\":1}}],[\"delegation\",{\"1\":{\"147\":4}}],[\"delicious\",{\"1\":{\"286\":2,\"287\":30}}],[\"dest\",{\"1\":{\"403\":2}}],[\"design\",{\"0\":{\"509\":1},\"1\":{\"134\":2,\"148\":1,\"165\":2,\"175\":2,\"186\":2,\"193\":2,\"207\":2,\"214\":2,\"233\":2,\"240\":2,\"246\":2,\"261\":2,\"268\":2,\"275\":1,\"276\":2,\"299\":2,\"313\":2,\"320\":2,\"335\":2,\"344\":2,\"368\":2,\"376\":2}}],[\"desktop\",{\"0\":{\"32\":1},\"1\":{\"32\":5,\"33\":4}}],[\"devtool\",{\"1\":{\"387\":1}}],[\"device\",{\"1\":{\"382\":2}}],[\"dev\",{\"1\":{\"100\":1}}],[\"define\",{\"1\":{\"414\":1}}],[\"def\",{\"1\":{\"94\":2,\"95\":1,\"96\":5}}],[\"default\",{\"1\":{\"17\":1,\"397\":1,\"479\":1,\"481\":1}}],[\"deploy\",{\"1\":{\"90\":1}}],[\"dependencyresolutionmanagement\",{\"1\":{\"9\":1}}],[\"d\",{\"1\":{\"15\":1,\"17\":1,\"18\":4,\"19\":1,\"21\":2,\"22\":2,\"24\":1,\"134\":1,\"148\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1,\"397\":2,\"400\":3,\"413\":2,\"440\":3,\"448\":2,\"449\":3,\"450\":2,\"460\":2,\"461\":2,\"481\":2,\"483\":1,\"484\":1,\"488\":1,\"490\":1,\"491\":1,\"495\":1}}],[\"fd\",{\"1\":{\"397\":4,\"400\":1}}],[\"fn\",{\"1\":{\"338\":2}}],[\"f\",{\"1\":{\"286\":6,\"425\":2}}],[\"found\",{\"1\":{\"260\":1,\"424\":1,\"508\":1}}],[\"fontdatas\",{\"1\":{\"245\":2}}],[\"fontdata\",{\"1\":{\"245\":5}}],[\"forward\",{\"1\":{\"479\":1}}],[\"forwarded\",{\"1\":{\"17\":1}}],[\"foreach\",{\"1\":{\"134\":2,\"174\":2,\"192\":1,\"203\":1,\"245\":2,\"260\":1,\"286\":1,\"298\":1,\"375\":1}}],[\"for\",{\"1\":{\"17\":1,\"94\":4,\"96\":3,\"160\":1,\"164\":1,\"185\":1,\"192\":1,\"213\":2,\"232\":1,\"233\":1,\"275\":2,\"286\":1,\"298\":2,\"319\":1,\"343\":1,\"357\":2,\"367\":2,\"375\":1,\"397\":1,\"400\":5,\"407\":1,\"408\":1,\"411\":1,\"424\":2,\"448\":2,\"459\":1,\"461\":2,\"468\":1,\"470\":1,\"481\":1,\"489\":1}}],[\"format=freeze\",{\"1\":{\"44\":1}}],[\"format\",{\"1\":{\"17\":1}}],[\"flex\",{\"1\":{\"389\":1,\"390\":1,\"392\":1,\"396\":1,\"419\":1}}],[\"floor\",{\"1\":{\"286\":2,\"298\":1,\"357\":2}}],[\"flyweight\",{\"0\":{\"243\":1,\"244\":1},\"1\":{\"244\":3,\"246\":1,\"248\":4,\"250\":1,\"251\":1,\"314\":1,\"352\":1,\"362\":1}}],[\"flask\",{\"0\":{\"13\":1},\"1\":{\"13\":1,\"25\":1,\"26\":3}}],[\"falt\",{\"1\":{\"430\":1}}],[\"false\",{\"1\":{\"185\":4,\"357\":2,\"468\":1,\"485\":1}}],[\"fault\",{\"1\":{\"414\":1}}],[\"fastbutmorememorystrategy\",{\"1\":{\"361\":1}}],[\"factor\",{\"1\":{\"440\":4}}],[\"factory\",{\"0\":{\"237\":1,\"238\":1},\"1\":{\"134\":21,\"137\":3,\"138\":2,\"139\":1,\"169\":1,\"176\":1,\"234\":1,\"237\":2,\"238\":2,\"239\":12,\"240\":1,\"245\":4,\"270\":1,\"362\":1,\"369\":1}}],[\"facade\",{\"0\":{\"230\":1},\"1\":{\"176\":1,\"231\":1,\"233\":1,\"281\":1,\"336\":1}}],[\"failed\",{\"1\":{\"49\":1}}],[\"fail\",{\"1\":{\"9\":1,\"185\":2}}],[\"func\",{\"1\":{\"459\":1,\"461\":1}}],[\"functions\",{\"1\":{\"481\":1}}],[\"functionvoid\",{\"1\":{\"429\":1}}],[\"functionenum\",{\"1\":{\"429\":1,\"448\":1}}],[\"function\",{\"1\":{\"134\":1,\"338\":1,\"411\":1,\"445\":2,\"448\":4,\"450\":1,\"456\":1,\"457\":2,\"459\":5,\"460\":1,\"461\":2,\"471\":1,\"481\":4}}],[\"function执行时间超过5s\",{\"1\":{\"49\":1}}],[\"function执行时间过长\",{\"1\":{\"49\":1}}],[\"fun\",{\"1\":{\"420\":1,\"448\":1,\"457\":2,\"481\":1,\"489\":1}}],[\"fullborder\",{\"1\":{\"213\":8,\"217\":1}}],[\"fullchain\",{\"1\":{\"22\":2,\"23\":3}}],[\"fields\",{\"1\":{\"424\":1}}],[\"fight\",{\"1\":{\"357\":3}}],[\"first\",{\"1\":{\"49\":1,\"479\":2}}],[\"finally\",{\"1\":{\"94\":1}}],[\"final\",{\"1\":{\"48\":1}}],[\"filetreatmentexception\",{\"1\":{\"204\":1}}],[\"filename\",{\"1\":{\"174\":4,\"232\":3}}],[\"files\",{\"1\":{\"17\":3,\"23\":5,\"106\":1}}],[\"file\",{\"0\":{\"205\":1},\"1\":{\"10\":3,\"22\":3,\"174\":2,\"175\":2,\"205\":1,\"206\":9,\"375\":15,\"379\":3,\"382\":1,\"397\":1}}],[\"filter\",{\"1\":{\"8\":1,\"275\":1,\"298\":1}}],[\"frameadd\",{\"1\":{\"409\":1}}],[\"framepush\",{\"1\":{\"408\":1}}],[\"frame\",{\"1\":{\"400\":1,\"407\":3,\"408\":2,\"409\":1,\"410\":2}}],[\"fruit\",{\"1\":{\"286\":3}}],[\"fruitsname\",{\"1\":{\"286\":3}}],[\"fruits\",{\"1\":{\"286\":12,\"287\":3}}],[\"fred\",{\"1\":{\"185\":3,\"186\":1}}],[\"freeze\",{\"1\":{\"44\":1}}],[\"from\",{\"1\":{\"18\":1,\"96\":1,\"134\":15,\"147\":6,\"160\":2,\"161\":1,\"163\":3,\"164\":1,\"174\":7,\"185\":14,\"192\":8,\"203\":1,\"205\":1,\"206\":3,\"213\":9,\"232\":3,\"239\":6,\"245\":5,\"260\":19,\"267\":9,\"286\":2,\"298\":12,\"312\":5,\"319\":5,\"334\":1,\"343\":12,\"357\":10,\"367\":4,\"375\":15,\"407\":2,\"409\":2}}],[\"jnz\",{\"0\":{\"406\":1},\"1\":{\"398\":1,\"402\":1,\"406\":1,\"492\":2}}],[\"jz\",{\"0\":{\"406\":1},\"1\":{\"398\":1,\"402\":1,\"406\":1,\"468\":2,\"469\":2,\"491\":1,\"492\":2}}],[\"jmp\",{\"0\":{\"405\":1},\"1\":{\"398\":1,\"402\":1,\"405\":3,\"407\":1,\"468\":4,\"469\":2,\"491\":1}}],[\"just\",{\"1\":{\"461\":1,\"479\":1}}],[\"jump\",{\"1\":{\"405\":1,\"406\":2}}],[\"junk\",{\"1\":{\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"judge\",{\"1\":{\"37\":1}}],[\"java这些成熟的语言都是手动实现的\",{\"1\":{\"392\":1}}],[\"java\",{\"1\":{\"206\":1,\"207\":1,\"250\":1,\"375\":1,\"376\":1}}],[\"jp\",{\"1\":{\"134\":5}}],[\"join\",{\"1\":{\"94\":1,\"96\":1,\"134\":2,\"260\":1,\"286\":1}}],[\"jcenter\",{\"1\":{\"9\":2}}],[\"jitpack\",{\"1\":{\"9\":2}}],[\"h>enum\",{\"1\":{\"440\":1}}],[\"h>int\",{\"1\":{\"397\":1}}],[\"h>\",{\"1\":{\"397\":3,\"423\":1,\"440\":1}}],[\"hv\",{\"1\":{\"357\":2}}],[\"h\",{\"1\":{\"357\":7,\"367\":1,\"368\":5}}],[\"hour++\",{\"1\":{\"343\":1}}],[\"hour\",{\"1\":{\"343\":16,\"347\":1}}],[\"home\",{\"1\":{\"22\":4}}],[\"href\",{\"1\":{\"232\":2}}],[\"href=\",{\"1\":{\"134\":6,\"232\":1,\"233\":1}}],[\"high\",{\"1\":{\"400\":1,\"411\":1,\"458\":1}}],[\"hiroshi\",{\"1\":{\"232\":1,\"233\":2}}],[\"history\",{\"1\":{\"192\":8,\"357\":8}}],[\"hyuki\",{\"1\":{\"232\":7,\"233\":4}}],[\"hana\",{\"1\":{\"357\":1,\"358\":7}}],[\"hanako\",{\"1\":{\"206\":4,\"207\":2,\"232\":2,\"375\":4,\"376\":2}}],[\"handle\",{\"1\":{\"429\":1}}],[\"handvalue\",{\"1\":{\"357\":22}}],[\"hand\",{\"1\":{\"357\":28}}],[\"happened\",{\"1\":{\"286\":1,\"287\":2}}],[\"halved\",{\"1\":{\"286\":2,\"287\":2}}],[\"have\",{\"1\":{\"275\":2}}],[\"hash\",{\"1\":{\"421\":1,\"424\":10}}],[\"hashmap\",{\"1\":{\"250\":1}}],[\"has\",{\"1\":{\"275\":1,\"482\":1,\"483\":1}}],[\"hasnext\",{\"1\":{\"267\":3,\"268\":1}}],[\"hasmoretokens\",{\"1\":{\"260\":2}}],[\"harmony\",{\"1\":{\"47\":1}}],[\"h1><p>从早上到下午<\",{\"1\":{\"175\":1}}],[\"h1>\",{\"1\":{\"134\":1,\"232\":1,\"233\":1}}],[\"h1>`\",{\"1\":{\"134\":1,\"174\":1}}],[\"hex\",{\"1\":{\"425\":2}}],[\"here\",{\"1\":{\"421\":1,\"422\":1}}],[\"heap\",{\"1\":{\"400\":2}}],[\"heavyjob\",{\"1\":{\"319\":3}}],[\"head><body>\",{\"1\":{\"232\":1,\"233\":1}}],[\"head><body><h1>问候<\",{\"1\":{\"175\":1}}],[\"head><body>`\",{\"1\":{\"174\":1}}],[\"head>\",{\"1\":{\"134\":1}}],[\"head>`\",{\"1\":{\"134\":1}}],[\"header\",{\"1\":{\"17\":2}}],[\"helloworld\",{\"1\":{\"387\":1}}],[\"hello\",{\"1\":{\"96\":5,\"147\":2,\"148\":4,\"163\":3,\"213\":2,\"214\":3,\"312\":3,\"313\":3,\"367\":1,\"414\":1,\"496\":2}}],[\"html<html><head><title>welcome\",{\"1\":{\"233\":1}}],[\"htmlwriter\",{\"1\":{\"232\":5}}],[\"html`\",{\"1\":{\"174\":1}}],[\"htmlbuilder\",{\"1\":{\"174\":9,\"180\":2}}],[\"html>が作成されました\",{\"1\":{\"175\":1}}],[\"html>\",{\"1\":{\"134\":1,\"174\":1,\"232\":1,\"233\":1}}],[\"html>`\",{\"1\":{\"134\":1}}],[\"html2text\",{\"1\":{\"107\":1}}],[\"html\",{\"0\":{\"107\":1},\"1\":{\"17\":3,\"18\":2,\"23\":5,\"33\":1,\"135\":1,\"174\":1,\"175\":1,\"206\":1,\"207\":1,\"232\":1,\"233\":1,\"375\":1,\"376\":1}}],[\"http\",{\"0\":{\"326\":1},\"1\":{\"17\":1,\"19\":3,\"134\":11,\"326\":3}}],[\"https\",{\"0\":{\"25\":1},\"1\":{\"9\":14,\"13\":1,\"23\":2,\"33\":1,\"49\":1,\"93\":1,\"97\":1,\"100\":1,\"101\":2,\"107\":2,\"395\":1,\"397\":1,\"398\":1,\"415\":1,\"416\":1,\"430\":1,\"434\":1,\"444\":1,\"451\":1,\"455\":1,\"462\":1,\"466\":1,\"472\":1,\"476\":1,\"496\":1,\"500\":1}}],[\"hub的目标是\",{\"1\":{\"5\":1}}],[\"hub\",{\"1\":{\"5\":1}}],[\"修改一个地方会对多个地方产生影响\",{\"1\":{\"248\":1}}],[\"修改的工作量就会越大\",{\"1\":{\"138\":1}}],[\"修改配置\",{\"0\":{\"23\":1}}],[\"修改\",{\"1\":{\"9\":1}}],[\"国内镜像\",{\"1\":{\"9\":1}}],[\"csdn\",{\"1\":{\"476\":1}}],[\"cycle\",{\"1\":{\"401\":1}}],[\"cpu\",{\"1\":{\"399\":2,\"401\":1,\"402\":2}}],[\"cpp\",{\"1\":{\"392\":1}}],[\"c4\",{\"1\":{\"390\":4,\"425\":1}}],[\"currently\",{\"1\":{\"426\":1}}],[\"currentdir\",{\"1\":{\"375\":7}}],[\"currenthandvalue\",{\"1\":{\"357\":10}}],[\"current\",{\"1\":{\"261\":5,\"286\":1,\"287\":3,\"397\":1,\"424\":13,\"429\":6,\"448\":6,\"449\":3,\"457\":2,\"459\":11,\"460\":11,\"461\":11,\"481\":1}}],[\"currenttoken\",{\"1\":{\"260\":8}}],[\"ctx\",{\"1\":{\"260\":1}}],[\"cmd\",{\"1\":{\"192\":2}}],[\"creating\",{\"1\":{\"174\":2,\"175\":2,\"275\":1}}],[\"created\",{\"1\":{\"334\":1,\"335\":1,\"338\":1}}],[\"createclone\",{\"1\":{\"312\":4}}],[\"creatememento\",{\"1\":{\"286\":3}}],[\"create\",{\"1\":{\"239\":4,\"275\":1,\"312\":6}}],[\"createproduct\",{\"1\":{\"239\":3}}],[\"createpicture\",{\"1\":{\"138\":1}}],[\"createpage\",{\"1\":{\"134\":3}}],[\"createtray\",{\"1\":{\"134\":5}}],[\"createlink\",{\"1\":{\"134\":8}}],[\"c\",{\"0\":{\"387\":1,\"395\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1},\"1\":{\"106\":1,\"279\":4,\"387\":15,\"390\":4,\"395\":16,\"397\":4,\"398\":15,\"403\":1,\"407\":2,\"412\":1,\"413\":1,\"414\":3,\"415\":2,\"416\":12,\"420\":1,\"421\":1,\"423\":1,\"424\":1,\"427\":1,\"430\":1,\"434\":12,\"440\":2,\"444\":13,\"451\":1,\"455\":12,\"461\":2,\"462\":1,\"466\":12,\"467\":1,\"468\":1,\"469\":1,\"472\":1,\"476\":11,\"477\":2,\"479\":1,\"481\":1,\"491\":1,\"493\":1,\"495\":1,\"496\":5,\"500\":13},\"2\":{\"394\":1,\"433\":1,\"443\":1,\"454\":1,\"465\":1,\"475\":1,\"499\":1,\"507\":1}}],[\"cn\",{\"1\":{\"93\":1,\"97\":1,\"100\":1}}],[\"cnblogs\",{\"1\":{\"33\":1}}],[\"cast\",{\"1\":{\"482\":3}}],[\"category\",{\"1\":{\"398\":1}}],[\"catchaw\",{\"1\":{\"275\":1,\"276\":3}}],[\"catch\",{\"1\":{\"134\":1,\"260\":1,\"312\":2,\"319\":1}}],[\"caller\",{\"1\":{\"407\":2}}],[\"callee\",{\"1\":{\"407\":4}}],[\"calling\",{\"1\":{\"400\":1}}],[\"call\",{\"1\":{\"344\":48,\"402\":1,\"407\":10,\"408\":2,\"410\":2,\"471\":1,\"481\":6,\"496\":1}}],[\"callsecuritycenter\",{\"1\":{\"343\":6}}],[\"caretaker\",{\"0\":{\"292\":1},\"1\":{\"289\":1,\"292\":4}}],[\"card3\",{\"1\":{\"239\":2}}],[\"card2\",{\"1\":{\"239\":2}}],[\"card1\",{\"1\":{\"239\":2}}],[\"car\",{\"1\":{\"128\":7}}],[\"caption\",{\"1\":{\"134\":20,\"232\":2}}],[\"cap\",{\"1\":{\"90\":2}}],[\"capacitorhttp\",{\"1\":{\"90\":1}}],[\"capacitorconfig\",{\"1\":{\"90\":1}}],[\"capacitor\",{\"1\":{\"89\":1}}],[\"canvas\",{\"1\":{\"192\":3}}],[\"canv\",{\"1\":{\"192\":2}}],[\"cannot\",{\"1\":{\"185\":1,\"186\":3}}],[\"can\",{\"1\":{\"8\":1,\"275\":1,\"481\":1}}],[\"cho\",{\"1\":{\"357\":2}}],[\"checked\",{\"1\":{\"337\":1}}],[\"cheat\",{\"1\":{\"5\":2}}],[\"ch\",{\"1\":{\"213\":4,\"367\":5}}],[\"china\",{\"1\":{\"163\":1,\"165\":1}}],[\"chatappmediator\",{\"1\":{\"275\":6,\"278\":2}}],[\"character\",{\"1\":{\"397\":1,\"403\":2,\"426\":3,\"428\":1,\"479\":1}}],[\"chardisplay\",{\"1\":{\"367\":5}}],[\"char\",{\"1\":{\"245\":2,\"397\":1,\"400\":1,\"403\":2,\"413\":6,\"414\":1,\"420\":1,\"421\":1,\"424\":3,\"429\":4,\"440\":3,\"448\":5,\"458\":1,\"460\":3,\"461\":2,\"479\":3,\"480\":7,\"481\":1,\"482\":3,\"483\":1,\"488\":2,\"489\":1,\"490\":1,\"493\":1,\"494\":5,\"495\":2}}],[\"charname\",{\"1\":{\"245\":10}}],[\"charlie使用了id卡\",{\"1\":{\"240\":1}}],[\"charlie\",{\"1\":{\"185\":3,\"186\":1,\"239\":1}}],[\"charset\",{\"1\":{\"48\":1}}],[\"chain\",{\"1\":{\"183\":1,\"184\":1,\"185\":1}}],[\"chainofresponsibility\",{\"0\":{\"183\":1},\"1\":{\"186\":1}}],[\"changestate\",{\"1\":{\"343\":4,\"348\":1}}],[\"change\",{\"1\":{\"94\":2,\"95\":5,\"96\":16}}],[\"ccompiler\",{\"0\":{\"509\":1}}],[\"cc\",{\"1\":{\"30\":1}}],[\"cer\",{\"1\":{\"22\":2,\"23\":3}}],[\"certificates\",{\"1\":{\"26\":1}}],[\"certificate\",{\"1\":{\"23\":6}}],[\"cert\",{\"1\":{\"22\":3}}],[\"central\",{\"1\":{\"9\":2}}],[\"colon\",{\"1\":{\"491\":1}}],[\"colleaguecheckbox\",{\"1\":{\"280\":1}}],[\"colleaguetextfield\",{\"1\":{\"280\":1}}],[\"colleaguebutton\",{\"1\":{\"280\":1}}],[\"collaborators\",{\"1\":{\"275\":1}}],[\"could\",{\"1\":{\"397\":2,\"400\":3}}],[\"count\",{\"1\":{\"213\":2,\"298\":2}}],[\"countdisplay\",{\"0\":{\"160\":1},\"1\":{\"159\":2,\"160\":1,\"163\":4,\"168\":3}}],[\"code\",{\"1\":{\"49\":1,\"101\":2,\"134\":1,\"148\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"275\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1,\"397\":1,\"418\":1,\"461\":1,\"468\":1,\"470\":1,\"479\":2,\"480\":1,\"481\":2,\"485\":1,\"486\":1}}],[\"copy\",{\"1\":{\"18\":2,\"90\":1}}],[\"convenienceint\",{\"1\":{\"448\":1}}],[\"conditional\",{\"1\":{\"491\":1}}],[\"condition\",{\"1\":{\"468\":1}}],[\"cond\",{\"1\":{\"420\":1,\"428\":1,\"489\":1,\"491\":3}}],[\"concretevisitor\",{\"0\":{\"381\":1},\"1\":{\"378\":1,\"379\":3,\"381\":2,\"382\":1}}],[\"concreteelement\",{\"0\":{\"382\":1},\"1\":{\"378\":1,\"381\":1,\"382\":1}}],[\"concretestrategy\",{\"1\":{\"360\":1}}],[\"concretestate\",{\"1\":{\"346\":1,\"348\":9,\"350\":2}}],[\"concreteobserver\",{\"1\":{\"302\":1}}],[\"concretemediator\",{\"1\":{\"280\":2}}],[\"concretecolleague\",{\"1\":{\"280\":3}}],[\"concreteclass\",{\"1\":{\"156\":1}}],[\"concrete\",{\"1\":{\"275\":1}}],[\"concreteiterator\",{\"1\":{\"269\":1}}],[\"concreteimplementor\",{\"1\":{\"167\":1,\"168\":1}}],[\"concretedecorator\",{\"1\":{\"219\":1}}],[\"console\",{\"1\":{\"125\":1,\"128\":4,\"134\":2,\"147\":2,\"164\":2,\"174\":4,\"185\":2,\"192\":1,\"203\":1,\"205\":1,\"206\":2,\"213\":1,\"232\":2,\"239\":1,\"245\":1,\"260\":2,\"267\":1,\"275\":3,\"286\":10,\"298\":2,\"312\":9,\"319\":9,\"334\":2,\"338\":1,\"343\":4,\"357\":6,\"367\":5,\"375\":4}}],[\"construct\",{\"1\":{\"174\":3}}],[\"constructor\",{\"1\":{\"125\":1,\"128\":1,\"134\":6,\"147\":3,\"160\":1,\"161\":1,\"164\":1,\"174\":1,\"185\":5,\"192\":2,\"203\":1,\"205\":1,\"213\":4,\"232\":3,\"239\":1,\"245\":3,\"260\":2,\"267\":3,\"275\":1,\"286\":2,\"298\":1,\"312\":2,\"319\":2,\"334\":1,\"338\":1,\"343\":2,\"357\":4,\"367\":2,\"375\":2}}],[\"const\",{\"1\":{\"41\":9,\"90\":1,\"125\":2,\"128\":2,\"147\":2,\"163\":3,\"174\":6,\"192\":3,\"239\":5,\"260\":1,\"267\":4,\"275\":7,\"286\":4,\"298\":4,\"312\":3,\"334\":2,\"343\":1,\"357\":5,\"367\":3,\"375\":2}}],[\"constexpr\",{\"1\":{\"39\":1,\"40\":1}}],[\"controller\",{\"0\":{\"306\":1},\"1\":{\"306\":1}}],[\"contents\",{\"1\":{\"395\":1,\"398\":1,\"416\":1,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"content\",{\"1\":{\"47\":1,\"134\":4}}],[\"context\",{\"1\":{\"18\":1,\"260\":43,\"343\":43,\"348\":3,\"351\":3}}],[\"containers\",{\"1\":{\"33\":1}}],[\"connections\",{\"1\":{\"17\":1}}],[\"config\",{\"1\":{\"90\":1}}],[\"conf\",{\"1\":{\"15\":4,\"17\":5,\"18\":6,\"23\":2}}],[\"comma\",{\"1\":{\"448\":1}}],[\"commandnode\",{\"1\":{\"260\":8}}],[\"commandlistnode\",{\"1\":{\"260\":17}}],[\"command>\",{\"1\":{\"260\":12}}],[\"commands\",{\"1\":{\"192\":5}}],[\"command\",{\"0\":{\"190\":1},\"1\":{\"187\":1,\"191\":2,\"192\":14,\"193\":1,\"196\":2,\"208\":1,\"293\":1,\"314\":1}}],[\"comments\",{\"1\":{\"427\":2}}],[\"community\",{\"1\":{\"33\":2}}],[\"compiler\",{\"1\":{\"392\":1}}],[\"complete\",{\"1\":{\"95\":1,\"96\":3}}],[\"composite\",{\"0\":{\"200\":1},\"1\":{\"139\":1,\"176\":1,\"187\":1,\"197\":1,\"201\":2,\"206\":1,\"207\":2,\"216\":2,\"240\":1,\"252\":1,\"270\":1,\"314\":1,\"375\":1,\"376\":1,\"384\":1}}],[\"compose\",{\"1\":{\"14\":1,\"15\":1,\"18\":1,\"19\":1,\"22\":1,\"24\":1}}],[\"component\",{\"1\":{\"8\":1,\"275\":1}}],[\"com\",{\"1\":{\"9\":13,\"33\":1,\"49\":1,\"101\":2,\"107\":2,\"134\":11,\"232\":5,\"233\":2,\"397\":1,\"415\":1,\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"496\":1}}],[\"cd\",{\"0\":{\"10\":1},\"1\":{\"22\":2},\"2\":{\"11\":1,\"12\":1}}],[\"cinderella\",{\"1\":{\"267\":1,\"268\":1}}],[\"ci\",{\"0\":{\"10\":1},\"2\":{\"11\":1,\"12\":1}}],[\"clean\",{\"1\":{\"481\":1}}],[\"clear\",{\"1\":{\"192\":1}}],[\"clos\",{\"1\":{\"402\":1,\"413\":1}}],[\"close\",{\"1\":{\"159\":1,\"160\":1,\"161\":2,\"174\":4,\"232\":2,\"367\":4,\"397\":1,\"400\":1,\"413\":2,\"429\":1}}],[\"clone\",{\"1\":{\"397\":2,\"415\":2,\"430\":2,\"451\":2,\"462\":2,\"472\":2,\"496\":2}}],[\"clockstring\",{\"1\":{\"343\":4}}],[\"cloud\",{\"1\":{\"9\":1}}],[\"classes\",{\"1\":{\"420\":1}}],[\"class\",{\"1\":{\"41\":1,\"121\":3,\"125\":2,\"128\":4,\"134\":9,\"147\":4,\"160\":1,\"161\":1,\"162\":1,\"164\":1,\"174\":4,\"185\":6,\"192\":3,\"203\":1,\"204\":1,\"205\":1,\"213\":5,\"232\":3,\"239\":3,\"245\":3,\"260\":8,\"267\":3,\"275\":2,\"286\":2,\"298\":4,\"312\":3,\"319\":2,\"334\":1,\"338\":1,\"343\":3,\"357\":4,\"367\":3,\"375\":5,\"424\":3,\"429\":1,\"448\":3,\"449\":1,\"457\":1,\"459\":2,\"460\":3,\"461\":3,\"481\":5}}],[\"client\",{\"1\":{\"17\":2,\"275\":1}}],[\"click\",{\"1\":{\"8\":2}}],[\"i++\",{\"1\":{\"160\":1,\"164\":1,\"192\":1,\"213\":2,\"286\":1,\"298\":2,\"319\":1,\"357\":2,\"367\":2,\"375\":1,\"414\":8,\"429\":2,\"449\":1}}],[\"iworker\",{\"1\":{\"125\":4}}],[\"if\",{\"0\":{\"468\":1},\"1\":{\"94\":1,\"185\":5,\"213\":3,\"245\":1,\"260\":7,\"275\":2,\"286\":6,\"319\":2,\"334\":1,\"338\":2,\"343\":3,\"357\":8,\"375\":2,\"397\":3,\"400\":3,\"403\":5,\"404\":1,\"405\":1,\"406\":5,\"407\":2,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":16,\"413\":8,\"420\":1,\"422\":1,\"423\":1,\"424\":3,\"425\":3,\"426\":6,\"427\":2,\"428\":24,\"429\":2,\"440\":7,\"445\":3,\"448\":10,\"449\":4,\"450\":1,\"456\":3,\"457\":1,\"459\":1,\"460\":5,\"461\":3,\"466\":1,\"467\":1,\"468\":8,\"469\":2,\"470\":2,\"471\":2,\"479\":2,\"480\":3,\"481\":9,\"482\":2,\"483\":2,\"484\":2,\"485\":1,\"486\":1,\"487\":3,\"488\":3,\"489\":1,\"490\":2,\"491\":4,\"492\":2,\"493\":3,\"495\":3,\"496\":1}}],[\"i\",{\"1\":{\"94\":2,\"96\":1,\"160\":2,\"164\":2,\"185\":4,\"192\":4,\"213\":5,\"286\":3,\"298\":4,\"319\":2,\"357\":5,\"367\":4,\"375\":3,\"397\":4,\"400\":2,\"407\":2,\"408\":1,\"414\":1,\"429\":4,\"448\":1,\"449\":3}}],[\"iterator\",{\"1\":{\"240\":1,\"267\":14,\"268\":4,\"375\":4,\"383\":1,\"384\":1}}],[\"items\",{\"1\":{\"174\":5}}],[\"item\",{\"1\":{\"134\":21,\"174\":4}}],[\"it\",{\"1\":{\"94\":4,\"95\":5,\"96\":20,\"267\":3,\"275\":1,\"375\":3,\"423\":1,\"426\":1,\"448\":1,\"481\":1}}],[\"immediate\",{\"1\":{\"403\":1}}],[\"imm\",{\"1\":{\"402\":1,\"403\":3,\"414\":2,\"479\":3,\"480\":1,\"481\":4,\"484\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":1,\"490\":2,\"493\":2,\"494\":3,\"495\":1}}],[\"implemented\",{\"1\":{\"375\":2}}],[\"implementor\",{\"1\":{\"167\":1}}],[\"implementation\",{\"1\":{\"159\":1}}],[\"implements\",{\"1\":{\"125\":1,\"147\":1,\"192\":3,\"239\":1,\"267\":2,\"275\":2,\"298\":2,\"312\":2,\"319\":2,\"343\":3,\"357\":2,\"375\":1}}],[\"impl\",{\"1\":{\"159\":3,\"160\":2,\"161\":7}}],[\"import\",{\"1\":{\"94\":1,\"95\":1,\"96\":5,\"134\":15,\"147\":6,\"160\":2,\"161\":1,\"163\":3,\"164\":1,\"174\":7,\"185\":14,\"192\":8,\"203\":1,\"205\":1,\"206\":3,\"213\":9,\"232\":3,\"239\":6,\"245\":5,\"260\":19,\"267\":9,\"286\":2,\"298\":12,\"312\":5,\"319\":5,\"334\":1,\"343\":12,\"357\":10,\"367\":4,\"375\":15}}],[\"img\",{\"1\":{\"95\":1}}],[\"images\",{\"1\":{\"32\":1}}],[\"idmain\",{\"1\":{\"429\":2}}],[\"idsize\",{\"1\":{\"424\":2,\"459\":1}}],[\"identifierenum\",{\"1\":{\"424\":1}}],[\"identifier\",{\"1\":{\"424\":5,\"448\":3,\"449\":1,\"457\":1,\"461\":1}}],[\"idcardfactory\",{\"1\":{\"239\":5}}],[\"idcard\",{\"1\":{\"239\":7}}],[\"id\",{\"1\":{\"93\":1,\"97\":1,\"334\":1,\"335\":1,\"338\":1,\"420\":1,\"424\":15,\"429\":6,\"445\":8,\"448\":17,\"449\":5,\"456\":5,\"457\":2,\"459\":11,\"460\":14,\"461\":12,\"481\":18,\"489\":1}}],[\"isweakerthan\",{\"1\":{\"357\":1}}],[\"isstrongerthan\",{\"1\":{\"357\":3}}],[\"issue\",{\"1\":{\"21\":2}}],[\"is\",{\"1\":{\"32\":1,\"47\":1,\"128\":2,\"185\":1,\"186\":13,\"260\":3,\"275\":1,\"397\":1,\"406\":2,\"426\":2,\"480\":1,\"481\":3,\"493\":2}}],[\"isn\",{\"0\":{\"8\":1}}],[\"initializer\",{\"1\":{\"449\":1}}],[\"invalid\",{\"1\":{\"448\":1,\"461\":1}}],[\"information\",{\"1\":{\"448\":1}}],[\"increment\",{\"1\":{\"488\":1}}],[\"increased\",{\"1\":{\"286\":2}}],[\"inc\",{\"1\":{\"420\":1,\"428\":1,\"482\":2,\"483\":2,\"484\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":3,\"489\":1,\"494\":3}}],[\"include\",{\"1\":{\"17\":2,\"275\":1,\"397\":4,\"423\":1,\"440\":2}}],[\"independent\",{\"1\":{\"275\":1}}],[\"index++\",{\"1\":{\"260\":1,\"267\":1}}],[\"index\",{\"1\":{\"260\":3,\"267\":6,\"460\":5,\"461\":3,\"481\":1}}],[\"indent\",{\"1\":{\"48\":1}}],[\"inheritance\",{\"1\":{\"147\":4}}],[\"inject\",{\"1\":{\"106\":2}}],[\"into\",{\"1\":{\"426\":1}}],[\"integer\",{\"1\":{\"403\":2}}],[\"intel\",{\"1\":{\"403\":1}}],[\"interperter\",{\"1\":{\"261\":1}}],[\"interpreter\",{\"0\":{\"258\":1},\"1\":{\"259\":1,\"384\":1,\"390\":1,\"395\":1,\"397\":1,\"398\":1,\"415\":1,\"416\":1,\"430\":1,\"434\":1,\"444\":1,\"451\":1,\"455\":1,\"462\":1,\"466\":1,\"472\":1,\"496\":1,\"500\":1}}],[\"interface\",{\"1\":{\"125\":1,\"147\":1,\"192\":2,\"239\":1,\"267\":2,\"275\":2,\"289\":2,\"298\":1,\"312\":1,\"319\":1,\"343\":2,\"357\":1,\"375\":1}}],[\"intrinsic\",{\"0\":{\"249\":1},\"1\":{\"249\":4}}],[\"int\",{\"1\":{\"39\":2,\"40\":11,\"397\":6,\"400\":3,\"401\":3,\"403\":3,\"405\":1,\"406\":2,\"407\":9,\"408\":1,\"410\":2,\"411\":1,\"413\":2,\"414\":3,\"420\":1,\"421\":1,\"424\":13,\"426\":1,\"429\":4,\"440\":20,\"448\":14,\"449\":2,\"450\":1,\"457\":1,\"458\":4,\"460\":7,\"461\":5,\"468\":2,\"469\":2,\"479\":4,\"480\":8,\"481\":1,\"482\":2,\"485\":1,\"486\":1,\"487\":2,\"488\":1,\"489\":1,\"491\":2,\"492\":4,\"493\":3,\"494\":3,\"495\":1,\"496\":5}}],[\"instruction\",{\"1\":{\"413\":1}}],[\"instructionsenum\",{\"1\":{\"402\":1}}],[\"instanceof\",{\"1\":{\"375\":2}}],[\"instance\",{\"1\":{\"275\":1,\"334\":5,\"335\":1,\"338\":6}}],[\"install\",{\"1\":{\"22\":1}}],[\"insert\",{\"1\":{\"48\":1}}],[\"inspect\",{\"1\":{\"33\":1}}],[\"in\",{\"0\":{\"8\":1,\"29\":1},\"1\":{\"8\":2,\"33\":1,\"94\":4,\"96\":3,\"267\":1,\"268\":1,\"403\":4,\"420\":1,\"481\":2,\"490\":1,\"491\":1}}],[\"ionic打包后的相对路径不正确\",{\"1\":{\"91\":1}}],[\"ionic\",{\"1\":{\"89\":1,\"90\":4}}],[\"io\",{\"1\":{\"5\":1,\"9\":2,\"107\":1}}],[\"5501\",{\"1\":{\"476\":1}}],[\"55718\",{\"1\":{\"101\":1}}],[\"50\",{\"1\":{\"298\":1}}],[\"500\",{\"1\":{\"185\":1,\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"5版本开始引入了新的关键字\",{\"1\":{\"96\":1}}],[\"5\",{\"0\":{\"8\":1,\"444\":1},\"1\":{\"8\":1,\"163\":1,\"193\":2,\"245\":1,\"279\":1,\"286\":1,\"287\":1,\"319\":2,\"367\":1,\"387\":1,\"395\":1,\"398\":2,\"403\":1,\"407\":2,\"413\":1,\"416\":3,\"417\":2,\"434\":2,\"444\":2,\"455\":1,\"466\":1,\"472\":1,\"476\":4,\"477\":7,\"500\":2}}],[\"queue\",{\"1\":{\"196\":1}}],[\"questions\",{\"0\":{\"7\":1}}],[\"qt\",{\"0\":{\"6\":1,\"7\":1,\"8\":2},\"1\":{\"8\":2}}],[\"tk\",{\"1\":{\"440\":4,\"450\":3}}],[\"tutor\",{\"1\":{\"414\":2,\"496\":5}}],[\"turndown\",{\"1\":{\"107\":1}}],[\"tmp\",{\"1\":{\"206\":1,\"207\":2,\"375\":1,\"376\":2,\"403\":1,\"413\":7,\"448\":2,\"481\":4,\"482\":4,\"488\":2,\"490\":2,\"493\":1,\"494\":1,\"495\":3,\"496\":3}}],[\"tmpdir\",{\"1\":{\"206\":2,\"375\":2}}],[\"ts\",{\"0\":{\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1},\"1\":{\"134\":12,\"147\":6,\"148\":2,\"165\":2,\"174\":5,\"175\":2,\"185\":7,\"186\":2,\"192\":6,\"193\":2,\"207\":2,\"213\":6,\"214\":2,\"232\":4,\"233\":2,\"239\":5,\"240\":2,\"245\":5,\"246\":2,\"260\":9,\"261\":2,\"267\":6,\"268\":2,\"276\":2,\"286\":3,\"298\":6,\"299\":2,\"312\":5,\"313\":2,\"319\":4,\"320\":2,\"334\":2,\"335\":2,\"343\":6,\"344\":2,\"357\":6,\"367\":4,\"368\":2,\"375\":7,\"376\":2}}],[\"typora\",{\"1\":{\"106\":8}}],[\"typora激活教程\",{\"0\":{\"106\":1}}],[\"typedef\",{\"1\":{\"41\":1}}],[\"type\",{\"1\":{\"17\":1,\"424\":4,\"429\":2,\"445\":4,\"448\":16,\"449\":1,\"456\":4,\"459\":2,\"460\":11,\"461\":8,\"479\":2,\"480\":7,\"481\":7,\"482\":4,\"483\":5,\"484\":2,\"485\":1,\"486\":1,\"487\":2,\"488\":2,\"490\":3,\"492\":2,\"493\":4,\"494\":5,\"495\":3}}],[\"typescript\",{\"0\":{\"266\":1},\"1\":{\"266\":1,\"267\":1,\"298\":1},\"2\":{\"131\":1,\"141\":1,\"151\":1,\"171\":1,\"182\":1,\"189\":1,\"199\":1,\"210\":1,\"226\":1,\"229\":1,\"236\":1,\"242\":1,\"254\":1,\"257\":1,\"263\":1,\"272\":1,\"283\":1,\"295\":1,\"309\":1,\"316\":1,\"330\":1,\"340\":1,\"354\":1,\"364\":1,\"372\":1,\"386\":1}}],[\"types\",{\"1\":{\"17\":1,\"429\":1,\"448\":1}}],[\"tail\",{\"1\":{\"440\":8}}],[\"tail><term\",{\"1\":{\"439\":1}}],[\"tail><expr\",{\"1\":{\"439\":1}}],[\"tail>\",{\"1\":{\"439\":6}}],[\"tag\",{\"1\":{\"398\":1}}],[\"taro\",{\"1\":{\"357\":1,\"358\":1}}],[\"target=change\",{\"1\":{\"94\":2,\"96\":4}}],[\"takahashi\",{\"1\":{\"232\":1}}],[\"table\",{\"1\":{\"395\":1,\"398\":1,\"416\":1,\"424\":2,\"429\":2,\"434\":1,\"444\":1,\"455\":1,\"466\":1,\"476\":1,\"500\":1}}],[\"tab\",{\"1\":{\"48\":1}}],[\"treated\",{\"1\":{\"448\":1}}],[\"trouble\",{\"1\":{\"185\":38,\"186\":16}}],[\"track\",{\"1\":{\"429\":1}}],[\"traysearch\",{\"1\":{\"134\":4}}],[\"trayyahoo\",{\"1\":{\"134\":4}}],[\"traynews\",{\"1\":{\"134\":4}}],[\"tray\",{\"1\":{\"134\":11,\"137\":1}}],[\"trailing\",{\"1\":{\"48\":1}}],[\"trim\",{\"1\":{\"48\":1}}],[\"true\",{\"1\":{\"48\":3,\"90\":2,\"185\":3,\"260\":1,\"334\":1,\"335\":1,\"357\":1,\"468\":1}}],[\"try\",{\"1\":{\"17\":3,\"23\":5,\"94\":1,\"134\":1,\"260\":1,\"312\":2,\"319\":1}}],[\"that\",{\"1\":{\"275\":1,\"448\":1}}],[\"three\",{\"1\":{\"425\":1}}],[\"thread\",{\"1\":{\"94\":2,\"96\":4}}],[\"threads\",{\"1\":{\"94\":3,\"96\":3}}],[\"threading\",{\"1\":{\"94\":4,\"96\":5}}],[\"throw\",{\"1\":{\"204\":1,\"260\":4,\"375\":2}}],[\"this\",{\"1\":{\"47\":1,\"125\":2,\"128\":3,\"134\":18,\"147\":8,\"160\":3,\"161\":7,\"164\":6,\"174\":25,\"185\":17,\"192\":11,\"203\":7,\"204\":3,\"205\":3,\"213\":20,\"232\":6,\"239\":7,\"245\":9,\"260\":41,\"267\":16,\"275\":7,\"286\":18,\"298\":9,\"312\":11,\"319\":16,\"334\":3,\"338\":5,\"343\":12,\"347\":1,\"351\":8,\"357\":46,\"367\":11,\"375\":18,\"448\":1,\"459\":1,\"481\":1}}],[\"there\",{\"1\":{\"448\":1,\"481\":1}}],[\"them\",{\"1\":{\"275\":1}}],[\"the\",{\"0\":{\"8\":1},\"1\":{\"8\":6,\"32\":1,\"47\":2,\"267\":1,\"268\":1,\"275\":12,\"276\":3,\"397\":1,\"404\":2,\"405\":1,\"426\":2,\"428\":1,\"429\":1,\"448\":6,\"457\":1,\"460\":1,\"461\":4,\"479\":3,\"481\":3,\"483\":1,\"484\":2,\"488\":1,\"490\":1,\"493\":2}}],[\"txt\",{\"0\":{\"44\":1},\"1\":{\"44\":2}}],[\"title><\",{\"1\":{\"134\":2,\"174\":1,\"175\":1,\"232\":1,\"233\":1}}],[\"title\",{\"1\":{\"134\":9,\"174\":7,\"232\":5,\"398\":1}}],[\"times\",{\"1\":{\"160\":2}}],[\"time\",{\"1\":{\"96\":1}}],[\"timeout\",{\"1\":{\"17\":2}}],[\"tips\",{\"0\":{\"90\":1}}],[\"tieway59\",{\"1\":{\"30\":1}}],[\"tz=asia\",{\"1\":{\"18\":1}}],[\"tcp\",{\"1\":{\"17\":1}}],[\"term\",{\"1\":{\"440\":8}}],[\"tex\",{\"1\":{\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"textbuilder\",{\"1\":{\"174\":9,\"180\":1}}],[\"text\",{\"1\":{\"3\":1,\"102\":1,\"174\":1,\"175\":1,\"260\":11,\"397\":1,\"400\":11,\"414\":9,\"448\":1,\"457\":2,\"468\":2,\"469\":2,\"484\":3,\"488\":4,\"490\":3,\"491\":2,\"492\":2}}],[\"template\",{\"0\":{\"365\":1,\"366\":1},\"1\":{\"156\":1,\"169\":1,\"176\":1,\"240\":1,\"365\":1,\"368\":1}}],[\"template<typename\",{\"1\":{\"41\":1}}],[\"test\",{\"1\":{\"96\":2}}],[\"tencent\",{\"1\":{\"9\":1}}],[\"t\",{\"0\":{\"8\":1},\"1\":{\"41\":5,\"94\":4,\"96\":4,\"426\":1,\"440\":3}}],[\"total\",{\"1\":{\"357\":1,\"358\":1}}],[\"tomato\",{\"1\":{\"275\":1,\"276\":3}}],[\"tomura\",{\"1\":{\"206\":5,\"207\":3,\"232\":2,\"375\":5,\"376\":3}}],[\"tokenchar\",{\"1\":{\"397\":1}}],[\"tokens\",{\"1\":{\"260\":4,\"420\":1}}],[\"token\",{\"1\":{\"260\":3,\"392\":2,\"396\":1,\"397\":6,\"417\":3,\"418\":1,\"420\":1,\"421\":2,\"422\":2,\"423\":1,\"424\":16,\"425\":27,\"426\":14,\"427\":2,\"428\":45,\"429\":3,\"440\":20,\"447\":2,\"448\":12,\"449\":7,\"450\":2,\"457\":1,\"459\":1,\"460\":6,\"461\":9,\"468\":2,\"469\":1,\"470\":2,\"471\":3,\"479\":5,\"480\":4,\"481\":4,\"482\":6,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":4,\"488\":4,\"489\":2,\"490\":1,\"491\":2,\"492\":2,\"493\":2,\"494\":2,\"495\":1}}],[\"tostring\",{\"1\":{\"185\":2,\"204\":1,\"260\":7,\"286\":2,\"343\":4,\"357\":6,\"375\":1}}],[\"todo\",{\"1\":{\"25\":1,\"34\":1,\"47\":1,\"49\":1,\"98\":1,\"392\":1}}],[\"tools\",{\"0\":{\"8\":1},\"1\":{\"8\":1}}],[\"to\",{\"0\":{\"7\":1},\"1\":{\"33\":1,\"232\":1,\"233\":2,\"275\":7,\"276\":3,\"286\":1,\"287\":1,\"397\":1,\"403\":5,\"405\":1,\"429\":2,\"479\":1,\"481\":2,\"488\":1}}],[\"occurs\",{\"1\":{\"481\":1}}],[\"oct\",{\"1\":{\"425\":2}}],[\"octet\",{\"1\":{\"17\":1}}],[\"out\",{\"1\":{\"414\":1}}],[\"output\",{\"1\":{\"134\":2,\"357\":1}}],[\"op\",{\"1\":{\"403\":6,\"404\":1,\"405\":1,\"406\":2,\"407\":2,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":16,\"413\":9}}],[\"operators\",{\"1\":{\"420\":1}}],[\"operator\",{\"1\":{\"41\":3,\"427\":1,\"480\":1,\"489\":2}}],[\"operator+\",{\"1\":{\"41\":1}}],[\"open\",{\"1\":{\"8\":1,\"159\":1,\"160\":1,\"161\":2,\"367\":4,\"397\":2,\"402\":1,\"413\":3,\"429\":2}}],[\"old\",{\"1\":{\"397\":2,\"400\":2,\"407\":1,\"410\":1,\"411\":1,\"458\":1}}],[\"o\",{\"1\":{\"298\":4,\"496\":1}}],[\"order\",{\"1\":{\"420\":1}}],[\"or\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":4,\"471\":1,\"482\":1,\"489\":1,\"492\":2}}],[\"originator\",{\"0\":{\"292\":1},\"1\":{\"289\":1,\"292\":2}}],[\"orange\",{\"1\":{\"286\":1,\"287\":3}}],[\"org\",{\"1\":{\"5\":1}}],[\"observers\",{\"1\":{\"298\":5}}],[\"observer2\",{\"1\":{\"298\":2}}],[\"observer1\",{\"1\":{\"298\":2}}],[\"observer\",{\"0\":{\"296\":1,\"302\":1,\"303\":1},\"1\":{\"281\":1,\"298\":19,\"299\":1,\"301\":1,\"302\":3}}],[\"object\",{\"1\":{\"275\":2,\"312\":1}}],[\"owners\",{\"1\":{\"239\":3}}],[\"owner\",{\"1\":{\"239\":11}}],[\"oddsupport\",{\"1\":{\"185\":5}}],[\"oi\",{\"0\":{\"36\":1},\"1\":{\"36\":1},\"2\":{\"42\":1,\"103\":1}}],[\"other\",{\"1\":{\"10\":1,\"275\":1}}],[\"only\",{\"1\":{\"426\":1,\"480\":1,\"481\":1}}],[\"online\",{\"1\":{\"13\":1,\"17\":4,\"19\":3,\"21\":2,\"22\":4,\"23\":14}}],[\"ones\",{\"1\":{\"461\":1}}],[\"one\",{\"1\":{\"424\":2,\"479\":1}}],[\"onto\",{\"1\":{\"404\":1}}],[\"on\",{\"1\":{\"9\":1,\"17\":2,\"33\":1,\"403\":2,\"460\":1,\"461\":1,\"493\":2}}],[\"off\",{\"1\":{\"17\":1}}],[\"of\",{\"1\":{\"5\":1,\"47\":1,\"48\":1,\"183\":1,\"184\":1,\"185\":1,\"275\":4,\"395\":1,\"397\":1,\"398\":1,\"404\":1,\"416\":1,\"424\":2,\"429\":2,\"434\":1,\"444\":1,\"448\":4,\"455\":1,\"457\":1,\"460\":5,\"461\":4,\"466\":1,\"476\":1,\"479\":1,\"481\":3,\"484\":3,\"488\":1,\"493\":1,\"500\":1}}],[\"emit\",{\"1\":{\"461\":1,\"468\":1,\"470\":1,\"479\":2,\"480\":1,\"481\":2,\"485\":1,\"486\":1}}],[\"empty\",{\"1\":{\"445\":5,\"456\":5,\"471\":1}}],[\"emoji\",{\"1\":{\"5\":2}}],[\"ebnf\",{\"0\":{\"445\":1,\"456\":1},\"1\":{\"444\":2,\"445\":1,\"452\":3,\"455\":1,\"456\":1}}],[\"ebppop\",{\"1\":{\"410\":1}}],[\"ebpmov\",{\"1\":{\"408\":1}}],[\"ebp\",{\"1\":{\"407\":6,\"408\":1,\"410\":1}}],[\"escape\",{\"1\":{\"426\":2}}],[\"esp\",{\"1\":{\"407\":6,\"408\":2,\"409\":2,\"410\":1}}],[\"eax\",{\"1\":{\"407\":1}}],[\"each\",{\"1\":{\"275\":1}}],[\"eq\",{\"1\":{\"402\":1,\"412\":1,\"420\":2,\"428\":1,\"485\":1,\"489\":1}}],[\"eof\",{\"1\":{\"397\":1}}],[\"eval\",{\"1\":{\"397\":3,\"403\":2}}],[\"even\",{\"1\":{\"357\":4,\"358\":3}}],[\"event\",{\"1\":{\"95\":1,\"96\":3,\"275\":4}}],[\"events\",{\"1\":{\"17\":1,\"275\":1}}],[\"ey\",{\"1\":{\"275\":1,\"276\":3}}],[\"e\",{\"1\":{\"260\":2,\"312\":4,\"319\":2}}],[\"element\",{\"1\":{\"375\":5,\"378\":4,\"383\":1}}],[\"else\",{\"1\":{\"185\":3,\"213\":3,\"260\":4,\"286\":4,\"343\":1,\"357\":7,\"375\":1,\"403\":4,\"404\":1,\"405\":1,\"406\":1,\"407\":2,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":16,\"413\":9,\"420\":1,\"423\":1,\"424\":1,\"425\":3,\"426\":2,\"427\":2,\"428\":23,\"429\":1,\"440\":5,\"445\":1,\"448\":2,\"450\":1,\"456\":1,\"457\":1,\"460\":1,\"467\":1,\"468\":7,\"469\":1,\"470\":1,\"471\":3,\"479\":1,\"480\":2,\"481\":7,\"482\":2,\"483\":2,\"484\":2,\"485\":1,\"486\":1,\"487\":3,\"488\":3,\"489\":1,\"490\":1,\"491\":2,\"492\":2,\"493\":2,\"495\":2}}],[\"elmo\",{\"1\":{\"185\":3,\"186\":4}}],[\"enter\",{\"1\":{\"408\":1}}],[\"ent\",{\"0\":{\"408\":1},\"1\":{\"398\":1,\"402\":1,\"407\":1,\"408\":2,\"461\":1}}],[\"entries\",{\"1\":{\"206\":2,\"207\":2,\"375\":2,\"376\":2}}],[\"entry\",{\"0\":{\"204\":1},\"1\":{\"201\":1,\"203\":12,\"204\":4,\"205\":3,\"206\":2,\"375\":34}}],[\"enum\",{\"0\":{\"449\":1},\"1\":{\"357\":1,\"420\":2,\"429\":1,\"444\":1,\"445\":2,\"446\":1,\"448\":9,\"449\":4,\"481\":2,\"489\":2}}],[\"en\",{\"1\":{\"275\":5}}],[\"engine\",{\"1\":{\"128\":15}}],[\"enhanced\",{\"1\":{\"101\":1}}],[\"enabled\",{\"1\":{\"90\":1}}],[\"enduml\",{\"1\":{\"239\":1}}],[\"end\",{\"1\":{\"48\":1,\"260\":15,\"261\":8,\"467\":1,\"479\":1}}],[\"environment\",{\"1\":{\"18\":1}}],[\"env\",{\"1\":{\"10\":2}}],[\"editorconfig文件\",{\"1\":{\"48\":1}}],[\"editorconfig\",{\"1\":{\"48\":1}}],[\"etc\",{\"1\":{\"17\":2,\"18\":4,\"23\":6}}],[\"error\",{\"1\":{\"15\":1,\"17\":10,\"23\":10,\"134\":2,\"204\":1,\"260\":4,\"312\":1,\"375\":2}}],[\"exists\",{\"1\":{\"448\":1,\"461\":1}}],[\"exist\",{\"1\":{\"448\":1}}],[\"existing\",{\"1\":{\"424\":1}}],[\"exit\",{\"1\":{\"402\":1,\"413\":3,\"414\":2,\"429\":2,\"440\":1,\"448\":2,\"449\":2,\"450\":1,\"460\":2,\"461\":2,\"481\":2,\"483\":1,\"484\":1,\"488\":1,\"490\":1,\"491\":1,\"495\":1,\"496\":2}}],[\"example\",{\"1\":{\"275\":1}}],[\"expession\",{\"1\":{\"490\":1}}],[\"expected\",{\"1\":{\"260\":1,\"440\":1,\"450\":1,\"495\":1}}],[\"expr\",{\"1\":{\"440\":8,\"448\":1,\"479\":2,\"480\":6,\"481\":4,\"482\":3,\"483\":5,\"484\":2,\"485\":1,\"486\":1,\"487\":2,\"488\":2,\"490\":4,\"491\":1,\"492\":2,\"493\":3,\"494\":5,\"495\":2}}],[\"expressionvoid\",{\"1\":{\"448\":1}}],[\"expression\",{\"1\":{\"397\":3,\"445\":5,\"449\":1,\"456\":4,\"462\":1,\"467\":3,\"468\":1,\"469\":1,\"470\":2,\"471\":1,\"472\":1,\"481\":1,\"482\":2,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":1,\"489\":1,\"490\":1,\"491\":2,\"492\":2,\"493\":2,\"495\":1,\"497\":1}}],[\"export\",{\"1\":{\"134\":9,\"147\":5,\"160\":1,\"161\":1,\"162\":1,\"164\":1,\"174\":4,\"185\":6,\"192\":5,\"203\":1,\"204\":1,\"205\":1,\"213\":5,\"232\":3,\"239\":4,\"245\":3,\"260\":8,\"267\":5,\"286\":2,\"298\":5,\"312\":4,\"319\":3,\"334\":1,\"338\":1,\"343\":5,\"357\":6,\"367\":3,\"375\":6}}],[\"extrinsic\",{\"0\":{\"249\":1},\"1\":{\"249\":4}}],[\"extending\",{\"1\":{\"275\":1}}],[\"extends\",{\"1\":{\"128\":1,\"134\":6,\"147\":2,\"160\":1,\"164\":1,\"174\":2,\"185\":4,\"203\":1,\"205\":1,\"213\":4,\"239\":1,\"260\":5,\"298\":1,\"367\":2,\"375\":3}}],[\"extension\",{\"1\":{\"49\":2}}],[\"excite\",{\"1\":{\"134\":5}}],[\"execute\",{\"1\":{\"192\":5,\"298\":3}}],[\"exe\",{\"1\":{\"106\":5}}],[\"ex\",{\"1\":{\"5\":1}}],[\"p++\",{\"1\":{\"488\":1,\"494\":1}}],[\"p+z\",{\"1\":{\"39\":1}}],[\"ptr\",{\"1\":{\"429\":1,\"448\":5,\"460\":1,\"461\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":2,\"484\":1,\"488\":1,\"493\":1,\"494\":3,\"495\":3}}],[\"pc+1\",{\"1\":{\"407\":1}}],[\"pc++\",{\"1\":{\"403\":1,\"408\":1,\"409\":1,\"411\":1}}],[\"pc\",{\"1\":{\"401\":2,\"405\":4,\"406\":6,\"407\":4,\"410\":2,\"413\":1,\"414\":1}}],[\"p3\",{\"1\":{\"312\":2}}],[\"p2\",{\"1\":{\"312\":2}}],[\"p1\",{\"1\":{\"312\":2}}],[\"pbd\",{\"1\":{\"147\":2}}],[\"pbi\",{\"1\":{\"147\":2}}],[\"ps\",{\"1\":{\"134\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1,\"391\":1}}],[\"peg\",{\"1\":{\"503\":1}}],[\"people\",{\"1\":{\"134\":5,\"275\":1}}],[\"peano\",{\"0\":{\"77\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1},\"1\":{\"50\":2,\"51\":1,\"54\":2,\"55\":2,\"57\":3,\"58\":1,\"59\":2,\"63\":2,\"66\":1,\"70\":1,\"71\":1,\"73\":3,\"74\":1,\"75\":1,\"76\":4,\"77\":5}}],[\"push<expr2>\",{\"1\":{\"493\":1}}],[\"push\",{\"0\":{\"404\":1},\"1\":{\"134\":16,\"192\":3,\"203\":1,\"239\":1,\"245\":1,\"260\":1,\"275\":1,\"286\":2,\"298\":1,\"375\":1,\"398\":1,\"402\":1,\"403\":1,\"404\":3,\"407\":7,\"414\":2,\"481\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":4,\"490\":1,\"493\":4,\"494\":3,\"495\":2,\"496\":1}}],[\"publishing\",{\"1\":{\"276\":3}}],[\"publish\",{\"1\":{\"275\":3}}],[\"publishmessage\",{\"1\":{\"275\":4}}],[\"publisher\",{\"1\":{\"49\":1}}],[\"public\",{\"1\":{\"9\":2,\"41\":1,\"134\":1,\"174\":15,\"245\":3,\"275\":2,\"286\":3,\"298\":5,\"334\":1,\"338\":1,\"343\":19}}],[\"ppt\",{\"1\":{\"101\":1}}],[\"py\",{\"1\":{\"96\":2}}],[\"python3\",{\"0\":{\"93\":1},\"1\":{\"96\":2}}],[\"python\",{\"0\":{\"44\":1},\"1\":{\"14\":1,\"44\":1,\"96\":1},\"2\":{\"45\":1}}],[\"position\",{\"1\":{\"461\":1,\"479\":1}}],[\"pos\",{\"1\":{\"421\":1,\"424\":4,\"426\":2,\"461\":3}}],[\"postfix\",{\"1\":{\"489\":1}}],[\"post\",{\"1\":{\"47\":1,\"101\":1}}],[\"pointer<expr1>\",{\"1\":{\"493\":1}}],[\"pointer\",{\"1\":{\"397\":1,\"448\":1,\"460\":2,\"480\":1,\"490\":1,\"493\":1,\"495\":2}}],[\"poolsize\",{\"1\":{\"397\":5,\"400\":9,\"401\":2,\"496\":1}}],[\"pool\",{\"1\":{\"245\":3}}],[\"pop\",{\"1\":{\"192\":1,\"403\":1,\"407\":1,\"410\":1}}],[\"powershell\",{\"1\":{\"106\":1}}],[\"ports\",{\"1\":{\"18\":1}}],[\"picture\",{\"1\":{\"138\":1}}],[\"pip\",{\"1\":{\"44\":2}}],[\"pid\",{\"1\":{\"17\":2}}],[\"p><ul><li>晚上好\",{\"1\":{\"175\":1}}],[\"p><ul><li>早上好\",{\"1\":{\"175\":1}}],[\"p>`\",{\"1\":{\"174\":1}}],[\"p>\",{\"1\":{\"41\":1,\"232\":1,\"233\":2}}],[\"p=998244353\",{\"1\":{\"39\":1,\"40\":1}}],[\"p\",{\"1\":{\"33\":1,\"39\":2,\"40\":2,\"41\":2,\"239\":3,\"312\":8,\"319\":5,\"445\":1,\"479\":4,\"488\":1,\"494\":1,\"504\":1}}],[\"prtf\",{\"1\":{\"402\":1,\"413\":1}}],[\"pre\",{\"1\":{\"488\":1}}],[\"precedence\",{\"1\":{\"420\":1,\"482\":1,\"483\":1}}],[\"prevhand\",{\"1\":{\"357\":3}}],[\"prevhandvalue\",{\"1\":{\"357\":5}}],[\"previous\",{\"1\":{\"286\":1,\"287\":1}}],[\"preview\",{\"1\":{\"101\":1}}],[\"prefix\",{\"1\":{\"203\":3,\"204\":1,\"205\":2,\"286\":2}}],[\"primitivecommandnode\",{\"1\":{\"260\":5}}],[\"principle\",{\"1\":{\"223\":1}}],[\"printf\",{\"1\":{\"397\":4,\"400\":3,\"413\":7,\"429\":1,\"440\":2,\"448\":2,\"449\":2,\"450\":1,\"460\":2,\"461\":2,\"481\":3,\"483\":1,\"484\":1,\"488\":1,\"490\":1,\"491\":1,\"495\":1}}],[\"printable\",{\"1\":{\"319\":12}}],[\"printer\",{\"1\":{\"319\":9}}],[\"printerproxy\",{\"1\":{\"319\":6}}],[\"printlist\",{\"1\":{\"204\":1,\"206\":2}}],[\"printlistwithprefix\",{\"1\":{\"203\":2,\"204\":2,\"205\":1}}],[\"printline\",{\"1\":{\"164\":3,\"367\":3}}],[\"printstrong\",{\"1\":{\"147\":6}}],[\"printweak\",{\"1\":{\"147\":6}}],[\"printbanner2\",{\"1\":{\"147\":3}}],[\"printbanner\",{\"1\":{\"146\":1,\"147\":11}}],[\"print\",{\"1\":{\"94\":1,\"95\":1,\"96\":10,\"146\":1,\"147\":10,\"159\":1,\"160\":1,\"161\":2,\"245\":4,\"319\":5,\"367\":4}}],[\"private\",{\"1\":{\"41\":1,\"125\":1,\"128\":1,\"147\":2,\"161\":1,\"164\":3,\"174\":4,\"185\":5,\"192\":5,\"203\":2,\"205\":2,\"213\":3,\"232\":3,\"239\":2,\"245\":3,\"260\":6,\"267\":5,\"275\":2,\"286\":4,\"298\":2,\"312\":3,\"319\":5,\"334\":3,\"338\":4,\"343\":5,\"357\":16,\"367\":4,\"375\":5}}],[\"privkey\",{\"1\":{\"22\":1,\"23\":3}}],[\"probstrategy\",{\"1\":{\"357\":6}}],[\"product\",{\"1\":{\"239\":13,\"312\":13}}],[\"proto\",{\"1\":{\"312\":2}}],[\"prototype\",{\"0\":{\"310\":1,\"311\":1},\"1\":{\"197\":1,\"293\":1,\"311\":2,\"313\":1,\"336\":1}}],[\"protected\",{\"1\":{\"134\":3,\"185\":5,\"203\":1,\"204\":1,\"205\":1,\"213\":1,\"239\":2,\"367\":3}}],[\"programs\",{\"1\":{\"260\":2}}],[\"programnode\",{\"1\":{\"260\":5}}],[\"program\",{\"0\":{\"447\":1},\"1\":{\"106\":1,\"260\":10,\"261\":10,\"397\":3,\"400\":1,\"401\":1,\"414\":1,\"429\":1,\"444\":1,\"445\":1,\"447\":2}}],[\"proxy\",{\"0\":{\"317\":1,\"327\":1},\"1\":{\"17\":1,\"23\":2,\"26\":1,\"252\":1,\"318\":1,\"320\":1,\"322\":1,\"323\":1,\"327\":3}}],[\"processes\",{\"1\":{\"17\":1}}],[\"properties\",{\"1\":{\"9\":1}}],[\"project\",{\"1\":{\"9\":1,\"15\":1,\"18\":2}}],[\"paa\",{\"1\":{\"357\":2}}],[\"payload\",{\"1\":{\"275\":5}}],[\"parenthesis\",{\"1\":{\"482\":2}}],[\"parsed\",{\"1\":{\"424\":1}}],[\"parser\",{\"1\":{\"392\":1,\"418\":1}}],[\"parse\",{\"1\":{\"260\":12,\"421\":1,\"422\":1,\"424\":1,\"425\":1,\"426\":1,\"428\":8,\"448\":5,\"449\":1,\"468\":3,\"489\":1}}],[\"params+1\",{\"1\":{\"460\":1}}],[\"params++\",{\"1\":{\"460\":1}}],[\"params\",{\"1\":{\"460\":2}}],[\"param\",{\"1\":{\"458\":5}}],[\"parameter\",{\"1\":{\"445\":2,\"448\":1,\"456\":2,\"457\":1,\"459\":1,\"460\":6,\"461\":1}}],[\"parameters\",{\"1\":{\"195\":1}}],[\"paragraph\",{\"1\":{\"232\":3}}],[\"part\",{\"1\":{\"5\":1,\"448\":2,\"459\":1}}],[\"paint\",{\"1\":{\"192\":2}}],[\"pattern\",{\"1\":{\"143\":1,\"148\":1,\"231\":1,\"259\":1,\"275\":1,\"356\":1}}],[\"patern\",{\"1\":{\"134\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1}}],[\"patern>\",{\"1\":{\"134\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1}}],[\"pagemaker\",{\"1\":{\"232\":5}}],[\"page\",{\"1\":{\"134\":12,\"137\":1,\"232\":1,\"233\":2}}],[\"pack\",{\"1\":{\"33\":2}}],[\"pass\",{\"1\":{\"17\":1,\"23\":2,\"481\":1}}],[\"player2\",{\"1\":{\"357\":7}}],[\"player1\",{\"1\":{\"357\":7}}],[\"player\",{\"1\":{\"357\":6}}],[\"plays\",{\"1\":{\"275\":1}}],[\"plantuml\",{\"1\":{\"5\":1}}],[\"plugins\",{\"1\":{\"90\":1}}],[\"pluginmanagement\",{\"1\":{\"9\":1}}],[\"plugin\",{\"0\":{\"47\":1,\"49\":1},\"1\":{\"9\":3,\"47\":1}}],[\"glo\",{\"1\":{\"420\":1,\"448\":1,\"449\":1,\"481\":1,\"489\":1}}],[\"global\",{\"0\":{\"448\":1},\"1\":{\"94\":2,\"95\":1,\"96\":4,\"444\":1,\"445\":1,\"447\":3,\"448\":6,\"461\":1,\"481\":1}}],[\"gt\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"guu\",{\"1\":{\"357\":2}}],[\"gui\",{\"1\":{\"297\":1}}],[\"guide\",{\"1\":{\"26\":1,\"100\":1}}],[\"graph\",{\"1\":{\"298\":4}}],[\"graphobserver\",{\"1\":{\"298\":5,\"299\":20,\"302\":1}}],[\"grape\",{\"1\":{\"286\":1,\"287\":12}}],[\"gradlepluginportal\",{\"1\":{\"9\":1}}],[\"gradle\",{\"1\":{\"9\":6}}],[\"group\",{\"1\":{\"275\":1,\"276\":3}}],[\"group`\",{\"1\":{\"275\":1}}],[\"groups\",{\"1\":{\"275\":1}}],[\"got\",{\"1\":{\"440\":1}}],[\"go\",{\"1\":{\"260\":10,\"261\":14}}],[\"google\",{\"1\":{\"9\":4,\"134\":3}}],[\"gcc\",{\"1\":{\"414\":2,\"496\":1}}],[\"gc\",{\"1\":{\"250\":1}}],[\"g\",{\"1\":{\"245\":1}}],[\"gmw\",{\"1\":{\"134\":6}}],[\"git\",{\"1\":{\"397\":1,\"415\":1,\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"496\":1}}],[\"github\",{\"0\":{\"34\":1},\"1\":{\"5\":1,\"107\":2,\"390\":1,\"397\":2,\"415\":2,\"430\":2,\"451\":2,\"462\":2,\"472\":2,\"496\":2}}],[\"gil\",{\"1\":{\"95\":1}}],[\"gather\",{\"1\":{\"95\":1,\"96\":3}}],[\"games\",{\"1\":{\"357\":1,\"358\":8}}],[\"gamecount++\",{\"1\":{\"357\":3}}],[\"gamecount\",{\"1\":{\"357\":2}}],[\"gamer\",{\"1\":{\"286\":17}}],[\"game\",{\"0\":{\"47\":1},\"1\":{\"47\":1,\"206\":1,\"207\":1,\"375\":1,\"376\":1}}],[\"ge\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"gen\",{\"1\":{\"106\":2}}],[\"generatedid++\",{\"1\":{\"334\":1,\"338\":1}}],[\"generatedid\",{\"1\":{\"334\":2,\"338\":2}}],[\"generator\",{\"1\":{\"298\":8,\"392\":1}}],[\"generally\",{\"1\":{\"33\":1}}],[\"genesis\",{\"1\":{\"5\":2}}],[\"getline\",{\"1\":{\"440\":1}}],[\"getlength\",{\"1\":{\"267\":2}}],[\"getsum\",{\"1\":{\"357\":2}}],[\"getsize\",{\"1\":{\"203\":2,\"204\":2,\"205\":1,\"375\":5}}],[\"gethand\",{\"1\":{\"357\":3}}],[\"gethtml\",{\"1\":{\"232\":2}}],[\"getprintername\",{\"1\":{\"319\":5}}],[\"getproperties\",{\"1\":{\"232\":2}}],[\"getproduct\",{\"1\":{\"134\":2}}],[\"getfruits\",{\"1\":{\"286\":1}}],[\"getfruit\",{\"1\":{\"286\":2}}],[\"getmoney\",{\"1\":{\"286\":7}}],[\"getbookat\",{\"1\":{\"267\":2}}],[\"getbigchar\",{\"1\":{\"245\":2}}],[\"getcurrentnumber\",{\"1\":{\"260\":2}}],[\"getcurrenttoken\",{\"1\":{\"260\":5}}],[\"getcolumns\",{\"1\":{\"213\":8,\"216\":1,\"217\":2}}],[\"getinstance\",{\"1\":{\"245\":2,\"334\":3,\"337\":1,\"338\":2,\"343\":5}}],[\"getowners\",{\"1\":{\"239\":1}}],[\"getowner\",{\"1\":{\"239\":2}}],[\"getrowtext\",{\"1\":{\"213\":7,\"216\":1}}],[\"getrows\",{\"1\":{\"213\":8,\"216\":1,\"217\":2}}],[\"getresult\",{\"1\":{\"174\":4}}],[\"getname\",{\"1\":{\"203\":1,\"204\":2,\"205\":1,\"267\":2,\"375\":5}}],[\"getnumber\",{\"1\":{\"185\":4,\"298\":5}}],[\"get\",{\"1\":{\"49\":1,\"95\":1,\"96\":3,\"245\":1,\"397\":1,\"447\":1,\"484\":2}}],[\"免费并且不受限制地\",{\"1\":{\"5\":1}}],[\"skip\",{\"1\":{\"423\":1,\"427\":1,\"440\":1,\"448\":1}}],[\"skiptoken\",{\"1\":{\"260\":5}}],[\"symbols\",{\"1\":{\"424\":3,\"459\":1}}],[\"symbol\",{\"1\":{\"424\":2,\"429\":2}}],[\"system\",{\"1\":{\"481\":1}}],[\"sys\",{\"1\":{\"420\":1,\"429\":1,\"481\":1,\"489\":1}}],[\"synchronized\",{\"1\":{\"338\":3}}],[\"sync\",{\"1\":{\"90\":2}}],[\"sc\",{\"1\":{\"402\":1,\"403\":4,\"488\":1,\"490\":1,\"494\":2}}],[\"sci\",{\"1\":{\"5\":2}}],[\"sbox\",{\"1\":{\"312\":2}}],[\"s\",{\"1\":{\"232\":1,\"233\":2,\"312\":7,\"392\":1,\"397\":1,\"445\":1,\"490\":1,\"504\":1}}],[\"snapshot\",{\"1\":{\"196\":1}}],[\"single\",{\"1\":{\"424\":1,\"426\":1}}],[\"singleton2\",{\"1\":{\"334\":2}}],[\"singleton1\",{\"1\":{\"334\":2}}],[\"singleton\",{\"0\":{\"331\":1,\"332\":1},\"1\":{\"139\":1,\"234\":1,\"240\":1,\"245\":2,\"252\":1,\"332\":2,\"334\":11,\"335\":2,\"337\":1,\"338\":6,\"343\":4,\"352\":1}}],[\"si\",{\"1\":{\"402\":1,\"403\":4,\"488\":1,\"490\":2,\"494\":2}}],[\"simulate\",{\"1\":{\"338\":1}}],[\"sideborder\",{\"1\":{\"213\":7,\"217\":2}}],[\"sizeof\",{\"0\":{\"480\":1},\"1\":{\"420\":1,\"429\":1,\"448\":1,\"476\":1,\"479\":2,\"480\":9,\"488\":2,\"489\":1,\"493\":1,\"494\":6,\"495\":1}}],[\"size\",{\"1\":{\"17\":1,\"205\":2,\"375\":5,\"397\":2,\"440\":1,\"461\":1}}],[\"src++\",{\"1\":{\"397\":1,\"423\":1,\"424\":1,\"425\":2,\"426\":3,\"428\":1,\"440\":1}}],[\"src\",{\"1\":{\"134\":1,\"148\":1,\"165\":1,\"175\":1,\"186\":1,\"193\":1,\"207\":1,\"214\":1,\"233\":1,\"240\":1,\"246\":1,\"261\":1,\"268\":1,\"276\":1,\"299\":1,\"313\":1,\"320\":1,\"335\":1,\"344\":1,\"368\":1,\"376\":1,\"397\":6,\"421\":1,\"423\":2,\"424\":10,\"425\":6,\"426\":2,\"427\":3,\"428\":19,\"429\":1,\"440\":9}}],[\"ssize\",{\"1\":{\"440\":1}}],[\"sspai\",{\"1\":{\"101\":1}}],[\"ssl\",{\"1\":{\"23\":9,\"26\":1}}],[\"slowbutlessmemorystrategy\",{\"1\":{\"361\":1}}],[\"slash\",{\"1\":{\"312\":2}}],[\"sli\",{\"1\":{\"100\":1}}],[\"slidev\",{\"0\":{\"99\":1}}],[\"sleep\",{\"1\":{\"96\":3}}],[\"spm=1001\",{\"1\":{\"476\":1}}],[\"sp++\",{\"1\":{\"403\":3,\"407\":1,\"410\":2,\"412\":16}}],[\"sp\",{\"1\":{\"401\":4,\"404\":1,\"407\":1,\"408\":4,\"409\":2,\"410\":1,\"413\":16,\"496\":6}}],[\"split\",{\"1\":{\"245\":1,\"260\":2}}],[\"space\",{\"1\":{\"48\":1,\"440\":1}}],[\"specialsupport\",{\"1\":{\"185\":5}}],[\"special\",{\"1\":{\"37\":1}}],[\"same\",{\"1\":{\"483\":1}}],[\"save\",{\"1\":{\"403\":2,\"407\":1,\"408\":1,\"461\":1,\"490\":1}}],[\"savedir\",{\"1\":{\"375\":2}}],[\"saving\",{\"1\":{\"286\":1}}],[\"safeframe\",{\"1\":{\"343\":11,\"347\":2,\"348\":2,\"349\":1,\"351\":5}}],[\"sato\",{\"1\":{\"232\":1}}],[\"sa\",{\"1\":{\"30\":1}}],[\"sum\",{\"1\":{\"357\":3}}],[\"supported\",{\"1\":{\"426\":1,\"480\":1}}],[\"support\",{\"1\":{\"185\":28,\"423\":1}}],[\"super\",{\"1\":{\"134\":4,\"147\":2,\"160\":1,\"164\":1,\"185\":3,\"203\":1,\"205\":1,\"213\":4,\"298\":1,\"367\":2,\"375\":2}}],[\"subtract\",{\"1\":{\"417\":1}}],[\"subroutine\",{\"1\":{\"407\":4}}],[\"subclass\",{\"1\":{\"370\":1}}],[\"subject\",{\"1\":{\"301\":1,\"302\":1}}],[\"subscribing\",{\"1\":{\"276\":3}}],[\"subscribes\",{\"1\":{\"275\":1}}],[\"subscribe\",{\"1\":{\"275\":3}}],[\"subscriptions\",{\"1\":{\"275\":1}}],[\"substitution\",{\"1\":{\"223\":1}}],[\"sub\",{\"1\":{\"40\":1,\"402\":1,\"407\":1,\"408\":1,\"411\":1,\"412\":1,\"420\":1,\"428\":1,\"461\":1,\"487\":2,\"488\":1,\"489\":1,\"494\":3}}],[\"su\",{\"1\":{\"21\":1,\"22\":1}}],[\"sudo\",{\"1\":{\"21\":1,\"22\":1}}],[\"stdin\",{\"1\":{\"440\":1}}],[\"stored\",{\"1\":{\"481\":1}}],[\"store\",{\"1\":{\"424\":1,\"426\":1,\"460\":1,\"461\":1,\"479\":1}}],[\"step\",{\"1\":{\"397\":1,\"415\":1,\"430\":1,\"451\":1,\"462\":1,\"472\":1,\"477\":3,\"496\":1}}],[\"study\",{\"1\":{\"357\":5}}],[\"studio时不能打开360手机助手\",{\"1\":{\"91\":1}}],[\"studio下载gradle太慢可换源\",{\"1\":{\"9\":1}}],[\"studio换源\",{\"0\":{\"9\":1}}],[\"static\",{\"1\":{\"232\":3,\"245\":3,\"286\":1,\"334\":3,\"338\":4,\"343\":4,\"357\":3}}],[\"statement>b\",{\"1\":{\"468\":1}}],[\"statement>\",{\"1\":{\"467\":1,\"468\":3}}],[\"statements\",{\"1\":{\"461\":2}}],[\"statementnon\",{\"1\":{\"445\":1,\"456\":1}}],[\"statement\",{\"1\":{\"445\":12,\"456\":12,\"461\":1,\"462\":1,\"467\":1,\"468\":5,\"469\":1,\"471\":2}}],[\"state\",{\"0\":{\"341\":1,\"342\":1},\"1\":{\"195\":1,\"286\":2,\"287\":1,\"293\":1,\"342\":2,\"343\":28,\"344\":1,\"346\":4,\"347\":7,\"348\":1,\"349\":3,\"350\":7,\"351\":1,\"362\":1}}],[\"stacksp\",{\"1\":{\"496\":1}}],[\"stackvoid\",{\"1\":{\"460\":1}}],[\"stackchar\",{\"1\":{\"400\":1}}],[\"stackint\",{\"1\":{\"397\":1}}],[\"stack\",{\"1\":{\"196\":1,\"400\":6,\"401\":2,\"403\":2,\"404\":1,\"407\":1,\"408\":2,\"461\":2,\"481\":1,\"496\":1}}],[\"starts\",{\"1\":{\"425\":2}}],[\"startswith\",{\"1\":{\"286\":1}}],[\"start\",{\"1\":{\"94\":1,\"96\":1,\"128\":4}}],[\"started\",{\"1\":{\"49\":1,\"128\":2}}],[\"struct\",{\"1\":{\"424\":2}}],[\"strong\",{\"1\":{\"312\":2}}],[\"strategy\",{\"0\":{\"355\":1,\"360\":1},\"1\":{\"221\":1,\"356\":1,\"357\":20,\"360\":4,\"361\":1,\"369\":1}}],[\"str\",{\"1\":{\"164\":6,\"174\":5,\"245\":2,\"319\":5,\"367\":6}}],[\"strings\",{\"1\":{\"479\":1}}],[\"stringtokenizer\",{\"1\":{\"260\":10}}],[\"stringdisplay\",{\"1\":{\"213\":6,\"367\":6}}],[\"stringdisplayimpl\",{\"0\":{\"164\":1},\"1\":{\"159\":1,\"163\":5,\"164\":1,\"168\":2}}],[\"string\",{\"1\":{\"134\":26,\"147\":14,\"164\":2,\"174\":14,\"185\":6,\"203\":3,\"204\":3,\"205\":3,\"213\":13,\"232\":13,\"239\":8,\"245\":7,\"260\":16,\"267\":3,\"275\":7,\"286\":7,\"312\":10,\"319\":14,\"343\":7,\"357\":5,\"367\":4,\"375\":5,\"397\":1,\"426\":3,\"479\":1}}],[\"stream\",{\"1\":{\"17\":1,\"417\":1,\"418\":1}}],[\"style\",{\"1\":{\"48\":1}}],[\"shr\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"shl\",{\"1\":{\"402\":1,\"412\":1,\"420\":1,\"428\":1,\"489\":1}}],[\"should\",{\"1\":{\"275\":1,\"448\":1}}],[\"showcase\",{\"1\":{\"312\":3}}],[\"show\",{\"1\":{\"213\":5,\"216\":1}}],[\"showwithaster\",{\"1\":{\"147\":3}}],[\"showwithparen\",{\"1\":{\"147\":3}}],[\"sh帮你免费且自动更新的https证书\",{\"1\":{\"26\":1}}],[\"sh的安装目录\",{\"1\":{\"21\":1}}],[\"shanghai\",{\"1\":{\"18\":1}}],[\"share\",{\"1\":{\"17\":3,\"18\":2,\"23\":5}}],[\"sh\",{\"0\":{\"13\":1},\"1\":{\"13\":1,\"14\":1,\"21\":3,\"22\":2}}],[\"sheet\",{\"1\":{\"5\":2}}],[\"several\",{\"1\":{\"481\":1}}],[\"semicolon\",{\"1\":{\"467\":1}}],[\"seperated\",{\"1\":{\"448\":1}}],[\"segmentation\",{\"1\":{\"414\":1,\"430\":1}}],[\"segment\",{\"1\":{\"400\":6,\"457\":1}}],[\"segmentfault\",{\"1\":{\"101\":1}}],[\"search\",{\"1\":{\"134\":2,\"424\":1}}],[\"services\",{\"1\":{\"18\":1}}],[\"server\",{\"1\":{\"17\":4,\"23\":10}}],[\"sender\",{\"1\":{\"275\":4}}],[\"sendfile\",{\"1\":{\"17\":1}}],[\"sent\",{\"1\":{\"17\":1}}],[\"second\",{\"1\":{\"479\":1}}],[\"secrets\",{\"1\":{\"10\":1}}],[\"secret\",{\"1\":{\"10\":1}}],[\"section\",{\"1\":{\"8\":1}}],[\"setup\",{\"1\":{\"496\":1}}],[\"setclock\",{\"1\":{\"343\":3,\"347\":4}}],[\"settimeout\",{\"1\":{\"319\":1}}],[\"settings\",{\"1\":{\"9\":1}}],[\"setprintername\",{\"1\":{\"319\":5}}],[\"setnext\",{\"1\":{\"185\":6}}],[\"set\",{\"1\":{\"9\":1,\"245\":1}}],[\"see\",{\"1\":{\"8\":1}}],[\"select\",{\"1\":{\"8\":1}}],[\"so\",{\"1\":{\"479\":1,\"481\":1}}],[\"source\",{\"1\":{\"397\":3,\"403\":2,\"418\":1}}],[\"solution\",{\"1\":{\"275\":1}}],[\"solutions\",{\"0\":{\"7\":1}}],[\"somethinggood\",{\"1\":{\"155\":2}}],[\"something\",{\"1\":{\"155\":4}}],[\"some\",{\"0\":{\"7\":1}}],[\"virtual\",{\"1\":{\"322\":1,\"327\":1,\"400\":1,\"401\":1}}],[\"view\",{\"0\":{\"306\":1},\"1\":{\"306\":1}}],[\"visit\",{\"1\":{\"375\":4,\"378\":2,\"382\":1,\"383\":1}}],[\"visitor\",{\"0\":{\"373\":1,\"374\":1,\"383\":1},\"1\":{\"208\":1,\"270\":1,\"373\":1,\"375\":23,\"376\":1,\"378\":6,\"379\":2,\"381\":1,\"382\":3,\"383\":3}}],[\"visualstudio\",{\"1\":{\"49\":1}}],[\"vi\",{\"1\":{\"206\":1,\"207\":2,\"375\":1,\"376\":2}}],[\"vs\",{\"1\":{\"101\":2}}],[\"vscode中可以使用\",{\"1\":{\"90\":1}}],[\"vscode\",{\"0\":{\"49\":1},\"1\":{\"91\":1}}],[\"v3u\",{\"1\":{\"93\":1,\"97\":1}}],[\"void\",{\"1\":{\"41\":1,\"125\":1,\"134\":3,\"147\":10,\"162\":3,\"174\":13,\"185\":3,\"192\":9,\"203\":1,\"204\":2,\"205\":1,\"213\":1,\"232\":6,\"239\":4,\"245\":1,\"260\":7,\"267\":1,\"275\":2,\"286\":3,\"298\":8,\"312\":3,\"319\":8,\"338\":1,\"343\":23,\"357\":6,\"367\":4,\"375\":3,\"397\":2,\"403\":1,\"407\":1,\"421\":1,\"424\":1,\"425\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":2,\"440\":2,\"447\":1,\"449\":1,\"450\":1,\"459\":1,\"461\":1}}],[\"volumes\",{\"1\":{\"18\":1,\"33\":2}}],[\"v+p\",{\"1\":{\"41\":1}}],[\"v+a\",{\"1\":{\"41\":3}}],[\"v<a\",{\"1\":{\"41\":1}}],[\"v>=p\",{\"1\":{\"41\":1}}],[\"v=x\",{\"1\":{\"41\":1}}],[\"v\",{\"1\":{\"41\":10,\"400\":1}}],[\"val\",{\"1\":{\"424\":1,\"425\":10,\"426\":7,\"440\":5,\"449\":1,\"479\":2,\"487\":1}}],[\"value\",{\"1\":{\"403\":3,\"404\":1,\"417\":1,\"424\":4,\"429\":1,\"440\":12,\"448\":2,\"449\":1,\"457\":1,\"459\":1,\"460\":3,\"461\":2,\"481\":6,\"493\":1}}],[\"valid=300s\",{\"1\":{\"17\":1}}],[\"variables\",{\"1\":{\"459\":1,\"461\":2}}],[\"variable\",{\"1\":{\"407\":1,\"408\":1,\"429\":1,\"445\":3,\"446\":1,\"448\":7,\"456\":2,\"459\":3,\"460\":1,\"461\":2,\"481\":5}}],[\"vars\",{\"1\":{\"10\":1}}],[\"var\",{\"1\":{\"10\":1,\"17\":10,\"18\":1,\"23\":10,\"33\":2,\"411\":2,\"487\":1,\"490\":1,\"495\":1}}],[\"vue\",{\"0\":{\"13\":1},\"1\":{\"13\":1}}],[\"vuepress\",{\"1\":{\"5\":1}}],[\"version\",{\"1\":{\"5\":1,\"9\":1,\"33\":2}}],[\"after\",{\"1\":{\"477\":3}}],[\"a=10\",{\"1\":{\"449\":1}}],[\"a是41\",{\"1\":{\"425\":1}}],[\"ax上需要保留原来的值\",{\"1\":{\"494\":1}}],[\"axxor\",{\"1\":{\"493\":1}}],[\"axpush\",{\"1\":{\"493\":1}}],[\"ax\",{\"1\":{\"401\":3,\"403\":26,\"404\":4,\"406\":5,\"407\":1,\"411\":2,\"412\":34,\"413\":7,\"414\":1,\"479\":1,\"481\":1,\"490\":1,\"494\":1}}],[\"ai\",{\"1\":{\"360\":1}}],[\"a>\",{\"1\":{\"232\":1,\"233\":1}}],[\"a><\",{\"1\":{\"134\":6}}],[\"at\",{\"1\":{\"192\":1,\"193\":10}}],[\"adj\",{\"0\":{\"409\":1},\"1\":{\"398\":1,\"402\":1,\"407\":1,\"409\":2,\"481\":1}}],[\"adapter\",{\"1\":{\"143\":1,\"147\":1,\"148\":1,\"169\":1,\"221\":1,\"328\":1}}],[\"addactionlistener\",{\"1\":{\"351\":5}}],[\"addobserver\",{\"1\":{\"298\":3}}],[\"addfruit\",{\"1\":{\"286\":2}}],[\"add\",{\"1\":{\"40\":3,\"41\":1,\"134\":10,\"203\":1,\"204\":1,\"206\":13,\"375\":16,\"397\":1,\"402\":1,\"407\":3,\"409\":2,\"411\":1,\"412\":1,\"414\":1,\"417\":1,\"420\":2,\"428\":1,\"429\":2,\"487\":2,\"488\":1,\"489\":1,\"493\":5,\"494\":3,\"495\":1}}],[\"address\",{\"1\":{\"403\":6,\"405\":1,\"411\":3,\"448\":2,\"457\":1,\"458\":2,\"481\":1,\"484\":3,\"488\":1}}],[\"address+\",{\"1\":{\"400\":1,\"411\":1,\"458\":1}}],[\"address|\",{\"1\":{\"400\":1}}],[\"address>\",{\"1\":{\"134\":1}}],[\"address>`\",{\"1\":{\"134\":1}}],[\"addr\",{\"1\":{\"17\":1,\"491\":4,\"492\":4}}],[\"ab\",{\"1\":{\"469\":1}}],[\"abstractdisplay\",{\"1\":{\"367\":8}}],[\"abstractclass\",{\"1\":{\"156\":2}}],[\"abstractfactory\",{\"1\":{\"134\":1,\"245\":1,\"336\":1}}],[\"abstract\",{\"1\":{\"134\":10,\"137\":1,\"138\":1,\"147\":3,\"162\":4,\"169\":1,\"174\":5,\"176\":1,\"185\":2,\"204\":4,\"213\":5,\"234\":1,\"239\":3,\"260\":2,\"298\":3,\"362\":1,\"367\":4,\"375\":6}}],[\"about\",{\"0\":{\"7\":1},\"1\":{\"275\":1}}],[\"automatically\",{\"1\":{\"275\":1}}],[\"automaton\",{\"1\":{\"15\":3,\"17\":9,\"18\":2,\"19\":2,\"21\":1,\"23\":16}}],[\"author\",{\"1\":{\"134\":8}}],[\"authservice\",{\"1\":{\"121\":1}}],[\"aaronsw\",{\"1\":{\"107\":1}}],[\"await\",{\"1\":{\"96\":5,\"97\":1}}],[\"array\",{\"1\":{\"495\":1}}],[\"array<item>\",{\"1\":{\"134\":1}}],[\"are\",{\"1\":{\"479\":1,\"480\":1,\"481\":1}}],[\"area\",{\"1\":{\"397\":1,\"400\":3}}],[\"article\",{\"1\":{\"476\":1}}],[\"arbitrary\",{\"1\":{\"397\":1}}],[\"arg\",{\"1\":{\"411\":3,\"458\":2}}],[\"arg3\",{\"1\":{\"411\":1}}],[\"arg2\",{\"1\":{\"411\":1}}],[\"arg1\",{\"1\":{\"411\":1}}],[\"arguments\",{\"1\":{\"407\":2,\"409\":2,\"411\":1,\"481\":3}}],[\"argv++\",{\"1\":{\"397\":1}}],[\"argv\",{\"1\":{\"397\":3,\"414\":1,\"440\":1,\"496\":1}}],[\"argc\",{\"1\":{\"397\":2,\"414\":1,\"440\":1,\"496\":1}}],[\"args=\",{\"1\":{\"94\":2,\"96\":4}}],[\"around\",{\"1\":{\"267\":1,\"268\":1}}],[\"archive\",{\"1\":{\"8\":1}}],[\"asimpile\",{\"0\":{\"509\":1}}],[\"assignment\",{\"1\":{\"490\":1}}],[\"assign\",{\"1\":{\"420\":2,\"428\":1,\"448\":2,\"449\":1,\"468\":1,\"469\":1,\"470\":1,\"471\":1,\"481\":1,\"482\":1,\"489\":2,\"490\":3,\"491\":1,\"495\":1}}],[\"assembly\",{\"1\":{\"418\":1}}],[\"assetstudioassetstudio\",{\"1\":{\"47\":1}}],[\"assert\",{\"1\":{\"41\":1}}],[\"as\",{\"1\":{\"96\":1,\"147\":2,\"203\":1,\"275\":1,\"428\":1,\"482\":1,\"483\":1}}],[\"async\",{\"1\":{\"95\":1,\"96\":5}}],[\"asyncio\",{\"0\":{\"93\":1},\"1\":{\"95\":3,\"96\":13}}],[\"aggregate\",{\"1\":{\"267\":5,\"268\":2}}],[\"aggregateerror\",{\"1\":{\"49\":1}}],[\"again\",{\"1\":{\"96\":2}}],[\"agent\",{\"1\":{\"17\":1}}],[\"append\",{\"1\":{\"479\":1}}],[\"appendbook\",{\"1\":{\"267\":5}}],[\"apple\",{\"1\":{\"286\":1,\"287\":12}}],[\"application\",{\"1\":{\"17\":1,\"275\":1}}],[\"app\",{\"1\":{\"275\":1}}],[\"api\",{\"0\":{\"216\":1},\"1\":{\"49\":1,\"156\":2,\"167\":1,\"216\":5,\"217\":1,\"360\":2}}],[\"a<b\",{\"1\":{\"40\":1}}],[\"a+b\",{\"1\":{\"40\":2}}],[\"a+b>=p\",{\"1\":{\"40\":1}}],[\"any\",{\"1\":{\"267\":2,\"312\":3,\"338\":2}}],[\"an\",{\"1\":{\"174\":1,\"175\":1,\"275\":1,\"448\":1,\"480\":1}}],[\"ans=\",{\"1\":{\"41\":1}}],[\"ans=mul\",{\"1\":{\"40\":1}}],[\"ans=1ll\",{\"1\":{\"39\":1}}],[\"android\",{\"0\":{\"9\":1},\"1\":{\"9\":2,\"90\":1}}],[\"and\",{\"1\":{\"8\":1,\"275\":3,\"402\":1,\"410\":1,\"412\":1,\"420\":3,\"428\":5,\"480\":1,\"484\":2,\"489\":2,\"492\":1,\"493\":2}}],[\"accept\",{\"1\":{\"375\":7,\"378\":2,\"383\":1}}],[\"access\",{\"1\":{\"15\":1,\"17\":9,\"23\":10,\"327\":1,\"495\":1}}],[\"acc\",{\"1\":{\"203\":2}}],[\"acquire\",{\"1\":{\"94\":1}}],[\"acme申请\",{\"1\":{\"26\":1}}],[\"acme\",{\"0\":{\"13\":1},\"1\":{\"13\":1,\"14\":1,\"15\":1,\"18\":1,\"21\":3,\"22\":5}}],[\"actually\",{\"1\":{\"480\":1}}],[\"actual\",{\"1\":{\"448\":1}}],[\"actionlistener\",{\"1\":{\"351\":3}}],[\"actionperformed\",{\"1\":{\"351\":1}}],[\"action\",{\"1\":{\"195\":1}}],[\"act\",{\"1\":{\"10\":5}}],[\"alone\",{\"1\":{\"448\":1}}],[\"alice使用了id卡\",{\"1\":{\"240\":1}}],[\"alice\",{\"1\":{\"185\":4,\"239\":1,\"319\":1}}],[\"alias\",{\"1\":{\"17\":1,\"23\":2}}],[\"aliyun\",{\"1\":{\"9\":12}}],[\"allocate\",{\"1\":{\"400\":1}}],[\"allowmixedcontent\",{\"1\":{\"90\":1}}],[\"all\",{\"1\":{\"9\":1,\"275\":1,\"459\":1,\"479\":1}}],[\"alt\",{\"1\":{\"3\":1,\"102\":1}}],[\"a\",{\"1\":{\"5\":1,\"40\":6,\"41\":6,\"93\":1,\"97\":1,\"101\":1,\"174\":1,\"175\":1,\"275\":4,\"279\":8,\"338\":1,\"390\":1,\"392\":1,\"395\":1,\"397\":1,\"398\":1,\"414\":1,\"415\":1,\"416\":1,\"424\":8,\"425\":4,\"426\":5,\"430\":1,\"434\":1,\"444\":1,\"448\":2,\"449\":1,\"451\":1,\"455\":1,\"458\":3,\"462\":1,\"466\":1,\"468\":4,\"469\":4,\"471\":1,\"472\":1,\"481\":1,\"483\":2,\"484\":2,\"486\":1,\"490\":2,\"491\":1,\"493\":3,\"495\":2,\"496\":1,\"500\":1}}],[\"一节提到的\",{\"1\":{\"489\":1}}],[\"一节中所说的修改或删除\",{\"1\":{\"484\":1}}],[\"一是运算符的优先级问题\",{\"1\":{\"476\":1}}],[\"一是容易忘记大括号\",{\"1\":{\"39\":1}}],[\"一元运算符\",{\"0\":{\"478\":1},\"1\":{\"476\":1}}],[\"一旦遇到了\",{\"1\":{\"470\":1}}],[\"一旦同名\",{\"1\":{\"459\":1}}],[\"一些非终结符如<expr>被递归地使用了\",{\"1\":{\"437\":1}}],[\"一种是自底向上\",{\"1\":{\"435\":1}}],[\"一种是自顶向下\",{\"1\":{\"435\":1}}],[\"一般终结符对应于词法分析器输出的标记\",{\"1\":{\"436\":1}}],[\"一般有两种处理方法\",{\"1\":{\"429\":1}}],[\"一般处理的方法有两种\",{\"1\":{\"421\":1}}],[\"一般而言\",{\"1\":{\"396\":1}}],[\"一般的编译器相关的教程要么就十分简单\",{\"1\":{\"390\":1}}],[\"一般编译原理的课程会说一些\",{\"1\":{\"389\":1}}],[\"一般来说\",{\"1\":{\"251\":1}}],[\"一定程度上\",{\"1\":{\"346\":1}}],[\"一侧增加类即可\",{\"1\":{\"167\":1}}],[\"一致性是指委托对象应当具有与委托者相同的接口或行为\",{\"1\":{\"224\":1}}],[\"一致性\",{\"1\":{\"133\":1}}],[\"一路点击\",{\"1\":{\"106\":1}}],[\"一方面没有很好的测试用例\",{\"1\":{\"391\":1}}],[\"一方面想了解它的工作原理\",{\"1\":{\"388\":1}}],[\"一方面\",{\"1\":{\"95\":1,\"403\":1}}],[\"一方面减少了心智负担\",{\"1\":{\"41\":1}}],[\"一个标记\",{\"1\":{\"420\":1}}],[\"一个语法分析器生成器\",{\"1\":{\"392\":1}}],[\"一个观察者在接收到通知后修改了被观察对象的状态\",{\"1\":{\"303\":1}}],[\"一个实例的改变会同时反映到所有使用该实例的地方\",{\"1\":{\"248\":1}}],[\"一个实体应当尽量少地与其他实体之间发生相互作用\",{\"1\":{\"117\":1}}],[\"一个类只负责一个职责\",{\"1\":{\"129\":1}}],[\"一个类只对应一个职责\",{\"1\":{\"119\":1}}],[\"一个类对另一个类的依赖应该建立在最小的接口上\",{\"1\":{\"122\":1}}],[\"一个原则可以是另一个原则的加强或基础\",{\"1\":{\"109\":1}}],[\"一个用于存储附属的数据\",{\"1\":{\"32\":1}}],[\"一个包含\",{\"1\":{\"32\":1}}],[\"一个通用性很强的工具\",{\"1\":{\"5\":1}}],[\"一位热衷于探索全栈开发领域的技术爱好者\",{\"1\":{\"1\":1}}],[\"我认为这并无不可\",{\"1\":{\"502\":1}}],[\"我认为这也是初学者实现编译器的一大难点\",{\"1\":{\"473\":1}}],[\"我认为至少占了重要程度的50\",{\"1\":{\"501\":1}}],[\"我认为有几个要点需要强调\",{\"1\":{\"431\":1}}],[\"我知道\",{\"1\":{\"447\":1}}],[\"我仍然认为通过定义\",{\"1\":{\"392\":1}}],[\"我相信绝大多数\",{\"1\":{\"389\":1}}],[\"我是先写程序再总结上面的文法\",{\"1\":{\"445\":1}}],[\"我是抱着满腔热情去上课的\",{\"1\":{\"389\":1}}],[\"我是要增加功能呢\",{\"1\":{\"157\":1}}],[\"我对编译器一直心存敬佩\",{\"1\":{\"389\":1}}],[\"我会说是\",{\"1\":{\"388\":1}}],[\"我会从团队整体出发进行考虑\",{\"1\":{\"274\":1}}],[\"我来负责仲裁\",{\"1\":{\"274\":1}}],[\"我才不用rust呢\",{\"1\":{\"255\":1}}],[\"我得拿到锁才能操作\",{\"1\":{\"94\":1}}],[\"我们才能有所成长吧\",{\"1\":{\"504\":1}}],[\"我们才可以编写出具有高可替换性的类\",{\"1\":{\"156\":1}}],[\"我们其实通过了参数\",{\"1\":{\"489\":1}}],[\"我们没有取负的操作\",{\"1\":{\"487\":1}}],[\"我们没有直接的逻辑取反指令\",{\"1\":{\"485\":1}}],[\"我们主要从它的目标代码入手\",{\"1\":{\"478\":1}}],[\"我们看看下面的伪代码\",{\"1\":{\"468\":1}}],[\"我们实现的\",{\"1\":{\"461\":1}}],[\"我们实现的词法分析器与传统意义上的词法分析器不太相同\",{\"1\":{\"424\":1}}],[\"我们已经为变量\",{\"1\":{\"490\":1}}],[\"我们已经为当前的标识符\",{\"1\":{\"457\":1}}],[\"我们已经知道了什么时候开始解析函数的定义\",{\"1\":{\"457\":1}}],[\"我们把词法分析器的代码一并贴上\",{\"1\":{\"440\":1}}],[\"我们向前看一个标记\",{\"1\":{\"438\":1}}],[\"我们假设词法分析器已经正确地将其中的数字识别成了标记\",{\"1\":{\"437\":1}}],[\"我们对\",{\"1\":{\"437\":1}}],[\"我们下一章见\",{\"1\":{\"431\":1}}],[\"我们直接贴上代码\",{\"1\":{\"428\":1,\"440\":1}}],[\"我们用了专门的一章讲解了\",{\"1\":{\"503\":1}}],[\"我们用了很暴力的手段编写了我们的词法分析器\",{\"1\":{\"502\":1}}],[\"我们用词法分析器将源码转换成标记流\",{\"1\":{\"427\":1}}],[\"我们用类来表示状态\",{\"1\":{\"346\":1}}],[\"我们之前说过\",{\"1\":{\"427\":1}}],[\"我们以异或\",{\"1\":{\"493\":1}}],[\"我们以\",{\"1\":{\"426\":1}}],[\"我们并不关心一个变量具体叫什么名字\",{\"1\":{\"424\":1}}],[\"我们并不会一次性地将所有源码全部转换成标记流\",{\"1\":{\"419\":1}}],[\"我们知道\",{\"1\":{\"421\":1}}],[\"我们同时还用它来处理空白字符\",{\"1\":{\"421\":1}}],[\"我们为\",{\"1\":{\"412\":1}}],[\"我们依旧用上面的例子\",{\"1\":{\"411\":1}}],[\"我们连函数调用都无法实现\",{\"1\":{\"407\":1}}],[\"我们这里的\",{\"1\":{\"403\":1}}],[\"我们这里并不需要了解太多\",{\"1\":{\"400\":1}}],[\"我们的代码是自举的\",{\"1\":{\"496\":1}}],[\"我们的代码里有一些指针的强制转换\",{\"1\":{\"414\":1}}],[\"我们的电脑上已经有了这些函数的实现\",{\"1\":{\"413\":1}}],[\"我们的\",{\"1\":{\"407\":1,\"411\":1}}],[\"我们的编译器支持指针类型\",{\"1\":{\"448\":1}}],[\"我们的编译器并不支持宏定义\",{\"1\":{\"423\":1}}],[\"我们的编译器是以标记流为输入\",{\"1\":{\"418\":1}}],[\"我们的编译器参数是顺序入栈的\",{\"1\":{\"407\":1}}],[\"我们的编译器主要包括\",{\"1\":{\"397\":1}}],[\"我们的虚拟机还是工作良好的\",{\"1\":{\"414\":1}}],[\"我们的虚拟机只有一个寄存器\",{\"1\":{\"403\":1}}],[\"我们的虚拟机中\",{\"1\":{\"401\":1}}],[\"我们的虚拟机并不打算模拟完整的计算机\",{\"1\":{\"400\":1}}],[\"我们要使用变量\",{\"1\":{\"488\":1}}],[\"我们要从整体上讲解如何设计我们的\",{\"1\":{\"395\":1}}],[\"我们要在\",{\"1\":{\"138\":1}}],[\"我们能对编译器的构建有一定的了解\",{\"1\":{\"387\":1}}],[\"我们提倡扩展\",{\"1\":{\"380\":1}}],[\"我们创建了\",{\"1\":{\"379\":1}}],[\"我们来整理一下\",{\"1\":{\"378\":1}}],[\"我们来思考一下\",{\"1\":{\"347\":1}}],[\"我们只关心三个内容\",{\"1\":{\"400\":1}}],[\"我们只需要编写新的访问者\",{\"1\":{\"373\":1}}],[\"我们只要事先在每个方法内部都加上一段\",{\"1\":{\"350\":1}}],[\"我们编写一个表示\",{\"1\":{\"373\":1}}],[\"我们声明了抽象方法\",{\"1\":{\"370\":1}}],[\"我们考虑了两种猜拳的策略\",{\"1\":{\"357\":1}}],[\"我们考虑泛型编程\",{\"1\":{\"41\":1}}],[\"我们暂且不深入学习该方法\",{\"1\":{\"348\":1}}],[\"我们应该如何编程\",{\"1\":{\"347\":1}}],[\"我们应该养成具体问题具体分析的辩证唯物思想\",{\"1\":{\"97\":1}}],[\"我们会遇到许多的挫折\",{\"1\":{\"504\":1}}],[\"我们会先加载它的地址\",{\"1\":{\"484\":1}}],[\"我们会先将该问题分解为多个小问题\",{\"1\":{\"346\":1}}],[\"我们会将\",{\"1\":{\"420\":1}}],[\"我们会将它们继续划分为更小的问题\",{\"1\":{\"346\":1}}],[\"我们经常会使用分而治之的方针\",{\"1\":{\"346\":1}}],[\"我们在第三章的虚拟机中提到过\",{\"1\":{\"461\":1}}],[\"我们在本章的学习过程中已经提到过很多次了\",{\"1\":{\"383\":1}}],[\"我们在理解类的层次时\",{\"1\":{\"370\":1}}],[\"我们在\",{\"1\":{\"319\":1}}],[\"我们还需要初始化虚拟机的栈\",{\"1\":{\"496\":1}}],[\"我们还需要注意下面将要提到的情况\",{\"1\":{\"302\":1}}],[\"我们还可能返回除号\",{\"1\":{\"427\":1}}],[\"我们还要编写进行其他处理的\",{\"1\":{\"379\":1}}],[\"我们还应关注设计模式的演变和新模式的出现\",{\"1\":{\"227\":1}}],[\"我们展示了如何使用观察者模式来管理状态变化\",{\"1\":{\"298\":1}}],[\"我们可能会修改或删除现有的\",{\"1\":{\"481\":1}}],[\"我们可能需要从观察模式转变为通知模式\",{\"1\":{\"305\":1}}],[\"我们可能需要为同一个集合编写多个具体迭代器\",{\"1\":{\"269\":1}}],[\"我们可将扮演\",{\"1\":{\"280\":1}}],[\"我们可以正确调用\",{\"1\":{\"496\":1}}],[\"我们可以很容易地直接将\",{\"1\":{\"438\":1}}],[\"我们可以这样认为\",{\"1\":{\"418\":1}}],[\"我们可以准备两种算法\",{\"1\":{\"361\":1}}],[\"我们可以使用的内存地址为\",{\"1\":{\"400\":1}}],[\"我们可以使用\",{\"1\":{\"348\":1}}],[\"我们可以在不同的应用场景中灵活地控制对对象的访问\",{\"1\":{\"327\":1}}],[\"我们可以在不修改现有类的情况下添加新功能\",{\"1\":{\"212\":1}}],[\"我们可以考虑使用事件总线或消息队列来集中处理通知\",{\"1\":{\"305\":1}}],[\"我们可以考虑将多个对象组成一条职责链\",{\"1\":{\"183\":1}}],[\"我们可以引入一个标志位来跟踪通知状态\",{\"1\":{\"303\":1}}],[\"我们可以为\",{\"1\":{\"269\":1}}],[\"我们可以轻松地遍历\",{\"1\":{\"268\":1}}],[\"我们可以轻松地添加其他具体工厂\",{\"1\":{\"135\":1}}],[\"我们可以更好地管理和操作集合数据\",{\"1\":{\"265\":1}}],[\"我们可以更灵活地管理对象的创建过程\",{\"1\":{\"238\":1}}],[\"我们可以提高代码的可读性\",{\"1\":{\"227\":1}}],[\"我们可以将这些视图注册为观察者\",{\"1\":{\"297\":1}}],[\"我们可以将\",{\"1\":{\"167\":1}}],[\"我们定义了\",{\"1\":{\"319\":1}}],[\"我们定义了几个类和接口来实现迭代器模式\",{\"1\":{\"268\":1}}],[\"我们定义一个用于创建对象的接口\",{\"1\":{\"237\":1}}],[\"我们了解到共享实例可以减少内存使用量\",{\"1\":{\"251\":1}}],[\"我们通常会将共享对象存储在某种集合\",{\"1\":{\"250\":1}}],[\"我们也将构建出一个能用的\",{\"1\":{\"387\":1}}],[\"我们也可以不使用示例程序中的做法\",{\"1\":{\"348\":1}}],[\"我们也可以换种说法\",{\"1\":{\"249\":1}}],[\"我们也要避免过早地进行\",{\"1\":{\"227\":1}}],[\"我们就着手虚拟机的实现\",{\"1\":{\"501\":1}}],[\"我们就来逐一说明\",{\"1\":{\"476\":1}}],[\"我们就将它的类型加上\",{\"1\":{\"448\":1}}],[\"我们就知道是需要解析枚举类型\",{\"1\":{\"448\":1}}],[\"我们就能知道它们是特殊的关键字\",{\"1\":{\"429\":1}}],[\"我们就只需要一个表示系统状态的变量即可\",{\"1\":{\"349\":1}}],[\"我们就需要一个中立的仲裁者站出来说\",{\"1\":{\"274\":1}}],[\"我们就可以实现以不同的颜色显示同一个\",{\"1\":{\"248\":1}}],[\"我们就实现了不修改被装饰的类即可增加功能\",{\"1\":{\"217\":1}}],[\"我们不另外处理它们的原因是\",{\"1\":{\"420\":1}}],[\"我们不得不在\",{\"1\":{\"382\":1}}],[\"我们不应该将它们隐藏在自己脑袋中\",{\"1\":{\"230\":1}}],[\"我们不应死记硬背这些设计模式\",{\"1\":{\"227\":1}}],[\"我们不妨通过类的运算符重载来进一步优化\",{\"1\":{\"41\":1}}],[\"我们完全不需要对被装饰的类做任何修改\",{\"1\":{\"217\":1}}],[\"我们使用装饰器模式来动态地给对象添加职责\",{\"1\":{\"211\":1}}],[\"我们使用了策略模式\",{\"1\":{\"356\":1}}],[\"我们使用了外观模式\",{\"1\":{\"231\":1}}],[\"我们使用了\",{\"1\":{\"185\":1,\"286\":1}}],[\"我们必须先计算优先级高的运算符\",{\"1\":{\"477\":1}}],[\"我们必须时刻关汴这种\",{\"1\":{\"178\":1}}],[\"我们必须要做以下修改\",{\"1\":{\"138\":1}}],[\"我们必须要对所有的具体工厂进行相应的修改才行\",{\"1\":{\"138\":1}}],[\"我们需要类似下面的汇编代码\",{\"1\":{\"490\":1}}],[\"我们需要不断地向右扫描\",{\"1\":{\"489\":1}}],[\"我们需要处理多运算符的优先级问题\",{\"1\":{\"489\":1}}],[\"我们需要在栈上为局部变量预留空间\",{\"1\":{\"461\":1}}],[\"我们需要所有的变量定义出现在所有的语句之前\",{\"1\":{\"461\":1}}],[\"我们需要知道后面参数的类型\",{\"1\":{\"480\":1}}],[\"我们需要知道参数的个数\",{\"1\":{\"458\":1}}],[\"我们需要知道这两个\",{\"1\":{\"424\":1}}],[\"我们需要了解当\",{\"1\":{\"458\":1}}],[\"我们需要得到\",{\"1\":{\"411\":1}}],[\"我们需要条件判断相关的指令\",{\"1\":{\"406\":1}}],[\"我们需要首先在全局添加如下代码\",{\"1\":{\"400\":1}}],[\"我们需要使用多个变量的值的集合来表示系统的状态\",{\"1\":{\"349\":1}}],[\"我们需要使用条件分支语句判断当前的状态\",{\"1\":{\"346\":1}}],[\"我们需要特别小心\",{\"1\":{\"303\":1}}],[\"我们需要确保共享对象在整个程序生命周期内都被引用\",{\"1\":{\"250\":1}}],[\"我们需要根据具体情况选择合适的设计模式\",{\"1\":{\"227\":1}}],[\"我们需要先阅读现有代码\",{\"1\":{\"180\":1}}],[\"我们需要编写一个定义这些操作系统的共同接口\",{\"1\":{\"167\":1}}],[\"我们需要将它存放到前一篇文章中说的\",{\"1\":{\"426\":1}}],[\"我们需要将当前的行号加一\",{\"1\":{\"422\":1}}],[\"我们需要将\",{\"1\":{\"157\":1}}],[\"我们需要证明乘法结果的存在性和唯一性\",{\"1\":{\"69\":1}}],[\"我们需要证明加法结果的存在性和唯一性\",{\"1\":{\"53\":1}}],[\"我们学习了抽象类的作用\",{\"1\":{\"156\":1}}],[\"我们再用多线程试一下同样的逻辑\",{\"1\":{\"96\":1}}],[\"我们将介绍递归下降的语法分析器\",{\"1\":{\"431\":1}}],[\"我们将同时分析单个字符如\",{\"1\":{\"426\":1}}],[\"我们将专门作为一个小节\",{\"1\":{\"401\":1}}],[\"我们将实现其中的eval函数\",{\"1\":{\"397\":1}}],[\"我们将逐个填充每个函数的功能\",{\"1\":{\"397\":1}}],[\"我们将\",{\"1\":{\"348\":1}}],[\"我们将设置时间的处理看作是\",{\"1\":{\"347\":1}}],[\"我们将展示如何使用\",{\"1\":{\"266\":1}}],[\"我们将借助另一个公理系统\",{\"1\":{\"77\":1}}],[\"我们将详细讲解环境配置\",{\"1\":{\"13\":1}}],[\"我们成功地由\",{\"1\":{\"77\":1}}],[\"我们终于可以对自然数乘法的性质进行进一步的探索\",{\"1\":{\"72\":1}}],[\"我们终于可以对自然数加法的性质进行进一步的探索\",{\"1\":{\"56\":1}}],[\"我们预先准备以方便证明\",{\"1\":{\"62\":1}}],[\"我们即可建立如今最常用的算术公理系统\",{\"1\":{\"50\":1}}],[\"我的是\",{\"1\":{\"32\":1}}],[\"我的博客构建库\",{\"1\":{\"5\":1}}],[\"我还没有研究透\",{\"1\":{\"32\":1}}],[\"我抽奖一发就中了大奖\",{\"1\":{\"3\":1}}],[\"zero\",{\"1\":{\"406\":1}}],[\"zeroelse\",{\"1\":{\"406\":1}}],[\"zip\",{\"1\":{\"9\":1}}],[\"z\",{\"1\":{\"5\":1,\"40\":1,\"41\":1,\"424\":4}}],[\"网站\",{\"1\":{\"5\":1}}],[\"资源\",{\"0\":{\"5\":1}}],[\"项目地址\",{\"1\":{\"390\":1}}],[\"项目的初衷\",{\"0\":{\"390\":1}}],[\"项目结构\",{\"0\":{\"15\":1},\"1\":{\"13\":1}}],[\"项目\",{\"0\":{\"4\":1,\"13\":1},\"1\":{\"13\":1,\"15\":1}}],[\"这也是我自己的感慨吧\",{\"1\":{\"504\":1}}],[\"这也意味着一元运算符的优先级总是高于多元运算符\",{\"1\":{\"478\":1}}],[\"这部分对于整个编译器的编写其实是十分重要的\",{\"1\":{\"501\":1}}],[\"这部分也将同时解析参数本身\",{\"1\":{\"478\":1}}],[\"这次是后缀形式的\",{\"1\":{\"494\":1}}],[\"这包括\",{\"1\":{\"492\":1}}],[\"这和第三章\",{\"1\":{\"481\":1}}],[\"这章讲解语句的解析\",{\"1\":{\"466\":1}}],[\"这段代码线性地遍历所有标识符\",{\"1\":{\"459\":1}}],[\"这段示例程序的功能是让电脑玩\",{\"1\":{\"357\":1}}],[\"这么做的原因是\",{\"1\":{\"459\":1}}],[\"这么做的理由有两点\",{\"1\":{\"395\":1}}],[\"这相当于是整个函数定义的语法解析的框架\",{\"1\":{\"459\":1}}],[\"这点在后面的语法分析器我们就能体会\",{\"1\":{\"417\":1}}],[\"这点复杂度还是不算什么的\",{\"1\":{\"389\":1}}],[\"这后生成的目标代码便是我们的指令集\",{\"1\":{\"396\":1}}],[\"这意味着我们可以像运行脚本一样去运行\",{\"1\":{\"395\":1}}],[\"这意味着我们可以轻松地替换观察者或被观察者\",{\"1\":{\"301\":1}}],[\"这篇博客并没有使用诸如\",{\"1\":{\"392\":1}}],[\"这篇文章将带你走进闭包的奇妙世界\",{\"1\":{\"102\":1}}],[\"这些就是我们要支持的标记符\",{\"1\":{\"420\":1}}],[\"这些工具允许我们通过正则表达式来识别标记\",{\"1\":{\"419\":1}}],[\"这些函数就是可用的\",{\"1\":{\"413\":1}}],[\"这些函数的二进制代码就被编译进了我们的编译器\",{\"1\":{\"413\":1}}],[\"这些指令只接受一个参数\",{\"1\":{\"403\":1}}],[\"这些指令的顺序安排是有意的\",{\"1\":{\"402\":1}}],[\"这些理论试图教会我们如何用通用的方法来自动解决问题\",{\"1\":{\"389\":1}}],[\"这些题目要么是因为答案太大\",{\"1\":{\"37\":1}}],[\"这其中最主要的原因是\",{\"1\":{\"389\":1}}],[\"这两行代码起的就是这个作用\",{\"1\":{\"461\":1}}],[\"这两个角色共同决定了实际进行的处理\",{\"1\":{\"378\":1}}],[\"这两条语句中都有\",{\"1\":{\"351\":1}}],[\"这超出了本书的范围\",{\"1\":{\"348\":1}}],[\"这是整个编译器的最后一部分\",{\"1\":{\"476\":1}}],[\"这是上一章的\",{\"1\":{\"456\":1}}],[\"这是正常的\",{\"1\":{\"430\":1}}],[\"这是汇编中最难理解的部分\",{\"1\":{\"407\":1}}],[\"这是我们要支持的全部指令\",{\"1\":{\"402\":1}}],[\"这是\",{\"1\":{\"395\":1,\"398\":1,\"491\":1}}],[\"这是一种稍微有些笨的策略\",{\"1\":{\"357\":1}}],[\"这是一种非常好的解决办法\",{\"1\":{\"348\":1}}],[\"这是因为\",{\"1\":{\"351\":2,\"459\":1}}],[\"这是因为我们需要在\",{\"1\":{\"350\":1}}],[\"这是因为在\",{\"1\":{\"280\":1}}],[\"这是因为只有\",{\"1\":{\"168\":1}}],[\"这虽然看似理所当然\",{\"1\":{\"347\":1}}],[\"这一章\",{\"1\":{\"463\":1}}],[\"这一系列教程将带你从头编写一个\",{\"1\":{\"387\":1}}],[\"这一处理需要花费很多时间\",{\"1\":{\"319\":1}}],[\"这一功能的类\",{\"1\":{\"159\":1}}],[\"这可能会导致被观察对象再次通知所有观察者\",{\"1\":{\"303\":1}}],[\"这可能吗\",{\"1\":{\"96\":1}}],[\"这会导致共享对象在需要时无法被找到\",{\"1\":{\"250\":1}}],[\"这取决于类的使用目的\",{\"1\":{\"248\":1}}],[\"这就意味着表达式\",{\"1\":{\"477\":1}}],[\"这就用到了上一章中提到的\",{\"1\":{\"438\":1}}],[\"这就涉及到编译器\",{\"1\":{\"421\":1}}],[\"这就需要事先将这个位置信息存储起来\",{\"1\":{\"407\":1}}],[\"这就像我们可以自由选择香草味冰激凌\",{\"1\":{\"219\":1}}],[\"这就体现了它们之间的一致性\",{\"1\":{\"216\":1}}],[\"这就是开闭原则\",{\"1\":{\"380\":1}}],[\"这就是共享的特点\",{\"1\":{\"248\":1}}],[\"这就是所谓的里氏替换原则\",{\"1\":{\"223\":1}}],[\"这就是接口\",{\"1\":{\"216\":1}}],[\"这就是\",{\"1\":{\"159\":1,\"183\":1,\"347\":1,\"380\":2}}],[\"这就是为了增加新功能而产生的层次结构\",{\"1\":{\"155\":1}}],[\"这就是主动让出\",{\"1\":{\"96\":1}}],[\"这时\",{\"1\":{\"138\":1,\"168\":1,\"180\":1,\"274\":1,\"280\":1,\"349\":1,\"361\":1,\"382\":1}}],[\"这\",{\"1\":{\"137\":1,\"279\":2}}],[\"这并不是事情的全貌\",{\"1\":{\"94\":1}}],[\"这并不是什么缺陷\",{\"1\":{\"93\":1}}],[\"这个\",{\"1\":{\"421\":2}}],[\"这个顺序要特别注意\",{\"1\":{\"412\":1}}],[\"这个主题\",{\"1\":{\"383\":1}}],[\"这个gil全局解释器锁实际上把所有线程的执行代码都给上了锁\",{\"1\":{\"94\":1}}],[\"这个图满足如下性质\",{\"1\":{\"80\":1}}],[\"这实际上是符合客观逻辑的\",{\"1\":{\"93\":1}}],[\"这与\",{\"1\":{\"79\":1}}],[\"这究竟是为什么呢\",{\"1\":{\"77\":1}}],[\"这违背了\",{\"1\":{\"76\":1}}],[\"这样你就不需要重复造轮子\",{\"1\":{\"503\":1}}],[\"这样你就能用\",{\"1\":{\"32\":1}}],[\"这样它就成了全局的常量了\",{\"1\":{\"449\":1}}],[\"这样当源代码中出现关键字时\",{\"1\":{\"429\":1}}],[\"这样我们就有了一个最简单的编译器\",{\"1\":{\"397\":1}}],[\"这样做的主要原因是为了简化虚拟机的实现\",{\"1\":{\"404\":1}}],[\"这样做的缺点是\",{\"1\":{\"383\":1}}],[\"这样做的好处是请求的发送者和接收者解耦\",{\"1\":{\"185\":1}}],[\"这样看起来程序好像变复杂了\",{\"1\":{\"360\":1}}],[\"这样即使应用程序关闭后重新打开\",{\"1\":{\"292\":1}}],[\"这样可以支持用户进行多次撤销和重做操作\",{\"1\":{\"292\":1}}],[\"这样可以确保逻辑的一致性和可维护性\",{\"1\":{\"278\":1}}],[\"这样的颜色信息\",{\"1\":{\"248\":1}}],[\"这样的设计可能显得有些过于复杂\",{\"1\":{\"135\":1}}],[\"这样\",{\"1\":{\"216\":1,\"217\":1,\"251\":1,\"274\":1,\"346\":1,\"348\":1,\"349\":1,\"373\":1,\"383\":1}}],[\"这样很容易使类的层次结构变得复杂\",{\"1\":{\"157\":1}}],[\"这样一来\",{\"1\":{\"137\":1,\"167\":1,\"248\":1}}],[\"这样子类可以决定实例化哪个类\",{\"1\":{\"133\":1}}],[\"这样在扩展功能时\",{\"1\":{\"111\":1}}],[\"这样就很难在编译代码时检测出\",{\"1\":{\"350\":1}}],[\"这样就构成了一个小小的类层次结构\",{\"1\":{\"155\":1}}],[\"这样就定义了自然数\",{\"1\":{\"51\":1}}],[\"这样就解决了类型名长的缺点\",{\"1\":{\"41\":1}}],[\"这样使用的时候\",{\"1\":{\"41\":1}}],[\"这种顺序的唯一作用就是在打印调试信息时更加方便\",{\"1\":{\"402\":1}}],[\"这种消息分发的方式一般被称为双重分发\",{\"1\":{\"378\":1}}],[\"这种责任被称为\",{\"1\":{\"370\":1}}],[\"这种错误了\",{\"1\":{\"350\":1}}],[\"这种处理方式既有优点也有缺点\",{\"1\":{\"348\":1}}],[\"这种处理方式是在画蛇添足\",{\"1\":{\"94\":1}}],[\"这种透明性使得代理模式在不改变客户端代码的情况下添加额外的功能成为可能\",{\"1\":{\"325\":1}}],[\"这种一致性确保了委托模式的灵活性和可维护性\",{\"1\":{\"224\":1}}],[\"这种情况下\",{\"1\":{\"183\":1}}],[\"这种设计方式提高了系统的灵活性和可扩展性\",{\"1\":{\"179\":1}}],[\"这种职责分离使得代码更加清晰\",{\"1\":{\"178\":1}}],[\"这种层次结构并非用于方便我们增加新的方法\",{\"1\":{\"156\":1}}],[\"这种模式通过组合而不是继承来实现功能的扩展\",{\"1\":{\"153\":1}}],[\"这种主动让出型的调度方式更为高效\",{\"1\":{\"95\":1}}],[\"这种异步编程方式被广大开发者所认可\",{\"1\":{\"94\":1}}],[\"这种写法的式子依旧太长\",{\"1\":{\"40\":1}}],[\"这种方法可以减少观察者对被观察对象的依赖\",{\"1\":{\"304\":1}}],[\"这种方法需要额外的逻辑来判断对象是否仍然被使用\",{\"1\":{\"250\":1}}],[\"这种方法简单直接\",{\"1\":{\"250\":1}}],[\"这种方法有效地解决了直接取模的忘记取模的漏洞\",{\"1\":{\"40\":1}}],[\"这种方法是直接取模\",{\"1\":{\"39\":1}}],[\"这便是本文写作的背景\",{\"1\":{\"36\":1}}],[\"这中间就会导致\",{\"1\":{\"32\":1}}],[\"这里就不多作解释\",{\"1\":{\"491\":1}}],[\"这里最为重要的一点是\",{\"1\":{\"458\":1}}],[\"这里不再多说\",{\"1\":{\"439\":1}}],[\"这里会有一个疑问\",{\"1\":{\"438\":1}}],[\"这里我简单介绍一下\",{\"1\":{\"436\":1}}],[\"这里我们解析的就是类似\",{\"1\":{\"488\":1}}],[\"这里我们就能看到\",{\"1\":{\"484\":1}}],[\"这里我们就采用第二种方法\",{\"1\":{\"429\":1}}],[\"这里我们讲解其中的一些细节\",{\"1\":{\"448\":1}}],[\"这里我们要额外介绍\",{\"1\":{\"427\":1}}],[\"这里我们要为我们的虚拟机构建自己的指令集\",{\"1\":{\"402\":1}}],[\"这里我们首先要了解的是当参数调用时\",{\"1\":{\"411\":1}}],[\"这里我们约定\",{\"1\":{\"407\":1}}],[\"这里我们把\",{\"1\":{\"407\":1}}],[\"这里我们只实现两个最简单的条件判断\",{\"1\":{\"406\":1}}],[\"这里这样写的目的是装b\",{\"1\":{\"425\":1}}],[\"这里要说明这样一个观点\",{\"1\":{\"501\":1}}],[\"这里要注意的是在ascii码中\",{\"1\":{\"425\":1}}],[\"这里要解释的一点是\",{\"1\":{\"403\":1}}],[\"这里解释一下具体的含义\",{\"1\":{\"424\":1}}],[\"这里注意的是\",{\"1\":{\"419\":1}}],[\"这里需要的是注意每个函数的作用\",{\"1\":{\"397\":1}}],[\"这里有一个单独用于解析\",{\"1\":{\"397\":1}}],[\"这里\",{\"1\":{\"350\":1,\"468\":1,\"489\":1}}],[\"这里故意将上面两点说得很笼统\",{\"1\":{\"347\":1}}],[\"这里也出现了可替换性\",{\"0\":{\"301\":1}}],[\"这里的一个问题是\",{\"1\":{\"421\":1}}],[\"这里的原理是\",{\"1\":{\"413\":1}}],[\"这里的数据可以是代码\",{\"1\":{\"400\":1}}],[\"这里的资源指的是计算机中的资源\",{\"1\":{\"251\":1}}],[\"这里的类的层次结构并非用于增加功能\",{\"1\":{\"156\":1}}],[\"这里的finally\",{\"1\":{\"94\":1}}],[\"这里其实也存在层次结构\",{\"1\":{\"156\":1}}],[\"这里说的\",{\"1\":{\"137\":1}}],[\"这里将目录修改为目标目录\",{\"1\":{\"22\":1}}],[\"这里是所有详细的教程和指南\",{\"1\":{\"105\":1}}],[\"这里是所有与技术相关的文章\",{\"1\":{\"35\":1}}],[\"这里是所有个人感想\",{\"1\":{\"2\":1}}],[\"这里是推荐的书籍\",{\"1\":{\"5\":1}}],[\"这里是你参与或开发的项目介绍和进展\",{\"1\":{\"4\":1}}],[\"这句话真是道出了人生的真谛\",{\"1\":{\"3\":1}}],[\"这让我不禁感慨\",{\"1\":{\"3\":1}}],[\"时我们并不能确定\",{\"1\":{\"448\":1}}],[\"时直接从\",{\"1\":{\"403\":1}}],[\"时间也是一种资源\",{\"1\":{\"251\":1}}],[\"时由乘法运算规则\",{\"1\":{\"73\":1}}],[\"时有\",{\"1\":{\"57\":2,\"58\":1,\"59\":4,\"66\":1,\"73\":3,\"74\":1,\"75\":1,\"76\":2}}],[\"时\",{\"1\":{\"3\":1,\"57\":1,\"58\":1,\"63\":1,\"73\":1,\"74\":1,\"75\":1,\"90\":1,\"180\":1,\"348\":1,\"351\":2,\"379\":1}}],[\"昨日在玩\",{\"1\":{\"3\":1}}],[\"致力于打造高效\",{\"1\":{\"1\":1}}],[\"擅长将前端与后端技术无缝结合\",{\"1\":{\"1\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
