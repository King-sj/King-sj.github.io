import{_ as n,o as s,c as a,a as t,b as p,f as e}from"./app-B69Gl_S-.js";const o={},i=p("p",null,"Bridge 模式在“类的功能层次结构”和“类的实现层次结构”之间搭建桥梁。",-1),l=e(`<h2 id="使用此设计模式的理由" tabindex="-1"><a class="header-anchor" href="#使用此设计模式的理由"><span>使用此设计模式的理由</span></a></h2><p>Bridge 模式的主要目的是将抽象部分与实现部分分离，使它们可以独立变化。这种模式通过组合而不是继承来实现功能的扩展，减少了类之间的耦合度，提高了系统的可扩展性和可维护性。</p><h2 id="类的层次结构的两个作用" tabindex="-1"><a class="header-anchor" href="#类的层次结构的两个作用"><span>类的层次结构的两个作用</span></a></h2><h3 id="增加新功能时" tabindex="-1"><a class="header-anchor" href="#增加新功能时"><span>增加新功能时</span></a></h3><p>假设现在有一个类 <code>Something</code>，当我们想在 <code>Something</code> 中增加新功能时（例如增加一个具体方法），会编写一个 <code>Something</code> 类的子类（派生类），即 <code>SomethingGood</code> 类。这样就构成了一个小小的类层次结构。这就是为了增加新功能而产生的层次结构。</p><p>SomeThing</p><p>----\\ SomeThingGood</p><h3 id="增加新的实现时" tabindex="-1"><a class="header-anchor" href="#增加新的实现时"><span>增加新的实现时</span></a></h3><p>在 Template Method 模式（第 3 章）中，我们学习了抽象类的作用。抽象类声明了一些抽象方法，定义了接口 (API)，然后子类负责实现这些抽象方法。父类的任务是通过声明抽象方法的方式定义接口 (API)，而子类的任务是实现抽象方法。正是由于父类和子类的这种任务分担，我们才可以编写出具有高可替换性的类。</p><p>这里其实也存在层次结构。例如，当子类实现了父类 <code>AbstractClass</code> 类的抽象方法时，它们之间就构成了一个小小的层次结构。</p><p>AbstractClass</p><p>----\\ ConcreteClass</p><p>但是，这里的类的层次结构并非用于增加功能，也就是说，这种层次结构并非用于方便我们增加新的方法。它的真正作用是帮助我们实现任务分担。</p><h3 id="类的层次结构的混杂和分离" tabindex="-1"><a class="header-anchor" href="#类的层次结构的混杂和分离"><span>类的层次结构的混杂和分离</span></a></h3><p>当我们想要编写子类时，就需要先确认自己的意图：“我是要增加功能呢？还是要增加实现呢？”</p><p>当类的层次结构只有一层时，功能层次结构与实现层次结构是混杂在一个层次结构中的。这样很容易使类的层次结构变得复杂，也难以透彻地理解类的层次结构。因为自己难以确定究竟应该在类的哪一个层次结构中去增加子类。</p><p>因此，我们需要将“类的功能层次结构&quot;与“类的实现层次结构&quot;分离为两个独立的类层次结构。当然，如果只是简单地将它们分开，两者之间必然会缺少联系。所以我们还需要在它们之间搭建一座桥梁。本章中要学习的 Bridge 模式的作用就是搭建这座桥梁。</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><h3 id="类的一览表" tabindex="-1"><a class="header-anchor" href="#类的一览表"><span>类的一览表</span></a></h3><table><thead><tr><th>在桥的哪一侧</th><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>类的功能层次结构</td><td>Display</td><td>负责“显示”的类</td></tr><tr><td>类的功能层次结构</td><td>CountDisplay</td><td>增加了“只显示规定次数”这一功能的类</td></tr><tr><td>类的实现层次结构</td><td>DisplayImpl</td><td>负责“显示”的类</td></tr><tr><td>类的实现层次结构</td><td>StringDisplayImpl</td><td>“用字符串显示”的类</td></tr><tr><td>主程序</td><td>Main</td><td>试程序行为的类</td></tr></tbody></table><p>Display 类（代码清单 9 · 1 ）的功能是抽象的，负责“显示一些东西&quot;。该类位于“类的功能层次结构&quot;的最上层。在 impl 字段中保存的是实现了 Display 类的具体功能的实例（ impl 是 implementation （实现）的缩写）。该实例通过 Display 类的构造函数被传递给 Display 类，然后保存在字段中，以供后面的处理使用（ impl 字段即是类的两个层次结构的“桥梁&quot;）。</p><p>CountDisplay 类继承了 Display 类的 open、print、close 方法，并使用它们来增加这个新功能。这就是“类的功能层次结构&quot;。</p><img src="https://www.plantuml.com/plantuml/svg/fPBF2i8m3CRlUueSDsGlq9CmBuAWu1FKhMYXVqQREcNuxcRLokhmvAMGNzBa-zAkFNA7GQkYLTnxs4ZVAtw7iG2eGUfUiSIs511TfRXSPAkOjhqmPSNWQcKNGU-amOoqodgHaUxTCx57yHRKs60mgH8t5ARxg1pZrNd5BqqwA9If1gKMde49-YJSR20_UNIyHSXMCJM1roJ7X_stEMA7XJ-2JMRnO-U8L7oUj_xoDB7NyaaCcmwgZ_4WExmasN7CebavkrFzANaQ6Lzk9qrc93r6NTjiHmo25yMQpD1tUW80" alt=""><h3 id="countdisplay-ts" tabindex="-1"><a class="header-anchor" href="#countdisplay-ts"><span>countDisplay.ts</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Display <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./display&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DisplayImpl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./displayImpl&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CountDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>impl<span class="token operator">:</span> DisplayImpl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">multiDisplay</span><span class="token punctuation">(</span>times<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="display-ts" tabindex="-1"><a class="header-anchor" href="#display-ts"><span>display.ts</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> DisplayImpl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./displayImpl&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> impl<span class="token operator">:</span> DisplayImpl<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>impl<span class="token operator">:</span> DisplayImpl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>impl <span class="token operator">=</span> impl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>impl<span class="token punctuation">.</span><span class="token function">rawOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>impl<span class="token punctuation">.</span><span class="token function">rawPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>impl<span class="token punctuation">.</span><span class="token function">rawClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="displayimpl-ts" tabindex="-1"><a class="header-anchor" href="#displayimpl-ts"><span>displayImpl.ts</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DisplayImpl</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">rawOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token function">rawPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token function">rawClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="main-ts" tabindex="-1"><a class="header-anchor" href="#main-ts"><span>main.ts</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Display <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./display&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CountDisplay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./countDisplay&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StringDisplayImpl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./stringDisplayImpl&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDisplayImpl</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, China.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDisplay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDisplayImpl</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDisplay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDisplayImpl</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, Universe.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

d1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d3<span class="token punctuation">.</span><span class="token function">multiDisplay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="stringdisplayimpl-ts" tabindex="-1"><a class="header-anchor" href="#stringdisplayimpl-ts"><span>stringDisplayImpl.ts</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> DisplayImpl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./displayImpl&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">StringDisplayImpl</span> <span class="token keyword">extends</span> <span class="token class-name">DisplayImpl</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">rawOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">rawPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">rawClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      buffer <span class="token operator">+=</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    buffer <span class="token operator">+=</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src<span class="token entity" title="\\b">\\b</span>ridge\\main.ts&quot;</span>
+-------------+
<span class="token operator">|</span>Hello, China.<span class="token operator">|</span>
+-------------+
+-------------+
<span class="token operator">|</span>Hello, World.<span class="token operator">|</span>
+-------------+
+----------------+
<span class="token operator">|</span>Hello, Universe.<span class="token operator">|</span>
<span class="token operator">|</span>Hello, Universe.<span class="token operator">|</span>
<span class="token operator">|</span>Hello, Universe.<span class="token operator">|</span>
<span class="token operator">|</span>Hello, Universe.<span class="token operator">|</span>
<span class="token operator">|</span>Hello, Universe.<span class="token operator">|</span>
+----------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="分开后更容易扩展" tabindex="-1"><a class="header-anchor" href="#分开后更容易扩展"><span>分开后更容易扩展</span></a></h3><p>Bridge 模式的特征是将“类的功能层次结构&quot;与“类的实现层次结构&quot;分离开了。将类的这两个层次结构分离开有利于独立地对它们进行扩展。当想要增加功能时，只需要在“类的功能层次结构&quot;一侧增加类即可，不必对“类的实现层次结构&quot;做任何修改。而且，增加后的功能可以被“所有的实现”使用。</p><p>例如，我们可以将“类的功能层次结构&quot;应用于软件所运行的操作系统上。如果我们将某个程序中依赖于操作系统的部分划分为 Windows 版、Macintosh 版、Unix 版，那么我们就可以用 Bridge 模式中的“类的实现层次结构&quot;来表现这些依赖于操作系统的部分。也就是说，我们需要编写一个定义这些操作系统的共同接口（API）的 Implementor 角色，然后编写 Windows 版、Macintosh 版、Unix 版的 3 个 ConcreteImplementor 角色。这样一来，无论在“类的功能层次结构&quot;中增加多少个功能，它们都可以工作于这 3 个操作系统上。</p><h3 id="继承是强关联-委托是弱关联" tabindex="-1"><a class="header-anchor" href="#继承是强关联-委托是弱关联"><span>继承是强关联，委托是弱关联</span></a></h3><p>继承是强关联关系，但委托是弱关联关系。这是因为只有 Display 类的实例生成时，才与作为参数被传入的类构成关联。例如，在示例程序中，当 Main 类生成 Display 类和 CountDisplay 类的实例时，才将 StringDisplayImpl 的实例作为参数传递给 Display 类和 CountDisplay 类。如果我们不传递 StringDisplayImpl 类的实例，而是将其他 ConcreteImplementor 角色的实例传递给 Display 类和 CountDisplay 类，就能很容易地改变实现。这时，发生变化的代码只有 Main 类，Display 类和 DisplayImpl 类则不需要做任何修改。</p><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Template Method 模式</li><li>Abstract Factory 模式</li><li>Adapter 模式</li></ul>`,43);function c(u,r){return s(),a("div",null,[i,t(" more "),l])}const k=n(o,[["render",c],["__file","bridge.html.vue"]]),m=JSON.parse('{"path":"/tech/DesignPatterns/bridge.html","title":"Bridge 模式","lang":"zh-CN","frontmatter":{"title":"Bridge 模式","date":"2024-10-25T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","分开考虑"],"prev":"./abstractFactory","next":"./strategy","description":"Bridge 模式在“类的功能层次结构”和“类的实现层次结构”之间搭建桥梁。","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/bridge.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Bridge 模式"}],["meta",{"property":"og:description","content":"Bridge 模式在“类的功能层次结构”和“类的实现层次结构”之间搭建桥梁。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"分开考虑"}],["meta",{"property":"article:published_time","content":"2024-10-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bridge 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"使用此设计模式的理由","slug":"使用此设计模式的理由","link":"#使用此设计模式的理由","children":[]},{"level":2,"title":"类的层次结构的两个作用","slug":"类的层次结构的两个作用","link":"#类的层次结构的两个作用","children":[{"level":3,"title":"增加新功能时","slug":"增加新功能时","link":"#增加新功能时","children":[]},{"level":3,"title":"增加新的实现时","slug":"增加新的实现时","link":"#增加新的实现时","children":[]},{"level":3,"title":"类的层次结构的混杂和分离","slug":"类的层次结构的混杂和分离","link":"#类的层次结构的混杂和分离","children":[]}]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[{"level":3,"title":"类的一览表","slug":"类的一览表","link":"#类的一览表","children":[]},{"level":3,"title":"countDisplay.ts","slug":"countdisplay-ts","link":"#countdisplay-ts","children":[]}]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"分开后更容易扩展","slug":"分开后更容易扩展","link":"#分开后更容易扩展","children":[]},{"level":3,"title":"继承是强关联，委托是弱关联","slug":"继承是强关联-委托是弱关联","link":"#继承是强关联-委托是弱关联","children":[]}]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":5.76,"words":1728},"filePathRelative":"tech/DesignPatterns/bridge.md","localizedDate":"2024年10月25日","excerpt":"<p>Bridge 模式在“类的功能层次结构”和“类的实现层次结构”之间搭建桥梁。</p>\\n","autoDesc":true}');export{k as comp,m as data};
