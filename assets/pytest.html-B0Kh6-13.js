import{_ as a,r as p,o as l,c as i,b as t,e as n,d as s,f as o}from"./app-DkfD2H4x.js";const c={},r=o(`<h1 id="pytest-配置与实用技巧" tabindex="-1"><a class="header-anchor" href="#pytest-配置与实用技巧"><span>pytest 配置与实用技巧</span></a></h1><p>pytest 是 Python 生态中最流行的单元测试框架之一，支持简单易用的断言、丰富的插件生态和灵活的配置方式。</p><h2 id="基本定义" tabindex="-1"><a class="header-anchor" href="#基本定义"><span>基本定义</span></a></h2><p>pytest 是一个用于 Python 的自动化测试框架，支持单元测试、功能测试、参数化测试等。</p><h2 id="原理简介" tabindex="-1"><a class="header-anchor" href="#原理简介"><span>原理简介</span></a></h2><p>pytest 通过自动发现以 test_ 开头的函数或类，执行测试并收集结果。其断言机制无需使用 self.assert*，直接用 assert 即可。</p><h2 id="常用配置" tabindex="-1"><a class="header-anchor" href="#常用配置"><span>常用配置</span></a></h2><ul><li>conftest.py：用于存放测试夹具（fixture）、hook、全局配置等。</li><li>pytest.ini / pyproject.toml：全局配置文件，可设置测试路径、忽略规则、插件参数等。</li></ul><h3 id="conftest-py-示例" tabindex="-1"><a class="header-anchor" href="#conftest-py-示例"><span>conftest.py 示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># content of tests/conftest.py</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pytest-ini-示例" tabindex="-1"><a class="header-anchor" href="#pytest-ini-示例"><span>pytest.ini 示例</span></a></h3><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">testpaths</span> <span class="token punctuation">=</span> <span class="token value attr-value">tests</span>
<span class="token key attr-name">addopts</span> <span class="token punctuation">=</span> <span class="token value attr-value">-v --tb=short</span>
<span class="token key attr-name">python_files</span> <span class="token punctuation">=</span> <span class="token value attr-value">test_*.py</span>
<span class="token key attr-name">python_classes</span> <span class="token punctuation">=</span> <span class="token value attr-value">Test*</span>
<span class="token key attr-name">python_functions</span> <span class="token punctuation">=</span> <span class="token value attr-value">test_*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><ul><li>运行所有测试：<code>pytest</code></li><li>指定文件：<code>pytest tests/test_demo.py</code></li><li>只运行某个类/函数：<code>pytest -k &#39;TestClass and test_func&#39;</code></li><li>生成测试报告：<code>pytest --html=report.html</code></li></ul><h2 id="插件推荐" tabindex="-1"><a class="header-anchor" href="#插件推荐"><span>插件推荐</span></a></h2><ul><li>pytest-cov：测试覆盖率统计</li><li>pytest-xdist：并行测试</li><li>pytest-mock：mock 支持</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,17),d={href:"https://docs.pytest.org/zh/latest/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://pytest-zh.readthedocs.io/zh/latest/example/simple.html",target:"_blank",rel:"noopener noreferrer"};function u(y,k){const e=p("ExternalLinkIcon");return l(),i("div",null,[r,t("ul",null,[t("li",null,[t("a",d,[n("pytest 官方文档"),s(e)])]),t("li",null,[t("a",h,[n("pytest 配置详解"),s(e)])])])])}const v=a(c,[["render",u],["__file","pytest.html.vue"]]),f=JSON.parse('{"path":"/tech/pytest.html","title":"pytest 配置与实用技巧","lang":"zh-CN","frontmatter":{"title":"pytest 配置与实用技巧","category":"工具","description":"pytest 配置与实用技巧 pytest 是 Python 生态中最流行的单元测试框架之一，支持简单易用的断言、丰富的插件生态和灵活的配置方式。 基本定义 pytest 是一个用于 Python 的自动化测试框架，支持单元测试、功能测试、参数化测试等。 原理简介 pytest 通过自动发现以 test_ 开头的函数或类，执行测试并收集结果。其断言机制...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/pytest.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"pytest 配置与实用技巧"}],["meta",{"property":"og:description","content":"pytest 配置与实用技巧 pytest 是 Python 生态中最流行的单元测试框架之一，支持简单易用的断言、丰富的插件生态和灵活的配置方式。 基本定义 pytest 是一个用于 Python 的自动化测试框架，支持单元测试、功能测试、参数化测试等。 原理简介 pytest 通过自动发现以 test_ 开头的函数或类，执行测试并收集结果。其断言机制..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pytest 配置与实用技巧\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"基本定义","slug":"基本定义","link":"#基本定义","children":[]},{"level":2,"title":"原理简介","slug":"原理简介","link":"#原理简介","children":[]},{"level":2,"title":"常用配置","slug":"常用配置","link":"#常用配置","children":[{"level":3,"title":"conftest.py 示例","slug":"conftest-py-示例","link":"#conftest-py-示例","children":[]},{"level":3,"title":"pytest.ini 示例","slug":"pytest-ini-示例","link":"#pytest-ini-示例","children":[]}]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":2,"title":"插件推荐","slug":"插件推荐","link":"#插件推荐","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"tech/pytest.md","excerpt":"\\n<p>pytest 是 Python 生态中最流行的单元测试框架之一，支持简单易用的断言、丰富的插件生态和灵活的配置方式。</p>\\n<h2>基本定义</h2>\\n<p>pytest 是一个用于 Python 的自动化测试框架，支持单元测试、功能测试、参数化测试等。</p>\\n<h2>原理简介</h2>\\n<p>pytest 通过自动发现以 test_ 开头的函数或类，执行测试并收集结果。其断言机制无需使用 self.assert*，直接用 assert 即可。</p>\\n<h2>常用配置</h2>\\n<ul>\\n<li>conftest.py：用于存放测试夹具（fixture）、hook、全局配置等。</li>\\n<li>pytest.ini / pyproject.toml：全局配置文件，可设置测试路径、忽略规则、插件参数等。</li>\\n</ul>","autoDesc":true}');export{v as comp,f as data};
