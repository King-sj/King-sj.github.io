import{_ as n,o as s,c as a,f as t}from"./app-CgO5_scR.js";const p={},e=t(`<h2 id="使用此设计模式的理由" tabindex="-1"><a class="header-anchor" href="#使用此设计模式的理由"><span>使用此设计模式的理由</span></a></h2><p>Composite 模式允许你将对象组合成递归结构来表示“部分-整体”的层次结构。使用 Composite 模式，用户可以统一地对待单个对象和组合对象。例如，在文件系统中，目录和文件都可以被视为条目（Entry），目录可以包含其他目录和文件，而文件则是叶子节点。</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/hPAn3e8m48Ptdk8I5mZX1OW3WpePOyBWO1mAFR495D8U1ZM-kwM0A77GnEcI_-xQxsiQQMAAwY9tMA99iPGWpPdMi9IaBd1p07p8a3QiGDSBmSm8cGrfBAusbNMHeB8fuzp5TZViZl3wQfkLMQQrqDGkdKl1JJeRqvsWqrRXKJHkPSjmtpZj0vMnpLvexexJGI-4mfHA0uuDeUIzHciH01-QFT7-O6DfpAPU_x3znUifi18vVcAVG0QW3SiRoVVKlu6DJpeFWhAtYmoV-JCF" alt=""><h3 id="目录类-directory-ts" tabindex="-1"><a class="header-anchor" href="#目录类-directory-ts"><span>目录类 (directory.ts)</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entry&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> directory<span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>directory<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> entry<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token operator">:</span> Entry<span class="token punctuation">)</span><span class="token operator">:</span> Entry <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>directory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">protected</span> <span class="token function">printListWithPrefix</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>directory<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>entry <span class="token keyword">as</span> Directory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printListWithPrefix</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象条目类-entry-ts" tabindex="-1"><a class="header-anchor" href="#抽象条目类-entry-ts"><span>抽象条目类 (entry.ts)</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token operator">:</span> Entry<span class="token punctuation">)</span><span class="token operator">:</span> Entry <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;FileTreatmentException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printListWithPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">printListWithPrefix</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件类-file-ts" tabindex="-1"><a class="header-anchor" href="#文件类-file-ts"><span>文件类 (file.ts)</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entry&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">private</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">protected</span> <span class="token function">printListWithPrefix</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主程序-main-ts" tabindex="-1"><a class="header-anchor" href="#主程序-main-ts"><span>主程序 (main.ts)</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entry&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Directory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./directory&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./file&#39;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Making root entries...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rootdir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bindir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;bin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tmpdir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;tmp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> usrdir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;usr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bindir<span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>usrdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
bindir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;vi&#39;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bindir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;latex&#39;</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Making user entries...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> yuki<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;yuki&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hanako<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;hanako&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tomura<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&#39;tomura&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>yuki<span class="token punctuation">)</span><span class="token punctuation">;</span>
usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hanako<span class="token punctuation">)</span><span class="token punctuation">;</span>
usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tomura<span class="token punctuation">)</span><span class="token punctuation">;</span>
yuki<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;diary.html&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
yuki<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;Composite.java&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hanako<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;memo.tex&#39;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tomura<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;game.doc&#39;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tomura<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;junk.mail&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src<span class="token entity" title="\\c">\\c</span>omposite\\main.ts&quot;</span>
Making root entries<span class="token punctuation">..</span>.
/root <span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span>
/root/bin <span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span>
/root/bin/vi <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
/root/bin/latex <span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>
/root/tmp <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
/root/usr <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
Making user entries<span class="token punctuation">..</span>.
/root <span class="token punctuation">(</span><span class="token number">31500</span><span class="token punctuation">)</span>
/root/bin <span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span>
/root/bin/vi <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
/root/bin/latex <span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>
/root/tmp <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
/root/usr <span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>
/root/usr/yuki <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
/root/usr/yuki/diary.html <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
/root/usr/yuki/Composite.java <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
/root/usr/hanako <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
/root/usr/hanako/memo.tex <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
/root/usr/tomura <span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span>
/root/usr/tomura/game.doc <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
/root/usr/tomura/junk.mail <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Command 模式</li><li>Visitor 模式</li><li>Decorator 模式</li></ul>`,16),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","composite.html.vue"]]),k=JSON.parse('{"path":"/tech/DesignPatterns/composite.html","title":"Composite 模式","lang":"zh-CN","frontmatter":{"title":"Composite 模式","date":"2024-10-25T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","容器与内容的一致性"],"prev":"./strategy","next":"./decorator","description":"使用此设计模式的理由 Composite 模式允许你将对象组合成递归结构来表示“部分-整体”的层次结构。使用 Composite 模式，用户可以统一地对待单个对象和组合对象。例如，在文件系统中，目录和文件都可以被视为条目（Entry），目录可以包含其他目录和文件，而文件则是叶子节点。 示例代码 目录类 (directory.ts) 抽象条目类 (ent...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/composite.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Composite 模式"}],["meta",{"property":"og:description","content":"使用此设计模式的理由 Composite 模式允许你将对象组合成递归结构来表示“部分-整体”的层次结构。使用 Composite 模式，用户可以统一地对待单个对象和组合对象。例如，在文件系统中，目录和文件都可以被视为条目（Entry），目录可以包含其他目录和文件，而文件则是叶子节点。 示例代码 目录类 (directory.ts) 抽象条目类 (ent..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"容器与内容的一致性"}],["meta",{"property":"article:published_time","content":"2024-10-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Composite 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"使用此设计模式的理由","slug":"使用此设计模式的理由","link":"#使用此设计模式的理由","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[{"level":3,"title":"目录类 (directory.ts)","slug":"目录类-directory-ts","link":"#目录类-directory-ts","children":[]},{"level":3,"title":"抽象条目类 (entry.ts)","slug":"抽象条目类-entry-ts","link":"#抽象条目类-entry-ts","children":[]},{"level":3,"title":"文件类 (file.ts)","slug":"文件类-file-ts","link":"#文件类-file-ts","children":[]},{"level":3,"title":"主程序 (main.ts)","slug":"主程序-main-ts","link":"#主程序-main-ts","children":[]}]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":1.78,"words":533},"filePathRelative":"tech/DesignPatterns/composite.md","localizedDate":"2024年10月25日","excerpt":"<h2>使用此设计模式的理由</h2>\\n<p>Composite 模式允许你将对象组合成递归结构来表示“部分-整体”的层次结构。使用 Composite 模式，用户可以统一地对待单个对象和组合对象。例如，在文件系统中，目录和文件都可以被视为条目（Entry），目录可以包含其他目录和文件，而文件则是叶子节点。</p>\\n<h2>示例代码</h2>\\n<img src=\\"https://www.plantuml.com/plantuml/svg/hPAn3e8m48Ptdk8I5mZX1OW3WpePOyBWO1mAFR495D8U1ZM-kwM0A77GnEcI_-xQxsiQQMAAwY9tMA99iPGWpPdMi9IaBd1p07p8a3QiGDSBmSm8cGrfBAusbNMHeB8fuzp5TZViZl3wQfkLMQQrqDGkdKl1JJeRqvsWqrRXKJHkPSjmtpZj0vMnpLvexexJGI-4mfHA0uuDeUIzHciH01-QFT7-O6DfpAPU_x3znUifi18vVcAVG0QW3SiRoVVKlu6DJpeFWhAtYmoV-JCF\\" alt=\\"\\">","autoDesc":true}');export{r as comp,k as data};
