import{_ as t,r as e,o as p,c as o,d as a,f as c,b as n}from"./app-DFDsyZGc.js";const l={},i=c(`<h1 id="密码学" tabindex="-1"><a class="header-anchor" href="#密码学"><span>密码学</span></a></h1><h2 id="加密" tabindex="-1"><a class="header-anchor" href="#加密"><span>加密</span></a></h2><p>加密是将明文信息通过算法和密钥转换为密文的过程，只有拥有正确密钥的人才能解密恢复原文。</p><h3 id="对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密"><span>对称加密</span></a></h3><ul><li>加密和解密使用同一个密钥。</li><li>常见算法：AES、DES。</li><li>优点：速度快，适合大数据量。</li><li>缺点：密钥分发困难。</li></ul><h3 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密"><span>非对称加密</span></a></h3><ul><li>使用一对密钥：公钥加密，私钥解密。</li><li>常见算法：RSA、ECC。</li><li>优点：密钥分发简单，适合安全通信。</li><li>缺点：速度慢，常用于加密小数据或密钥。</li></ul><h2 id="签名" tabindex="-1"><a class="header-anchor" href="#签名"><span>签名</span></a></h2><p>数字签名用于验证消息的完整性和发送者身份。</p><ul><li>发送方用私钥对消息摘要签名，接收方用公钥验证。</li><li>常见算法：RSA签名、ECDSA。</li><li>能防止消息被篡改和伪造。</li></ul><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><table><thead><tr><th></th><th>加密</th><th>签名</th></tr></thead><tbody><tr><td>目的</td><td>保密</td><td>认证、完整性</td></tr><tr><td>密钥</td><td>对称/非对称</td><td>非对称</td></tr><tr><td>过程</td><td>明文→密文→明文</td><td>明文→签名→验证</td></tr><tr><td>保护对象</td><td>信息内容</td><td>信息来源与完整性</td></tr></tbody></table><h2 id="c-示例" tabindex="-1"><a class="header-anchor" href="#c-示例"><span>C++ 示例</span></a></h2><h3 id="对称加密-凯撒加密-caesar-cipher" tabindex="-1"><a class="header-anchor" href="#对称加密-凯撒加密-caesar-cipher"><span>对称加密（凯撒加密 Caesar Cipher）</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token comment">// 简单的凯撒加密实现</span>
std<span class="token double-colon punctuation">::</span>string <span class="token function">caesar_encrypt</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> plaintext<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string ciphertext <span class="token operator">=</span> plaintext<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> ciphertext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> base <span class="token operator">=</span> <span class="token function">islower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
            c <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> base <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> base<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ciphertext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
std<span class="token double-colon punctuation">::</span>string <span class="token function">caesar_decrypt</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">caesar_encrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token number">26</span> <span class="token operator">-</span> key <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string text <span class="token operator">=</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string enc <span class="token operator">=</span> <span class="token function">caesar_encrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string dec <span class="token operator">=</span> <span class="token function">caesar_decrypt</span><span class="token punctuation">(</span>enc<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;原文: &quot;</span> <span class="token operator">&lt;&lt;</span> text <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;加密: &quot;</span> <span class="token operator">&lt;&lt;</span> enc <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;解密: &quot;</span> <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="签名-简单哈希-校验-非真实数字签名-仅演示原理" tabindex="-1"><a class="header-anchor" href="#签名-简单哈希-校验-非真实数字签名-仅演示原理"><span>签名（简单哈希+校验，非真实数字签名，仅演示原理）</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token comment">// 简单哈希函数</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">simple_hash</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> msg<span class="token punctuation">)</span> hash <span class="token operator">=</span> hash <span class="token operator">*</span> <span class="token number">101</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// &quot;签名&quot;：用私钥（这里用一个数字）和哈希值相乘</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prikey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">simple_hash</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">*</span> prikey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// &quot;验证&quot;：用公钥（私钥的倒数）还原哈希值</span>
<span class="token keyword">bool</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> signature<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> pubkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">simple_hash</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">==</span> signature <span class="token operator">*</span> pubkey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string msg <span class="token operator">=</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prikey <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token comment">// 私钥</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> pubkey <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">17.0</span><span class="token punctuation">;</span> <span class="token comment">// 公钥（私钥的倒数，演示用）</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> signature <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> prikey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;消息: &quot;</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;签名: &quot;</span> <span class="token operator">&lt;&lt;</span> signature <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;验证: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">verify</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;成功&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;失败&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图"><span>流程图</span></a></h2><h3 id="加密流程" tabindex="-1"><a class="header-anchor" href="#加密流程"><span>加密流程</span></a></h3>`,19),r=n("h3",{id:"签名流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#签名流程"},[n("span",null,"签名流程")])],-1);function u(d,k){const s=e("Mermaid");return p(),o("div",null,[i,a(s,{id:"mermaid-163",code:"eJxLy8kvT85ILCpRCHHhUgACx+hnM/qeTWuPVdDVtVNwin7ateDp+rbn66Y/2zxVG8h6OWlpLFihE1iBczRQDKQcLOYMFnOJfrF8MXZNLmAFrjA7uABYLTXz"}),r,a(s,{id:"mermaid-167",code:"eJxLy8kvT85ILCpRCHHhUgACx+hn2zqeNa6PVdDVtVNwin46uePpjp5YsJwTWMw5+vnyxpeTlj5fu+/phF6IjDNYxiUaWcwFLOYa/bR1DVD1y1U9L9Y3QmRcwTJu0RCx57snP5s3J5YLAMALOJ0="})])}const m=t(l,[["render",u],["__file","加密_签名.html.vue"]]),v=JSON.parse('{"path":"/tech/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%8A%A0%E5%AF%86_%E7%AD%BE%E5%90%8D.html","title":"加密与签名原理详解","lang":"zh-CN","frontmatter":{"title":"加密与签名原理详解","categoriy":"密码学","abbrlink":"cryptography-signature","date":"2025-06-29T00:00:00.000Z","description":"密码学 加密 加密是将明文信息通过算法和密钥转换为密文的过程，只有拥有正确密钥的人才能解密恢复原文。 对称加密 加密和解密使用同一个密钥。 常见算法：AES、DES。 优点：速度快，适合大数据量。 缺点：密钥分发困难。 非对称加密 使用一对密钥：公钥加密，私钥解密。 常见算法：RSA、ECC。 优点：密钥分发简单，适合安全通信。 缺点：速度慢，常用于加...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%8A%A0%E5%AF%86_%E7%AD%BE%E5%90%8D.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"加密与签名原理详解"}],["meta",{"property":"og:description","content":"密码学 加密 加密是将明文信息通过算法和密钥转换为密文的过程，只有拥有正确密钥的人才能解密恢复原文。 对称加密 加密和解密使用同一个密钥。 常见算法：AES、DES。 优点：速度快，适合大数据量。 缺点：密钥分发困难。 非对称加密 使用一对密钥：公钥加密，私钥解密。 常见算法：RSA、ECC。 优点：密钥分发简单，适合安全通信。 缺点：速度慢，常用于加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:published_time","content":"2025-06-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加密与签名原理详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"加密","slug":"加密","link":"#加密","children":[{"level":3,"title":"对称加密","slug":"对称加密","link":"#对称加密","children":[]},{"level":3,"title":"非对称加密","slug":"非对称加密","link":"#非对称加密","children":[]}]},{"level":2,"title":"签名","slug":"签名","link":"#签名","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":2,"title":"C++ 示例","slug":"c-示例","link":"#c-示例","children":[{"level":3,"title":"对称加密（凯撒加密 Caesar Cipher）","slug":"对称加密-凯撒加密-caesar-cipher","link":"#对称加密-凯撒加密-caesar-cipher","children":[]},{"level":3,"title":"签名（简单哈希+校验，非真实数字签名，仅演示原理）","slug":"签名-简单哈希-校验-非真实数字签名-仅演示原理","link":"#签名-简单哈希-校验-非真实数字签名-仅演示原理","children":[]}]},{"level":2,"title":"流程图","slug":"流程图","link":"#流程图","children":[{"level":3,"title":"加密流程","slug":"加密流程","link":"#加密流程","children":[]},{"level":3,"title":"签名流程","slug":"签名流程","link":"#签名流程","children":[]}]}],"readingTime":{"minutes":2.19,"words":656},"filePathRelative":"tech/密码学/加密&签名.md","localizedDate":"2025年6月29日","excerpt":"\\n<h2>加密</h2>\\n<p>加密是将明文信息通过算法和密钥转换为密文的过程，只有拥有正确密钥的人才能解密恢复原文。</p>\\n<h3>对称加密</h3>\\n<ul>\\n<li>加密和解密使用同一个密钥。</li>\\n<li>常见算法：AES、DES。</li>\\n<li>优点：速度快，适合大数据量。</li>\\n<li>缺点：密钥分发困难。</li>\\n</ul>\\n<h3>非对称加密</h3>\\n<ul>\\n<li>使用一对密钥：公钥加密，私钥解密。</li>\\n<li>常见算法：RSA、ECC。</li>\\n<li>优点：密钥分发简单，适合安全通信。</li>\\n<li>缺点：速度慢，常用于加密小数据或密钥。</li>\\n</ul>","autoDesc":true}');export{m as comp,v as data};
