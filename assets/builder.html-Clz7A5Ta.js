import{_ as n,o as s,c as a,f as t}from"./app-BnPi_DCN.js";const p={},e=t(`<h2 id="为什么要使用-builder-模式" tabindex="-1"><a class="header-anchor" href="#为什么要使用-builder-模式"><span>为什么要使用 Builder 模式</span></a></h2><p>Builder 模式通过将对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。它主要用于以下情况：</p><ol><li><strong>复杂对象的创建</strong>：当一个对象的构建过程非常复杂时，Builder 模式可以将构建过程分解为多个步骤，使代码更易于维护和理解。</li><li><strong>不同的表示</strong>：当需要创建不同表示的对象时，Builder 模式允许使用相同的构建过程来生成不同的对象表示。</li><li><strong>代码复用</strong>：通过将构建过程封装在 Director 类中，可以在不同的上下文中重用相同的构建逻辑。</li></ol><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/pPA_2i8m4CRtFaN65CaB594Y3WgwQ3TngEcr1DCMaei8whkR_ab85MTTRlZko-Nt9PTgp1MQMaPSvbgJfH6o04Nk4I6pEhz09b02nQucHACIJHKdvDgAmZaElKXjxujXWr1hAhhg7CTJuE6orK2Ty8n6b9LGmB4TMDXv04iSONVGEUXxC-x7jeszp73y7BtETjimAIk5X2QlVSJXnh845IY_UGyhL81xq4RsIKOSdoM36qwo_3stevq_60k_Oje8SaL-5HXR-0L8eIdiuhu0" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// builder.ts</span>
<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">makeString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">makeItems</span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// director.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Builder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./builder&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> builder<span class="token operator">:</span> Builder<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> Builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeTitle</span><span class="token punctuation">(</span><span class="token string">&#39;问候&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeString</span><span class="token punctuation">(</span><span class="token string">&#39;从早上到下午&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;早上好。&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;下午好。&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeString</span><span class="token punctuation">(</span><span class="token string">&#39;晚上&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;晚上好。&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;晚安。&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;再见。&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// htmlBuilder.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Builder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./builder&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HTMLBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> filename<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> buffer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;html&gt;&lt;head&gt;&lt;title&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">makeString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">makeItems</span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;&lt;ul&gt;&#39;</span><span class="token punctuation">;</span>
    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;&lt;/ul&gt;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// textBuilder.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Builder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./builder&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TextBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> buffer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;==============================\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">『</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">』\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">makeString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">■</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">makeItems</span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> ・</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">+=</span> <span class="token string">&#39;==============================\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Builder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./builder&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Director <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./director&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HTMLBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./htmlBuilder&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TextBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./textBuilder&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// TextBuilder</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Creating a text file...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> textBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>textBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> textBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// HTMLBuilder</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Creating an HTML file...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> htmlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> director2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>htmlBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
director2<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> htmlBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">が作成されました。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src<span class="token entity" title="\\b">\\b</span>uilder\\main.ts&quot;</span>
Creating a text file<span class="token punctuation">..</span>.
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
『问候』

■从早上到下午

 ・早上好。
 ・下午好。

■晚上

 ・晚上好。
 ・晚安。
 ・再见。

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

Creating an HTML file<span class="token punctuation">..</span>.
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>问候<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>问候<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>从早上到下午<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>早上好。<span class="token operator">&lt;</span>/li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>下午好。<span class="token operator">&lt;</span>/li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>晚上<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>晚上好。<span class="token operator">&lt;</span>/li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>晚安。<span class="token operator">&lt;</span>/li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>再见。<span class="token operator">&lt;</span>/li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>が作成されました。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关设计模式" tabindex="-1"><a class="header-anchor" href="#相关设计模式"><span>相关设计模式</span></a></h2><ul><li>Template Method 模式</li><li>Composite 模式</li><li>Abstract Factory 模式</li><li>Facade 模式</li></ul><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="谁知道什么" tabindex="-1"><a class="header-anchor" href="#谁知道什么"><span>谁知道什么</span></a></h3><p>在面向对象编程中，“谁知道什么”是非常重要的。Builder 模式通过将对象的构建过程与其表示分离，明确了各个类的职责分工。Director 类知道如何构建复杂对象，但不知道对象的具体表示；Builder 类知道如何生成对象的具体表示，但不知道构建的具体步骤。这种职责分离使得代码更加清晰、易于维护和扩展。</p><p>正是因为不知道才能够替换，正是因为可以替换，组件才具有高价。作为设计人员，我们必须时刻关汴这种“可替換性”</p><h3 id="设计时能够决定的事情和不能决定的事情" tabindex="-1"><a class="header-anchor" href="#设计时能够决定的事情和不能决定的事情"><span>设计时能够决定的事情和不能决定的事情</span></a></h3><p>在设计软件时，有些事情是可以在设计阶段决定的，而有些事情则需要在运行时决定。Builder 模式通过将构建过程与表示分离，使得在设计时可以决定构建的步骤和逻辑，而具体的表示则可以在运行时灵活选择。这种设计方式提高了系统的灵活性和可扩展性。</p><h3 id="代码的阅读方法和修改方法" tabindex="-1"><a class="header-anchor" href="#代码的阅读方法和修改方法"><span>代码的阅读方法和修改方法</span></a></h3><p>在编程时，虽然有时需要从零开始编写代码，但更多时候我们都是在现有代码的基础上进行增加和修改。</p><p>这时，我们需要先阅读现有代码。不过，只是阅读抽象类的代码是无法获取很多信息的（虽然可以从方法名中获得线索）。</p><p>让我们再回顾一下示例程序。即使理解了 Builder 抽象类，也无法理解程序整体。至少必须在阅读了 Director 的代码后才能理解 Builder 类的使用方法（Builder 类的方法的调用方法）。然后再去看看 TextBuilder 类和 HTMLBuilder 类的代码，就可以明白调用 Builder 类的方法后具体会进行什么样的处理。</p><p>如果没有理解各个类的角色就动手增加和修改代码，在判断到底应该修改哪个类时，就会很容易出错。例如，如果修改 Builder 类，那么就会对类中调用 Builder 类方法的地方和 Builder 类的子类产生影响。或是如果不小心修改了 Director 类，在其内部调用了类的特有的方法，则会导致其失去作为可复用组件的独立性，而且当将子类替换为 HTMLBuilder 时，程序可能会无法正常工作。</p>`,21),o=[e];function l(c,i){return s(),a("div",null,o)}const u=n(p,[["render",l],["__file","builder.html.vue"]]),k=JSON.parse('{"path":"/tech/DesignPatterns/builder.html","title":"builder 模式","lang":"zh-CN","frontmatter":{"title":"builder 模式","category":["设计模式"],"tag":["设计模式","typescript","生成实例"],"prev":"./prototype","next":false,"description":"为什么要使用 Builder 模式 Builder 模式通过将对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。它主要用于以下情况： 复杂对象的创建：当一个对象的构建过程非常复杂时，Builder 模式可以将构建过程分解为多个步骤，使代码更易于维护和理解。 不同的表示：当需要创建不同表示的对象时，Builder 模式允许使用相同的构建过...","head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/builder.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"builder 模式"}],["meta",{"property":"og:description","content":"为什么要使用 Builder 模式 Builder 模式通过将对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。它主要用于以下情况： 复杂对象的创建：当一个对象的构建过程非常复杂时，Builder 模式可以将构建过程分解为多个步骤，使代码更易于维护和理解。 不同的表示：当需要创建不同表示的对象时，Builder 模式允许使用相同的构建过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T16:51:30.000Z"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"生成实例"}],["meta",{"property":"article:modified_time","content":"2024-10-21T16:51:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"builder 模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T16:51:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么要使用 Builder 模式","slug":"为什么要使用-builder-模式","link":"#为什么要使用-builder-模式","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"相关设计模式","slug":"相关设计模式","link":"#相关设计模式","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"谁知道什么","slug":"谁知道什么","link":"#谁知道什么","children":[]},{"level":3,"title":"设计时能够决定的事情和不能决定的事情","slug":"设计时能够决定的事情和不能决定的事情","link":"#设计时能够决定的事情和不能决定的事情","children":[]},{"level":3,"title":"代码的阅读方法和修改方法","slug":"代码的阅读方法和修改方法","link":"#代码的阅读方法和修改方法","children":[]}]}],"git":{"createdTime":1729529490000,"updatedTime":1729529490000,"contributors":[{"name":"King","email":"2175616761@qq.com","commits":1}]},"readingTime":{"minutes":4.43,"words":1329},"filePathRelative":"tech/DesignPatterns/builder.md","localizedDate":"2024年10月21日","excerpt":"<h2>为什么要使用 Builder 模式</h2>\\n<p>Builder 模式通过将对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。它主要用于以下情况：</p>\\n<ol>\\n<li><strong>复杂对象的创建</strong>：当一个对象的构建过程非常复杂时，Builder 模式可以将构建过程分解为多个步骤，使代码更易于维护和理解。</li>\\n<li><strong>不同的表示</strong>：当需要创建不同表示的对象时，Builder 模式允许使用相同的构建过程来生成不同的对象表示。</li>\\n<li><strong>代码复用</strong>：通过将构建过程封装在 Director 类中，可以在不同的上下文中重用相同的构建逻辑。</li>\\n</ol>","autoDesc":true}');export{u as comp,k as data};
