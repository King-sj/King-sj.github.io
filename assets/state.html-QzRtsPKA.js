import{_ as n,o as s,c as a,f as t}from"./app-CgO5_scR.js";const p={},e=t(`<h2 id="为什么使用-state-模式" tabindex="-1"><a class="header-anchor" href="#为什么使用-state-模式"><span>为什么使用 State 模式</span></a></h2><p>State 模式允许对象在其内部状态改变时改变其行为。它将与状态相关的行为封装在独立的类中，使得状态转换变得清晰且易于管理。使用 State 模式可以避免大量的条件语句，使代码更加简洁和可维护。</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/vPJ1JeGm48RlF4MFaCeBS5g3CJ4nneJi0zGoMnhRZca7inlZkzi2AnXnqRCN0fq_q--VydSNI7ZghScq8_078O7L65-FnDuonW9GRL0-vntslcAkjq_WYugzecvZMNR2AMX84EGXFIisV2mKmfW6PEyrdMf8U-Gsg8e5yjgfMUT1ec_lKQsLtxC5th310DVYo2P7uEfCViNMQLlS1_YcNjQlZV3sekAnG_TpZmWgZGY1tOZJoAdjYm4RZOSHF75p1NJduhoSXBoOHXRNozWs6kybeS-B9FohGxvbaMzxv5iceuIm6GueqOz7DLj_qAgZ_sg-4GUuzS9-yJwrIExBPKfIius0yUs4yTz6Z5_CsEVyLkQrCf_vZpzV5rYMawqTk3PUAHy0" alt=""><img src="https://www.plantuml.com/plantuml/svg/XP513e8m44NtFKMNcEW5M1YCngKn8HvWKaRQ21tI3edUNce50X7S_l_cpIIJUGR7RLq9K4nEtZmwqNIHKQO1opA7EvuTr3X9J_3A6NWQNaofESOYUEHkFuwdqYCVArAFH5FhDc9e0jRxKbbGX1HPnYTlPQHxOEPK6co9doOPry_aOx6e_t5kGLsOhAe2y1KjA0uLk7fT4f5rpLMJ_NDBH0PDXhRelle6" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// context.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> State <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
  <span class="token function">setClock</span><span class="token punctuation">(</span>hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">callSecurityCenter</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">recordLog</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dayState.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> State <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NightState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./nightState&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DayState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> singleton<span class="token operator">:</span> DayState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DayState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> State <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doClock</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token number">17</span> <span class="token operator">&lt;=</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span>NightState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doUse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token string">&#39;金库使用(白天)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">&#39;紧急铃(白天)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doPhone</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">&#39;正常通话(白天)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;[白天]&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SafeFrame <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./safeFrame&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> safeFrame<span class="token operator">:</span> SafeFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SafeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> hour<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> hour <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> hour<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  safeFrame<span class="token punctuation">.</span><span class="token function">setClock</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>
  safeFrame<span class="token punctuation">.</span><span class="token function">doUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  safeFrame<span class="token punctuation">.</span><span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  safeFrame<span class="token punctuation">.</span><span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// nightState.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> State <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DayState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dayState&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NightState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> singleton<span class="token operator">:</span> NightState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NightState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> State <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doClock</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;=</span> hour <span class="token operator">&amp;&amp;</span> hour <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span>DayState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doUse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">&#39;紧急：夜间使用金库！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">&#39;紧急铃(夜间)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doPhone</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token string">&#39;夜间通话录音&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;[夜间]&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// safeFrame.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> State <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DayState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dayState&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SafeFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> state<span class="token operator">:</span> State <span class="token operator">=</span> DayState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">setClock</span><span class="token punctuation">(</span>hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> clockString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;現在時刻は&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      clockString <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hour<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:00</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      clockString <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hour<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:00</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clockString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doClock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">から</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">へ状態が変化しました。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">callSecurityCenter</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">call! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">recordLog</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">record ... </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doUse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// state.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
  <span class="token function">doClock</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">doUse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">doAlarm</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">doPhone</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src\\state\\main.ts&quot;</span>
現在時刻は00:00
<span class="token punctuation">[</span>白天<span class="token punctuation">]</span>から<span class="token punctuation">[</span>夜间<span class="token punctuation">]</span>へ状態が変化しました。
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は01:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は02:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は03:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は04:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は05:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は06:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は07:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は08:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は09:00
<span class="token punctuation">[</span>夜间<span class="token punctuation">]</span>から<span class="token punctuation">[</span>白天<span class="token punctuation">]</span>へ状態が変化しました。
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は10:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は11:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は12:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は13:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は14:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は15:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は16:00
record <span class="token punctuation">..</span>. 金库使用<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
call<span class="token operator">!</span> 正常通话<span class="token punctuation">(</span>白天<span class="token punctuation">)</span>
現在時刻は17:00
<span class="token punctuation">[</span>白天<span class="token punctuation">]</span>から<span class="token punctuation">[</span>夜间<span class="token punctuation">]</span>へ状態が変化しました。
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は18:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は19:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は20:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は21:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は22:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
現在時刻は23:00
call<span class="token operator">!</span> 紧急：夜间使用金库！
call<span class="token operator">!</span> 紧急铃<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>
record <span class="token punctuation">..</span>. 夜间通话录音
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="分而治之" tabindex="-1"><a class="header-anchor" href="#分而治之"><span>分而治之</span></a></h3><p>在编程时，我们经常会使用分而治之的方针。它非常适用于大规模的复杂处理。当遇到庞大且复杂的问题、不能用一般的方法解决时，我们会先将该问题分解为多个小问题。如果还是不能解决这些小问题，我们会将它们继续划分为更小的问题，直至可以解决它们为止。</p><p>分而治之，简单而言就是将一个复杂的大问题分解为多个小问题然后逐个解决。在 State 模式中，我们用类来表示状态，并为每一种具体的状态都定义一个相应的类。这样，问题就被分解了。开发人员可以在编写一个 ConcreteState 角色的代码的同时，在头脑中（一定程度上）考虑其他的类。</p><p>在本章的警报系统的示例程序中，只有“白天”和“晚上”两个状态，可能大家对此感受不深，但是当状态非常多的时候，State 模式的优势就会非常明显了。在不使用 State 模式时，我们需要使用条件分支语句判断当前的状态，然后进行相应的处理。状态越多，条件分支就会越多，而且我们必须在所有的事件处理方法中都编写这些条件分支语句。State 模式用类表示系统的“状态”，并以此将复杂的程序分解开来。</p><h3 id="依赖于状态的处理" tabindex="-1"><a class="header-anchor" href="#依赖于状态的处理"><span>依赖于状态的处理</span></a></h3><p>我们来思考一下 SafeFrame 类的 setClock 方法和 State 接口的 doClock 方法之间的关系。Main 类会调用 SafeFrame 类的 setClock 方法，告诉 setClock 方法“请设置时间”。在 setClock 方法中，会像下面这样将处理委托给 State 类：<code>state.doClock(this, hour);</code>。也就是说，我们将设置时间的处理看作是“依赖于状态的处理”。当然，不只是 doClock 方法。在 State 接口中声明的所有方法都是“依赖于状态的处理”，都是“状态不同处理也不同”。这虽然看似理所当然，不过却需要我们特别注意。在 State 模式中，我们应该如何编程，以实现“依赖于状态的处理”呢？总结起来有如下两点：</p><ul><li>定义接口，声明抽象方法</li><li>定义多个类，实现具体方法</li></ul><p>这就是 State 模式中的“依赖于状态的处理”的实现方法。这里故意将上面两点说得很笼统，但是，如果大家在读完这两点之后会点头表示赞同，那就意味着大家完全理解了 State 模式以及接口与类之间的关系。</p><h3 id="应当是谁来管理状态的迁移" tabindex="-1"><a class="header-anchor" href="#应当是谁来管理状态的迁移"><span>应当是谁来管理状态的迁移</span></a></h3><p>用类来表示状态，将依赖于状态的处理分散在每个 ConcreteState 角色中，这是一种非常好的解决办法。不过，在使用模式时需要注意应当是谁来管理状态迁移。在示例程序中，扮演 Context 角色的 SafeFrame 类实现了实际进行状态迁移的 changeState 方法。但是，实际调用该方法的却是扮演 ConcreteState 角色的 DayState 类和 NightState 类。</p><p>也就是说，在示例程序中，我们将“状态迁移”看作是“依赖于状态的处理”。这种处理方式既有优点也有缺点。优点是这种处理方式将“什么时候从一个状态迁移到其他状态”的信息集中在了一个类中。也就是说，当我们想知道“什么时候会从 DayState 类变化为其他状态”时，只需要阅读 DayState 类的代码就可以了。缺点是“每个 ConcreteState 角色都需要知道其他 ConcreteState 角色”。</p><p>例如，DayState 类的 doClock 方法就使用了 NightState 类。这样，如果以后发生需求变更，需要删除 NightState 类时，就必须要相应地修改 DayState 类的代码。将状态迁移交给 ConcreteState 角色后，每个 ConcreteState 角色都需要或多或少地知道其他角色。也就是说，将状态迁移交给 ConcreteState 角色后，各个类之间的依赖关系就会加强。我们也可以不使用示例程序中的做法，而是将所有的状态迁移交给扮演 Context 角色的 SafeFrame 类来负责。</p><p>有时，使用这种解决方法可以提高 ConcreteState 角色的独立性，程序的整体结构也会更加清晰。不过这样做的话，Context 角色就必须要知道“所有的 ConcreteState 角色”。在这种情况下，我们可以使用 Mediator 模式（第 16 章）。当然，还可以不用 State 模式，而是用状态迁移表来设计程序。所谓状态迁移表是可以根据“输入和内部状态”得到“输出和下一个状态”的一览表（这超出了本书的范围，我们暂且不深入学习该方法）。当状态迁移遵循一定的规则时，使用状态迁移表非常有效。此外，当状态数过多时，可以用程序来生成代码而不是手写代码。</p><h3 id="不会自相矛盾" tabindex="-1"><a class="header-anchor" href="#不会自相矛盾"><span>不会自相矛盾</span></a></h3><p>如果不使用 State 模式，我们需要使用多个变量的值的集合来表示系统的状态。这时，必须十分小心，注意不要让变量的值之间互相矛盾。而在 State 模式中，是用类来表示状态的。这样，我们就只需要一个表示系统状态的变量即可。在示例程序中，SafeFrame 类的 state 字段就是这个变量，它决定了系统的状态。因此，不会存在自相矛盾的状态。</p><h3 id="易于增加新的状态" tabindex="-1"><a class="header-anchor" href="#易于增加新的状态"><span>易于增加新的状态</span></a></h3><p>在 State 模式中增加新的状态是非常简单的。以示例程序来说，编写一个 XXXState 类，让它实现 State 接口，然后实现一些所需的方法就可以了。当然，在修改状态迁移部分的代码时，还是需要仔细一点的。因为状态迁移的部分正是与其他 ConcreteState 角色相关联的部分。</p><p>但是，在 State 模式中增加其他“依赖于状态的处理”是很困难的。这是因为我们需要在 State 接口中增加新的方法，并在所有的 ConcreteState 角色中都实现这个方法。虽说很困难，但是好在我们绝对不会忘记实现这个方法。假设我们现在在 State 接口中增加了一个 doYYY 方法，而忘记了在 DayState 类和 NightState 类中实现这个方法，那么编译器在编译代码时就会报错，告诉我们存在还没有实现的方法。</p><p>如果不使用 State 模式，那么增加新的状态时会怎样呢？这里，如果不使用 State 模式，就必须用条件分支语句判断状态。这样就很难在编译代码时检测出“忘记实现方法”这种错误了（在运行时检测出问题并不难。我们只要事先在每个方法内部都加上一段“当检测到没有考虑到的状态时就报错”的代码即可）。</p><h3 id="实例的多面性" tabindex="-1"><a class="header-anchor" href="#实例的多面性"><span>实例的多面性</span></a></h3><p>请注意 SafeFrame 类中的以下两条语句（代码清单 19.7）：</p><ul><li>SafeFrame 类的构造函数中的 <code>buttonUse.addActionListener(this);</code></li><li>actionPerformed 方法中的 <code>state.doUse(this);</code></li></ul><p>这两条语句中都有 <code>this</code>。那么这个 <code>this</code> 到底是什么呢？当然，它们都是 SafeFrame 类的实例。由于在示例程序中只生成了一个 SafeFrame 的实例，因此这两个 <code>this</code> 其实是同一个对象。不过，在 addActionListener 方法中和 doUse 方法中，对 <code>this</code> 的使用方式是不一样的。</p><p>向 addActionListener 方法传递 <code>this</code> 时，该实例会被当作“实现了 ActionListener 接口的类的实例”来使用。这是因为 addActionListener 方法的参数类型是 ActionListener 类型。</p><p>在 addActionListener 方法中会用到的方法也都是在 ActionListener 接口中定义了的方法。至于这个参数是否是 SafeFrame 类的实例并不重要。向 doUse 方法传递 <code>this</code> 时，该实例会被当作“实现了 Context 接口的类的实例”来使用。这是因为 doUse 方法的参数类型是 Context 类型。在 doUse 方法中会用到的方法也都是在 Context 接口中定义了的方法（大家只要再回顾一下 DayState 类和 NightState 类的 doUse 方法就会明白了）。请大家一定要透彻理解此处的实例的多面性。</p><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Singleton 模式</li><li>Flyweight 模式</li></ul>`,36),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","state.html.vue"]]),k=JSON.parse('{"path":"/tech/DesignPatterns/state.html","title":"State 模式","lang":"zh-CN","frontmatter":{"title":"State 模式","date":"2024-10-28T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","管理状态"],"prev":"./memento","next":"./flyweight","description":"为什么使用 State 模式 State 模式允许对象在其内部状态改变时改变其行为。它将与状态相关的行为封装在独立的类中，使得状态转换变得清晰且易于管理。使用 State 模式可以避免大量的条件语句，使代码更加简洁和可维护。 示例代码 运行结果 拓展思路的要点 分而治之 在编程时，我们经常会使用分而治之的方针。它非常适用于大规模的复杂处理。当遇到庞大且...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/state.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"State 模式"}],["meta",{"property":"og:description","content":"为什么使用 State 模式 State 模式允许对象在其内部状态改变时改变其行为。它将与状态相关的行为封装在独立的类中，使得状态转换变得清晰且易于管理。使用 State 模式可以避免大量的条件语句，使代码更加简洁和可维护。 示例代码 运行结果 拓展思路的要点 分而治之 在编程时，我们经常会使用分而治之的方针。它非常适用于大规模的复杂处理。当遇到庞大且..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"管理状态"}],["meta",{"property":"article:published_time","content":"2024-10-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"State 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用 State 模式","slug":"为什么使用-state-模式","link":"#为什么使用-state-模式","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"分而治之","slug":"分而治之","link":"#分而治之","children":[]},{"level":3,"title":"依赖于状态的处理","slug":"依赖于状态的处理","link":"#依赖于状态的处理","children":[]},{"level":3,"title":"应当是谁来管理状态的迁移","slug":"应当是谁来管理状态的迁移","link":"#应当是谁来管理状态的迁移","children":[]},{"level":3,"title":"不会自相矛盾","slug":"不会自相矛盾","link":"#不会自相矛盾","children":[]},{"level":3,"title":"易于增加新的状态","slug":"易于增加新的状态","link":"#易于增加新的状态","children":[]},{"level":3,"title":"实例的多面性","slug":"实例的多面性","link":"#实例的多面性","children":[]}]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":11.72,"words":3515},"filePathRelative":"tech/DesignPatterns/state.md","localizedDate":"2024年10月28日","excerpt":"<h2>为什么使用 State 模式</h2>\\n<p>State 模式允许对象在其内部状态改变时改变其行为。它将与状态相关的行为封装在独立的类中，使得状态转换变得清晰且易于管理。使用 State 模式可以避免大量的条件语句，使代码更加简洁和可维护。</p>\\n<h2>示例代码</h2>\\n<img src=\\"https://www.plantuml.com/plantuml/svg/vPJ1JeGm48RlF4MFaCeBS5g3CJ4nneJi0zGoMnhRZca7inlZkzi2AnXnqRCN0fq_q--VydSNI7ZghScq8_078O7L65-FnDuonW9GRL0-vntslcAkjq_WYugzecvZMNR2AMX84EGXFIisV2mKmfW6PEyrdMf8U-Gsg8e5yjgfMUT1ec_lKQsLtxC5th310DVYo2P7uEfCViNMQLlS1_YcNjQlZV3sekAnG_TpZmWgZGY1tOZJoAdjYm4RZOSHF75p1NJduhoSXBoOHXRNozWs6kybeS-B9FohGxvbaMzxv5iceuIm6GueqOz7DLj_qAgZ_sg-4GUuzS9-yJwrIExBPKfIius0yUs4yTz6Z5_CsEVyLkQrCf_vZpzV5rYMawqTk3PUAHy0\\" alt=\\"\\">","autoDesc":true}');export{r as comp,k as data};
