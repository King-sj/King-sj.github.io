import{_ as s,o as a,c as t,a as p,b as n,f as e}from"./app-ByePDVBg.js";const o={},c=n("h2",{id:"为什么使用代理模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么使用代理模式"},[n("span",null,"为什么使用代理模式")])],-1),i=n("p",null,'在面向对象编程中，“本人”和“代理人”都是对象。如果“本人”对象太忙了．有些工作无法自己亲自完成，就将其交给“代理人"对象负责。',-1),l=e(`<p>Proxy 模式用于为某对象提供一个代理，以控制对该对象的访问。主要有以下几个优点：</p><ul><li>延迟实例化：代理对象可以在需要时才创建实际对象，节省资源。</li><li>控制访问：可以在代理中加入额外的逻辑来控制对实际对象的访问。</li><li>远程代理：可以用于访问远程对象。</li></ul><h2 id="实例代码" tabindex="-1"><a class="header-anchor" href="#实例代码"><span>实例代码</span></a></h2><p>为了让 PrinterProxy 类与 Printer 类具有一致性，我们定义了 Printable 接口。示例程序的前提是&quot;生成 Printer 类的实例&quot;这一处理需要花费很多时间。为了在程序中体现这一点，我们在 Printer 类的构造了数中调用了 heavyJob 方法，让它干一些“重活”（虽说是重活，也不过是让程序睡眠 5 秒钟）。</p><img src="https://www.plantuml.com/plantuml/svg/nP9D2eCm48NtESKibP8BP55STr6yGjIf3UH7Cb5gI-_U6BIecz95wIQ4cVTctaTIK90-z4OpPGFwYwmHIX_lij883mPm0CAGIkZFqc1cuo60GYorkO31gIR9sgqiNpIfsKsTB1RspYTZjPP4C7j1cKwZGHje5uJ3UdEQEdksaNwVUSfoHJcC9rTbXjfFJALtj_4BC0uUfHQBVOsQHls3TqgaxicoC6xe7EV7zniAw0bPWRQ9F-i5" alt=""><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfCBialKd3EoKpDA-62K0gwTWe1HPbv9Qb50KNv5PLM2iMf9L01lyJSL0qbf_ma9KsGrioon99K5CLSo1nCaufI4tCogr8rC7NZqcYba9TQ3kF0h4v99Lvx0OYXeVHaxuAdI_U-tzFpPCUqvrDx7ZSq0Ss1Aa9Hdv6QM5RfbP-aeVHixUAdSrOydpB_MSS4gFJpMIrFryrxigzR0-WGJQmcG7twT5tFarrjG6kGbK02s4h1rjPM0MW0Y8x9mtGPDlzX2a72so4rBmKOaG00" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Printable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./printable&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrinterProxy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./printerProxy&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p<span class="token operator">:</span> Printable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrinterProxy</span><span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;名字现在是&#39;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getPrinterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">setPrinterName</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;名字现在是&#39;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getPrinterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;你好，世界。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// printable.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Printable</span> <span class="token punctuation">{</span>
  <span class="token function">setPrinterName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">getPrinterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// printer.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Printable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./printable&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> <span class="token class-name">Printable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heavyJob</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">正在生成Printer的实例(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setPrinterName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getPrinterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">=== </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ===</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">heavyJob</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;完了。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// printerProxy.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Printable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./printable&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Printer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./printer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrinterProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Printable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> real<span class="token operator">:</span> Printer<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setPrinterName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>real<span class="token punctuation">.</span><span class="token function">setPrinterName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getPrinterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>real<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src\\proxy\\main.ts&quot;</span>
名字现在是Alice。
名字现在是Bob。
正在生成Printer的实例<span class="token punctuation">(</span>Bob<span class="token punctuation">)</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
完了。
<span class="token operator">==</span><span class="token operator">=</span> Bob <span class="token operator">==</span><span class="token operator">=</span>
你好，世界。
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="使用代理人来提升处理速度" tabindex="-1"><a class="header-anchor" href="#使用代理人来提升处理速度"><span>使用代理人来提升处理速度</span></a></h3><p>在某些情况下，使用代理可以显著提升处理速度。例如，虚拟代理（Virtual Proxy）可以在实际对象创建之前进行一些轻量级的操作，从而减少系统的开销。通过代理对象来延迟实际对象的创建，可以提高系统的响应速度和资源利用率。</p><h3 id="有必要划分代理人和本人吗" tabindex="-1"><a class="header-anchor" href="#有必要划分代理人和本人吗"><span>有必要划分代理人和本人吗</span></a></h3><p>在设计模式中，代理人和本人的划分是为了实现职责分离和提高系统的灵活性。代理模式通过引入代理对象来控制对实际对象的访问，可以在不修改实际对象的情况下添加额外的功能。例如，远程代理（Remote Proxy）可以在客户端和远程服务器之间进行通信，而不需要客户端了解远程服务器的具体实现。</p><h3 id="代理与委托" tabindex="-1"><a class="header-anchor" href="#代理与委托"><span>代理与委托</span></a></h3><p>代理模式和委托模式虽然在某些方面有相似之处，但它们的目的和实现方式有所不同。代理模式主要用于控制对对象的访问，而委托模式则用于将任务分配给其他对象来执行。代理模式通过代理对象来控制对实际对象的访问，而委托模式通过委托对象来执行具体的任务。</p><h3 id="透明性" tabindex="-1"><a class="header-anchor" href="#透明性"><span>透明性</span></a></h3><p>代理模式的一个重要特点是透明性。代理对象和实际对象实现相同的接口，客户端可以像使用实际对象一样使用代理对象，而不需要关心代理对象的内部实现。这种透明性使得代理模式在不改变客户端代码的情况下添加额外的功能成为可能。</p><h3 id="http-代理" tabindex="-1"><a class="header-anchor" href="#http-代理"><span>HTTP 代理</span></a></h3><p>HTTP 代理是一种常见的代理模式应用。HTTP 代理服务器位于客户端和目标服务器之间，负责转发客户端的请求和目标服务器的响应。HTTP 代理可以用于缓存、负载均衡、安全控制等功能，从而提高网络通信的效率和安全性。</p><h3 id="各种-proxy-模式" tabindex="-1"><a class="header-anchor" href="#各种-proxy-模式"><span>各种 Proxy 模式</span></a></h3><ul><li><strong>Virtual Proxy</strong>：虚拟代理用于控制对资源密集型对象的访问。它在实际对象创建之前进行一些轻量级的操作，从而延迟实际对象的创建。例如，图像加载时可以使用虚拟代理来显示占位符图像，直到实际图像加载完成。</li><li><strong>Remote Proxy</strong>：远程代理用于控制对远程对象的访问。它在客户端和远程服务器之间进行通信，使得客户端可以像使用本地对象一样使用远程对象。例如，RMI（远程方法调用）就是一种远程代理的实现。</li><li><strong>Access Proxy</strong>：访问代理用于控制对实际对象的访问权限。它可以在访问实际对象之前进行权限检查，从而确保只有授权的客户端才能访问实际对象。例如，防火墙代理可以用于控制对内部网络资源的访问。</li></ul><p>通过这些不同类型的代理模式，我们可以在不同的应用场景中灵活地控制对对象的访问，提高系统的安全性、性能和可维护性。</p><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Adapter 模式</li><li>Decorator 模式</li></ul>`,25);function u(r,k){return a(),t("div",null,[c,i,p(" more "),l])}const m=s(o,[["render",u],["__file","proxy.html.vue"]]),v=JSON.parse('{"path":"/tech/DesignPatterns/proxy.html","title":"Proxy 模式","lang":"zh-CN","frontmatter":{"title":"Proxy 模式","date":"2024-10-29T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","避免浪费"],"prev":"./flyweight","next":"./command","description":"为什么使用代理模式 在面向对象编程中，“本人”和“代理人”都是对象。如果“本人”对象太忙了．有些工作无法自己亲自完成，就将其交给“代理人\\"对象负责。","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/proxy.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Proxy 模式"}],["meta",{"property":"og:description","content":"为什么使用代理模式 在面向对象编程中，“本人”和“代理人”都是对象。如果“本人”对象太忙了．有些工作无法自己亲自完成，就将其交给“代理人\\"对象负责。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"避免浪费"}],["meta",{"property":"article:published_time","content":"2024-10-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Proxy 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用代理模式","slug":"为什么使用代理模式","link":"#为什么使用代理模式","children":[]},{"level":2,"title":"实例代码","slug":"实例代码","link":"#实例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"使用代理人来提升处理速度","slug":"使用代理人来提升处理速度","link":"#使用代理人来提升处理速度","children":[]},{"level":3,"title":"有必要划分代理人和本人吗","slug":"有必要划分代理人和本人吗","link":"#有必要划分代理人和本人吗","children":[]},{"level":3,"title":"代理与委托","slug":"代理与委托","link":"#代理与委托","children":[]},{"level":3,"title":"透明性","slug":"透明性","link":"#透明性","children":[]},{"level":3,"title":"HTTP 代理","slug":"http-代理","link":"#http-代理","children":[]},{"level":3,"title":"各种 Proxy 模式","slug":"各种-proxy-模式","link":"#各种-proxy-模式","children":[]}]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":5.08,"words":1524},"filePathRelative":"tech/DesignPatterns/proxy.md","localizedDate":"2024年10月29日","excerpt":"<h2>为什么使用代理模式</h2>\\n<p>在面向对象编程中，“本人”和“代理人”都是对象。如果“本人”对象太忙了．有些工作无法自己亲自完成，就将其交给“代理人\\"对象负责。</p>\\n","autoDesc":true}');export{m as comp,v as data};
