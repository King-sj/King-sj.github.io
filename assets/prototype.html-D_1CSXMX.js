import{_ as s,o as a,c as t,a as p,b as n,f as e}from"./app-CI7LOzVy.js";const o={},c=n("h2",{id:"为什么要使用-prototype-模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么要使用-prototype-模式"},[n("span",null,"为什么要使用 Prototype 模式")])],-1),l=n("p",null,"Prototype 模式是一种创建型设计模式，它允许你复制现有对象而无需使代码依赖它们所属的类。使用 Prototype 模式可以：",-1),i=n("ul",null,[n("li",null,"避免重复初始化对象的复杂过程。"),n("li",null,"提高性能，特别是在创建对象代价较高时。"),n("li",null,"简化代码，使得对象的创建更加灵活。"),n("li",null,"对象种类繁多，无法将它们整合到一个类中"),n("li",null,"难以根据类生成实例"),n("li",null,"解耦框架与生成的实例")],-1),u=e(`<h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/fP5FQm913CNlyoboN6dN3p2K8lKi2CMJU0WpwJeuPaeown-itxtZsYqhdiJhuvVtNfA9PfJSRgC9d4c-q17C9VdMPJWPW9TMgL8Bdra2DoCBknJyHNT2c6aQ4rDLvByPSpR6HLI56J8s99r9hUkqTwXauGJB3HqjQEUtie1yXFF5KAW9MYfKZ5lgWLVubfHJXzs5tv2ZZXdaasefy94ErmgUN79hb9uVxAQFxhPWJn83qvpuwjx6vxtxix_zZCU3-hVwCDhqDwxhz_-dMIZ9PaBiorD_0G00" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Manager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./manager&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UnderlinePen <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./underlinePen&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MessageBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./messageBox&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> upen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnderlinePen</span><span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBox</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBox</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;strong message&#39;</span><span class="token punctuation">,</span> upen<span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;warning box&#39;</span><span class="token punctuation">,</span> mbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;slash box&#39;</span><span class="token punctuation">,</span> sbox<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> p1 <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;strong message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;warning box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p3 <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;slash box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// manager.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> showcase<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> proto<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>showcase<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> proto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">create</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>showcase<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">createClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// messageBox.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Product <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./product&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MessageBox</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> decochar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>decochar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>decochar <span class="token operator">=</span> decochar<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">use</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>decochar<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>decochar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>decochar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>decochar<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">createClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p<span class="token operator">:</span> Product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      p <span class="token operator">=</span> <span class="token operator">&lt;</span>Product<span class="token operator">&gt;</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// product.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  <span class="token function">use</span><span class="token punctuation">(</span>s<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">createClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Product<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// underlinePen.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Product <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./product&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UnderlinePen</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> ulchar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>ulchar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ulchar <span class="token operator">=</span> ulchar<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">use</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>ulchar<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">createClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p<span class="token operator">:</span> Product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src\\prototype\\main.ts&quot;</span>
<span class="token string">&quot;Hello, world.&quot;</span>

 ~~~~~~~~~~~~~

*****************
* Hello, world. *
*****************
/////////////////
/ Hello, world. /
/////////////////
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关设计模式" tabindex="-1"><a class="header-anchor" href="#相关设计模式"><span>相关设计模式</span></a></h2><ul><li>Flyweight 模式</li><li>Memento 模式</li><li>Composite 模式</li><li>Decorator 模式</li><li>Command 模式</li></ul>`,7);function r(k,d){return a(),t("div",null,[c,l,i,p(" more "),u])}const m=s(o,[["render",r],["__file","prototype.html.vue"]]),b=JSON.parse('{"path":"/tech/DesignPatterns/prototype.html","title":"Prototype 模式","lang":"zh-CN","frontmatter":{"title":"Prototype 模式","date":"2024-10-22T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","typescript","生成实例"],"prev":"./singleton","next":"./builder","description":"为什么要使用 Prototype 模式 Prototype 模式是一种创建型设计模式，它允许你复制现有对象而无需使代码依赖它们所属的类。使用 Prototype 模式可以： 避免重复初始化对象的复杂过程。 提高性能，特别是在创建对象代价较高时。 简化代码，使得对象的创建更加灵活。 对象种类繁多，无法将它们整合到一个类中 难以根据类生成实例 解耦框架与生...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/prototype.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Prototype 模式"}],["meta",{"property":"og:description","content":"为什么要使用 Prototype 模式 Prototype 模式是一种创建型设计模式，它允许你复制现有对象而无需使代码依赖它们所属的类。使用 Prototype 模式可以： 避免重复初始化对象的复杂过程。 提高性能，特别是在创建对象代价较高时。 简化代码，使得对象的创建更加灵活。 对象种类繁多，无法将它们整合到一个类中 难以根据类生成实例 解耦框架与生..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"生成实例"}],["meta",{"property":"article:published_time","content":"2024-10-22T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prototype 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么要使用 Prototype 模式","slug":"为什么要使用-prototype-模式","link":"#为什么要使用-prototype-模式","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"相关设计模式","slug":"相关设计模式","link":"#相关设计模式","children":[]}],"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"tech/DesignPatterns/prototype.md","localizedDate":"2024年10月22日","excerpt":"<h2>为什么要使用 Prototype 模式</h2>\\n<p>Prototype 模式是一种创建型设计模式，它允许你复制现有对象而无需使代码依赖它们所属的类。使用 Prototype 模式可以：</p>\\n<ul>\\n<li>避免重复初始化对象的复杂过程。</li>\\n<li>提高性能，特别是在创建对象代价较高时。</li>\\n<li>简化代码，使得对象的创建更加灵活。</li>\\n<li>对象种类繁多，无法将它们整合到一个类中</li>\\n<li>难以根据类生成实例</li>\\n<li>解耦框架与生成的实例</li>\\n</ul>\\n","autoDesc":true}');export{m as comp,b as data};
