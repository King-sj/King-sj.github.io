import{_ as s,o as a,c as t,a as e,b as n,f as p}from"./app-B-9y9oJs.js";const o={},c=n("h2",{id:"为什么要使用-singleton-模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么要使用-singleton-模式"},[n("span",null,"为什么要使用 Singleton 模式")])],-1),l=n("p",null,"Singleton 模式确保一个类只有一个实例，并提供一个全局访问点。它常用于需要控制资源访问的场景，例如数据库连接、日志记录器等。通过 Singleton 模式，可以避免创建多个实例带来的资源浪费和不一致性问题。",-1),i=p(`<h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结:</span></a></h3><ul><li>想确保任何情况下都绝对只有 1 个实例</li><li>想在程序上表现出“只存在一个实例”</li></ul><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/JOun2iCm34LtdK9ZGl05F9IicNi2LnR1uCXWoLFetMjAmDw4tl-Vjwk5QktAG3ceuZl9cTcAu0s83ZksH9Ya7qBiHs369mlNO1oFw57QzU7wnrHwhpQoKfUrVxPHiEEPNDPvz0im59nxJK8UcxB2pXAxxmy0" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Singleton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./singleton&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> singleton1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> singleton2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>singleton1 <span class="token operator">===</span> singleton2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// singleton.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Singleton <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> generatedId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Singleton<span class="token punctuation">.</span>generatedId<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Singleton instance created with id: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Singleton<span class="token punctuation">.</span>generatedId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Singleton <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src\\singleton\\main.ts&quot;</span>
Singleton instance created with id: <span class="token number">1</span>
<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关设计模式" tabindex="-1"><a class="header-anchor" href="#相关设计模式"><span>相关设计模式</span></a></h2><ul><li>abstractFactory 模式</li><li>Builder 模式</li><li>Facade 模式</li><li>Prototype 模式</li></ul><h2 id="多线程下" tabindex="-1"><a class="header-anchor" href="#多线程下"><span>多线程下</span></a></h2><p>在多线程环境中，Singleton 模式的实现需要特别注意线程安全问题。如果多个线程同时访问 <code>getInstance</code> 方法，可能会导致创建多个实例。为了解决这个问题，可以使用双重检查锁定（Double-Checked Locking）或其他线程同步机制。</p><h3 id="双重检查锁定示例代码" tabindex="-1"><a class="header-anchor" href="#双重检查锁定示例代码"><span>双重检查锁定示例代码</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Singleton <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> generatedId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> lock<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Singleton<span class="token punctuation">.</span>generatedId<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Singleton instance created with id: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Singleton<span class="token punctuation">.</span>generatedId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Singleton <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">synchronized</span><span class="token punctuation">(</span>lock<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Simulate a lock mechanism</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>synchronized</code> 函数模拟了一个锁机制，以确保在多线程环境下 <code>getInstance</code> 方法的线程安全性。</p>`,14);function u(r,k){return a(),t("div",null,[c,l,e(" more "),i])}const v=s(o,[["render",u],["__file","singleton.html.vue"]]),m=JSON.parse('{"path":"/tech/DesignPatterns/singleton.html","title":"Singleton 模式","lang":"zh-CN","frontmatter":{"title":"Singleton 模式","date":"2024-10-21T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","typescript","生成实例"],"prev":"./factory_method","next":"./prototype","description":"为什么要使用 Singleton 模式 Singleton 模式确保一个类只有一个实例，并提供一个全局访问点。它常用于需要控制资源访问的场景，例如数据库连接、日志记录器等。通过 Singleton 模式，可以避免创建多个实例带来的资源浪费和不一致性问题。","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/singleton.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Singleton 模式"}],["meta",{"property":"og:description","content":"为什么要使用 Singleton 模式 Singleton 模式确保一个类只有一个实例，并提供一个全局访问点。它常用于需要控制资源访问的场景，例如数据库连接、日志记录器等。通过 Singleton 模式，可以避免创建多个实例带来的资源浪费和不一致性问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"生成实例"}],["meta",{"property":"article:published_time","content":"2024-10-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Singleton 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么要使用 Singleton 模式","slug":"为什么要使用-singleton-模式","link":"#为什么要使用-singleton-模式","children":[{"level":3,"title":"总结:","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"相关设计模式","slug":"相关设计模式","link":"#相关设计模式","children":[]},{"level":2,"title":"多线程下","slug":"多线程下","link":"#多线程下","children":[{"level":3,"title":"双重检查锁定示例代码","slug":"双重检查锁定示例代码","link":"#双重检查锁定示例代码","children":[]}]}],"readingTime":{"minutes":1.52,"words":457},"filePathRelative":"tech/DesignPatterns/singleton.md","localizedDate":"2024年10月21日","excerpt":"<h2>为什么要使用 Singleton 模式</h2>\\n<p>Singleton 模式确保一个类只有一个实例，并提供一个全局访问点。它常用于需要控制资源访问的场景，例如数据库连接、日志记录器等。通过 Singleton 模式，可以避免创建多个实例带来的资源浪费和不一致性问题。</p>\\n","autoDesc":true}');export{v as comp,m as data};
