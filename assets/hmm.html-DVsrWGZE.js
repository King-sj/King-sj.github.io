import{_ as n,o as s,c as a,f as t}from"./app-DFDsyZGc.js";const p="/assets/image-2-CMvEIJ0L.png",o={},e=t(`<h1 id="hmm-词性标注" tabindex="-1"><a class="header-anchor" href="#hmm-词性标注"><span>HMM 词性标注</span></a></h1><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> jieba
<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token punctuation">,</span> Counter

<span class="token comment"># 读取训练数据</span>
lines <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;
清晨/NOUN 小白兔/NOUN 背着/VERB 一个/NUM 小篮子/NOUN ，/PUNCT 来到/VERB 集市/NOUN 上/POSTP 买/VERB 菜/NOUN 。
集市/NOUN 上/POSTP 人/NOUN 很多/ADJ ，/PUNCT 摊位/NOUN 上/POSTP 摆满/VERB 了/AUX 新鲜/ADJ 的/POSTP 蔬菜/NOUN 水果/NOUN 。
小白兔/NOUN 的/POSTP 鼻子/NOUN 嗅/VERB 了/AUX 嗅/VERB ，/PUNCT 空气/NOUN 里/POSTP 弥漫/VERB 着/AUX 各种/ADJ 蔬菜/NOUN 的/POSTP 清香/NOUN 。
它/PRON 蹦/VERB 到/POSTP 一个/NUM 摊位/NOUN 前/POSTP ，/PUNCT 眼睛/NOUN 一下子/ADV 被/AUX 一堆/NUM 橙色/ADJ 的/POSTP 胡萝卜/NOUN 吸引/VERB 住/AUX 了/AUX 。
“/PUNCT 真/ADV 漂亮/ADJ 的/POSTP 胡萝卜/NOUN ！”/PUNCT 小白兔/NOUN 心想/VERB ，/PUNCT 伸出/VERB 前爪/NOUN ，/PUNCT 挑起/VERB 一根/NUM 又/ADV 长/ADJ 又/ADV 直/ADJ 的/POSTP 胡萝卜/NOUN 翻看/VERB 起来/AUX 。
“/PUNCT 这/PRON 根/NOUN 看起来/VERB 很/ADV 甜/ADJ ！/PUNCT 咦/INTJ ，/PUNCT 那/PRON 根/NOUN 也/ADV 不错/ADJ ！”/PUNCT 它/PRON 挑挑拣拣/VERB ，/PUNCT 不一会儿/ADV 就/ADV 挑/VERB 了/AUX 五六根/NUM 大小/ADJ 均匀/ADJ 的/POSTP 胡萝卜/NOUN 放/VERB 进/POSTP 篮子/NOUN 里/POSTP 。
挑/VERB 完/AUX 胡萝卜/NOUN ，/PUNCT 小白兔/NOUN 又/ADV 走/VERB 到/POSTP 白菜/NOUN 摊/NOUN 前/POSTP ，/PUNCT 摸/VERB 了/AUX 摸/VERB 圆润/ADJ 的/POSTP 白菜/NOUN ，/PUNCT “/PUNCT 这个/PRON 可以/VERB 做/VERB 汤/NOUN ！”/PUNCT
接着/ADV ，/PUNCT 它/PRON 又/ADV 挑/VERB 了/AUX 些/NUM 嫩绿/ADJ 的/POSTP 青菜/NOUN ，/PUNCT “/PUNCT 这/PRON 青菜/NOUN 炒/VERB 起来/AUX 一定/ADV 很/ADV 好吃/ADJ ！”/PUNCT
买/VERB 完/AUX 菜/NOUN 后/POSTP ，/PUNCT 小白兔/NOUN 掏/VERB 出/POSTP 一个/NUM 小布袋/NOUN ，/PUNCT 从/POSTP 里面/NOUN 拿/VERB 出/POSTP 几枚/NUM 亮晶晶/ADJ 的/POSTP 硬币/NOUN ，/PUNCT 递/VERB 给/POSTP 摊主/NOUN ，/PUNCT “/PUNCT 谢谢/VERB 您/PRON ，/PUNCT 胡萝卜/NOUN 真/ADV 新鲜/ADJ ！”/PUNCT
摊主/NOUN 笑呵呵/ADV 地/POSTP 接/VERB 过/POSTP 硬币/NOUN ，/PUNCT 送/VERB 了/AUX 小白兔/NOUN 一颗/NUM 香菜/NOUN ，/PUNCT “/PUNCT 小白兔/NOUN ，/PUNCT 下次/ADV 再/ADV 来/VERB 啊/INTJ ！”/PUNCT
回家/VERB 的/POSTP 路上/NOUN ，/PUNCT 小白兔/NOUN 一边/ADV 哼/VERB 着/AUX 小曲儿/NOUN ，/PUNCT 一边/ADV 想象/VERB 着/AUX 美味/ADJ 的/POSTP 午餐/NOUN 。
&#39;&#39;&#39;</span>

<span class="token comment"># 初始化概率字典</span>
start_probability <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>
transition_probability <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
emission_probability <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 统计计数</span>
start_counts <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
transition_counts <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>
emission_counts <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>
state_counts <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 处理训练数据</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    words_tags <span class="token operator">=</span> <span class="token punctuation">[</span>wt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token keyword">for</span> wt <span class="token keyword">in</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    previous_tag <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> wt <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>words_tags<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>wt<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        word<span class="token punctuation">,</span> tag <span class="token operator">=</span> wt
        state_counts<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        emission_counts<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            start_counts<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> previous_tag <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            transition_counts<span class="token punctuation">[</span>previous_tag<span class="token punctuation">]</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        previous_tag <span class="token operator">=</span> tag

<span class="token comment"># 计算概率</span>
total_start <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>start_counts<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> tag<span class="token punctuation">,</span> count <span class="token keyword">in</span> start_counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    start_probability<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">/</span> total_start

<span class="token keyword">for</span> prev_tag<span class="token punctuation">,</span> next_tags <span class="token keyword">in</span> transition_counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total_trans <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>next_tags<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> next_tag<span class="token punctuation">,</span> count <span class="token keyword">in</span> next_tags<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        transition_probability<span class="token punctuation">[</span>prev_tag<span class="token punctuation">]</span><span class="token punctuation">[</span>next_tag<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">/</span> total_trans

<span class="token keyword">for</span> tag<span class="token punctuation">,</span> words <span class="token keyword">in</span> emission_counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total_emit <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> word<span class="token punctuation">,</span> count <span class="token keyword">in</span> words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        emission_probability<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">/</span> total_emit

<span class="token comment"># 状态集合</span>
states <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>state_counts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">viterbi</span><span class="token punctuation">(</span>obs<span class="token punctuation">,</span> states<span class="token punctuation">,</span> start_p<span class="token punctuation">,</span> trans_p<span class="token punctuation">,</span> emit_p<span class="token punctuation">)</span><span class="token punctuation">:</span>
    V <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
    path <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment"># 初始化初始状态</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> states<span class="token punctuation">:</span>
        V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> start_p<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">*</span> emit_p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>obs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1e-6</span><span class="token punctuation">)</span>  <span class="token comment"># 避免零概率</span>
        path<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span>

    <span class="token comment"># 递归计算</span>
    <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        V<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        new_path <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token keyword">for</span> y <span class="token keyword">in</span> states<span class="token punctuation">:</span>
            <span class="token punctuation">(</span>prob<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y0<span class="token punctuation">]</span> <span class="token operator">*</span> trans_p<span class="token punctuation">[</span>y0<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">1e-6</span><span class="token punctuation">)</span> <span class="token operator">*</span> emit_p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>obs<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y0<span class="token punctuation">)</span> <span class="token keyword">for</span> y0 <span class="token keyword">in</span> states<span class="token punctuation">)</span>
            V<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> prob
            new_path<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span>

        path <span class="token operator">=</span> new_path

    <span class="token comment"># 找到最优路径</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">(</span>prob<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> states<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>prob<span class="token punctuation">,</span> path<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 测试数据</span>
sentence <span class="token operator">=</span> <span class="token string">&#39;小白兔爱吃橙色的胡萝卜和嫩绿的青菜&#39;</span>

<span class="token comment"># 使用jieba进行分词</span>
observations <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 运行维特比算法</span>
prob<span class="token punctuation">,</span> pos_tags <span class="token operator">=</span> viterbi<span class="token punctuation">(</span>observations<span class="token punctuation">,</span> states<span class="token punctuation">,</span> start_probability<span class="token punctuation">,</span> transition_probability<span class="token punctuation">,</span> emission_probability<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;分词结果: </span><span class="token interpolation"><span class="token punctuation">{</span>observations<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;最优路径概率: </span><span class="token interpolation"><span class="token punctuation">{</span>prob<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;词性标注: </span><span class="token interpolation"><span class="token punctuation">{</span>pos_tags<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h3><figure><img src="`+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure>',4),c=[e];function u(i,l){return s(),a("div",null,c)}const r=n(o,[["render",u],["__file","hmm.html.vue"]]),d=JSON.parse(`{"path":"/tech/hmm.html","title":"HMM 词性标注","lang":"zh-CN","frontmatter":{"description":"HMM 词性标注 运行结果 alt textalt text","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/hmm.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"HMM 词性标注"}],["meta",{"property":"og:description","content":"HMM 词性标注 运行结果 alt textalt text"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HMM 词性标注\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":3,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]}],"readingTime":{"minutes":2.99,"words":898},"filePathRelative":"tech/hmm.md","excerpt":"\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> jieba\\n<span class=\\"token keyword\\">from</span> collections <span class=\\"token keyword\\">import</span> defaultdict<span class=\\"token punctuation\\">,</span> Counter\\n\\n<span class=\\"token comment\\"># 读取训练数据</span>\\nlines <span class=\\"token operator\\">=</span> <span class=\\"token triple-quoted-string string\\">'''\\n清晨/NOUN 小白兔/NOUN 背着/VERB 一个/NUM 小篮子/NOUN ，/PUNCT 来到/VERB 集市/NOUN 上/POSTP 买/VERB 菜/NOUN 。\\n集市/NOUN 上/POSTP 人/NOUN 很多/ADJ ，/PUNCT 摊位/NOUN 上/POSTP 摆满/VERB 了/AUX 新鲜/ADJ 的/POSTP 蔬菜/NOUN 水果/NOUN 。\\n小白兔/NOUN 的/POSTP 鼻子/NOUN 嗅/VERB 了/AUX 嗅/VERB ，/PUNCT 空气/NOUN 里/POSTP 弥漫/VERB 着/AUX 各种/ADJ 蔬菜/NOUN 的/POSTP 清香/NOUN 。\\n它/PRON 蹦/VERB 到/POSTP 一个/NUM 摊位/NOUN 前/POSTP ，/PUNCT 眼睛/NOUN 一下子/ADV 被/AUX 一堆/NUM 橙色/ADJ 的/POSTP 胡萝卜/NOUN 吸引/VERB 住/AUX 了/AUX 。\\n“/PUNCT 真/ADV 漂亮/ADJ 的/POSTP 胡萝卜/NOUN ！”/PUNCT 小白兔/NOUN 心想/VERB ，/PUNCT 伸出/VERB 前爪/NOUN ，/PUNCT 挑起/VERB 一根/NUM 又/ADV 长/ADJ 又/ADV 直/ADJ 的/POSTP 胡萝卜/NOUN 翻看/VERB 起来/AUX 。\\n“/PUNCT 这/PRON 根/NOUN 看起来/VERB 很/ADV 甜/ADJ ！/PUNCT 咦/INTJ ，/PUNCT 那/PRON 根/NOUN 也/ADV 不错/ADJ ！”/PUNCT 它/PRON 挑挑拣拣/VERB ，/PUNCT 不一会儿/ADV 就/ADV 挑/VERB 了/AUX 五六根/NUM 大小/ADJ 均匀/ADJ 的/POSTP 胡萝卜/NOUN 放/VERB 进/POSTP 篮子/NOUN 里/POSTP 。\\n挑/VERB 完/AUX 胡萝卜/NOUN ，/PUNCT 小白兔/NOUN 又/ADV 走/VERB 到/POSTP 白菜/NOUN 摊/NOUN 前/POSTP ，/PUNCT 摸/VERB 了/AUX 摸/VERB 圆润/ADJ 的/POSTP 白菜/NOUN ，/PUNCT “/PUNCT 这个/PRON 可以/VERB 做/VERB 汤/NOUN ！”/PUNCT\\n接着/ADV ，/PUNCT 它/PRON 又/ADV 挑/VERB 了/AUX 些/NUM 嫩绿/ADJ 的/POSTP 青菜/NOUN ，/PUNCT “/PUNCT 这/PRON 青菜/NOUN 炒/VERB 起来/AUX 一定/ADV 很/ADV 好吃/ADJ ！”/PUNCT\\n买/VERB 完/AUX 菜/NOUN 后/POSTP ，/PUNCT 小白兔/NOUN 掏/VERB 出/POSTP 一个/NUM 小布袋/NOUN ，/PUNCT 从/POSTP 里面/NOUN 拿/VERB 出/POSTP 几枚/NUM 亮晶晶/ADJ 的/POSTP 硬币/NOUN ，/PUNCT 递/VERB 给/POSTP 摊主/NOUN ，/PUNCT “/PUNCT 谢谢/VERB 您/PRON ，/PUNCT 胡萝卜/NOUN 真/ADV 新鲜/ADJ ！”/PUNCT\\n摊主/NOUN 笑呵呵/ADV 地/POSTP 接/VERB 过/POSTP 硬币/NOUN ，/PUNCT 送/VERB 了/AUX 小白兔/NOUN 一颗/NUM 香菜/NOUN ，/PUNCT “/PUNCT 小白兔/NOUN ，/PUNCT 下次/ADV 再/ADV 来/VERB 啊/INTJ ！”/PUNCT\\n回家/VERB 的/POSTP 路上/NOUN ，/PUNCT 小白兔/NOUN 一边/ADV 哼/VERB 着/AUX 小曲儿/NOUN ，/PUNCT 一边/ADV 想象/VERB 着/AUX 美味/ADJ 的/POSTP 午餐/NOUN 。\\n'''</span>\\n\\n<span class=\\"token comment\\"># 初始化概率字典</span>\\nstart_probability <span class=\\"token operator\\">=</span> defaultdict<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">float</span><span class=\\"token punctuation\\">)</span>\\ntransition_probability <span class=\\"token operator\\">=</span> defaultdict<span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span><span class=\\"token punctuation\\">:</span> defaultdict<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">float</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\nemission_probability <span class=\\"token operator\\">=</span> defaultdict<span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span><span class=\\"token punctuation\\">:</span> defaultdict<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">float</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># 统计计数</span>\\nstart_counts <span class=\\"token operator\\">=</span> Counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\ntransition_counts <span class=\\"token operator\\">=</span> defaultdict<span class=\\"token punctuation\\">(</span>Counter<span class=\\"token punctuation\\">)</span>\\nemission_counts <span class=\\"token operator\\">=</span> defaultdict<span class=\\"token punctuation\\">(</span>Counter<span class=\\"token punctuation\\">)</span>\\nstate_counts <span class=\\"token operator\\">=</span> Counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># 处理训练数据</span>\\n<span class=\\"token keyword\\">for</span> line <span class=\\"token keyword\\">in</span> lines<span class=\\"token punctuation\\">.</span>strip<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'\\\\n'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    words_tags <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>wt<span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">for</span> wt <span class=\\"token keyword\\">in</span> line<span class=\\"token punctuation\\">.</span>strip<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span>\\n    previous_tag <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n    <span class=\\"token keyword\\">for</span> i<span class=\\"token punctuation\\">,</span> wt <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">enumerate</span><span class=\\"token punctuation\\">(</span>words_tags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>wt<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">continue</span>\\n        word<span class=\\"token punctuation\\">,</span> tag <span class=\\"token operator\\">=</span> wt\\n        state_counts<span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n        emission_counts<span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>word<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">if</span> i <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n            start_counts<span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">if</span> previous_tag <span class=\\"token keyword\\">is</span> <span class=\\"token keyword\\">not</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n            transition_counts<span class=\\"token punctuation\\">[</span>previous_tag<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n        previous_tag <span class=\\"token operator\\">=</span> tag\\n\\n<span class=\\"token comment\\"># 计算概率</span>\\ntotal_start <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span>start_counts<span class=\\"token punctuation\\">.</span>values<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">for</span> tag<span class=\\"token punctuation\\">,</span> count <span class=\\"token keyword\\">in</span> start_counts<span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    start_probability<span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> count <span class=\\"token operator\\">/</span> total_start\\n\\n<span class=\\"token keyword\\">for</span> prev_tag<span class=\\"token punctuation\\">,</span> next_tags <span class=\\"token keyword\\">in</span> transition_counts<span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    total_trans <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span>next_tags<span class=\\"token punctuation\\">.</span>values<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">for</span> next_tag<span class=\\"token punctuation\\">,</span> count <span class=\\"token keyword\\">in</span> next_tags<span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        transition_probability<span class=\\"token punctuation\\">[</span>prev_tag<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>next_tag<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> count <span class=\\"token operator\\">/</span> total_trans\\n\\n<span class=\\"token keyword\\">for</span> tag<span class=\\"token punctuation\\">,</span> words <span class=\\"token keyword\\">in</span> emission_counts<span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    total_emit <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span>words<span class=\\"token punctuation\\">.</span>values<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">for</span> word<span class=\\"token punctuation\\">,</span> count <span class=\\"token keyword\\">in</span> words<span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        emission_probability<span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>word<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> count <span class=\\"token operator\\">/</span> total_emit\\n\\n<span class=\\"token comment\\"># 状态集合</span>\\nstates <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">(</span>state_counts<span class=\\"token punctuation\\">.</span>keys<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">viterbi</span><span class=\\"token punctuation\\">(</span>obs<span class=\\"token punctuation\\">,</span> states<span class=\\"token punctuation\\">,</span> start_p<span class=\\"token punctuation\\">,</span> trans_p<span class=\\"token punctuation\\">,</span> emit_p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    V <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span>\\n    path <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\"># 初始化初始状态</span>\\n    <span class=\\"token keyword\\">for</span> y <span class=\\"token keyword\\">in</span> states<span class=\\"token punctuation\\">:</span>\\n        V<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> start_p<span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">*</span> emit_p<span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">(</span>obs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1e-6</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 避免零概率</span>\\n        path<span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span>\\n\\n    <span class=\\"token comment\\"># 递归计算</span>\\n    <span class=\\"token keyword\\">for</span> t <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>obs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        V<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        new_path <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">for</span> y <span class=\\"token keyword\\">in</span> states<span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token punctuation\\">(</span>prob<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>V<span class=\\"token punctuation\\">[</span>t<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>y0<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">*</span> trans_p<span class=\\"token punctuation\\">[</span>y0<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1e-6</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> emit_p<span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">(</span>obs<span class=\\"token punctuation\\">[</span>t<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1e-6</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> y0<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">for</span> y0 <span class=\\"token keyword\\">in</span> states<span class=\\"token punctuation\\">)</span>\\n            V<span class=\\"token punctuation\\">[</span>t<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> prob\\n            new_path<span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> path<span class=\\"token punctuation\\">[</span>state<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span>\\n\\n        path <span class=\\"token operator\\">=</span> new_path\\n\\n    <span class=\\"token comment\\"># 找到最优路径</span>\\n    n <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>obs<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n    <span class=\\"token punctuation\\">(</span>prob<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>V<span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>y<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">for</span> y <span class=\\"token keyword\\">in</span> states<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>prob<span class=\\"token punctuation\\">,</span> path<span class=\\"token punctuation\\">[</span>state<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># 测试数据</span>\\nsentence <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'小白兔爱吃橙色的胡萝卜和嫩绿的青菜'</span>\\n\\n<span class=\\"token comment\\"># 使用jieba进行分词</span>\\nobservations <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">(</span>jieba<span class=\\"token punctuation\\">.</span>cut<span class=\\"token punctuation\\">(</span>sentence<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># 运行维特比算法</span>\\nprob<span class=\\"token punctuation\\">,</span> pos_tags <span class=\\"token operator\\">=</span> viterbi<span class=\\"token punctuation\\">(</span>observations<span class=\\"token punctuation\\">,</span> states<span class=\\"token punctuation\\">,</span> start_probability<span class=\\"token punctuation\\">,</span> transition_probability<span class=\\"token punctuation\\">,</span> emission_probability<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"分词结果: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>observations<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"最优路径概率: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>prob<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"词性标注: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>pos_tags<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{r as comp,d as data};
