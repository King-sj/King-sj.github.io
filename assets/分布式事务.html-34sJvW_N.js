import{_ as n,r as t,o as a,c as i,b as e,e as r,d as s,f as c}from"./app-DkfD2H4x.js";const o={},h=c('<h1 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务"><span>分布式事务</span></a></h1><p>分布式事务是指跨越多个独立系统或数据库的事务操作，要求这些操作要么全部成功，要么全部失败，保证数据一致性。</p><h2 id="为什么需要分布式事务" tabindex="-1"><a class="header-anchor" href="#为什么需要分布式事务"><span>为什么需要分布式事务</span></a></h2><ul><li>微服务、分库分表、异构系统等场景下，单体事务无法满足一致性需求。</li><li>例如：订单服务和库存服务分别在不同数据库，需保证下单和扣库存要么都成功，要么都失败。</li></ul><h2 id="分布式事务的挑战" tabindex="-1"><a class="header-anchor" href="#分布式事务的挑战"><span>分布式事务的挑战</span></a></h2><ul><li>网络不可靠、节点故障、时延等导致一致性难以保障。</li><li>CAP理论：一致性（C）、可用性（A）、分区容错性（P）三者不可兼得。</li></ul><h2 id="常见分布式事务方案" tabindex="-1"><a class="header-anchor" href="#常见分布式事务方案"><span>常见分布式事务方案</span></a></h2><h3 id="_1-两阶段提交-2pc" tabindex="-1"><a class="header-anchor" href="#_1-两阶段提交-2pc"><span>1. 两阶段提交（2PC）</span></a></h3><ul><li><strong>原理</strong>：协调者先让所有参与者准备（预提交），全部准备好后再统一提交。</li><li><strong>优点</strong>：实现简单，强一致性。</li><li><strong>缺点</strong>：阻塞、单点故障，性能较低。</li></ul><h3 id="_2-三阶段提交-3pc" tabindex="-1"><a class="header-anchor" href="#_2-三阶段提交-3pc"><span>2. 三阶段提交（3PC）</span></a></h3><ul><li><strong>原理</strong>：在2PC基础上增加“预提交”阶段，降低阻塞风险。</li><li><strong>优缺点</strong>：进一步提升容错，但实现复杂，实际应用较少。</li></ul><h3 id="_3-本地消息表-可靠消息最终一致性" tabindex="-1"><a class="header-anchor" href="#_3-本地消息表-可靠消息最终一致性"><span>3. 本地消息表/可靠消息最终一致性</span></a></h3><ul><li><strong>原理</strong>：业务操作和消息发送在同一本地事务中，消息异步投递，保证最终一致性。</li><li><strong>应用</strong>：如 RocketMQ 事务消息、阿里分布式事务解决方案。</li></ul><h3 id="_4-tcc-try-confirm-cancel" tabindex="-1"><a class="header-anchor" href="#_4-tcc-try-confirm-cancel"><span>4. TCC（Try-Confirm-Cancel）</span></a></h3><ul><li><strong>原理</strong>：将业务操作拆分为 Try（预留资源）、Confirm（确认提交）、Cancel（回滚）三个阶段。</li><li><strong>优点</strong>：灵活，适合强业务隔离场景。</li><li><strong>缺点</strong>：实现复杂，需幂等、空回滚等保障。</li></ul><h3 id="_5-saga" tabindex="-1"><a class="header-anchor" href="#_5-saga"><span>5. SAGA</span></a></h3><ul><li><strong>原理</strong>：将长事务拆分为一系列本地子事务，每步失败则按补偿逻辑回滚。</li><li><strong>优点</strong>：高可用，适合长流程。</li><li><strong>缺点</strong>：只保证最终一致性，补偿逻辑复杂。</li></ul><h2 id="典型应用场景" tabindex="-1"><a class="header-anchor" href="#典型应用场景"><span>典型应用场景</span></a></h2><ul><li>电商下单（订单、库存、支付等服务协同）</li><li>金融转账（多账户、多系统一致性）</li><li>微服务架构下的跨服务数据一致性</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>分布式事务方案需结合业务场景权衡一致性、可用性与性能。</li><li>实际开发中，推荐优先采用本地消息表、SAGA等最终一致性方案，核心链路可用TCC或2PC。</li></ul><hr><p>参考：</p>',23),p={href:"https://www.cnblogs.com/crazymakercircle/p/13917517.html",target:"_blank",rel:"noopener noreferrer"};function d(g,u){const l=t("ExternalLinkIcon");return a(),i("div",null,[h,e("ul",null,[e("li",null,[e("a",p,[r("分布式事务原理与实现"),s(l)])])])])}const m=n(o,[["render",d],["__file","分布式事务.html.vue"]]),f=JSON.parse('{"path":"/tech/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","title":"分布式事务","lang":"zh-CN","frontmatter":{"title":"分布式事务","category":["架构"],"description":"分布式事务 分布式事务是指跨越多个独立系统或数据库的事务操作，要求这些操作要么全部成功，要么全部失败，保证数据一致性。 为什么需要分布式事务 微服务、分库分表、异构系统等场景下，单体事务无法满足一致性需求。 例如：订单服务和库存服务分别在不同数据库，需保证下单和扣库存要么都成功，要么都失败。 分布式事务的挑战 网络不可靠、节点故障、时延等导致一致性难以...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"分布式事务"}],["meta",{"property":"og:description","content":"分布式事务 分布式事务是指跨越多个独立系统或数据库的事务操作，要求这些操作要么全部成功，要么全部失败，保证数据一致性。 为什么需要分布式事务 微服务、分库分表、异构系统等场景下，单体事务无法满足一致性需求。 例如：订单服务和库存服务分别在不同数据库，需保证下单和扣库存要么都成功，要么都失败。 分布式事务的挑战 网络不可靠、节点故障、时延等导致一致性难以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么需要分布式事务","slug":"为什么需要分布式事务","link":"#为什么需要分布式事务","children":[]},{"level":2,"title":"分布式事务的挑战","slug":"分布式事务的挑战","link":"#分布式事务的挑战","children":[]},{"level":2,"title":"常见分布式事务方案","slug":"常见分布式事务方案","link":"#常见分布式事务方案","children":[{"level":3,"title":"1. 两阶段提交（2PC）","slug":"_1-两阶段提交-2pc","link":"#_1-两阶段提交-2pc","children":[]},{"level":3,"title":"2. 三阶段提交（3PC）","slug":"_2-三阶段提交-3pc","link":"#_2-三阶段提交-3pc","children":[]},{"level":3,"title":"3. 本地消息表/可靠消息最终一致性","slug":"_3-本地消息表-可靠消息最终一致性","link":"#_3-本地消息表-可靠消息最终一致性","children":[]},{"level":3,"title":"4. TCC（Try-Confirm-Cancel）","slug":"_4-tcc-try-confirm-cancel","link":"#_4-tcc-try-confirm-cancel","children":[]},{"level":3,"title":"5. SAGA","slug":"_5-saga","link":"#_5-saga","children":[]}]},{"level":2,"title":"典型应用场景","slug":"典型应用场景","link":"#典型应用场景","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":2.04,"words":613},"filePathRelative":"tech/分布式事务.md","excerpt":"\\n<p>分布式事务是指跨越多个独立系统或数据库的事务操作，要求这些操作要么全部成功，要么全部失败，保证数据一致性。</p>\\n<h2>为什么需要分布式事务</h2>\\n<ul>\\n<li>微服务、分库分表、异构系统等场景下，单体事务无法满足一致性需求。</li>\\n<li>例如：订单服务和库存服务分别在不同数据库，需保证下单和扣库存要么都成功，要么都失败。</li>\\n</ul>\\n<h2>分布式事务的挑战</h2>\\n<ul>\\n<li>网络不可靠、节点故障、时延等导致一致性难以保障。</li>\\n<li>CAP理论：一致性（C）、可用性（A）、分区容错性（P）三者不可兼得。</li>\\n</ul>\\n<h2>常见分布式事务方案</h2>","autoDesc":true}');export{m as comp,f as data};
