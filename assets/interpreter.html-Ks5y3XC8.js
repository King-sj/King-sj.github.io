import{_ as p,r as e,o,c,b as n,e as s,d as i,f as a}from"./app-CI7LOzVy.js";const l={},u=a('<h2 id="为什么使用此模式" tabindex="-1"><a class="header-anchor" href="#为什么使用此模式"><span>为什么使用此模式</span></a></h2><p>解释器模式（Interpreter Pattern）是一种行为设计模式，它定义了一种语言的文法表示，并定义一个解释器来解释该语言中的句子。使用解释器模式的原因包括：</p><ol><li><strong>简化语法解析</strong>：通过定义文法规则，可以轻松解析和执行特定的语言或指令集。</li><li><strong>可扩展性</strong>：可以轻松添加新的语法规则或指令，而无需修改现有代码。</li><li><strong>代码复用</strong>：通过将不同的语法规则封装在不同的类中，可以提高代码的复用性和可维护性。</li></ol><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2>',4),r={href:"https://bupt.online/tech/designASimpileCCompiler/0.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;program&gt; ::= program &lt;command list&gt;
&lt;command list&gt; ::= &lt;command&gt;* end
&lt;command&gt; ::= &lt;repeat command&gt; | &lt;primitive command&gt;
&lt;repeat command&gt; ::= repeat &lt;number&gt; &lt;command list&gt;
&lt;primitive command&gt; ::= go | right | left
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://www.plantuml.com/plantuml/svg/lLJ1QiCm3BtxAtpiAFc1d0gzRgLilOqTd5Xafh4TRAMKZVtxPBa9ILZfO6Mty2IzfoT5taHK0NlRYhfLCSgjTmXdb9z2oa963COr1ty4PpuWbF9b3d1ItOS03XaiBoKKM4j7H8ok7cPu0xYTr2oYyMYwZEEKaP9EtkW5mQwt5OJ4uFXBV0cXAgfGDShiQESri9srx5I8iAgpnNBmEZ1JQQxO1zy4PRcGuk3qX8NyUckLquycOa8JpmpuXLJAG9-7ER4_Th1W_AcBbc8b0wzlzrEyfkROw9tSFKC72cyfyZx7lVxJuFV1M8Fc1BUwKnPcV-tVP1TdTH79LAC80IaX3X3llP36QJXFvdJzxjvLVF81E1HJhFA-1UMe3xPM57veN0plGCAMHx-XQT2ByGq0" alt=""><img src="https://www.plantuml.com/plantuml/svg/fPDB2W8n38RtFKNeQcRX1GH5cAs8g1SeJgp5FeOqFevlnxgeuuYWguRcQ_u_RRg8h8ZFpWgrvq3GM8EUHLvWCeScUCORJy7ZjUgZkaYkAMXIRXLQpC37PASeOhNFnMfHv5v4uibqkt12Nyak8t84TaxvTcaYbyBVg863GVx5XKPkpaIfZ-ob5ieoS1_3R0QIi4F5KW2CLdbibTQWtEoPpQF0Z-IW4RGH2sywI4ZlACde8-VGuk4Visioph2vuE_mqB9l_xh_TFvZF--3rDDFpV7PvB1bCbuddKN2qcUu0m00" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// commandListNode.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./node&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommandNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./commandNode&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;command list&gt; ::= &lt;command&gt;* end</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CommandListNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  list<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Missing &#39;end&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> commandNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        commandNode<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>commandNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// commandNode.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./node&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RepeatCommandNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./repeatCommandNode&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrimitiveCommandNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./primitiveCommandNode&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;command&gt; ::= &lt;repeat command&gt; | &lt;primitive command&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CommandNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  node<span class="token operator">:</span> Node<span class="token punctuation">;</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;repeat&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RepeatCommandNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimitiveCommandNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// context.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StringTokenizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./stringTokenizer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> stringTokenizer<span class="token operator">:</span> StringTokenizer<span class="token punctuation">;</span>
  <span class="token keyword">private</span> currentToken<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stringTokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stringTokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stringTokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentToken<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentToken<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">skipToken</span><span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Warning: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is expected, but </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is found.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getCurrentNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Warning: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ProgramNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./programNode&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// &lt;program&gt; ::= program &lt;command list&gt;</span>
<span class="token comment">// &lt;command list&gt; ::= &lt;command&gt;* end</span>
<span class="token comment">// &lt;command&gt; ::= &lt;repeat command&gt; | &lt;primitive command&gt;</span>
<span class="token comment">// &lt;repeat command&gt; ::= repeat &lt;number&gt; &lt;command list&gt;</span>
<span class="token comment">// &lt;primitive command&gt; ::= go | right | left</span>

<span class="token keyword">let</span> programs <span class="token operator">=</span>
  <span class="token string">&quot;program end\\n&quot;</span><span class="token operator">+</span>
  <span class="token string">&quot;program go end\\n&quot;</span><span class="token operator">+</span>
  <span class="token string">&quot;program go right go right go right end\\n&quot;</span><span class="token operator">+</span>
  <span class="token string">&quot;program repeat 4 go right end end\\n&quot;</span><span class="token operator">+</span>
  <span class="token string">&quot;program repeat 4 repeat 3 go right go left end right end end\\n&quot;</span><span class="token punctuation">;</span>

programs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>text<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">current:\\n </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgramNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  node<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">node = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// node.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Context<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">parse</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span>Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// primitiveCommandNode.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./node&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;primitive command&gt; ::= &lt;go&gt; | &lt;right&gt; | &lt;left&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrimitiveCommandNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&quot;go&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&quot;right&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&quot;left&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is undefined</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// programNode.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./node&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommandListNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./commandListNode&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Context<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;program&gt; ::= program &lt;command list&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ProgramNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  commandListNode<span class="token operator">:</span> Node<span class="token punctuation">;</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token operator">:</span>Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token string">&quot;program&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commandListNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commandListNode<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;[program &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commandListNode <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// repeatCommandNode.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./node&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./context&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommandListNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./commandListNode&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;repeat command&gt; ::= &quot;repeat&quot; &lt;number&gt; &quot;end&quot;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RepeatCommandNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  commandListNode<span class="token operator">:</span> CommandListNode<span class="token punctuation">;</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token string">&quot;repeat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token builtin">number</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurrentNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commandListNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commandListNode<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[repeat [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commandListNode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// StringTokenizer.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">{</span>
  <span class="token keyword">private</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> tokens<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>PS design_patern&gt; ts-node &quot;d:\\code\\design_patern\\src\\interperter\\main.ts&quot;
current:
 program end

node = [program ]
current:
 program go end

node = [program go ]
current:
 program go right go right go right end

node = [program go right go right go right ]
current:
 program repeat 4 go right end end

node = [program [repeat [4 go right ]]]
current:
 program repeat 4 repeat 3 go right go left end right end end

node = [program [repeat [4 [repeat [3 go right go left ]]right ]]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("本实例是一个控制小车的脚本语言解释器demo,文法如下， 分析方法为"),n("a",r,[s("递归下降"),i(t)])]),k])}const b=p(l,[["render",d],["__file","interpreter.html.vue"]]),y=JSON.parse('{"path":"/tech/DesignPatterns/interpreter.html","title":"Interpreter 模式","lang":"zh-CN","frontmatter":{"title":"Interpreter 模式","date":"2024-10-29T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","用类实现"],"prev":"./command","next":false,"description":"为什么使用此模式 解释器模式（Interpreter Pattern）是一种行为设计模式，它定义了一种语言的文法表示，并定义一个解释器来解释该语言中的句子。使用解释器模式的原因包括： 简化语法解析：通过定义文法规则，可以轻松解析和执行特定的语言或指令集。 可扩展性：可以轻松添加新的语法规则或指令，而无需修改现有代码。 代码复用：通过将不同的语法规则封装...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/interpreter.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Interpreter 模式"}],["meta",{"property":"og:description","content":"为什么使用此模式 解释器模式（Interpreter Pattern）是一种行为设计模式，它定义了一种语言的文法表示，并定义一个解释器来解释该语言中的句子。使用解释器模式的原因包括： 简化语法解析：通过定义文法规则，可以轻松解析和执行特定的语言或指令集。 可扩展性：可以轻松添加新的语法规则或指令，而无需修改现有代码。 代码复用：通过将不同的语法规则封装..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"用类实现"}],["meta",{"property":"article:published_time","content":"2024-10-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Interpreter 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用此模式","slug":"为什么使用此模式","link":"#为什么使用此模式","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]}],"readingTime":{"minutes":3.33,"words":998},"filePathRelative":"tech/DesignPatterns/interpreter.md","localizedDate":"2024年10月29日","excerpt":"<h2>为什么使用此模式</h2>\\n<p>解释器模式（Interpreter Pattern）是一种行为设计模式，它定义了一种语言的文法表示，并定义一个解释器来解释该语言中的句子。使用解释器模式的原因包括：</p>\\n<ol>\\n<li><strong>简化语法解析</strong>：通过定义文法规则，可以轻松解析和执行特定的语言或指令集。</li>\\n<li><strong>可扩展性</strong>：可以轻松添加新的语法规则或指令，而无需修改现有代码。</li>\\n<li><strong>代码复用</strong>：通过将不同的语法规则封装在不同的类中，可以提高代码的复用性和可维护性。</li>\\n</ol>","autoDesc":true}');export{b as comp,y as data};
