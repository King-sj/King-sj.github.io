import{_ as p,r as t,o as r,c,b as s,e as a,d as e,f as l}from"./app-DusYRG8L.js";const i={},o=s("h1",{id:"转载声明",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#转载声明"},[s("span",null,"转载声明")])],-1),b={href:"https://lotabout.me/2016/write-a-C-interpreter-6/",target:"_blank",rel:"noopener noreferrer"},d=l('<h1 id="原文内容" tabindex="-1"><a class="header-anchor" href="#原文内容"><span>原文内容</span></a></h1><h1 id="手把手教你构建-c-语言编译器-6-函数定义" tabindex="-1"><a class="header-anchor" href="#手把手教你构建-c-语言编译器-6-函数定义"><span>手把手教你构建 C 语言编译器（6）- 函数定义</span></a></h1><p>Table of Contents</p><ol><li><a href="about:blank#ebnf-%E8%A1%A8%E7%A4%BA">1. EBNF 表示</a></li><li><a href="about:blank#%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">2. 解析函数的定义</a><ol><li><a href="about:blank#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81">2.1. 函数参数与汇编代码</a></li><li><a href="about:blank#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%A3%E6%9E%90">2.2. 函数定义的解析</a></li><li><a href="about:blank#%E8%A7%A3%E6%9E%90%E5%8F%82%E6%95%B0">2.3. 解析参数</a></li><li><a href="about:blank#%E5%87%BD%E6%95%B0%E4%BD%93%E7%9A%84%E8%A7%A3%E6%9E%90">2.4. 函数体的解析</a></li></ol></li><li><a href="about:blank#%E4%BB%A3%E7%A0%81">3. 代码</a></li><li><a href="about:blank#%E5%B0%8F%E7%BB%93">4. 小结</a></li></ol><p>由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。本章讲解函数定义相关的内容。</p><p>手把手教你构建 C 语言编译器系列共有10个部分：</p>',6),h={href:"http://lotabout.me/2015/write-a-C-interpreter-0/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://lotabout.me/2015/write-a-C-interpreter-1/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://lotabout.me/2015/write-a-C-interpreter-2/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://lotabout.me/2015/write-a-C-interpreter-3/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://lotabout.me/2016/write-a-C-interpreter-4/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://lotabout.me/2016/write-a-C-interpreter-5/",target:"_blank",rel:"noopener noreferrer"},y={href:"http://lotabout.me/2016/write-a-C-interpreter-6/",target:"_blank",rel:"noopener noreferrer"},B={href:"http://lotabout.me/2016/write-a-C-interpreter-7/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://lotabout.me/2016/write-a-C-interpreter-8/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://lotabout.me/2016/write-a-C-interpreter-9/",target:"_blank",rel:"noopener noreferrer"},A=l('<h2 id="ebnf-表示" tabindex="-1"><a class="header-anchor" href="#ebnf-表示"><span><a href="about:blank#ebnf-%E8%A1%A8%E7%A4%BA"></a>EBNF 表示</span></a></h2><p>这是上一章的 EBNF 方法中与函数定义相关的内容。</p><table><tbody><tr><td class="code"><pre><span class="line">variable_decl ::= type {&#39;*&#39;} id { &#39;,&#39; {&#39;*&#39;} id } &#39;;&#39;</span><br><span class="line"></span><br><span class="line">function_decl ::= type {&#39;*&#39;} id &#39;(&#39; parameter_decl &#39;)&#39; &#39;{&#39; body_decl &#39;}&#39;</span><br><span class="line"></span><br><span class="line">parameter_decl ::= type {&#39;*&#39;} id {&#39;,&#39; type {&#39;*&#39;} id}</span><br><span class="line"></span><br><span class="line">body_decl ::= {variable_decl}, {statement}</span><br><span class="line"></span><br><span class="line">statement ::= non_empty_statement | empty_statement</span><br><span class="line"></span><br><span class="line">non_empty_statement ::= if_statement | while_statement | &#39;{&#39; statement &#39;}&#39;</span><br><span class="line">                     | &#39;return&#39; expression | expression &#39;;&#39;</span><br><span class="line"></span><br><span class="line">if_statement ::= &#39;if&#39; &#39;(&#39; expression &#39;)&#39; statement [&#39;else&#39; non_empty_statement]</span><br><span class="line"></span><br><span class="line">while_statement ::= &#39;while&#39; &#39;(&#39; expression &#39;)&#39; non_empty_statement</span><br></pre></td></tr></tbody></table><h2 id="解析函数的定义" tabindex="-1"><a class="header-anchor" href="#解析函数的定义"><span><a href="about:blank#%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89"></a>解析函数的定义</span></a></h2><p>上一章的代码中，我们已经知道了什么时候开始解析函数的定义，相关的代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (token == <span class="string">&#39;(&#39;</span>) {</span><br><span class="line">    current_id[Class] = Fun;</span><br><span class="line">    current_id[Value] = (<span class="type">int</span>)(text + <span class="number">1</span>); <span class="comment">// the memory address of function</span></span><br><span class="line">    function_declaration();</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">...</span><br></pre></td></tr></tbody></table><p>即在这断代码之前，我们已经为当前的标识符（identifier）设置了正确的类型，上面这断代码为当前的标识符设置了正确的类别（Fun），以及该函数在代码段（text segment）中的位置。接下来开始解析函数定义相关的内容：<code>parameter_decl</code> 及 <code>body_decl</code>。</p><h3 id="函数参数与汇编代码" tabindex="-1"><a class="header-anchor" href="#函数参数与汇编代码"><span><a href="about:blank#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81"></a>函数参数与汇编代码</span></a></h3><p>现在我们要回忆如何将“函数”转换成对应的汇编代码，因为这决定了在解析时我们需要哪些相关的信息。考虑下列函数：</p><table><tbody><tr><td class="code"><pre><span class="line">int demo(int param_a, int *param_b) {</span><br><span class="line">    int local_1;</span><br><span class="line">    char local_2;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><p>那么它应该被转换成什么样的汇编代码呢？在思考这个问题之前，我们需要了解当 <code>demo</code>函数被调用时，计算机的栈的状态，如下（参照第三章讲解的虚拟机）：</p><table><tbody><tr><td class="code"><pre><span class="line">|    ....       | high address</span><br><span class="line">+---------------+</span><br><span class="line">| arg: param_a  |    new_bp + 3</span><br><span class="line">+---------------+</span><br><span class="line">| arg: param_b  |    new_bp + 2</span><br><span class="line">+---------------+</span><br><span class="line">|return address |    new_bp + 1</span><br><span class="line">+---------------+</span><br><span class="line">| old BP        | &lt;- new BP</span><br><span class="line">+---------------+</span><br><span class="line">| local_1       |    new_bp - 1</span><br><span class="line">+---------------+</span><br><span class="line">| local_2       |    new_bp - 2</span><br><span class="line">+---------------+</span><br><span class="line">|    ....       |  low address</span><br></pre></td></tr></tbody></table><p>这里最为重要的一点是，无论是函数的参数（如 <code>param_a</code>）还是函数的局部变量（如 <code>local_1</code>）都是存放在计算机的 <strong>栈</strong> 上的。因此，与存放在 <strong>数据段</strong> 中的全局变量不同，在函数内访问它们是通过 <code>new_bp</code> 指针和对应的位移量进行的。因此，在解析的过程中，我们需要知道参数的个数，各个参数的位移量。</p><h3 id="函数定义的解析" tabindex="-1"><a class="header-anchor" href="#函数定义的解析"><span><a href="about:blank#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%A3%E6%9E%90"></a>函数定义的解析</span></a></h3><p>这相当于是整个函数定义的语法解析的框架，代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">function_declaration</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// type func_name (...) {...}</span></span><br><span class="line">    <span class="comment">//               | this part</span></span><br><span class="line"></span><br><span class="line">    match(<span class="string">&#39;(&#39;</span>);</span><br><span class="line">    function_parameter();</span><br><span class="line">    match(<span class="string">&#39;)&#39;</span>);</span><br><span class="line">    match(<span class="string">&#39;{&#39;</span>);</span><br><span class="line">    function_body();</span><br><span class="line">    <span class="comment">//match(&#39;}&#39;);                 //  ①</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ②</span></span><br><span class="line">    <span class="comment">// unwind local variable declarations for all local variables.</span></span><br><span class="line">    current_id = symbols;</span><br><span class="line">    <span class="keyword">while</span> (current_id[Token]) {</span><br><span class="line">        <span class="keyword">if</span> (current_id[Class] == Loc) {</span><br><span class="line">            current_id[Class] = current_id[BClass];</span><br><span class="line">            current_id[Type]  = current_id[BType];</span><br><span class="line">            current_id[Value] = current_id[BValue];</span><br><span class="line">        }</span><br><span class="line">        current_id = current_id + IdSize;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><p>其中①中我们没有消耗最后的<code>}</code>字符。这么做的原因是：<code>variable_decl</code> 与 <code>function_decl</code> 是放在一起解析的，而 <code>variable_decl</code> 是以字符 <code>;</code> 结束的。而 <code>function_decl</code> 是以字符 <code>}</code> 结束的，若在此通过 <code>match</code> 消耗了 ‘;’ 字符，那么外层的 <code>while</code> 循环就没法准确地知道函数定义已经结束。所以我们将结束符的解析放在了外层的 <code>while</code> 循环中。</p><p>而②中的代码是用于将符号表中的信息恢复成全局的信息。这是因为，局部变量是可以和全局变量同名的，一旦同名，在函数体内局部变量就会覆盖全局变量，出了函数体，全局变量就恢复了原先的作用。这段代码线性地遍历所有标识符，并将保存在 <code>BXXX</code> 中的信息还原。</p><h3 id="解析参数" tabindex="-1"><a class="header-anchor" href="#解析参数"><span><a href="about:blank#%E8%A7%A3%E6%9E%90%E5%8F%82%E6%95%B0"></a>解析参数</span></a></h3><table><tbody><tr><td class="code"><pre><span class="line">parameter_decl ::= type {&#39;*&#39;} id {&#39;,&#39; type {&#39;*&#39;} id}</span><br></pre></td></tr></tbody></table><p>解析函数的参数就是解析以逗号分隔的一个个标识符，同时记录它们的位置与类型。</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> index_of_bp; <span class="comment">// index of bp pointer on stack</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">function_parameter</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">    <span class="type">int</span> params;</span><br><span class="line">    params = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (token != <span class="string">&#39;)&#39;</span>) {</span><br><span class="line">        <span class="comment">// ①</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// int name, ...</span></span><br><span class="line">        type = INT;</span><br><span class="line">        <span class="keyword">if</span> (token == Int) {</span><br><span class="line">            match(Int);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token == Char) {</span><br><span class="line">            type = CHAR;</span><br><span class="line">            match(Char);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pointer type</span></span><br><span class="line">        <span class="keyword">while</span> (token == Mul) {</span><br><span class="line">            match(Mul);</span><br><span class="line">            type = type + PTR;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// parameter name</span></span><br><span class="line">        <span class="keyword">if</span> (token != Id) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: bad parameter declaration\\n&quot;</span>, line);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (current_id[Class] == Loc) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: duplicate parameter declaration\\n&quot;</span>, line);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        match(Id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        <span class="comment">// store the local variable</span></span><br><span class="line">        current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;</span><br><span class="line">        current_id[BType]  = current_id[Type];  current_id[Type]   = type;</span><br><span class="line">        current_id[BValue] = current_id[Value]; current_id[Value]  = params++;   <span class="comment">// index of current parameter</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="string">&#39;,&#39;</span>) {</span><br><span class="line">            match(<span class="string">&#39;,&#39;</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ③</span></span><br><span class="line">    index_of_bp = params+<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><p>其中①与全局变量定义的解析十分一样，用于解析该参数的类型。</p><p>而②则与上节中提到的“局部变量覆盖全局变量”相关，先将全局变量的信息保存（无论是是否真的在全局中用到了这个变量）在 <code>BXXX</code> 中，再赋上局部变量相关的信息，如 <code>Value</code> 中存放的是参数的位置（是第几个参数）。</p><p>③则与汇编代码的生成有关，<code>index_of_bp</code> 就是前文提到的 <code>new_bp</code> 的位置。</p><h3 id="函数体的解析" tabindex="-1"><a class="header-anchor" href="#函数体的解析"><span><a href="about:blank#%E5%87%BD%E6%95%B0%E4%BD%93%E7%9A%84%E8%A7%A3%E6%9E%90"></a>函数体的解析</span></a></h3><p>我们实现的 C 语言与现代的 C 语言不太一致，我们需要所有的变量定义出现在所有的语句之前。函数体的代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">function_body</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// type func_name (...) {...}</span></span><br><span class="line">    <span class="comment">//                   --&gt;|   |&lt;--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... {</span></span><br><span class="line">    <span class="comment">// 1. local declarations</span></span><br><span class="line">    <span class="comment">// 2. statements</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pos_local; <span class="comment">// position of local variables on the stack.</span></span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">    pos_local = index_of_bp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">while</span> (token == Int || token == Char) {</span><br><span class="line">        <span class="comment">// local variable declaration, just like global ones.</span></span><br><span class="line">        basetype = (token == Int) ? INT : CHAR;</span><br><span class="line">        match(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (token != <span class="string">&#39;;&#39;</span>) {</span><br><span class="line">            type = basetype;</span><br><span class="line">            <span class="keyword">while</span> (token == Mul) {</span><br><span class="line">                match(Mul);</span><br><span class="line">                type = type + PTR;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (token != Id) {</span><br><span class="line">                <span class="comment">// invalid declaration</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d: bad local declaration\\n&quot;</span>, line);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (current_id[Class] == Loc) {</span><br><span class="line">                <span class="comment">// identifier exists</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d: duplicate local declaration\\n&quot;</span>, line);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            }</span><br><span class="line">            match(Id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// store the local variable</span></span><br><span class="line">            current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;</span><br><span class="line">            current_id[BType]  = current_id[Type];  current_id[Type]   = type;</span><br><span class="line">            current_id[BValue] = current_id[Value]; current_id[Value]  = ++pos_local;   <span class="comment">// index of current parameter</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (token == <span class="string">&#39;,&#39;</span>) {</span><br><span class="line">                match(<span class="string">&#39;,&#39;</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        match(<span class="string">&#39;;&#39;</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ②</span></span><br><span class="line">    <span class="comment">// save the stack size for local variables</span></span><br><span class="line">    *++text = ENT;</span><br><span class="line">    *++text = pos_local - index_of_bp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// statements</span></span><br><span class="line">    <span class="keyword">while</span> (token != <span class="string">&#39;}&#39;</span>) {</span><br><span class="line">        statement();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// emit code for leaving the sub function</span></span><br><span class="line">    *++text = LEV;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><p>其中①用于解析函数体内的局部变量的定义，代码与全局的变量定义几乎一样。</p><p>而②则用于生成汇编代码，我们在第三章的虚拟机中提到过，我们需要在栈上为局部变量预留空间，这两行代码起的就是这个作用。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span><a href="about:blank#%E4%BB%A3%E7%A0%81"></a>代码</span></a></h2>',31),C={href:"https://github.com/lotabout/write-a-C-interpreter/tree/step-4",target:"_blank",rel:"noopener noreferrer"},w=l('<table><tbody><tr><td class="code"><pre><span class="line">git clone -b step-4 https://github.com/lotabout/write-a-C-interpreter</span><br></pre></td></tr></tbody></table><p>本章的代码依旧无法运行，还有两个重要函数没有完成：<code>statement</code> 及 <code>expression</code>，感兴趣的话可以尝试自己实现它们。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span><a href="about:blank#%E5%B0%8F%E7%BB%93"></a>小结</span></a></h2><p>本章中我们用了不多的代码完成了函数定义的解析。大部分的代码依旧是用于解析变量：参数和局部变量，而它们的逻辑和全局变量的解析几乎一致，最大的区别就是保存的信息不同。</p><p>当然，要理解函数定义的解析过程，最重要的是理解我们会为函数生成怎样的汇编代码，因为这决定了我们需要从解析中获取什么样的信息（例如参数的位置，个数等），而这些可能需要你重新回顾一下“虚拟机”这一章，或是重新学习学习汇编相关的知识。</p><p>下一章中我们将讲解语句的解析，敬请期待。</p>',6);function x(v,T){const n=t("ExternalLinkIcon");return r(),c("div",null,[o,s("p",null,[a("本文转自 "),s("a",b,[a("https://lotabout.me/2016/write-a-C-interpreter-6/"),e(n)]),a("，如有侵权，请联系删除。")]),d,s("ol",null,[s("li",null,[s("a",h,[a("手把手教你构建 C 语言编译器（0）——前言"),e(n)])]),s("li",null,[s("a",m,[a("手把手教你构建 C 语言编译器（1）——设计"),e(n)])]),s("li",null,[s("a",u,[a("手把手教你构建 C 语言编译器（2）——虚拟机"),e(n)])]),s("li",null,[s("a",_,[a("手把手教你构建 C 语言编译器（3）——词法分析器"),e(n)])]),s("li",null,[s("a",E,[a("手把手教你构建 C 语言编译器（4）——递归下降"),e(n)])]),s("li",null,[s("a",f,[a("手把手教你构建 C 语言编译器（5）——变量定义"),e(n)])]),s("li",null,[s("a",y,[a("手把手教你构建 C 语言编译器（6）——函数定义"),e(n)])]),s("li",null,[s("a",B,[a("手把手教你构建 C 语言编译器（7）——语句"),e(n)])]),s("li",null,[s("a",k,[a("手把手教你构建 C 语言编译器（8）——表达式"),e(n)])]),s("li",null,[s("a",g,[a("手把手教你构建 C 语言编译器（9）——总结"),e(n)])])]),A,s("p",null,[a("本章的代码可以在 "),s("a",C,[a("Github"),e(n)]),a(" 上下载，也可以直接 clone")]),w])}const N=p(i,[["render",x],["__file","6.html.vue"]]),D=JSON.parse('{"path":"/tech/designASimpileCCompiler/6.html","title":"手把手教你构建 C 语言编译器（6）——函数定义","lang":"zh-CN","frontmatter":{"title":"手把手教你构建 C 语言编译器（6）——函数定义","category":["编译原理"],"tag":["c","编译器","解释器"],"description":"转载声明 本文转自 https://lotabout.me/2016/write-a-C-interpreter-6/，如有侵权，请联系删除。 原文内容 手把手教你构建 C 语言编译器（6）- 函数定义 Table of Contents 1. EBNF 表示 2. 解析函数的定义 2.1. 函数参数与汇编代码 2.2. 函数定义的解析 2.3. 解析...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/designASimpileCCompiler/6.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"手把手教你构建 C 语言编译器（6）——函数定义"}],["meta",{"property":"og:description","content":"转载声明 本文转自 https://lotabout.me/2016/write-a-C-interpreter-6/，如有侵权，请联系删除。 原文内容 手把手教你构建 C 语言编译器（6）- 函数定义 Table of Contents 1. EBNF 表示 2. 解析函数的定义 2.1. 函数参数与汇编代码 2.2. 函数定义的解析 2.3. 解析..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"编译器"}],["meta",{"property":"article:tag","content":"解释器"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手把手教你构建 C 语言编译器（6）——函数定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"EBNF 表示","slug":"ebnf-表示","link":"#ebnf-表示","children":[]},{"level":2,"title":"解析函数的定义","slug":"解析函数的定义","link":"#解析函数的定义","children":[{"level":3,"title":"函数参数与汇编代码","slug":"函数参数与汇编代码","link":"#函数参数与汇编代码","children":[]},{"level":3,"title":"函数定义的解析","slug":"函数定义的解析","link":"#函数定义的解析","children":[]},{"level":3,"title":"解析参数","slug":"解析参数","link":"#解析参数","children":[]},{"level":3,"title":"函数体的解析","slug":"函数体的解析","link":"#函数体的解析","children":[]}]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"readingTime":{"minutes":12.61,"words":3783},"filePathRelative":"tech/designASimpileCCompiler/6.md","excerpt":"\\n<p>本文转自 <a href=\\"https://lotabout.me/2016/write-a-C-interpreter-6/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://lotabout.me/2016/write-a-C-interpreter-6/</a>，如有侵权，请联系删除。</p>\\n<h1>原文内容</h1>\\n<h1>手把手教你构建 C 语言编译器（6）- 函数定义</h1>\\n<p>Table of Contents</p>\\n<ol>\\n<li><a href=\\"about:blank#ebnf-%E8%A1%A8%E7%A4%BA\\">1. EBNF 表示</a></li>\\n<li><a href=\\"about:blank#%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\\">2. 解析函数的定义</a>\\n<ol>\\n<li><a href=\\"about:blank#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81\\">2.1. 函数参数与汇编代码</a></li>\\n<li><a href=\\"about:blank#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%A3%E6%9E%90\\">2.2. 函数定义的解析</a></li>\\n<li><a href=\\"about:blank#%E8%A7%A3%E6%9E%90%E5%8F%82%E6%95%B0\\">2.3. 解析参数</a></li>\\n<li><a href=\\"about:blank#%E5%87%BD%E6%95%B0%E4%BD%93%E7%9A%84%E8%A7%A3%E6%9E%90\\">2.4. 函数体的解析</a></li>\\n</ol>\\n</li>\\n<li><a href=\\"about:blank#%E4%BB%A3%E7%A0%81\\">3. 代码</a></li>\\n<li><a href=\\"about:blank#%E5%B0%8F%E7%BB%93\\">4. 小结</a></li>\\n</ol>","autoDesc":true}');export{N as comp,D as data};
