import{_ as n,o as s,c as a,a as t,b as p,f as o}from"./app-ByePDVBg.js";const e={},c=p("p",null,"在 Visitor 模式中，数据结构与处理被分离开来。我们编写一个表示“访问者”的类来访问数据结构中的元素，并把对各元素的处理交给访问者类。这样，当需要增加新的处理时，我们只需要编写新的访问者，然后让数据结构可以接受访问者的访问即可。",-1),i=o(`<h3 id="为什么使用-visitor-模式" tabindex="-1"><a class="header-anchor" href="#为什么使用-visitor-模式"><span>为什么使用 Visitor 模式？</span></a></h3><ol><li><strong>分离关注点</strong>：将数据结构与操作分离，使得代码更清晰、更易维护。</li><li><strong>增加新操作更容易</strong>：只需添加新的访问者类，而不需要修改现有的数据结构。</li><li><strong>符合开闭原则</strong>：对扩展开放，对修改关闭。</li></ol><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/fPCnRiCm34LtdOAZWq8Ny51aQ3eLNG9aAJeeCXiGiEH0eeCcGUzUIh9JkqEQe9E5J_7nVq9UHZQ1UzSgyepXmrY4LOiEFSDP0JmOQt7FrO4YSHTgs9J3eeP3HutwKifi8mTZ6MnhOeILvt04Slj2YNFS3ldLEAoaNxh8xmPnJQSi-jvjCUJ1JLDXOjK5kHY-gKPYrOYBQXJVtfFCtJepv_I_4nJZpzGYu2UZRyOKoRBsudV2qr6iJetU4Ub69qyKq4hXU8kTXi9i2V_Qy6NobItV_IA62-K1vBRVO-VnNoZos3CkOChGjWz123dvJyQhvB90hHylf1fA43KAgLYkILlIr596ow_n3G00" alt=""><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfCBialKd3EoKpDA-62K0gwTWekcKMf89bA1Ik5n9GK3Q1mKQMLWYk8qiIbBZavjQ14eoopE1CeOgKG1c5eSY4K0NNuP1QNG6M0Ui2AqKn7Le5cHMP9Qb4YaAs1PgXRPaugFXUW6GbLZiroXzIy562u0000" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// directory.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entry&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Visitor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./visitor&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> dir<span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      size <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token operator">:</span> Entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span>Visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// element.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Visitor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./visitor&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
  <span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span> Visitor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// entry.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Element <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./element&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Visitor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./visitor&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token operator">:</span> Entry<span class="token punctuation">)</span><span class="token operator">:</span> Entry <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Entry.add not implemented&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Entry.iterator not implemented&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">abstract</span> <span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span> Visitor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// file.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Visitor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./visitor&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entry&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">private</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span> Visitor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// listVisitor.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Visitor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./visitor&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./file&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Directory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./directory&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entry&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ListVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> currentdir <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token function">visit</span><span class="token punctuation">(</span>entry<span class="token operator">:</span>Entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token keyword">instanceof</span> <span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entry<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token keyword">instanceof</span> <span class="token class-name">Directory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entry<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> savedir <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentdir <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> it<span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentdir <span class="token operator">=</span> savedir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Directory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./directory&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./file&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ListVisitor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./listVisitor&quot;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Making root entries...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rootdir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bindir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;bin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tmpdir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;tmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> usrdir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;usr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bindir<span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>usrdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
bindir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;vi&quot;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bindir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;latex&quot;</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Making user entries...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> yuki <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;yuki&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hanako <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;hanako&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tomura <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;tomura&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>yuki<span class="token punctuation">)</span><span class="token punctuation">;</span>
usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hanako<span class="token punctuation">)</span><span class="token punctuation">;</span>
usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tomura<span class="token punctuation">)</span><span class="token punctuation">;</span>
yuki<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;diary.html&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
yuki<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;Composite.java&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hanako<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;memo.tex&quot;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tomura<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;game.doc&quot;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tomura<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;junk.mail&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootdir<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// visitor.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./entry&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">visit</span><span class="token punctuation">(</span>file<span class="token operator">:</span>Entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src<span class="token entity" title="\\v">\\v</span>isitor\\main.ts&quot;</span>
Making root entries<span class="token punctuation">..</span>.
/root <span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span>
/root/bin <span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span>
/root/bin/vi <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
/root/bin/latex <span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>
/root/tmp <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
/root/usr <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
Making user entries<span class="token punctuation">..</span>.
/root <span class="token punctuation">(</span><span class="token number">31500</span><span class="token punctuation">)</span>
/root/bin <span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span>
/root/bin/vi <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
/root/bin/latex <span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>
/root/tmp <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
/root/usr <span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>
/root/usr/yuki <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
/root/usr/yuki/diary.html <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
/root/usr/yuki/Composite.java <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
/root/usr/hanako <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
/root/usr/hanako/memo.tex <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
/root/usr/tomura <span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span>
/root/usr/tomura/game.doc <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
/root/usr/tomura/junk.mail <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="双重分发" tabindex="-1"><a class="header-anchor" href="#双重分发"><span>双重分发</span></a></h3><p>我们来整理一下 Visitor 模式中的方法调用关系。<code>accept</code>（接收）方法的调用方式如下：<code>element.accept(visitor)</code>；而 <code>visit</code>（访问）方法的调用方式如下：<code>visitor.visit(element)</code>。对比这两个方法会发现，它们呈现出一种相反的关系。<code>element</code> 接收 <code>visitor</code>，而 <code>visitor</code> 又访问 <code>element</code>。在 Visitor 模式中，<code>ConcreteElement</code> 和 <code>ConcreteVisitor</code> 这两个角色共同决定了实际进行的处理。这种消息分发的方式一般被称为双重分发（double dispatch）。</p><h3 id="为什么要这么复杂" tabindex="-1"><a class="header-anchor" href="#为什么要这么复杂"><span>为什么要这么复杂</span></a></h3><p>Visitor 模式的目的是将处理逻辑从数据结构中分离出来。数据结构很重要，它能够将元素集合及其关联关系组织在一起。但是，需要注意的是，保存数据结构与基于数据结构进行处理是两种不同的概念。在示例程序中，我们创建了 <code>ListVisitor</code> 类作为显示文件夹内容的 <code>ConcreteVisitor</code> 角色。此外，在练习题中，我们还要编写进行其他处理的 <code>ConcreteVisitor</code> 角色。通常，<code>ConcreteVisitor</code> 角色的开发可以独立于 <code>File</code> 类和 <code>Directory</code> 类。也就是说，Visitor 模式提高了 <code>File</code> 类和 <code>Directory</code> 类作为组件的独立性。如果将处理逻辑的方法定义在 <code>File</code> 类和 <code>Directory</code> 类中，那么每次要扩展功能，增加新的“处理”时，就不得不去修改这些类。</p><h3 id="开闭原则——对扩展开放-对修改关闭" tabindex="-1"><a class="header-anchor" href="#开闭原则——对扩展开放-对修改关闭"><span>开闭原则——对扩展开放，对修改关闭</span></a></h3><p>在设计类时，若无特殊理由，必须要考虑到将来可能会扩展类。绝不能毫无理由地禁止扩展类。这就是“对扩展是开放的”的意思。但是，如果在每次扩展类时都需要修改现有的类就太麻烦了。所以我们需要在不修改现有类的前提下能够扩展类，这就是“对修改是关闭的”的意思。我们提倡扩展，但如果需要修改现有代码，那就不行了。在不修改现有代码的前提下进行扩展，这就是开闭原则。至此，大家已经学习了多种设计模式。那么在看到这条设计原则后，大家应该都会点头表示赞同吧。功能需求总是在不断变化，而且这些功能需求大都是“希望扩展某个功能”。因此，如果不能比较容易地扩展类，开发过程将会变得非常困难。另一方面，如果要修改已经编写和测试完成的类，又可能会导致软件产品的质量降低。对扩展开放、对修改关闭的类具有高可复用性，可作为组件复用。设计模式和面向对象的目的正是为我们提供一种结构，可以帮助我们设计出这样的类。</p><h3 id="易于增加-concretevisitor-角色" tabindex="-1"><a class="header-anchor" href="#易于增加-concretevisitor-角色"><span>易于增加 ConcreteVisitor 角色</span></a></h3><p>使用 Visitor 模式可以很容易地增加 <code>ConcreteVisitor</code> 角色。因为具体的处理被交给 <code>ConcreteVisitor</code> 角色负责，因此完全不用修改 <code>ConcreteElement</code> 角色。</p><h3 id="难以增加-concreteelement-角色" tabindex="-1"><a class="header-anchor" href="#难以增加-concreteelement-角色"><span>难以增加 ConcreteElement 角色</span></a></h3><p>尽管使用 Visitor 模式可以很容易地增加 <code>ConcreteVisitor</code> 角色，但它却难以应对 <code>ConcreteElement</code> 角色的增加。例如，假设现在我们要在示例程序中增加一个 <code>Device</code> 类，它是 <code>File</code> 类和 <code>Directory</code> 类的兄弟类。这时，我们不得不在 Visitor 类中声明一个 <code>visit(Device)</code> 方法，并在所有的 Visitor 类的子类中都实现这个方法。</p><h3 id="visitor-工作所需的条件" tabindex="-1"><a class="header-anchor" href="#visitor-工作所需的条件"><span>Visitor 工作所需的条件</span></a></h3><p>在 Visitor 模式中，对数据结构中的元素进行处理的任务被分离出来，交给 Visitor 类负责。这样，就实现了数据结构与处理的分离。这个主题，我们在本章的学习过程中已经提到过很多次了。但是要达到这个目的是有条件的，那就是 Element 角色必须向 Visitor 角色公开足够多的信息。例如，在示例程序中，<code>visit(Directory)</code> 方法需要调用每个目录条目的 <code>accept</code> 方法。为此，<code>Directory</code> 类必须提供用于获取每个目录条目的 <code>iterator</code> 方法。只有当访问者从数据结构中获取了足够多的信息后才能工作。如果无法获取到这些信息，它就无法工作。这样做的缺点是，如果公开了不应当被公开的信息，将来对数据结构的改良就会变得非常困难。</p><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Iterator 模式</li><li>Composite 模式</li><li>Interpreter 模式</li></ul>`,23);function l(u,r){return s(),a("div",null,[c,t(" more "),i])}const d=n(e,[["render",l],["__file","visitor.html.vue"]]),v=JSON.parse('{"path":"/tech/DesignPatterns/visitor.html","title":"Visitor 模式","lang":"zh-CN","frontmatter":{"title":"Visitor 模式","date":"2024-10-25T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","访问数据结构并处理数据"],"prev":"./decorator","next":"./chainOfResponsibility","description":"在 Visitor 模式中，数据结构与处理被分离开来。我们编写一个表示“访问者”的类来访问数据结构中的元素，并把对各元素的处理交给访问者类。这样，当需要增加新的处理时，我们只需要编写新的访问者，然后让数据结构可以接受访问者的访问即可。","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/visitor.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Visitor 模式"}],["meta",{"property":"og:description","content":"在 Visitor 模式中，数据结构与处理被分离开来。我们编写一个表示“访问者”的类来访问数据结构中的元素，并把对各元素的处理交给访问者类。这样，当需要增加新的处理时，我们只需要编写新的访问者，然后让数据结构可以接受访问者的访问即可。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"访问数据结构并处理数据"}],["meta",{"property":"article:published_time","content":"2024-10-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Visitor 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":3,"title":"为什么使用 Visitor 模式？","slug":"为什么使用-visitor-模式","link":"#为什么使用-visitor-模式","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"双重分发","slug":"双重分发","link":"#双重分发","children":[]},{"level":3,"title":"为什么要这么复杂","slug":"为什么要这么复杂","link":"#为什么要这么复杂","children":[]},{"level":3,"title":"开闭原则——对扩展开放，对修改关闭","slug":"开闭原则——对扩展开放-对修改关闭","link":"#开闭原则——对扩展开放-对修改关闭","children":[]},{"level":3,"title":"易于增加 ConcreteVisitor 角色","slug":"易于增加-concretevisitor-角色","link":"#易于增加-concretevisitor-角色","children":[]},{"level":3,"title":"难以增加 ConcreteElement 角色","slug":"难以增加-concreteelement-角色","link":"#难以增加-concreteelement-角色","children":[]},{"level":3,"title":"Visitor 工作所需的条件","slug":"visitor-工作所需的条件","link":"#visitor-工作所需的条件","children":[]}]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":6.29,"words":1888},"filePathRelative":"tech/DesignPatterns/visitor.md","localizedDate":"2024年10月25日","excerpt":"<p>在 Visitor 模式中，数据结构与处理被分离开来。我们编写一个表示“访问者”的类来访问数据结构中的元素，并把对各元素的处理交给访问者类。这样，当需要增加新的处理时，我们只需要编写新的访问者，然后让数据结构可以接受访问者的访问即可。</p>\\n","autoDesc":true}');export{d as comp,v as data};
