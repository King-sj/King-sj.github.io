import{_ as p,r as o,o as e,c,b as n,e as a,d as t,f as l}from"./app-DkfD2H4x.js";const i={},u=l(`<h1 id="c-实现-lambda-重载模式" tabindex="-1"><a class="header-anchor" href="#c-实现-lambda-重载模式"><span>C++ 实现 lambda 重载模式</span></a></h1><p>C++17 引入了结构化绑定和模板参数包展开，使得我们可以优雅地实现 lambda 重载模式。该模式常用于 <code>std::visit</code> 等需要对多种类型进行分派的场景。</p><h2 id="_1-原理与实现" tabindex="-1"><a class="header-anchor" href="#_1-原理与实现"><span>1. 原理与实现</span></a></h2><p>核心代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 定义一个模板结构体，将多个 lambda 继承并展开 operator()</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">overloaded</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Ts</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name">Ts</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">&gt;</span> <span class="token function">overloaded</span><span class="token punctuation">(</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> overloaded<span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>overloaded</code> 结构体通过多重继承，将所有 lambda 的 <code>operator()</code> 合并。</li><li><code>using Ts::operator()...;</code> 展开所有基类的调用运算符，实现多态调用。</li><li>最后一个模板推导指引，方便直接用花括号初始化。</li></ul><h2 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例"><span>2. 使用示例</span></a></h2><p>以 <code>std::variant</code> 为例，结合 <code>std::visit</code> 实现多类型分派：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;A: &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> A<span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> print <span class="token operator">=</span> overloaded<span class="token punctuation">{</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;int: &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;double: &quot;</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;string: &quot;</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;A: &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;unknown type: &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span>print<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

  v <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span>print<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

  v <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span>print<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

  v <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span>print<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
输出：
int: 42
double: 3.14
string: Hello, world!
A: 42
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-应用场景"><span>3. 应用场景</span></a></h2><ul><li><code>std::visit</code> 处理 <code>std::variant</code> 多类型分派</li><li>事件分发、AST 访问器等需要多重重载的场景</li></ul><h2 id="_4-参考资料" tabindex="-1"><a class="header-anchor" href="#_4-参考资料"><span>4. 参考资料</span></a></h2>`,12),r={href:"https://en.cppreference.com/w/cpp/utility/variant/visit",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zh.cppreference.com/w/cpp/language/parameter_pack",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/qq_36387683/article/details/108893964",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=o("ExternalLinkIcon");return e(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("cppreference: std::visit"),t(s)])]),n("li",null,[n("a",k,[a("C++17 新特性：模板参数包展开"),t(s)])]),n("li",null,[n("a",d,[a("C++ lambda 重载模式实践"),t(s)])])])])}const g=p(i,[["render",v],["__file","lambda.html.vue"]]),y=JSON.parse('{"path":"/tech/lambda.html","title":"C++ 实现 lambda 重载模式","lang":"zh-CN","frontmatter":{"category":"C++","tags":["C++17","lambda","std::visit","模板元编程"],"title":"C++ 实现 lambda 重载模式","summary":"介绍如何在 C++17 中通过模板实现 lambda 重载模式，适配 std::visit 等场景，附详细示例与解析。","description":"C++ 实现 lambda 重载模式 C++17 引入了结构化绑定和模板参数包展开，使得我们可以优雅地实现 lambda 重载模式。该模式常用于 std::visit 等需要对多种类型进行分派的场景。 1. 原理与实现 核心代码如下： overloaded 结构体通过多重继承，将所有 lambda 的 operator() 合并。 using Ts::...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/lambda.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"C++ 实现 lambda 重载模式"}],["meta",{"property":"og:description","content":"C++ 实现 lambda 重载模式 C++17 引入了结构化绑定和模板参数包展开，使得我们可以优雅地实现 lambda 重载模式。该模式常用于 std::visit 等需要对多种类型进行分派的场景。 1. 原理与实现 核心代码如下： overloaded 结构体通过多重继承，将所有 lambda 的 operator() 合并。 using Ts::..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"C++17"}],["meta",{"property":"article:tag","content":"lambda"}],["meta",{"property":"article:tag","content":"std::visit"}],["meta",{"property":"article:tag","content":"模板元编程"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++ 实现 lambda 重载模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"1. 原理与实现","slug":"_1-原理与实现","link":"#_1-原理与实现","children":[]},{"level":2,"title":"2. 使用示例","slug":"_2-使用示例","link":"#_2-使用示例","children":[]},{"level":2,"title":"3. 应用场景","slug":"_3-应用场景","link":"#_3-应用场景","children":[]},{"level":2,"title":"4. 参考资料","slug":"_4-参考资料","link":"#_4-参考资料","children":[]}],"readingTime":{"minutes":1.48,"words":445},"filePathRelative":"tech/lambda.md","excerpt":"\\n<p>C++17 引入了结构化绑定和模板参数包展开，使得我们可以优雅地实现 lambda 重载模式。该模式常用于 <code>std::visit</code> 等需要对多种类型进行分派的场景。</p>\\n<h2>1. 原理与实现</h2>\\n<p>核心代码如下：</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// 定义一个模板结构体，将多个 lambda 继承并展开 operator()</span>\\n<span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> Ts<span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">overloaded</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token class-name\\">Ts</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">using</span> <span class=\\"token class-name\\">Ts</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token keyword\\">operator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">template</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> Ts<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">overloaded</span><span class=\\"token punctuation\\">(</span>Ts<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> overloaded<span class=\\"token operator\\">&lt;</span>Ts<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,y as data};
