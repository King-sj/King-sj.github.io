import{_ as n,o as s,c as a,f as t}from"./app-B4LGNJZ0.js";const p={},e=t(`<h2 id="为什么使用此模式" tabindex="-1"><a class="header-anchor" href="#为什么使用此模式"><span>为什么使用此模式</span></a></h2><p>Command 模式将请求封装成对象，使得可以用不同的请求、队列或者日志来参数化其他对象。Command 模式也支持可撤销的操作。</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/bL992i8m5Dtt55bMj1VeGWfrwmd4nM_ofOKCag6sY7St7Va5kt2NzwStaC9vi3uecJJQetq0HrOQfK0BzauOEsA7F7XC3pbhJIEIJq8cBnPUK4cSHaL4QPSp7LI5ziJwvKbskGJdnhqIT0kEDUefKQ7sRdijgnldZOqthi2jcJKDD4-80bOz__FExWWnDPojXmRGKy2ZufnetubdegAgTxdu15o-b6_tqM5mTJhtrXOn7BGmD00k4Imj_5158i-oypPK6ilG91OBr2B-ZYy0" alt=""><img src="https://www.plantuml.com/plantuml/svg/RP512eGm34NtFKLmLS6vm2m6mTdE8K9RiA2nj75qRZ_51gpWBltvUVz3-yGOUPqdXOQN2CFa7R4AMVJ61oI6vXrn6v2-c1h01EOOhvOFchWCopmZsSCq-fHnlnjGPJ9bLggamkCby2UGs-3CrO9hAwT8nLhdwzeb4HLGJ2MeWxs3UsnOqwZblBrf6D0JvwpolfowtPcLNLwAT6boRaMggJPNrALJxyZcZ_a3" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// command.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// drawable.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Drawable</span> <span class="token punctuation">{</span>
  <span class="token function">draw</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// drawCanvas.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Drawable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./drawable&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MacroCommand <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./macroCommand&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DrawCanvas</span> <span class="token keyword">implements</span> <span class="token class-name">Drawable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> history<span class="token operator">:</span> MacroCommand<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>history<span class="token operator">:</span> MacroCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> history<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">draw</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Drawing at (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// drawCommand.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./command&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DrawCanvas <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./drawCanvas&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DrawCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> canv<span class="token operator">:</span> DrawCanvas<span class="token punctuation">,</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>canv<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// macroCommand.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./command&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MacroCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> commands<span class="token operator">:</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">push</span><span class="token punctuation">(</span>command<span class="token operator">:</span> Command<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DrawCanvas <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./drawCanvas&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MacroCommand <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./macroCommand&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DrawCommand <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./drawCommand&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawCanvas</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawCommand</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
canvas<span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS design_patern<span class="token operator">&gt;</span> ts-node <span class="token string">&quot;d:<span class="token entity" title="\\c">\\c</span>ode\\design_patern\\src<span class="token entity" title="\\c">\\c</span>ommand\\main.ts&quot;</span>
Drawing at <span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">1</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">2</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">3</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">4</span>, <span class="token number">4</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">5</span>, <span class="token number">5</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">6</span>, <span class="token number">6</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">7</span>, <span class="token number">7</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">8</span>, <span class="token number">8</span><span class="token punctuation">)</span>
Drawing at <span class="token punctuation">(</span><span class="token number">9</span>, <span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="命令中应该包含哪些信息" tabindex="-1"><a class="header-anchor" href="#命令中应该包含哪些信息"><span>命令中应该包含哪些信息</span></a></h3><p>在命令模式中，命令对象通常包含以下信息：</p><ul><li><strong>接收者（Receiver）</strong>：执行命令的对象。接收者包含了执行具体操作的逻辑。</li><li><strong>动作（Action）</strong>：要执行的具体操作。命令对象将动作封装为一个方法调用。</li><li><strong>参数（Parameters）</strong>：执行操作所需的参数。命令对象可以包含执行操作所需的所有参数。</li><li><strong>状态（State）</strong>：命令执行前后的状态信息。命令对象可以保存执行前的状态，以便在需要时进行撤销操作。</li></ul><p>通过将这些信息封装在命令对象中，可以实现命令的参数化和可撤销性，从而提高系统的灵活性和可维护性。</p><h3 id="保存历史记录" tabindex="-1"><a class="header-anchor" href="#保存历史记录"><span>保存历史记录</span></a></h3><p>命令模式的一个重要应用是保存历史记录，以支持撤销和重做操作。通过将每个执行的命令对象保存到一个历史记录列表中，可以在需要时回滚到之前的状态。以下是实现保存历史记录的一些常见方法：</p><ul><li><strong>命令栈（Command Stack）</strong>：使用栈数据结构保存执行的命令对象。每次执行命令时，将命令对象压入栈中；每次撤销操作时，从栈中弹出命令对象并执行撤销操作。</li><li><strong>命令队列（Command Queue）</strong>：使用队列数据结构保存执行的命令对象。适用于需要按顺序执行和撤销命令的场景。</li><li><strong>快照（Snapshot）</strong>：在执行命令前保存对象的快照，以便在需要时恢复到之前的状态。适用于需要保存复杂对象状态的场景。</li></ul><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Composite 模式</li><li>Memento 模式</li><li>Prototype 模式</li></ul>`,18),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","command.html.vue"]]),k=JSON.parse('{"path":"/tech/DesignPatterns/command.html","title":"Command 模式","lang":"zh-CN","frontmatter":{"title":"Command 模式","date":"2024-10-29T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","用类实现"],"prev":"./proxy","next":"./interpreter","description":"为什么使用此模式 Command 模式将请求封装成对象，使得可以用不同的请求、队列或者日志来参数化其他对象。Command 模式也支持可撤销的操作。 示例代码 运行结果 拓展思路的要点 命令中应该包含哪些信息 在命令模式中，命令对象通常包含以下信息： 接收者（Receiver）：执行命令的对象。接收者包含了执行具体操作的逻辑。 动作（Action）：要...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/command.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Command 模式"}],["meta",{"property":"og:description","content":"为什么使用此模式 Command 模式将请求封装成对象，使得可以用不同的请求、队列或者日志来参数化其他对象。Command 模式也支持可撤销的操作。 示例代码 运行结果 拓展思路的要点 命令中应该包含哪些信息 在命令模式中，命令对象通常包含以下信息： 接收者（Receiver）：执行命令的对象。接收者包含了执行具体操作的逻辑。 动作（Action）：要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"用类实现"}],["meta",{"property":"article:published_time","content":"2024-10-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Command 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用此模式","slug":"为什么使用此模式","link":"#为什么使用此模式","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"命令中应该包含哪些信息","slug":"命令中应该包含哪些信息","link":"#命令中应该包含哪些信息","children":[]},{"level":3,"title":"保存历史记录","slug":"保存历史记录","link":"#保存历史记录","children":[]}]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":2.91,"words":874},"filePathRelative":"tech/DesignPatterns/command.md","localizedDate":"2024年10月29日","excerpt":"<h2>为什么使用此模式</h2>\\n<p>Command 模式将请求封装成对象，使得可以用不同的请求、队列或者日志来参数化其他对象。Command 模式也支持可撤销的操作。</p>\\n<h2>示例代码</h2>\\n<img src=\\"https://www.plantuml.com/plantuml/svg/bL992i8m5Dtt55bMj1VeGWfrwmd4nM_ofOKCag6sY7St7Va5kt2NzwStaC9vi3uecJJQetq0HrOQfK0BzauOEsA7F7XC3pbhJIEIJq8cBnPUK4cSHaL4QPSp7LI5ziJwvKbskGJdnhqIT0kEDUefKQ7sRdijgnldZOqthi2jcJKDD4-80bOz__FExWWnDPojXmRGKy2ZufnetubdegAgTxdu15o-b6_tqM5mTJhtrXOn7BGmD00k4Imj_5158i-oypPK6ilG91OBr2B-ZYy0\\" alt=\\"\\">","autoDesc":true}');export{r as comp,k as data};
