import{_ as n,o as s,c as a,f as t}from"./app-DkfD2H4x.js";const p={},e=t(`<h1 id="python-asyncio" tabindex="-1"><a class="header-anchor" href="#python-asyncio"><span>Python asyncio</span></a></h1><p><code>asyncio</code> 是 Python 用于编写并发代码的库。它使用 <code>async</code>/<code>await</code> 语法，使得编写异步程序变得更加直观和简单。<code>asyncio</code> 主要用于 I/O 绑定和高层次结构化网络代码。</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><p>以下是一个使用 <code>asyncio</code> 的示例代码，它展示了如何动态添加和管理异步任务。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time

stop_event <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token keyword">not</span> stop_event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">append_task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> task

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">listen_for_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    reader <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>StreamReader<span class="token punctuation">(</span><span class="token punctuation">)</span>
    protocol <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>StreamReaderProtocol<span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>connect_read_pipe<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> protocol<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token keyword">not</span> stop_event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        input_line <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        input_line <span class="token operator">=</span> input_line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> input_line<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">:</span>
            stop_event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            task <span class="token operator">=</span> <span class="token keyword">await</span> append_task<span class="token punctuation">(</span>input_line<span class="token punctuation">)</span>
            task_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">global</span> task_list
    task_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    input_task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>listen_for_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 使用事件循环持续运行，支持动态添加任务</span>
    <span class="token comment"># while not stop_event.is_set():</span>
    <span class="token comment">#    await asyncio.sleep(0.1)</span>
    <span class="token keyword">await</span> stop_event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> input_task
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>task_list<span class="token punctuation">)</span>

    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Total run time: </span><span class="token interpolation"><span class="token punctuation">{</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">}</span></span><span class="token string"> seconds&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行结果</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>kkk@BugAutomaton:/tmp$ python test_async.py
a
a : 0
a : 1
b
b : 0
a : 2
b : 1
a : 3
b : 2
a : 4
c
c : 0
b : 3
a : 5
c : 1
b : 4
a : 6
c : 2
b : 5
a : 7
dc : 3

d : 0
b : 6
a : 8
c : 4
d : 1
b : 7
a : 9
c : 5
d : 2
e
e : 0
b : 8
a : 10
c : 6
d : 3
e : 1
b : 9
a : 11
c : 7
d : 4
e : 2
b : 10
a : 12
steopc : 8

steop : 0
d : 5
e : 3
b : 11
a : 13
c : 9
steop : 1
d : 6
e : 4
b : 12
a : 14
sc : 10
steop : 2
d : 7
te : 5
b : 13
oa : 15
p
Total run time: 16.707311153411865 seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="windows-注意" tabindex="-1"><a class="header-anchor" href="#windows-注意"><span>windows 注意</span></a></h3><p>输入读取需要改为</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">listen_for_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token keyword">not</span> stop_event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 使用run_in_executor异步读取输入行，避免阻塞事件循环</span>
        input_line <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">)</span>
        input_line <span class="token operator">=</span> input_line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> input_line<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">:</span>
            stop_event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            task <span class="token operator">=</span> <span class="token keyword">await</span> append_task<span class="token punctuation">(</span>input_line<span class="token punctuation">)</span>
            task_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释"><span>代码解释</span></a></h2><ol><li><code>func(name)</code>：这是一个异步函数，它会每秒打印一次传入的 <code>name</code> 和一个递增的计数器 <code>i</code>，直到 <code>stop_event</code> 被设置。</li><li><code>append_task(name)</code>：这是一个辅助函数，用于创建并返回一个新的任务，该任务运行 <code>func(name)</code>。</li><li><code>listen_for_input()</code>：这是一个异步函数，它会监听标准输入。当用户输入 &quot;stop&quot; 时，它会设置 <code>stop_event</code>，否则它会创建一个新的任务并将其添加到 <code>task_list</code> 中。</li><li><code>main()</code>：这是主函数，它初始化任务列表并启动 <code>listen_for_input</code> 任务。它会持续运行事件循环，直到 <code>stop_event</code> 被设置，然后等待所有任务完成并打印总运行时间。</li></ol><p>通过这个示例，我们可以看到 <code>asyncio</code> 如何帮助我们轻松地管理并发任务，并且可以动态地添加新的任务。</p>`,13),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","asyncio.html.vue"]]),k=JSON.parse('{"path":"/tech/asyncio.html","title":"Python asyncio","lang":"zh-CN","frontmatter":{"description":"Python asyncio asyncio 是 Python 用于编写并发代码的库。它使用 async/await 语法，使得编写异步程序变得更加直观和简单。asyncio 主要用于 I/O 绑定和高层次结构化网络代码。 示例代码 以下是一个使用 asyncio 的示例代码，它展示了如何动态添加和管理异步任务。 运行结果 windows 注意 输入读...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/asyncio.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Python asyncio"}],["meta",{"property":"og:description","content":"Python asyncio asyncio 是 Python 用于编写并发代码的库。它使用 async/await 语法，使得编写异步程序变得更加直观和简单。asyncio 主要用于 I/O 绑定和高层次结构化网络代码。 示例代码 以下是一个使用 asyncio 的示例代码，它展示了如何动态添加和管理异步任务。 运行结果 windows 注意 输入读..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python asyncio\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[{"level":3,"title":"windows 注意","slug":"windows-注意","link":"#windows-注意","children":[]}]},{"level":2,"title":"代码解释","slug":"代码解释","link":"#代码解释","children":[]}],"readingTime":{"minutes":2.1,"words":631},"filePathRelative":"tech/asyncio.md","excerpt":"\\n<p><code>asyncio</code> 是 Python 用于编写并发代码的库。它使用 <code>async</code>/<code>await</code> 语法，使得编写异步程序变得更加直观和简单。<code>asyncio</code> 主要用于 I/O 绑定和高层次结构化网络代码。</p>\\n<h2>示例代码</h2>\\n<p>以下是一个使用 <code>asyncio</code> 的示例代码，它展示了如何动态添加和管理异步任务。</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> asyncio\\n<span class=\\"token keyword\\">import</span> sys\\n<span class=\\"token keyword\\">import</span> time\\n\\nstop_event <span class=\\"token operator\\">=</span> asyncio<span class=\\"token punctuation\\">.</span>Event<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token keyword\\">not</span> stop_event<span class=\\"token punctuation\\">.</span>is_set<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>name<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> : </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>i<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span>\\n        i <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">await</span> asyncio<span class=\\"token punctuation\\">.</span>sleep<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">append_task</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    task <span class=\\"token operator\\">=</span> asyncio<span class=\\"token punctuation\\">.</span>create_task<span class=\\"token punctuation\\">(</span>func<span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> task\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">listen_for_input</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    reader <span class=\\"token operator\\">=</span> asyncio<span class=\\"token punctuation\\">.</span>StreamReader<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    protocol <span class=\\"token operator\\">=</span> asyncio<span class=\\"token punctuation\\">.</span>StreamReaderProtocol<span class=\\"token punctuation\\">(</span>reader<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">await</span> asyncio<span class=\\"token punctuation\\">.</span>get_running_loop<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>connect_read_pipe<span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span><span class=\\"token punctuation\\">:</span> protocol<span class=\\"token punctuation\\">,</span> sys<span class=\\"token punctuation\\">.</span>stdin<span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token keyword\\">not</span> stop_event<span class=\\"token punctuation\\">.</span>is_set<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        input_line <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> reader<span class=\\"token punctuation\\">.</span>readline<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        input_line <span class=\\"token operator\\">=</span> input_line<span class=\\"token punctuation\\">.</span>decode<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>strip<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> input_line<span class=\\"token punctuation\\">.</span>lower<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"stop\\"</span><span class=\\"token punctuation\\">:</span>\\n            stop_event<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n            task <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> append_task<span class=\\"token punctuation\\">(</span>input_line<span class=\\"token punctuation\\">)</span>\\n            task_list<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span>task<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    start_time <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">global</span> task_list\\n    task_list <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    input_task <span class=\\"token operator\\">=</span> asyncio<span class=\\"token punctuation\\">.</span>create_task<span class=\\"token punctuation\\">(</span>listen_for_input<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token comment\\"># 使用事件循环持续运行，支持动态添加任务</span>\\n    <span class=\\"token comment\\"># while not stop_event.is_set():</span>\\n    <span class=\\"token comment\\">#    await asyncio.sleep(0.1)</span>\\n    <span class=\\"token keyword\\">await</span> stop_event<span class=\\"token punctuation\\">.</span>wait<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">await</span> input_task\\n    <span class=\\"token keyword\\">await</span> asyncio<span class=\\"token punctuation\\">.</span>gather<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>task_list<span class=\\"token punctuation\\">)</span>\\n\\n    end_time <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"Total run time: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>end_time <span class=\\"token operator\\">-</span> start_time<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> seconds\\"</span></span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">if</span> __name__ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"__main__\\"</span><span class=\\"token punctuation\\">:</span>\\n    asyncio<span class=\\"token punctuation\\">.</span>run<span class=\\"token punctuation\\">(</span>main<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
