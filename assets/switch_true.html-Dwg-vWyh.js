import{_ as a,r as t,o as e,c,b as n,e as i,d as p,f as l}from"./app-DkfD2H4x.js";const o={},r=l(`<h1 id="switch-true-编程模式" tabindex="-1"><a class="header-anchor" href="#switch-true-编程模式"><span>switch-true 编程模式</span></a></h1><p>switch-true 是一种利用 switch 语句和 true 常量实现多条件分支判断的编程技巧，常见于 JavaScript、Go 等语言。</p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>switch-true 模式指的是 switch 语句的表达式为 true，各 case 为布尔表达式，从而实现类似 if-else if-else 的链式分支。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>switch (true) 语句会依次判断每个 case 的条件表达式，遇到第一个为 true 的分支即执行。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ul><li>替代多层 if-else，提高代码可读性</li><li>处理复杂的条件分支</li><li>某些语言（如 Go）可用 switch 实现更优雅的分支</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大于10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大于5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5及以下&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="go" tabindex="-1"><a class="header-anchor" href="#go"><span>Go</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">switch</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;大于10&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">case</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;大于5&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;5及以下&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,14),u={href:"https://yangss3.github.io/yangss/articles/switch-true-pattern.html",target:"_blank",rel:"noopener noreferrer"};function d(h,k){const s=t("ExternalLinkIcon");return e(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[i("switch-true pattern 详解"),p(s)])])])])}const m=a(o,[["render",d],["__file","switch_true.html.vue"]]),g=JSON.parse('{"path":"/tech/switch_true.html","title":"switch-true 编程模式","lang":"zh-CN","frontmatter":{"title":"switch-true 编程模式","category":"编程范式","description":"switch-true 编程模式 switch-true 是一种利用 switch 语句和 true 常量实现多条件分支判断的编程技巧，常见于 JavaScript、Go 等语言。 定义 switch-true 模式指的是 switch 语句的表达式为 true，各 case 为布尔表达式，从而实现类似 if-else if-else 的链式分支。 原...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/switch_true.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"switch-true 编程模式"}],["meta",{"property":"og:description","content":"switch-true 编程模式 switch-true 是一种利用 switch 语句和 true 常量实现多条件分支判断的编程技巧，常见于 JavaScript、Go 等语言。 定义 switch-true 模式指的是 switch 语句的表达式为 true，各 case 为布尔表达式，从而实现类似 if-else if-else 的链式分支。 原..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"switch-true 编程模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"JavaScript","slug":"javascript","link":"#javascript","children":[]},{"level":3,"title":"Go","slug":"go","link":"#go","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"readingTime":{"minutes":0.78,"words":235},"filePathRelative":"tech/switch_true.md","excerpt":"\\n<p>switch-true 是一种利用 switch 语句和 true 常量实现多条件分支判断的编程技巧，常见于 JavaScript、Go 等语言。</p>\\n<h2>定义</h2>\\n<p>switch-true 模式指的是 switch 语句的表达式为 true，各 case 为布尔表达式，从而实现类似 if-else if-else 的链式分支。</p>\\n<h2>原理</h2>\\n<p>switch (true) 语句会依次判断每个 case 的条件表达式，遇到第一个为 true 的分支即执行。</p>\\n<h2>应用场景</h2>\\n<ul>\\n<li>替代多层 if-else，提高代码可读性</li>\\n<li>处理复杂的条件分支</li>\\n<li>某些语言（如 Go）可用 switch 实现更优雅的分支</li>\\n</ul>","autoDesc":true}');export{m as comp,g as data};
