import{_ as n,o as s,c as a,f as t}from"./app-ByUhljzD.js";const p={},e=t(`<h2 id="为什么使用-memento-模式" tabindex="-1"><a class="header-anchor" href="#为什么使用-memento-模式"><span>为什么使用 Memento 模式</span></a></h2><p>Memento 模式的主要目的是在不破坏封装性的前提下，捕获和恢复对象的内部状态。它在以下情况下特别有用：</p><ul><li>需要保存和恢复对象的多个状态。</li><li>需要在对象状态变化时进行撤销操作。</li><li>需要在不暴露对象实现细节的情况下保存对象状态。</li></ul><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><p>在这个示例中，我们使用了 Memento 模式来管理 <code>Gamer</code> 对象的状态。Memento 模式允许我们在不暴露对象实现细节的情况下保存和恢复对象的状态。以下是示例代码：</p><img src="https://www.plantuml.com/plantuml/svg/bP0z3i8m38Ntdi8ZAEe5650dc3en8eQqCLMb9f5i5maXxav-sXA9YId9i_FyFJSiccIsKzLFcXdEsYB1gmAemNg7pmEusNP8IRdJF0eVW8L6DrnlGLGmeBInSxSlUXLqA55v-D6aTq-e1LkqwCJ7od9DHK8MJrlLvdFhANt4NzBqQ94v4bgWE4MwGdvNIwZ59SLIFx7KNx6qCNbE-hJ-AG5N4lwY1Ci0atTRrySjUeFEXDr_0000" alt=""><img src="https://www.plantuml.com/plantuml/svg/VP1D2W8n38NtFKMMTU45kf01GLTpY3fzoi0qXJH5lBrrgbBmPvD7tal8HuQiNhJ4nVX9az1-cS5gcj1sHqSV8OvEKBinQzEvay0hHiGwdFhyQJbYNEbVxaCuI9dLdX-rcsW4ZWHQX5yBvfDCa2lu6o8s_NRh0XqJusP_X2j8hka03lKbTm00" alt=""><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// gamer.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Memento <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./memento&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Gamer</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> fruits<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> fruitsName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grape&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">bet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dice <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dice <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Money increased&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dice <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Money halved&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dice <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Got fruit: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>f<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nothing happened&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Memento <span class="token punctuation">{</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fruits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;delicious&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m<span class="token punctuation">.</span><span class="token function">addFruit</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> m<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">restoreMemento</span><span class="token punctuation">(</span>memento<span class="token operator">:</span> Memento<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> memento<span class="token punctuation">.</span>money<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fruits <span class="token operator">=</span> memento<span class="token punctuation">.</span>fruits<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[money = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, fruits = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prefix <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;delicious &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prefix <span class="token operator">+</span> Gamer<span class="token punctuation">.</span>fruitsName<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Gamer<span class="token punctuation">.</span>fruitsName<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Gamer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./gamer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> gamer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gamer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> memento <span class="token operator">=</span> gamer<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">==== </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Current: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>gamer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  gamer<span class="token punctuation">.</span><span class="token function">bet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Money now: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>gamer<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>gamer<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> memento<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Money increased, saving current state&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    memento <span class="token operator">=</span> gamer<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>gamer<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> memento<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Money halved, restoring to previous state&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gamer<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// memento.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>
  money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  fruits<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">addFruit</span><span class="token punctuation">(</span>fruit<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">getFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>fruits<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token operator">...</span><span class="token punctuation">(</span>省略<span class="token punctuation">)</span>
<span class="token operator">===</span><span class="token operator">=</span> <span class="token number">97</span>
Current<span class="token operator">:</span> <span class="token punctuation">[</span>money <span class="token operator">=</span> <span class="token number">462.5</span><span class="token punctuation">,</span> fruits <span class="token operator">=</span> delicious grape<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious orange<span class="token punctuation">,</span> delicious banana<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious grape<span class="token punctuation">,</span> delicious grape<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> grape<span class="token punctuation">,</span> delicious banana<span class="token punctuation">]</span>
Money halved
Money now<span class="token operator">:</span> <span class="token number">231.25</span>
Money halved<span class="token punctuation">,</span> restoring to previous state

<span class="token operator">===</span><span class="token operator">=</span> <span class="token number">98</span>
Current<span class="token operator">:</span> <span class="token punctuation">[</span>money <span class="token operator">=</span> <span class="token number">925</span><span class="token punctuation">,</span> fruits <span class="token operator">=</span> delicious grape<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious orange<span class="token punctuation">,</span> delicious banana<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious grape<span class="token punctuation">,</span> delicious grape<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> grape<span class="token punctuation">,</span> delicious banana<span class="token punctuation">]</span>
Nothing happened
Money now<span class="token operator">:</span> <span class="token number">925</span>

<span class="token operator">===</span><span class="token operator">=</span> <span class="token number">99</span>
Current<span class="token operator">:</span> <span class="token punctuation">[</span>money <span class="token operator">=</span> <span class="token number">925</span><span class="token punctuation">,</span> fruits <span class="token operator">=</span> delicious grape<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious orange<span class="token punctuation">,</span> delicious banana<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious apple<span class="token punctuation">,</span> delicious grape<span class="token punctuation">,</span> delicious grape<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> grape<span class="token punctuation">,</span> delicious banana<span class="token punctuation">]</span>
Nothing happened
Money now<span class="token operator">:</span> <span class="token number">925</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展思路的要点" tabindex="-1"><a class="header-anchor" href="#拓展思路的要点"><span>拓展思路的要点</span></a></h2><h3 id="两种接口和可见性" tabindex="-1"><a class="header-anchor" href="#两种接口和可见性"><span>两种接口和可见性</span></a></h3><p>在 Memento 模式中，通常会有两种接口：宽接口（wide interface）和窄接口（narrow interface）。宽接口提供了对 Memento 对象的所有操作权限，而窄接口则只提供了有限的操作权限。Originator 类使用宽接口来创建和恢复 Memento，而 Caretaker 类则使用窄接口来保存和传递 Memento。通过这种方式，可以确保 Memento 的内部状态不会被外部直接修改，从而保持封装性。</p><h3 id="需要多少个-memento" tabindex="-1"><a class="header-anchor" href="#需要多少个-memento"><span>需要多少个 Memento</span></a></h3><p>在实际应用中，需要根据具体需求来决定需要保存多少个 Memento。对于一些简单的应用，可能只需要保存一个 Memento 来支持一次撤销操作。而对于一些复杂的应用，可能需要保存多个 Memento 以支持多次撤销操作。需要注意的是，保存过多的 Memento 会占用大量的内存资源，因此需要在性能和功能之间找到一个平衡点。</p><h3 id="memento-的有效期限是多久" tabindex="-1"><a class="header-anchor" href="#memento-的有效期限是多久"><span>Memento 的有效期限是多久</span></a></h3><p>Memento 的有效期限取决于具体的应用场景。在某些情况下，Memento 可能只需要在短时间内有效，例如在用户进行撤销操作之前。而在其他情况下，Memento 可能需要长期保存，例如在应用程序关闭后重新打开时恢复状态。需要根据具体需求来决定 Memento 的有效期限，并在适当的时候清理过期的 Memento 以释放资源。</p><h3 id="划分-caretaker-和-originator-角色的意义" tabindex="-1"><a class="header-anchor" href="#划分-caretaker-和-originator-角色的意义"><span>划分 Caretaker 和 Originator 角色的意义</span></a></h3><p>在 Memento 模式中，Caretaker 和 Originator 角色的划分具有重要意义。Caretaker 负责保存和管理 Memento，而 Originator 负责创建和恢复 Memento。通过这种划分，可以将状态保存和恢复的逻辑与业务逻辑分离，从而提高系统的可维护性和可扩展性。</p><ul><li><p>变更为可以多次撤销 通过保存多个 Memento，可以实现多次撤销操作。Caretaker 可以维护一个 Memento 的栈，每次撤销操作时从栈中弹出一个 Memento 并恢复状态。这样可以支持用户进行多次撤销和重做操作。</p></li><li><p>变更为不仅可以撤销，还可以将现在的状态保存在文件中 通过将 Memento 保存到文件中，可以实现持久化存储。这样即使应用程序关闭后重新打开，也可以恢复到之前的状态。Caretaker 可以负责将 Memento 序列化并保存到文件中，以及从文件中读取并反序列化 Memento。</p></li></ul><h2 id="相关的设计模式" tabindex="-1"><a class="header-anchor" href="#相关的设计模式"><span>相关的设计模式</span></a></h2><ul><li>Command 模式</li><li>Prototype 模式</li><li>State 模式</li></ul>`,22),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","memento.html.vue"]]),k=JSON.parse('{"path":"/tech/DesignPatterns/memento.html","title":"Memento 模式","lang":"zh-CN","frontmatter":{"title":"Memento 模式","date":"2024-10-28T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","TypeScript","管理状态"],"prev":"./observer","next":"./state","description":"为什么使用 Memento 模式 Memento 模式的主要目的是在不破坏封装性的前提下，捕获和恢复对象的内部状态。它在以下情况下特别有用： 需要保存和恢复对象的多个状态。 需要在对象状态变化时进行撤销操作。 需要在不暴露对象实现细节的情况下保存对象状态。 示例代码 在这个示例中，我们使用了 Memento 模式来管理 Gamer 对象的状态。Meme...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/DesignPatterns/memento.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Memento 模式"}],["meta",{"property":"og:description","content":"为什么使用 Memento 模式 Memento 模式的主要目的是在不破坏封装性的前提下，捕获和恢复对象的内部状态。它在以下情况下特别有用： 需要保存和恢复对象的多个状态。 需要在对象状态变化时进行撤销操作。 需要在不暴露对象实现细节的情况下保存对象状态。 示例代码 在这个示例中，我们使用了 Memento 模式来管理 Gamer 对象的状态。Meme..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"管理状态"}],["meta",{"property":"article:published_time","content":"2024-10-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Memento 模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用 Memento 模式","slug":"为什么使用-memento-模式","link":"#为什么使用-memento-模式","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]},{"level":2,"title":"拓展思路的要点","slug":"拓展思路的要点","link":"#拓展思路的要点","children":[{"level":3,"title":"两种接口和可见性","slug":"两种接口和可见性","link":"#两种接口和可见性","children":[]},{"level":3,"title":"需要多少个 Memento","slug":"需要多少个-memento","link":"#需要多少个-memento","children":[]},{"level":3,"title":"Memento 的有效期限是多久","slug":"memento-的有效期限是多久","link":"#memento-的有效期限是多久","children":[]},{"level":3,"title":"划分 Caretaker 和 Originator 角色的意义","slug":"划分-caretaker-和-originator-角色的意义","link":"#划分-caretaker-和-originator-角色的意义","children":[]}]},{"level":2,"title":"相关的设计模式","slug":"相关的设计模式","link":"#相关的设计模式","children":[]}],"readingTime":{"minutes":4.19,"words":1257},"filePathRelative":"tech/DesignPatterns/memento.md","localizedDate":"2024年10月28日","excerpt":"<h2>为什么使用 Memento 模式</h2>\\n<p>Memento 模式的主要目的是在不破坏封装性的前提下，捕获和恢复对象的内部状态。它在以下情况下特别有用：</p>\\n<ul>\\n<li>需要保存和恢复对象的多个状态。</li>\\n<li>需要在对象状态变化时进行撤销操作。</li>\\n<li>需要在不暴露对象实现细节的情况下保存对象状态。</li>\\n</ul>\\n<h2>示例代码</h2>\\n<p>在这个示例中，我们使用了 Memento 模式来管理 <code>Gamer</code> 对象的状态。Memento 模式允许我们在不暴露对象实现细节的情况下保存和恢复对象的状态。以下是示例代码：</p>","autoDesc":true}');export{r as comp,k as data};
