import{_ as i,r as p,o,c,b as e,d as s,w as l,e as a,f as r}from"./app-ChJpPrUG.js";const b={},h={class:"table-of-contents"},d=e("h1",{id:"转载声明",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#转载声明"},[e("span",null,"转载声明")])],-1),m={href:"https://lotabout.me/2016/write-a-C-interpreter-7/",target:"_blank",rel:"noopener noreferrer"},u=r('<h1 id="原文内容" tabindex="-1"><a class="header-anchor" href="#原文内容"><span>原文内容</span></a></h1><h1 id="手把手教你构建-c-语言编译器-7-语句" tabindex="-1"><a class="header-anchor" href="#手把手教你构建-c-语言编译器-7-语句"><span>手把手教你构建 C 语言编译器（7）- 语句</span></a></h1><p>Table of Contents</p><ol><li><a href="about:blank#%E8%AF%AD%E5%8F%A5">1. 语句</a><ol><li><a href="about:blank#if-%E8%AF%AD%E5%8F%A5">1.1. IF 语句</a></li><li><a href="about:blank#while-%E8%AF%AD%E5%8F%A5">1.2. While 语句</a></li><li><a href="about:blank#return-%E8%AF%AD%E5%8F%A5">1.3. Return 语句</a></li><li><a href="about:blank#%E5%85%B6%E5%AE%83%E8%AF%AD%E5%8F%A5">1.4. 其它语句</a></li></ol></li><li><a href="about:blank#%E4%BB%A3%E7%A0%81">2. 代码</a></li><li><a href="about:blank#%E5%B0%8F%E7%BB%93">3. 小结</a></li></ol><p>整个编译器还剩下最后两个部分：语句和表达式的解析。它们的内容比较多，主要涉及如何将语句和表达式编译成汇编代码。这章讲解语句的解析，相对于表达式来说它还是较为容易的。</p><p>手把手教你构建 C 语言编译器系列共有10个部分：</p>',6),f={href:"http://lotabout.me/2015/write-a-C-interpreter-0/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://lotabout.me/2015/write-a-C-interpreter-1/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://lotabout.me/2015/write-a-C-interpreter-2/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://lotabout.me/2015/write-a-C-interpreter-3/",target:"_blank",rel:"noopener noreferrer"},A={href:"http://lotabout.me/2016/write-a-C-interpreter-4/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://lotabout.me/2016/write-a-C-interpreter-5/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://lotabout.me/2016/write-a-C-interpreter-6/",target:"_blank",rel:"noopener noreferrer"},y={href:"http://lotabout.me/2016/write-a-C-interpreter-7/",target:"_blank",rel:"noopener noreferrer"},w={href:"http://lotabout.me/2016/write-a-C-interpreter-8/",target:"_blank",rel:"noopener noreferrer"},x={href:"http://lotabout.me/2016/write-a-C-interpreter-9/",target:"_blank",rel:"noopener noreferrer"},F=r('<h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句"><span><a href="about:blank#%E8%AF%AD%E5%8F%A5"></a>语句</span></a></h2><p>C 语言区分“语句”（statement）和“表达式”（expression）两个概念。简单地说，可以认为语句就是表达式加上末尾的分号。</p><p>在我们的编译器中共识别 6 种语句：</p><ol><li><code>if (...) &lt;statement&gt; [else &lt;statement&gt;]</code></li><li><code>while (...) &lt;statement&gt;</code></li><li><code>{ &lt;statement&gt; }</code></li><li><code>return xxx;</code></li><li><code>&lt;empty statement&gt;</code>;</li><li><code>expression;</code> (expression end with semicolon)</li></ol><p>它们的语法分析都相对容易，重要的是去理解如何将这些语句编译成汇编代码，下面我们逐一解释。</p><h3 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span><a href="about:blank#if-%E8%AF%AD%E5%8F%A5"></a>IF 语句</span></a></h3><p>IF 语句的作用是跳转，跟据条件表达式决定跳转的位置。我们看看下面的伪代码：</p><table><tbody><tr><td class="code"><pre><span class="line">if (...) &lt;statement&gt; [else &lt;statement&gt;]</span><br><span class="line"></span><br><span class="line">  if (&lt;cond&gt;)                   &lt;cond&gt;</span><br><span class="line">                                JZ a</span><br><span class="line">    &lt;true_statement&gt;   ===&gt;     &lt;true_statement&gt;</span><br><span class="line">  else:                         JMP b</span><br><span class="line">a:                           a:</span><br><span class="line">    &lt;false_statement&gt;           &lt;false_statement&gt;</span><br><span class="line">b:                           b:</span><br></pre></td></tr></tbody></table><p>对应的汇编代码流程为：</p><ol><li>执行条件表达式 <code>&lt;cond&gt;</code>。</li><li>如果条件失败，则跳转到 <code>a</code> 的位置，执行 <code>else</code> 语句。这里 <code>else</code> 语句是可以省略的，此时 <code>a</code> 和 <code>b</code> 都指向 IF 语句后方的代码。</li><li>因为汇编代码是顺序排列的，所以如果执行了 <code>true_statement</code>，为了防止因为顺序排列而执行了 <code>false_statement</code>，所以需要无条件跳转 <code>JMP b</code>。</li></ol><p>对应的 C 代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (token == If) {</span><br><span class="line">    match(If);</span><br><span class="line">    match(<span class="string">&#39;(&#39;</span>);</span><br><span class="line">    expression(Assign);  <span class="comment">// parse condition</span></span><br><span class="line">    match(<span class="string">&#39;)&#39;</span>);</span><br><span class="line"></span><br><span class="line">    *++text = JZ;</span><br><span class="line">    b = ++text;</span><br><span class="line"></span><br><span class="line">    statement();         <span class="comment">// parse statement</span></span><br><span class="line">    <span class="keyword">if</span> (token == Else) { <span class="comment">// parse else</span></span><br><span class="line">        match(Else);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// emit code for JMP B</span></span><br><span class="line">        *b = (<span class="type">int</span>)(text + <span class="number">3</span>);</span><br><span class="line">        *++text = JMP;</span><br><span class="line">        b = ++text;</span><br><span class="line"></span><br><span class="line">        statement();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    *b = (<span class="type">int</span>)(text + <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><h3 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句"><span><a href="about:blank#while-%E8%AF%AD%E5%8F%A5"></a>While 语句</span></a></h3><p>While 语句比 If 语句简单，它对应的汇编代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line">a:                     a:</span><br><span class="line">   while (&lt;cond&gt;)        &lt;cond&gt;</span><br><span class="line">                         JZ b</span><br><span class="line">    &lt;statement&gt;          &lt;statement&gt;</span><br><span class="line">                         JMP a</span><br><span class="line">b:                     b:</span><br></pre></td></tr></tbody></table><p>没有什么值得说明的内容，它的 C 代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (token == While) {</span><br><span class="line">    match(While);</span><br><span class="line"></span><br><span class="line">    a = text + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    match(<span class="string">&#39;(&#39;</span>);</span><br><span class="line">    expression(Assign);</span><br><span class="line">    match(<span class="string">&#39;)&#39;</span>);</span><br><span class="line"></span><br><span class="line">    *++text = JZ;</span><br><span class="line">    b = ++text;</span><br><span class="line"></span><br><span class="line">    statement();</span><br><span class="line"></span><br><span class="line">    *++text = JMP;</span><br><span class="line">    *++text = (<span class="type">int</span>)a;</span><br><span class="line">    *b = (<span class="type">int</span>)(text + <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><h3 id="return-语句" tabindex="-1"><a class="header-anchor" href="#return-语句"><span><a href="about:blank#return-%E8%AF%AD%E5%8F%A5"></a>Return 语句</span></a></h3><p>Return 唯一特殊的地方是：一旦遇到了 Return 语句，则意味着函数要退出了，所以需要生成汇编代码 <code>LEV</code> 来表示退出。</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (token == Return) {</span><br><span class="line">    <span class="comment">// return [expression];</span></span><br><span class="line">    match(Return);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token != <span class="string">&#39;;&#39;</span>) {</span><br><span class="line">        expression(Assign);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    match(<span class="string">&#39;;&#39;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// emit code for return</span></span><br><span class="line">    *++text = LEV;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><h3 id="其它语句" tabindex="-1"><a class="header-anchor" href="#其它语句"><span><a href="about:blank#%E5%85%B6%E5%AE%83%E8%AF%AD%E5%8F%A5"></a>其它语句</span></a></h3><p>其它语句并不直接生成汇编代码，所以不多做说明，代码如下：</p><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&#39;{&#39;</span>) {</span><br><span class="line">    <span class="comment">// { &lt;statement&gt; ... }</span></span><br><span class="line">    match(<span class="string">&#39;{&#39;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (token != <span class="string">&#39;}&#39;</span>) {</span><br><span class="line">        statement();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    match(<span class="string">&#39;}&#39;</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&#39;;&#39;</span>) {</span><br><span class="line">    <span class="comment">// empty statement</span></span><br><span class="line">    match(<span class="string">&#39;;&#39;</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// a = b; or function_call();</span></span><br><span class="line">    expression(Assign);</span><br><span class="line">    match(<span class="string">&#39;;&#39;</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span><a href="about:blank#%E4%BB%A3%E7%A0%81"></a>代码</span></a></h2>',24),B={href:"https://github.com/lotabout/write-a-C-interpreter/tree/step-5",target:"_blank",rel:"noopener noreferrer"},D=r('<table><tbody><tr><td class="code"><pre><span class="line">git clone -b step-5 https://github.com/lotabout/write-a-C-interpreter</span><br></pre></td></tr></tbody></table><p>本章的代码依旧无法运行，还剩最后一部分没有完成：<code>expression</code>。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span><a href="about:blank#%E5%B0%8F%E7%BB%93"></a>小结</span></a></h2><p>本章讲解了如何将语句编译成汇编代码，内容相对容易一些，关键就是去理解汇编代码的执行原理。</p><p>同时值得一提的是，编译器的语法分析部分其实是很简单的，而真正的难点是如何在语法分析时收集足够多的信息，最终把源代码转换成目标代码（汇编）。我认为这也是初学者实现编译器的一大难点，往往比词法分析/语法分析更困难。</p><p>所以建议如果没有学过汇编，可以学习学习，它本身不难，但对理解计算机的原理有很大帮助。</p>',6);function I(J,v){const t=p("router-link"),n=p("ExternalLinkIcon");return o(),c("div",null,[e("nav",h,[e("ul",null,[e("li",null,[s(t,{to:"#语句"},{default:l(()=>[a("语句")]),_:1}),e("ul",null,[e("li",null,[s(t,{to:"#if-语句"},{default:l(()=>[a("IF 语句")]),_:1})]),e("li",null,[s(t,{to:"#while-语句"},{default:l(()=>[a("While 语句")]),_:1})]),e("li",null,[s(t,{to:"#return-语句"},{default:l(()=>[a("Return 语句")]),_:1})]),e("li",null,[s(t,{to:"#其它语句"},{default:l(()=>[a("其它语句")]),_:1})])])]),e("li",null,[s(t,{to:"#代码"},{default:l(()=>[a("代码")]),_:1})]),e("li",null,[s(t,{to:"#小结"},{default:l(()=>[a("小结")]),_:1})])])]),d,e("p",null,[a("本文转自 "),e("a",m,[a("https://lotabout.me/2016/write-a-C-interpreter-7/"),s(n)]),a("，如有侵权，请联系删除。")]),u,e("ol",null,[e("li",null,[e("a",f,[a("手把手教你构建 C 语言编译器（0）——前言"),s(n)])]),e("li",null,[e("a",g,[a("手把手教你构建 C 语言编译器（1）——设计"),s(n)])]),e("li",null,[e("a",_,[a("手把手教你构建 C 语言编译器（2）——虚拟机"),s(n)])]),e("li",null,[e("a",k,[a("手把手教你构建 C 语言编译器（3）——词法分析器"),s(n)])]),e("li",null,[e("a",A,[a("手把手教你构建 C 语言编译器（4）——递归下降"),s(n)])]),e("li",null,[e("a",E,[a("手把手教你构建 C 语言编译器（5）——变量定义"),s(n)])]),e("li",null,[e("a",C,[a("手把手教你构建 C 语言编译器（6）——函数定义"),s(n)])]),e("li",null,[e("a",y,[a("手把手教你构建 C 语言编译器（7）——语句"),s(n)])]),e("li",null,[e("a",w,[a("手把手教你构建 C 语言编译器（8）——表达式"),s(n)])]),e("li",null,[e("a",x,[a("手把手教你构建 C 语言编译器（9）——总结"),s(n)])])]),F,e("p",null,[a("本章的代码可以在 "),e("a",B,[a("Github"),s(n)]),a(" 上下载，也可以直接 clone")]),D])}const T=i(b,[["render",I],["__file","7.html.vue"]]),W=JSON.parse('{"path":"/tech/designASimpileCCompiler/7.html","title":"手把手教你构建 C 语言编译器（7）——语句","lang":"zh-CN","frontmatter":{"title":"手把手教你构建 C 语言编译器（7）——语句","category":["编译原理"],"tag":["c","编译器","解释器"],"description":"转载声明 本文转自 https://lotabout.me/2016/write-a-C-interpreter-7/，如有侵权，请联系删除。 原文内容 手把手教你构建 C 语言编译器（7）- 语句 Table of Contents 1. 语句 1.1. IF 语句 1.2. While 语句 1.3. Return 语句 1.4. 其它语句 2. ...","head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/designASimpileCCompiler/7.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"手把手教你构建 C 语言编译器（7）——语句"}],["meta",{"property":"og:description","content":"转载声明 本文转自 https://lotabout.me/2016/write-a-C-interpreter-7/，如有侵权，请联系删除。 原文内容 手把手教你构建 C 语言编译器（7）- 语句 Table of Contents 1. 语句 1.1. IF 语句 1.2. While 语句 1.3. Return 语句 1.4. 其它语句 2. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T08:03:01.000Z"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"编译器"}],["meta",{"property":"article:tag","content":"解释器"}],["meta",{"property":"article:modified_time","content":"2024-10-21T08:03:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手把手教你构建 C 语言编译器（7）——语句\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T08:03:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"语句","slug":"语句","link":"#语句","children":[{"level":3,"title":"IF 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":3,"title":"While 语句","slug":"while-语句","link":"#while-语句","children":[]},{"level":3,"title":"Return 语句","slug":"return-语句","link":"#return-语句","children":[]},{"level":3,"title":"其它语句","slug":"其它语句","link":"#其它语句","children":[]}]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1729497781000,"updatedTime":1729497781000,"contributors":[{"name":"King","email":"2175616761@qq.com","commits":1}]},"readingTime":{"minutes":6.99,"words":2098},"filePathRelative":"tech/designASimpileCCompiler/7.md","localizedDate":"2024年10月21日","excerpt":"\\n<h1>转载声明</h1>\\n<p>本文转自 <a href=\\"https://lotabout.me/2016/write-a-C-interpreter-7/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://lotabout.me/2016/write-a-C-interpreter-7/</a>，如有侵权，请联系删除。</p>\\n<h1>原文内容</h1>\\n<h1>手把手教你构建 C 语言编译器（7）- 语句</h1>\\n<p>Table of Contents</p>\\n<ol>\\n<li><a href=\\"about:blank#%E8%AF%AD%E5%8F%A5\\">1. 语句</a>\\n<ol>\\n<li><a href=\\"about:blank#if-%E8%AF%AD%E5%8F%A5\\">1.1. IF 语句</a></li>\\n<li><a href=\\"about:blank#while-%E8%AF%AD%E5%8F%A5\\">1.2. While 语句</a></li>\\n<li><a href=\\"about:blank#return-%E8%AF%AD%E5%8F%A5\\">1.3. Return 语句</a></li>\\n<li><a href=\\"about:blank#%E5%85%B6%E5%AE%83%E8%AF%AD%E5%8F%A5\\">1.4. 其它语句</a></li>\\n</ol>\\n</li>\\n<li><a href=\\"about:blank#%E4%BB%A3%E7%A0%81\\">2. 代码</a></li>\\n<li><a href=\\"about:blank#%E5%B0%8F%E7%BB%93\\">3. 小结</a></li>\\n</ol>","autoDesc":true}');export{T as comp,W as data};
