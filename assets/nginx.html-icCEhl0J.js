import{_ as r,r as l,o as s,c as o,b as e,e as n,d as i,f as a}from"./app-ByePDVBg.js";const h="/assets/1751196036199-D-TWrP19.png",c="/assets/1751196290167-COOR3enW.png",g="/assets/1751196500232-DX-ez5iy.png",d="/assets/1751196605005-BUHVwmta.png",p="/assets/1751196768132-CdUeNGIV.png",x="/assets/1751196980522-MMKpEPzM.png",u={},f=a('<h1 id="nginx-架构设计" tabindex="-1"><a class="header-anchor" href="#nginx-架构设计"><span>Nginx 架构设计</span></a></h1><p>Nginx 是什么？Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。它以高并发、高可靠、低内存消耗著称，被广泛应用于网站架构中。</p><h2 id="本地浏览器如何获取远端服务器上的-html-文件" tabindex="-1"><a class="header-anchor" href="#本地浏览器如何获取远端服务器上的-html-文件"><span>本地浏览器如何获取远端服务器上的 HTML 文件？</span></a></h2><p>当你在浏览器输入网址并回车时，浏览器会向远端服务器发起 HTTP 请求，服务器返回 HTML 文件，浏览器解析并渲染页面。Nginx 作为中间层，能够高效地处理这些请求。</p><blockquote><p>没有什么是加一层中间层解决不了的，如果有就再加一层。Nginx 就是这样一个强大的中间层。</p></blockquote><figure><img src="'+h+'" alt="Nginx 作为中间层" tabindex="0" loading="lazy"><figcaption>Nginx 作为中间层</figcaption></figure><h2 id="http-服务器是什么" tabindex="-1"><a class="header-anchor" href="#http-服务器是什么"><span>HTTP 服务器是什么？</span></a></h2><p>HTTP 服务器是一个能够通过 URL 提供资源访问能力的进程。它监听特定端口，等待客户端请求，并返回相应的资源（如 HTML、图片、视频等）。</p><figure><img src="'+c+'" alt="HTTP 服务器原理" tabindex="0" loading="lazy"><figcaption>HTTP 服务器原理</figcaption></figure><h2 id="反向代理是什么" tabindex="-1"><a class="header-anchor" href="#反向代理是什么"><span>反向代理是什么？</span></a></h2><p>反向代理服务器位于客户端和目标服务器之间，客户端只需与代理服务器通信，由代理服务器转发请求到后端服务器，并将结果返回给客户端。这样可以隐藏后端服务器，提高安全性和可扩展性。</p><figure><img src="'+g+'" alt="反向代理原理" tabindex="0" loading="lazy"><figcaption>反向代理原理</figcaption></figure><h2 id="模块化网关能力" tabindex="-1"><a class="header-anchor" href="#模块化网关能力"><span>模块化网关能力</span></a></h2><p>Nginx 采用模块化设计，支持多种功能扩展，如负载均衡、缓存、访问控制等。通过加载不同模块，Nginx 可以灵活应对各种业务需求。</p><figure><img src="'+d+'" alt="模块化网关" tabindex="0" loading="lazy"><figcaption>模块化网关</figcaption></figure><h2 id="配置能力" tabindex="-1"><a class="header-anchor" href="#配置能力"><span>配置能力</span></a></h2><p>Nginx 的配置文件（nginx.conf）极为灵活，支持多级嵌套、变量、条件判断等，便于实现复杂的流量调度和安全策略。</p><h2 id="单线程、多进程架构" tabindex="-1"><a class="header-anchor" href="#单线程、多进程架构"><span>单线程、多进程架构</span></a></h2><p>Nginx 采用单线程多进程模型。每个 worker 进程都是单线程，master 进程负责管理 worker。这样设计的原因：</p><ul><li>避免多线程带来的锁竞争，提高稳定性。</li><li>充分利用多核 CPU。</li><li>一个 worker 崩溃不会影响其他 worker，提高可靠性。</li></ul><figure><img src="'+p+'" alt="单线程多进程架构" tabindex="0" loading="lazy"><figcaption>单线程多进程架构</figcaption></figure><h3 id="多个进程监听同一个端口不会冲突的原因" tabindex="-1"><a class="header-anchor" href="#多个进程监听同一个端口不会冲突的原因"><span>多个进程监听同一个端口不会冲突的原因</span></a></h3><p>操作系统（如 Linux）支持 SO_REUSEPORT 机制，允许多个进程绑定同一端口，内核会将新连接分配给不同进程，实现负载均衡。</p><h2 id="内存共享" tabindex="-1"><a class="header-anchor" href="#内存共享"><span>内存共享</span></a></h2><p>Nginx 通过共享内存区实现 worker 进程间的数据共享，如缓存、会话等，提升性能和一致性。</p><h2 id="proxy-cache" tabindex="-1"><a class="header-anchor" href="#proxy-cache"><span>Proxy Cache</span></a></h2><p>Nginx 支持高效的代理缓存，能将后端响应缓存到本地，极大提升静态资源访问速度，减轻后端压力。</p><h2 id="master-进程与滚动升级" tabindex="-1"><a class="header-anchor" href="#master-进程与滚动升级"><span>Master 进程与滚动升级</span></a></h2><p>Master 进程负责管理 worker，支持平滑重载配置和滚动升级，无需中断服务即可更新。</p><h2 id="设计与架构图" tabindex="-1"><a class="header-anchor" href="#设计与架构图"><span>设计与架构图</span></a></h2><figure><img src="'+x+'" alt="Nginx 设计架构图" tabindex="0" loading="lazy"><figcaption>Nginx 设计架构图</figcaption></figure><h2 id="qa-常见问题" tabindex="-1"><a class="header-anchor" href="#qa-常见问题"><span>QA 常见问题</span></a></h2><ul><li><strong>nginx是什么？架构是怎么样的？</strong> Nginx 是高性能的 Web 服务器和反向代理服务器，采用单线程多进程架构，支持模块化扩展。</li><li><strong>http服务器是什么？</strong> 提供通过 URL 获取资源能力的进程。</li><li><strong>反向代理是什么？</strong> 代理客户端请求，隐藏后端服务器，提升安全性和可扩展性。</li><li><strong>worker是什么？</strong> 负责实际处理请求的进程。</li><li><strong>负载均衡是什么？</strong> 将请求分发到多台后端服务器，提升系统吞吐量和可用性。</li><li><strong>nginx.conf是什么？</strong> Nginx 的主配置文件。</li><li><strong>master是什么？</strong> 负责管理 worker 的主进程。</li><li><strong>共享内存是什么？</strong> 用于 worker 进程间数据共享的内存区域。</li><li><strong>proxy cache是什么？</strong> 代理缓存，提高资源访问速度。</li><li><strong>滚动升级是什么？网关是什么？</strong> 滚动升级指不中断服务的平滑升级，网关是流量入口和控制中心。</li><li><strong>单线程多进程架构是什么？</strong> 每个进程单线程，多个进程并发处理请求。</li><li><strong>怎么解决Nginx单点问题？</strong> 通过多实例部署+负载均衡，消除单点故障。</li></ul><h3 id="多个worker监听同一个端口-为什么不冲突" tabindex="-1"><a class="header-anchor" href="#多个worker监听同一个端口-为什么不冲突"><span>多个worker监听同一个端口，为什么不冲突?</span></a></h3>',34),m={href:"https://zhuanlan.zhihu.com/p/612436510",target:"_blank",rel:"noopener noreferrer"},T={href:"https://zhuanlan.zhihu.com/p/17856755436",target:"_blank",rel:"noopener noreferrer"},k=e("h3",{id:"nginx单点问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nginx单点问题"},[e("span",null,"Nginx单点问题")])],-1),N={href:"https://blog.csdn.net/liaofeifeifeifei/article/details/124923137",target:"_blank",rel:"noopener noreferrer"},_=a('<h2 id="正向代理与反向代理对比" tabindex="-1"><a class="header-anchor" href="#正向代理与反向代理对比"><span>正向代理与反向代理对比</span></a></h2><table><thead><tr><th>特性</th><th>正向代理</th><th>反向代理</th></tr></thead><tbody><tr><td>代理对象</td><td>客户端（用户）</td><td>服务器（服务端）</td></tr><tr><td>典型场景</td><td>科学上网、访问被屏蔽网站</td><td>网站负载均衡、隐藏后端服务器</td></tr><tr><td>客户端感知</td><td>需要配置代理，感知代理存在</td><td>客户端无感知，访问的就是代理地址</td></tr><tr><td>主要作用</td><td>代理客户端访问外部资源</td><td>代理外部访问内部服务器</td></tr><tr><td>安全性</td><td>隐藏客户端真实身份</td><td>隐藏服务器真实结构</td></tr><tr><td>例子</td><td>Shadowsocks、VPN</td><td>Nginx、Apache HTTPD</td></tr></tbody></table><p><strong>简要说明：</strong></p><ul><li>正向代理：客户端知道要访问哪个目标，但不能直接访问，需要通过代理服务器转发请求。</li><li>反向代理：客户端只知道代理服务器地址，代理服务器根据请求转发到后端真实服务器。</li></ul><hr><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2>',6),b={href:"https://b23.tv/5TP2kfG",target:"_blank",rel:"noopener noreferrer"};function P(y,H){const t=l("ExternalLinkIcon");return s(),o("div",null,[f,e("ul",null,[e("li",null,[e("a",m,[n("两个进程能监听同一个端口吗？ - 知乎"),i(t)])]),e("li",null,[e("a",T,[n("Linux epoll完全图解，彻底搞懂epoll机制 - 知乎"),i(t)])])]),k,e("ul",null,[e("li",null,[e("a",N,[n("Nginx单点问题分析 - CSDN"),i(t)])])]),_,e("ul",null,[e("li",null,[e("a",b,[n("Nginx是什么？Nginx高并发架构拆解指南-哔哩哔哩"),i(t)])])])])}const v=r(u,[["render",P],["__file","nginx.html.vue"]]),w=JSON.parse('{"path":"/tech/%E6%9E%B6%E6%9E%84%E5%B8%88/known-arch/nginx.html","title":"Nginx 架构设计与原理","lang":"zh-CN","frontmatter":{"title":"Nginx 架构设计与原理","category":"架构师","date":"2025-06-29T00:00:00.000Z","description":"Nginx 架构设计 Nginx 是什么？Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。它以高并发、高可靠、低内存消耗著称，被广泛应用于网站架构中。 本地浏览器如何获取远端服务器上的 HTML 文件？ 当你在浏览器输入网址并回车时，浏览器会向远端服务器发起 HTTP 请求，服务器返回 HTM...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/King-sj/tech/%E6%9E%B6%E6%9E%84%E5%B8%88/known-arch/nginx.html"}],["meta",{"property":"og:site_name","content":"blog"}],["meta",{"property":"og:title","content":"Nginx 架构设计与原理"}],["meta",{"property":"og:description","content":"Nginx 架构设计 Nginx 是什么？Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。它以高并发、高可靠、低内存消耗著称，被广泛应用于网站架构中。 本地浏览器如何获取远端服务器上的 HTML 文件？ 当你在浏览器输入网址并回车时，浏览器会向远端服务器发起 HTTP 请求，服务器返回 HTM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"KSJ"}],["meta",{"property":"article:published_time","content":"2025-06-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nginx 架构设计与原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"KSJ\\",\\"url\\":\\"https://github.com/King-sj\\"}]}"]]},"headers":[{"level":2,"title":"本地浏览器如何获取远端服务器上的 HTML 文件？","slug":"本地浏览器如何获取远端服务器上的-html-文件","link":"#本地浏览器如何获取远端服务器上的-html-文件","children":[]},{"level":2,"title":"HTTP 服务器是什么？","slug":"http-服务器是什么","link":"#http-服务器是什么","children":[]},{"level":2,"title":"反向代理是什么？","slug":"反向代理是什么","link":"#反向代理是什么","children":[]},{"level":2,"title":"模块化网关能力","slug":"模块化网关能力","link":"#模块化网关能力","children":[]},{"level":2,"title":"配置能力","slug":"配置能力","link":"#配置能力","children":[]},{"level":2,"title":"单线程、多进程架构","slug":"单线程、多进程架构","link":"#单线程、多进程架构","children":[{"level":3,"title":"多个进程监听同一个端口不会冲突的原因","slug":"多个进程监听同一个端口不会冲突的原因","link":"#多个进程监听同一个端口不会冲突的原因","children":[]}]},{"level":2,"title":"内存共享","slug":"内存共享","link":"#内存共享","children":[]},{"level":2,"title":"Proxy Cache","slug":"proxy-cache","link":"#proxy-cache","children":[]},{"level":2,"title":"Master 进程与滚动升级","slug":"master-进程与滚动升级","link":"#master-进程与滚动升级","children":[]},{"level":2,"title":"设计与架构图","slug":"设计与架构图","link":"#设计与架构图","children":[]},{"level":2,"title":"QA 常见问题","slug":"qa-常见问题","link":"#qa-常见问题","children":[{"level":3,"title":"多个worker监听同一个端口，为什么不冲突?","slug":"多个worker监听同一个端口-为什么不冲突","link":"#多个worker监听同一个端口-为什么不冲突","children":[]},{"level":3,"title":"Nginx单点问题","slug":"nginx单点问题","link":"#nginx单点问题","children":[]}]},{"level":2,"title":"正向代理与反向代理对比","slug":"正向代理与反向代理对比","link":"#正向代理与反向代理对比","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[]}],"readingTime":{"minutes":4.58,"words":1374},"filePathRelative":"tech/架构师/known-arch/nginx.md","localizedDate":"2025年6月29日","excerpt":"\\n<p>Nginx 是什么？Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。它以高并发、高可靠、低内存消耗著称，被广泛应用于网站架构中。</p>\\n<h2>本地浏览器如何获取远端服务器上的 HTML 文件？</h2>\\n<p>当你在浏览器输入网址并回车时，浏览器会向远端服务器发起 HTTP 请求，服务器返回 HTML 文件，浏览器解析并渲染页面。Nginx 作为中间层，能够高效地处理这些请求。</p>\\n<blockquote>\\n<p>没有什么是加一层中间层解决不了的，如果有就再加一层。Nginx 就是这样一个强大的中间层。</p>\\n</blockquote>","autoDesc":true}');export{v as comp,w as data};
